---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/math.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing numbers and math lib\"",
        ),
        line: 4,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 6,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 6,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 6,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        line: 6,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 7,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 7,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 7,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 7,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 9,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 9,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 9,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 9,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 9,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 12,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 12,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 13,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 13,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 16,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 17,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 18,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 18,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 19,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 19,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 19,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 20,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 20,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 20,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 21,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 23,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 25,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 26,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 33,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 34,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 34,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 35,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d-bit integers, %d-bit (mantissa) floats\"",
        ),
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 41,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"integer\"",
        ),
        line: 41,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 41,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float\"",
        ),
        line: 41,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 46,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 47,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 47,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 47,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 50,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number.* has no integer representation\"",
        ),
        line: 50,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 54,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 54,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 54,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 55,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 56,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-11",
            },
        ),
        line: 56,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-5",
            },
        ),
        line: 58,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 59,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 60,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 62,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 62,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 62,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 63,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 67,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 67,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 67,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
                exponent: "12",
            },
        ),
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".2",
                },
                exponent: "2",
            },
        ),
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
                exponent: "-1",
            },
        ),
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 73,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 74,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 3e0 \"",
        ),
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 10  \"",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 75,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 75,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 75,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 75,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 75,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 75,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 75,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 76,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 76,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 77,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 77,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 77,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 3e0 \"",
        ),
        line: 77,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 77,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 10  \"",
        ),
        line: 77,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 77,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  10 \"",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 78,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 78,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "08",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 81,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 83,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 84,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 85,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 86,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 87,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 88,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 90,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 91,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 91,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 92,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 92,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 92,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 93,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 93,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 94,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 94,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 94,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 95,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "23",
            },
        ),
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 96,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "23",
            },
        ),
        line: 96,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 96,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 97,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 97,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "35",
            },
        ),
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 98,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "35",
            },
        ),
        line: 98,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 98,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 99,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 101,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 101,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 101,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 103,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 105,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 105,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 107,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 107,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 111,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 112,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 112,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 112,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 116,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 116,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 117,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 119,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 125,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 125,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 125,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 125,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 126,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 126,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 126,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 126,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 126,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ti",
        ),
        line: 127,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 127,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 127,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 127,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 127,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tj",
        ),
        line: 128,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 128,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 128,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 128,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 128,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 129,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ti",
        ),
        line: 129,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 130,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 130,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tj",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 131,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 131,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 131,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 134,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 137,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 140,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 140,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 142,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 144,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 144,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 145,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 145,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 146,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 146,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 146,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 147,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 147,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 149,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 149,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 149,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 150,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 150,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 150,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 153,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 153,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 154,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 155,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 155,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 156,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 156,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 157,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 157,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 158,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 158,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 158,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 159,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 160,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 160,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 161,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 161,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 163,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 163,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 163,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 164,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 164,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 164,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 165,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 165,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 165,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 170,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 171,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 172,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 172,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 172,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 173,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 173,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 175,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 175,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 175,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 175,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 176,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 176,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 177,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 178,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 179,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 183,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 183,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 184,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 185,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 185,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 185,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 186,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 186,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 186,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 188,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 188,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 188,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 190,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 190,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 191,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 191,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 192,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 192,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 192,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 192,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 193,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 193,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 195,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 195,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 195,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 195,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 196,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 197,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 197,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 197,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 197,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 197,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 203,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 203,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 204,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 205,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 205,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 206,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 206,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 207,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 207,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 208,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 208,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 208,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 209,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 209,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 209,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 210,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 210,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 211,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 211,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 211,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 212,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 212,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 212,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 214,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 215,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 215,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 216,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 217,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 218,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 219,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 219,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 219,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 219,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 219,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 220,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 221,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 223,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 223,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing order (floats cannot represent all integers)\"",
        ),
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 225,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 225,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 225,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 226,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 226,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 227,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 227,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 228,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 229,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 229,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 230,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 230,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 231,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 231,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 231,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 232,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 232,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 232,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 232,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 234,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 234,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 234,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 234,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 234,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 234,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 235,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 235,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 235,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 235,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 237,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 237,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 238,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 238,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 239,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 240,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 240,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing order (floats can represent all integers)\"",
        ),
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 243,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 243,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 244,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 244,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 245,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 245,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 246,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 246,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 247,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 247,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 248,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 248,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 249,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 249,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 249,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 250,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 250,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 251,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 251,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 251,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 252,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 252,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 253,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 253,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 254,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 254,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 255,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 255,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 257,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 257,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 258,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 258,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 259,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 259,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 260,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 260,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 261,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 261,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 262,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 262,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 263,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 263,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 263,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 264,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 264,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 265,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 265,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 266,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 266,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 267,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 267,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 268,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 268,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 268,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 269,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 269,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 270,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 272,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 273,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 273,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 273,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 274,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 275,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 276,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 276,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 277,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 278,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 279,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 280,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 283,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 287,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 287,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"divide by zero\"",
        ),
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 290,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2 // 0\"",
        ),
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2.3 >> 0\"",
        ),
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 292,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2.0^%d & 1\"",
        ),
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 292,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 292,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'huge'\"",
        ),
        line: 293,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return math.huge << 1\"",
        ),
        line: 293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 294,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 1 | 2.0^%d\"",
        ),
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 294,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2.3 ~ 0.0\"",
        ),
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 299,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 299,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 299,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 300,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 300,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 300,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 301,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 304,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 304,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 306,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 306,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 306,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 307,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 307,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 307,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 307,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 308,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 309,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 309,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 309,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 310,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 310,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 310,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 310,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 311,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 311,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 311,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 313,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 313,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 314,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 314,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 315,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 315,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 315,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 316,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 319,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 319,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 319,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 320,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 320,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 320,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 321,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no integer rep\"",
        ),
        line: 322,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 322,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 322,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no integer rep\"",
        ),
        line: 323,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 323,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 323,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 327,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 332,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2 \"",
        ),
        line: 333,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" -2 \"",
        ),
        line: 334,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 334,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 334,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 334,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 334,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" -0xa \"",
        ),
        line: 335,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 335,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 345,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "incd",
        ),
        line: 345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 346,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 346,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 347,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 347,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 347,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d$\"",
        ),
        line: 347,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 348,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 348,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'9'",
        ),
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 349,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 349,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 351,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "incd",
        ),
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 355,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "incd",
        ),
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 356,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 359,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 359,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-1\"",
        ),
        line: 360,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 360,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x1\"",
        ),
        line: 363,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 363,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 366,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 366,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 367,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 370,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 370,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  \"",
        ),
        line: 385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  -0x \"",
        ),
        line: 387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 388,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 388,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0.01'",
        ),
        line: 389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+.01'",
        ),
        line: 389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 389,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.01'",
        ),
        line: 390,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 390,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-1.'",
        ),
        line: 390,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 391,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+1.'",
        ),
        line: 391,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+ 0.01'",
        ),
        line: 392,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 392,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+.e1'",
        ),
        line: 392,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 392,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 393,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1e'",
        ),
        line: 393,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 393,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 393,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1.0e+'",
        ),
        line: 393,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 393,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-012'",
        ),
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "010",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-1.2e2'",
        ),
        line: 396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 396,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 396,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 396,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xffffffffffff\"",
        ),
        line: 398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 399,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 399,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 399,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 399,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 399,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-0x\"",
        ),
        line: 400,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 400,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 400,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 400,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 400,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  001010  '",
        ),
        line: 403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 403,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  001010  '",
        ),
        line: 404,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "001010",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -1010  '",
        ),
        line: 405,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 405,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -10  '",
        ),
        line: 407,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 407,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  +1Z  '",
        ),
        line: 408,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -1z  '",
        ),
        line: 409,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 409,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 409,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 409,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 409,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 409,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-fFfa'",
        ),
        line: 410,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 411,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1'",
        ),
        line: 411,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 411,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 411,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ffffFFFF'",
        ),
        line: 412,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0ffffFFFF'",
        ),
        line: 413,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0ffffffFFFF'",
        ),
        line: 414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 414,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 415,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 415,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 416,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 416,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 416,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i10",
        ),
        line: 417,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 417,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 417,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 417,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 417,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\t10000000000\\t'",
        ),
        line: 418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i10",
        ),
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 419,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 421,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 421,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 423,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 423,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 423,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 423,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 424,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 424,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 424,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 425,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 425,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 425,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 425,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 426,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 426,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 426,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 426,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x3.'",
        ),
        line: 427,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x'",
        ),
        line: 428,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 428,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 429,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 429,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 429,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 429,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 430,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 430,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 430,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 430,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "151",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 431,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 431,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 431,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 431,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 431,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 431,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 431,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "301",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 432,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 432,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 432,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 432,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 432,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "501",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xe03'",
        ),
        line: 434,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 434,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 434,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 434,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p-4000'",
        ),
        line: 434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3587",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x.'",
        ),
        line: 435,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 435,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 435,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 435,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'74p4004'",
        ),
        line: 435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "7",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 436,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 440,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 441,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 441,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 441,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 441,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 443,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 444,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"***\"",
        ),
        line: 444,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 445,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'fFfa'",
        ),
        line: 448,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'099'",
        ),
        line: 449,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0'",
        ),
        line: 450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 453,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xf'",
        ),
        line: 454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'inf'",
        ),
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' INF '",
        ),
        line: 457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'Nan'",
        ),
        line: 458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nan'",
        ),
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1  a'",
        ),
        line: 463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1  a'",
        ),
        line: 464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0'",
        ),
        line: 465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1 \\0'",
        ),
        line: 466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0 '",
        ),
        line: 467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'e1'",
        ),
        line: 468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'e  1'",
        ),
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' 3.4.5 '",
        ),
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x'",
        ),
        line: 475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x3'",
        ),
        line: 477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x3.3.3'",
        ),
        line: 478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'00x2'",
        ),
        line: 479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x 2'",
        ),
        line: 480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0 x2'",
        ),
        line: 481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'23x'",
        ),
        line: 482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'- 0xaa'",
        ),
        line: 483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xaaP '",
        ),
        line: 484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.51p'",
        ),
        line: 485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x5p+-2'",
        ),
        line: 486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10",
            ),
        ),
        line: 491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfff",
            ),
        ),
        line: 491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0XFB",
            ),
        ),
        line: 491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "251",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "00",
                    after_decimal: "",
                },
                exponent: "12",
            },
        ),
        line: 492,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
                exponent: "-3",
            },
        ),
        line: 492,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 493,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0x2'",
        ),
        line: 494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xaA'",
        ),
        line: 495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 495,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "170",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xffFFFfff'",
        ),
        line: 496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 496,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
                exponent: "+1",
            },
        ),
        line: 499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xE",
            ),
        ),
        line: 499,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xe",
            ),
        ),
        line: 499,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  0x2.5  '",
        ),
        line: 504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x25",
            ),
        ),
        line: 504,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -0x2.5  '",
        ),
        line: 505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 505,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x25",
            ),
        ),
        line: 505,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  +0x0.51p+8  '",
        ),
        line: 506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 506,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x51",
            ),
        ),
        line: 506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 507,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "",
                    after_decimal: ".FfffFFFF",
                },
            ),
        ),
        line: 507,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 507,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 507,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 507,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x.00000001'",
        ),
        line: 507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 508,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xA.a'",
        ),
        line: 508,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 508,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 508,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 508,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 508,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0a",
                    after_decimal: ".a",
                },
                exponent: "4",
            },
        ),
        line: 509,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0XAA",
            ),
        ),
        line: 509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "04",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 510,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 511,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 511,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x1.'",
        ),
        line: 511,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 511,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0x.1'",
        ),
        line: 511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 512,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "abcdf",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 512,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 512,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".ABCDF",
                },
                exponent: "+24",
            },
        ),
        line: 512,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 515,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 515,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 516,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "2",
            },
        ),
        line: 516,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 516,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1111111111",
                    after_decimal: "",
                },
            ),
        ),
        line: 517,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1111111110",
                    after_decimal: "",
                },
            ),
        ),
        line: 517,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1000",
                    after_decimal: ".00",
                },
                exponent: "-03",
            },
        ),
        line: 517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 518,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 518,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1.'",
        ),
        line: 518,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.1'",
        ),
        line: 518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1111111111'",
        ),
        line: 519,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1111111110'",
        ),
        line: 519,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 520,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  +0.001e+3 \\n\\t\"",
        ),
        line: 520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
                exponent: "-30",
            },
        ),
        line: 522,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
                exponent: "-31",
            },
        ),
        line: 522,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
                exponent: "30",
            },
        ),
        line: 522,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
                exponent: "31",
            },
        ),
        line: 522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".123456",
                },
            ),
        ),
        line: 524,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".123455",
                },
            ),
        ),
        line: 524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 526,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+1.23E18'",
        ),
        line: 526,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".23",
                },
            ),
        ),
        line: 526,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 526,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "18",
                    after_decimal: "",
                },
            ),
        ),
        line: 526,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 529,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 530,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 530,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 530,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 530,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 531,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 532,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 532,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 532,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 532,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 533,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 534,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 534,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 534,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 534,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 535,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 536,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 536,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 536,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 536,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 537,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 537,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 537,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 541,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 541,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 541,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 541,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 542,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 543,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 543,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 543,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 544,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 544,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 544,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 544,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 545,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 545,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 545,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 546,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 546,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 547,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 547,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 548,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 548,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 549,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 549,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 549,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 549,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 549,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 550,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 550,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 550,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 551,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".25",
                },
            ),
        ),
        line: 552,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 552,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 552,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".25",
                },
            ),
        ),
        line: 552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 553,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 553,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 553,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 553,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 554,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 554,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 554,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 554,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 555,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 555,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 556,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 556,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 556,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 556,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 557,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 557,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 557,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 557,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 557,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".141",
                },
            ),
        ),
        line: 557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 557,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 559,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 560,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 560,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 560,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        line: 560,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 561,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 561,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 561,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 562,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 562,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 562,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 562,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 563,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 563,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 563,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 563,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 564,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 564,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 564,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 564,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 566,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 566,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 567,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 568,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 570,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 570,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 570,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 570,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 571,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 571,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 571,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 571,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "delta",
        ),
        line: 572,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 572,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 573,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 573,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 573,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "delta",
        ),
        line: 573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 574,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 574,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "delta",
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 575,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 575,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 575,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 575,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "delta",
        ),
        line: 575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 576,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 576,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 576,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "delta",
        ),
        line: 576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 577,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 581,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 581,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 581,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 582,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 582,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 582,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 583,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 583,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 584,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 584,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 584,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 585,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 586,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 587,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 589,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 589,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 590,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 590,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 590,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 590,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 591,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 592,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 592,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 592,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 593,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 594,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 595,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 597,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 598,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 598,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 599,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 600,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 601,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 601,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 601,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 604,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 604,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 605,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 605,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 605,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 605,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 606,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 606,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 607,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 607,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 607,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 608,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 611,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 612,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 612,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 613,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 613,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 613,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 614,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 614,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 614,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 614,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 615,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 615,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 615,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 617,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 617,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 617,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 617,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 618,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 618,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 618,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 619,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 619,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 619,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 619,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 619,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 619,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 623,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 623,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 623,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 624,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 625,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 625,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 625,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 626,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 627,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 627,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 628,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 628,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 629,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 629,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 630,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 630,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 630,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 630,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 630,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 631,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 631,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 631,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 632,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 632,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 632,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 633,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 633,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 633,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 633,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 633,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 633,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 634,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 634,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 634,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 634,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 634,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 635,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 635,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 635,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 635,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 635,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 635,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 635,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 640,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 640,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 640,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 641,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 642,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 642,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 643,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 643,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 643,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 644,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 644,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 644,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 644,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 644,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 644,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 644,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 645,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 646,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 646,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 646,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 649,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 649,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 649,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 649,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 649,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 649,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 649,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 649,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 649,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 649,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 649,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 649,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 650,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tan",
        ),
        line: 650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 650,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 650,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 650,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 651,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 651,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 652,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "atan",
        ),
        line: 652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 652,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 652,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 652,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 652,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 652,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "acos",
        ),
        line: 652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 652,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 652,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 652,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 652,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 653,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asin",
        ),
        line: 653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 653,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 653,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 654,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        line: 654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 654,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 654,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 654,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rad",
        ),
        line: 654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 654,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 654,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 655,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 655,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".43",
                },
            ),
        ),
        line: 655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 655,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".43",
                },
            ),
        ),
        line: 655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 656,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 657,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 658,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 659,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "atan",
        ),
        line: 659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 659,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 659,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 660,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 660,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 661,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sqrt",
        ),
        line: 661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 661,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 661,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 662,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 662,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 662,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 662,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 663,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 664,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 665,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exp",
        ),
        line: 665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 666,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 666,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 666,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 666,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 666,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' 1.3e-2 '",
        ),
        line: 669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
                exponent: "-2",
            },
        ),
        line: 669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 670,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -1.00000000000001 '",
        ),
        line: 670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 670,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 670,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".00000000000001",
                },
            ),
        ),
        line: 670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388609",
                    after_decimal: "",
                },
            ),
        ),
        line: 674,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 674,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388609",
                    after_decimal: "",
                },
            ),
        ),
        line: 674,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388608",
                    after_decimal: "",
                },
            ),
        ),
        line: 675,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 675,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388608",
                    after_decimal: "",
                },
            ),
        ),
        line: 675,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388607",
                    after_decimal: "",
                },
            ),
        ),
        line: 676,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 676,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388607",
                    after_decimal: "",
                },
            ),
        ),
        line: 676,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 681,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 682,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 683,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 683,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 683,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 683,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 684,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 684,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 685,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 685,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 686,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 687,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 688,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 688,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 689,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 689,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 690,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 690,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 690,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 690,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 691,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 691,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 691,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 691,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 692,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 692,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 693,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 693,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 693,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 693,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 693,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 693,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 694,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 694,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 694,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 694,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 694,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 695,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 695,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 695,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "63",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 695,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 696,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 696,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 696,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 696,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 696,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 696,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 697,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 697,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 697,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 697,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 697,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 698,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 698,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 698,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 698,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 699,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 699,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 699,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 699,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 701,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number expected\"",
        ),
        line: 701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 701,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 701,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 701,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 702,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number expected\"",
        ),
        line: 702,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 702,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 702,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 703,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 704,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 704,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 704,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 705,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 706,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 706,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 706,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 707,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 707,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 708,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 708,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 708,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 709,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 709,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 711,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 711,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 711,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 711,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 712,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 713,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 713,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 713,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 714,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 714,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 714,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 714,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 714,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 714,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 715,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 715,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 715,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 716,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 716,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 717,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 717,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"34.0\"",
        ),
        line: 717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 717,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 718,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 718,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 718,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"34.3\"",
        ),
        line: 718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 719,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 719,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 719,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 719,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 720,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 720,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 720,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 720,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 721,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 725,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 725,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 725,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 725,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 726,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 726,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 726,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 726,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 726,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 727,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 727,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 727,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 727,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 728,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 728,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 728,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 729,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 729,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 729,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 730,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 731,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 731,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 731,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'integer'",
        ),
        line: 731,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 731,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 731,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 731,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'float'",
        ),
        line: 731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 731,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 732,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 732,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 732,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 732,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 732,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 732,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 732,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 732,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 732,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 732,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 733,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 733,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 734,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 735,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 736,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 738,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 738,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 739,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 740,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 740,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 740,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 740,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 740,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 740,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 740,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 741,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 741,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 741,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 741,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 741,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zero\"",
        ),
        line: 743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 743,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 743,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value expected\"",
        ),
        line: 747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 747,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 748,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value expected\"",
        ),
        line: 748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 748,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 749,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 749,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 750,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 751,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 751,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 752,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 752,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 752,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 753,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 753,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 754,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 755,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 755,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 756,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 756,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".7",
                },
            ),
        ),
        line: 756,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".72",
                },
            ),
        ),
        line: 756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 756,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".7",
                },
            ),
        ),
        line: 756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 757,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 757,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 757,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 757,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 757,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 758,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 758,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 758,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 759,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 759,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 759,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 759,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 759,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 760,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 763,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 763,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 763,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'20'",
        ),
        line: 763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 764,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 764,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 764,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 764,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 764,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 764,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 765,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'20'",
        ),
        line: 765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 765,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 769,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing -0 and NaN\"",
        ),
        line: 769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 769,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 770,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 770,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 770,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 770,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 770,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 770,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 771,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 771,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 771,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 772,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 773,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 773,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 773,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 773,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 773,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 773,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 774,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 774,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 774,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 774,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 774,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 774,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 775,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 775,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 775,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 775,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 775,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 775,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 775,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 776,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 776,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 776,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 776,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 777,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 777,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 777,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 777,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 777,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 777,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 777,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 777,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 778,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 778,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 778,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 778,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 778,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 779,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 779,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 779,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 779,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 779,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 779,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 780,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 780,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 780,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 780,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 780,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 781,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 781,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 782,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 782,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 782,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 782,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 782,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 782,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 782,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 783,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 783,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 783,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 783,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 784,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 785,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 785,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 786,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 786,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 787,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 787,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 788,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 788,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 789,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 789,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 789,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 790,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 790,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 790,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 790,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 791,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 791,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 791,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 791,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 791,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 791,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 792,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 792,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 792,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 793,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 794,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 794,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 794,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 795,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 795,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 795,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 796,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 797,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 797,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 797,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 797,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a5",
        ),
        line: 800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\\0\"",
        ),
        line: 800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\\0\"",
        ),
        line: 800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 801,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 801,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 801,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 801,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 801,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 801,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 802,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a5",
        ),
        line: 802,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 802,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 806,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'math.random'\"",
        ),
        line: 806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 806,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 808,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 808,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 808,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 808,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 808,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 810,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testnear",
        ),
        line: 810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tol",
        ),
        line: 810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 810,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 811,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 811,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 811,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 811,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tol",
        ),
        line: 811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 811,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 812,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 817,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 819,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 819,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 819,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7a7040a5",
            ),
        ),
        line: 819,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 820,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 820,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 820,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xa323c9d6",
            ),
        ),
        line: 820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 822,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 822,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1007",
                    after_decimal: "",
                },
            ),
        ),
        line: 822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 822,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 824,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 824,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 824,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 824,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 824,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 824,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 824,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 825,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 825,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 827,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1007",
                    after_decimal: "",
                },
            ),
        ),
        line: 827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 827,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 830,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 831,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 831,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 833,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 833,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 833,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 833,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 833,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 833,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 833,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 833,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 836,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 836,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 836,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 836,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 837,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rand",
        ),
        line: 838,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 838,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rand",
        ),
        line: 839,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".7a7040a5a323c9d6",
                },
            ),
        ),
        line: 839,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 839,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 839,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rand",
        ),
        line: 840,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 840,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 840,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 840,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 840,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 841,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 843,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 845,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 845,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 845,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 846,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 846,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 847,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 847,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 848,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 848,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 849,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 849,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 850,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 850,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 850,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 850,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 852,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 852,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"random seeds: %d, %d\"",
        ),
        line: 852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 852,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 853,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 855,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 856,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 856,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 856,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mult",
        ),
        line: 857,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 857,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 857,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 858,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 858,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 858,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 858,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 859,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 859,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 859,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 859,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 859,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 859,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 859,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 859,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 860,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 860,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 860,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 860,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 861,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 861,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 861,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 862,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 862,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 862,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 863,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 865,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 865,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 865,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 865,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 866,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 867,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 867,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 867,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 868,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 868,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 869,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 869,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 870,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mult",
        ),
        line: 870,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 870,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 870,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 871,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 871,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 871,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 872,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 872,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 872,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 872,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 872,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 872,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 872,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 872,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 873,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 873,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 873,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 873,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 873,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 873,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 873,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 873,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 873,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 874,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 876,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 876,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 876,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 877,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 877,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 877,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 877,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 877,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 877,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 877,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 877,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 879,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 881,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 881,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 881,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 881,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 882,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 882,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 882,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 882,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 883,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testnear",
        ),
        line: 883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 883,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 883,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 883,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".10",
                },
            ),
        ),
        line: 883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 883,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 883,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 885,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 887,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 887,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float random range in %d calls: [%f, %f]\"",
        ),
        line: 887,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 888,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 889,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 892,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 893,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 893,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 894,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 894,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 894,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 895,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 895,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 895,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 895,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 896,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 896,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 896,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 896,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 896,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 896,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 896,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 896,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 897,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 897,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 897,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 898,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 898,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 900,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 900,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 900,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 901,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 902,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 903,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 903,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 903,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 904,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 904,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 906,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 906,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 906,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 906,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 906,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 906,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 906,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 906,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 906,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 906,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 906,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 906,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 906,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 906,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 908,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 908,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 908,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 909,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 909,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 909,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 909,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 910,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 910,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 910,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 910,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 910,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 910,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 910,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 910,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 912,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 914,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 914,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 914,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 914,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 915,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 915,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 915,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 916,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testnear",
        ),
        line: 916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 916,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 916,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".10",
                },
            ),
        ),
        line: 916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 916,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 916,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 918,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 920,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 920,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"integer random range in %d calls: [minint + %.0fppm, maxint - %.0fppm]\"",
        ),
        line: 921,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 922,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 922,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 922,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "6",
            },
        ),
        line: 922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 923,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 923,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 923,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 923,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "6",
            },
        ),
        line: 923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 923,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 924,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 926,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 928,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 928,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 928,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 929,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 929,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 929,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrep",
        ),
        line: 930,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 930,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 932,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 932,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 932,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 932,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 933,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 934,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 934,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 934,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 934,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 934,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 934,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 934,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrep",
        ),
        line: 936,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrep",
        ),
        line: 936,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 936,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 937,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 937,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 937,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 938,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testnear",
        ),
        line: 938,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 938,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 938,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrep",
        ),
        line: 938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".05",
                },
            ),
        ),
        line: 938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 938,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 938,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 940,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 941,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 942,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 944,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 945,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 945,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 945,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 946,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 946,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 946,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 946,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 946,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 946,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 946,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 946,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 947,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 947,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 947,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 948,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 949,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 949,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 949,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 949,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 950,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 950,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 950,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 950,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 951,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 951,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 951,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 951,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 952,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 952,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 952,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 952,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 953,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 953,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 953,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 953,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 953,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 955,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 956,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 957,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 960,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 961,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 962,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 962,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 962,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 963,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 963,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 964,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 965,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 965,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 965,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 966,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 967,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 967,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 968,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 968,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 968,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 968,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 969,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 970,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 970,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 971,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 971,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 971,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 971,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 972,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 972,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 972,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 973,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 975,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 976,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 976,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 977,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 977,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 978,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 978,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 979,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 979,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 980,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 980,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 980,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 980,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 980,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 980,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 980,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 982,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 982,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 982,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 982,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 983,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 983,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 983,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 984,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 984,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 984,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 984,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 985,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 985,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 985,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 986,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 986,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 987,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 987,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 987,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 987,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 988,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 988,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 988,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 988,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 989,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 989,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 989,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 989,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 990,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 991,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 993,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 993,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 993,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 993,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 993,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 993,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 995,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 997,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 997,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 997,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 997,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 997,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 998,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 998,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 998,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 998,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 998,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 998,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 998,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 998,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 998,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1000,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1002,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 1002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 1004,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1004,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 1004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 1004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1005,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 1005,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1006,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 1006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 1006,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1006,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 1006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 1006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1007,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1008,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 1008,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1009,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1009,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 1009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1010,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 1010,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1010,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1010,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 1010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 1010,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 1010,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 1010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1010,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1014,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 1014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 1014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 1014,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1014,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1014,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1014,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 1014,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1014,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 1014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1017,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 1017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 1017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 1017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1017,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 1017,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1018,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 1018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 1018,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1018,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1018,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 1018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1019,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 1019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 1019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1023,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 1023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1023,
    },
]
