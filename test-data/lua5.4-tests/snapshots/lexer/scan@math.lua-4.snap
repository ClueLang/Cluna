---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/math.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 67..72,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 72..73,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing numbers and math lib\"",
        ),
        line: 4,
        column: 37,
        span: 73..103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 38,
        span: 103..104,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 106..111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 6,
        column: 13,
        span: 112..118,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 6,
        column: 15,
        span: 119..120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 6,
        column: 20,
        span: 120..125,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 6,
        column: 21,
        span: 125..126,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 23,
        span: 127..128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 6,
        column: 28,
        span: 129..133,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 6,
        column: 29,
        span: 133..134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        line: 6,
        column: 0,
        span: 134..144,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 6,
        span: 145..150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 7,
        column: 13,
        span: 151..157,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 7,
        column: 15,
        span: 158..159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 7,
        column: 20,
        span: 159..164,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 7,
        column: 21,
        span: 164..165,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 23,
        span: 166..167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 7,
        column: 28,
        span: 168..172,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 7,
        column: 29,
        span: 172..173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 7,
        column: 0,
        span: 173..183,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 9,
        column: 6,
        span: 185..190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 9,
        column: 14,
        span: 191..198,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 9,
        column: 16,
        span: 199..200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 9,
        column: 21,
        span: 200..205,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 9,
        column: 22,
        span: 205..206,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 24,
        span: 207..208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 9,
        column: 29,
        span: 209..213,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 30,
        span: 213..214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 9,
        column: 35,
        span: 214..219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 36,
        span: 219..220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 9,
        column: 40,
        span: 220..224,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 41,
        span: 224..225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 9,
        column: 44,
        span: 225..228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 45,
        span: 228..229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 9,
        column: 51,
        span: 229..235,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 52,
        span: 235..236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 54,
        span: 236..238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 55,
        span: 238..239,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
        column: 57,
        span: 240..241,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 9,
        column: 61,
        span: 241..245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 62,
        span: 245..246,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
        column: 64,
        span: 247..248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 0,
        span: 248..250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 251..257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 257..258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 9,
        span: 258..259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 10,
        span: 258..260,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 10,
        column: 13,
        span: 261..263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 10,
        column: 21,
        span: 264..271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 22,
        span: 271..272,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 25,
        span: 273..275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 27,
        span: 275..277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 28,
        span: 277..278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 7,
        span: 280..286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 286..287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 12,
        column: 14,
        span: 287..293,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 17,
        span: 294..296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 19,
        span: 296..298,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 12,
        column: 22,
        span: 299..301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 24,
        span: 302..303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 12,
        column: 31,
        span: 303..310,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 12,
        column: 33,
        span: 311..312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 35,
        span: 312..314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 36,
        span: 314..315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 37,
        span: 315..316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 7,
        span: 317..323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 8,
        span: 323..324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 13,
        column: 14,
        span: 324..330,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 17,
        span: 331..333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 13,
        column: 24,
        span: 334..340,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 13,
        column: 26,
        span: 341..342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 28,
        span: 342..344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 29,
        span: 344..345,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 16,
        column: 6,
        span: 408..413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 16,
        column: 16,
        span: 414..423,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 18,
        span: 424..425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 0,
        span: 425..428,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 17,
        column: 0,
        span: 429..431,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 8,
        span: 434..439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 18,
        column: 10,
        span: 440..441,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 12,
        span: 442..443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 18,
        column: 16,
        span: 443..447,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 18,
        column: 18,
        span: 448..449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 18,
        column: 0,
        span: 450..459,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 19,
        column: 8,
        span: 462..467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 19,
        column: 10,
        span: 468..469,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 19,
        column: 12,
        span: 470..471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 19,
        column: 14,
        span: 472..473,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 19,
        column: 16,
        span: 474..475,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 19,
        column: 20,
        span: 475..479,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 19,
        column: 0,
        span: 480..482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 20,
        column: 6,
        span: 487..488,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 8,
        span: 489..490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 20,
        column: 10,
        span: 491..492,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 20,
        column: 12,
        span: 493..494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 20,
        column: 0,
        span: 494..498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 21,
        column: 14,
        span: 503..512,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 16,
        span: 513..514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 21,
        column: 26,
        span: 515..524,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 21,
        column: 28,
        span: 525..526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 0,
        span: 526..528,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
        column: 0,
        span: 531..534,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 23,
        column: 0,
        span: 535..538,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 25,
        column: 6,
        span: 540..545,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 25,
        column: 15,
        span: 546..554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 25,
        column: 21,
        span: 555..560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 22,
        span: 560..561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 25,
        column: 23,
        span: 561..562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 24,
        span: 562..563,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 26,
        column: 9,
        span: 566..572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 11,
        span: 573..574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 26,
        column: 12,
        span: 574..575,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 26,
        column: 15,
        span: 576..578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 26,
        column: 17,
        span: 579..580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 18,
        span: 580..581,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 27,
        column: 0,
        span: 582..585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 7,
        span: 587..593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 593..594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 29,
        column: 13,
        span: 594..599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 14,
        span: 599..600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 15,
        span: 599..601,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 29,
        column: 17,
        span: 602..603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 19,
        span: 603..605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 20,
        span: 605..606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 21,
        span: 606..607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 7,
        span: 608..614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 614..615,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 30,
        column: 11,
        span: 615..618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 30,
        column: 17,
        span: 619..624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 18,
        span: 624..625,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 19,
        span: 624..626,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 30,
        column: 21,
        span: 627..628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 23,
        span: 628..630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 24,
        span: 630..631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 25,
        span: 631..632,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 33,
        column: 0,
        span: 635..637,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 34,
        column: 8,
        span: 640..645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 34,
        column: 10,
        span: 646..647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 12,
        span: 648..649,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 34,
        column: 16,
        span: 649..653,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 34,
        column: 18,
        span: 654..655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 34,
        column: 0,
        span: 656..665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 9,
        span: 668..674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 10,
        span: 674..675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
        column: 11,
        span: 675..676,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 35,
        column: 13,
        span: 677..678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
        column: 15,
        span: 679..680,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 35,
        column: 17,
        span: 681..682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 35,
        column: 21,
        span: 682..686,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 35,
        column: 25,
        span: 687..690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
        column: 27,
        span: 691..692,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 30,
        span: 693..695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
        column: 32,
        span: 696..697,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 35,
        column: 34,
        span: 698..699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 35,
        column: 38,
        span: 699..703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 39,
        span: 703..704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 37,
        column: 8,
        span: 708..713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 9,
        span: 713..714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
        column: 15,
        span: 714..720,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 16,
        span: 720..721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 37,
        column: 22,
        span: 721..727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 23,
        span: 727..728,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d-bit integers, %d-bit (mantissa) floats\"",
        ),
        line: 37,
        column: 66,
        span: 728..771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 67,
        span: 771..772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 38,
        column: 12,
        span: 777..784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 13,
        span: 784..785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 38,
        column: 23,
        span: 786..795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 24,
        span: 795..796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 25,
        span: 796..797,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 39,
        column: 0,
        span: 798..801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 803..809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 809..810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 41,
        column: 12,
        span: 810..814,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 13,
        span: 814..815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 41,
        column: 17,
        span: 815..819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 18,
        span: 819..820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 19,
        span: 819..821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 20,
        span: 821..822,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 23,
        span: 823..825,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"integer\"",
        ),
        line: 41,
        column: 33,
        span: 826..835,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 37,
        span: 836..839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 41,
        column: 42,
        span: 840..844,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 43,
        span: 844..845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 41,
        column: 47,
        span: 845..849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 48,
        span: 849..850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 41,
        column: 51,
        span: 849..853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 52,
        span: 853..854,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 55,
        span: 855..857,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float\"",
        ),
        line: 41,
        column: 63,
        span: 858..865,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
        column: 6,
        span: 868..871,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 42,
        column: 10,
        span: 872..875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 42,
        column: 15,
        span: 876..880,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 16,
        span: 880..881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 42,
        column: 20,
        span: 881..885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 21,
        span: 885..886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 42,
        column: 25,
        span: 886..890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 26,
        span: 890..891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 27,
        span: 891..892,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 6,
        span: 895..900,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 45,
        column: 15,
        span: 901..909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 45,
        column: 26,
        span: 910..920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 27,
        span: 920..921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 45,
        column: 30,
        span: 921..924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 31,
        span: 924..925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 45,
        column: 33,
        span: 926..927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 34,
        span: 927..928,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 45,
        column: 38,
        span: 929..932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 39,
        span: 932..933,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 46,
        column: 8,
        span: 936..941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 46,
        column: 10,
        span: 942..943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 11,
        span: 943..944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 46,
        column: 15,
        span: 945..948,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 17,
        span: 949..950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 46,
        column: 23,
        span: 951..956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 24,
        span: 956..957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 46,
        column: 25,
        span: 957..958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 26,
        span: 958..959,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 46,
        column: 30,
        span: 960..963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 31,
        span: 963..964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 9,
        span: 967..973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 10,
        span: 973..974,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 47,
        column: 13,
        span: 974..977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 47,
        column: 15,
        span: 978..979,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
        column: 19,
        span: 980..983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 47,
        column: 26,
        span: 984..990,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 27,
        span: 990..991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 47,
        column: 31,
        span: 991..995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 32,
        span: 995..996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 47,
        column: 35,
        span: 996..999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 36,
        span: 999..1000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 47,
        column: 40,
        span: 1001..1004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 41,
        span: 1004..1005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 42,
        span: 1005..1006,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
        column: 0,
        span: 1007..1010,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 50,
        column: 6,
        span: 1012..1017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 50,
        column: 13,
        span: 1018..1024,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
        column: 15,
        span: 1025..1026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number.* has no integer representation\"",
        ),
        line: 50,
        column: 56,
        span: 1027..1067,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 53,
        column: 9,
        span: 1087..1095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 53,
        column: 12,
        span: 1096..1098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 13,
        span: 1098..1099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 14,
        span: 1099..1100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 15,
        span: 1100..1101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 53,
        column: 17,
        span: 1102..1103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 18,
        span: 1103..1104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 53,
        column: 24,
        span: 1105..1110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 25,
        span: 1110..1111,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 54,
        column: 5,
        span: 1114..1116,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 54,
        column: 9,
        span: 1117..1120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 54,
        column: 15,
        span: 1121..1126,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 54,
        column: 0,
        span: 1127..1131,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 55,
        column: 7,
        span: 1136..1138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 55,
        column: 17,
        span: 1139..1148,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 55,
        column: 20,
        span: 1149..1151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 23,
        span: 1151..1154,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 55,
        column: 0,
        span: 1155..1159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 56,
        column: 12,
        span: 1166..1171,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 14,
        span: 1172..1173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-11",
            },
        ),
        line: 56,
        column: 0,
        span: 1173..1179,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 57,
        column: 0,
        span: 1184..1188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 58,
        column: 12,
        span: 1195..1200,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 14,
        span: 1201..1202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-5",
            },
        ),
        line: 58,
        column: 0,
        span: 1202..1207,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 59,
        column: 0,
        span: 1212..1215,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 60,
        column: 0,
        span: 1218..1221,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 62,
        column: 9,
        span: 1257..1263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
        column: 11,
        span: 1264..1265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 14,
        span: 1266..1268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 62,
        column: 16,
        span: 1269..1270,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 62,
        column: 19,
        span: 1271..1273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 62,
        column: 24,
        span: 1274..1278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 25,
        span: 1278..1279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 62,
        column: 28,
        span: 1279..1282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 29,
        span: 1282..1283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
        column: 30,
        span: 1283..1284,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 62,
        column: 32,
        span: 1285..1286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 62,
        column: 34,
        span: 1287..1288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 35,
        span: 1288..1289,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 62,
        column: 38,
        span: 1290..1292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 62,
        column: 0,
        span: 1293..1298,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 63,
        column: 0,
        span: 1299..1302,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 66,
        column: 9,
        span: 1327..1335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 66,
        column: 13,
        span: 1336..1339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 14,
        span: 1339..1340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 15,
        span: 1340..1341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 16,
        span: 1341..1342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 66,
        column: 18,
        span: 1343..1344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 19,
        span: 1344..1345,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 67,
        column: 9,
        span: 1348..1354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
        column: 11,
        span: 1355..1356,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 14,
        span: 1357..1359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 67,
        column: 16,
        span: 1360..1361,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 67,
        column: 20,
        span: 1362..1365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 67,
        column: 25,
        span: 1366..1370,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 26,
        span: 1370..1371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 67,
        column: 30,
        span: 1371..1375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 31,
        span: 1375..1376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
        column: 32,
        span: 1376..1377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 33,
        span: 1377..1378,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 36,
        span: 1379..1381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 67,
        column: 41,
        span: 1382..1386,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 42,
        span: 1386..1387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 67,
        column: 46,
        span: 1387..1391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 47,
        span: 1391..1392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 67,
        column: 48,
        span: 1392..1393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 49,
        span: 1393..1394,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 68,
        column: 0,
        span: 1395..1398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 1424..1430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 1430..1431,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
                exponent: "12",
            },
        ),
        line: 71,
        column: 12,
        span: 1430..1435,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 15,
        span: 1436..1438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 17,
        span: 1438..1440,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 21,
        span: 1441..1444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 71,
        column: 25,
        span: 1444..1447,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 28,
        span: 1448..1450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 30,
        span: 1450..1452,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 34,
        span: 1453..1456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 71,
        column: 37,
        span: 1456..1459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 40,
        span: 1460..1462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 42,
        span: 1462..1464,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 46,
        span: 1465..1468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".2",
                },
                exponent: "2",
            },
        ),
        line: 71,
        column: 52,
        span: 1468..1473,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 55,
        span: 1474..1476,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 58,
        span: 1476..1479,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 62,
        span: 1480..1483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
                exponent: "-1",
            },
        ),
        line: 71,
        column: 68,
        span: 1483..1489,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 71,
        span: 1490..1492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 71,
        column: 75,
        span: 1492..1496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 76,
        span: 1496..1497,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 73,
        column: 0,
        span: 1499..1501,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 74,
        column: 8,
        span: 1504..1509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 74,
        column: 10,
        span: 1510..1511,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 11,
        span: 1511..1512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 74,
        column: 13,
        span: 1513..1514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 14,
        span: 1514..1515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 74,
        column: 16,
        span: 1516..1517,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 18,
        span: 1518..1519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 74,
        column: 22,
        span: 1520..1523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 23,
        span: 1523..1524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 3e0 \"",
        ),
        line: 74,
        column: 31,
        span: 1525..1532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 32,
        span: 1532..1533,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 10  \"",
        ),
        line: 74,
        column: 40,
        span: 1534..1541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
        column: 9,
        span: 1544..1550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 10,
        span: 1550..1551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 75,
        column: 11,
        span: 1551..1552,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
        column: 13,
        span: 1553..1554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 75,
        column: 15,
        span: 1555..1556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 18,
        span: 1557..1559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 20,
        span: 1559..1561,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
        column: 24,
        span: 1562..1565,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 75,
        column: 26,
        span: 1566..1567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 75,
        column: 27,
        span: 1567..1568,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 30,
        span: 1569..1571,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 75,
        column: 32,
        span: 1572..1573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 33,
        span: 1572..1574,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
        column: 37,
        span: 1575..1578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 75,
        column: 39,
        span: 1579..1580,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
        column: 41,
        span: 1581..1582,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 75,
        column: 45,
        span: 1583..1586,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 48,
        span: 1587..1589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 50,
        span: 1589..1591,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
        column: 54,
        span: 1592..1595,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 75,
        column: 59,
        span: 1596..1600,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 75,
        column: 61,
        span: 1601..1602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 75,
        column: 63,
        span: 1603..1604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 66,
        span: 1605..1607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 68,
        span: 1607..1609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 69,
        span: 1609..1610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
        column: 9,
        span: 1613..1619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 10,
        span: 1619..1620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 76,
        column: 14,
        span: 1620..1624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 15,
        span: 1624..1625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 76,
        column: 16,
        span: 1625..1626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 17,
        span: 1626..1627,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 20,
        span: 1628..1630,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 76,
        column: 29,
        span: 1631..1639,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 76,
        column: 33,
        span: 1640..1643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 76,
        column: 38,
        span: 1644..1648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 39,
        span: 1648..1649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 76,
        column: 40,
        span: 1649..1650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 41,
        span: 1650..1651,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 44,
        span: 1652..1654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 76,
        column: 53,
        span: 1655..1663,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 76,
        column: 57,
        span: 1664..1667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 76,
        column: 62,
        span: 1668..1672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 63,
        span: 1672..1673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 76,
        column: 64,
        span: 1673..1674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 65,
        span: 1674..1675,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 68,
        span: 1676..1678,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 76,
        column: 77,
        span: 1679..1687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 78,
        span: 1687..1688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 77,
        column: 9,
        span: 1691..1697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 10,
        span: 1697..1698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 77,
        column: 11,
        span: 1698..1699,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 14,
        span: 1700..1702,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 77,
        column: 18,
        span: 1703..1706,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
        column: 22,
        span: 1707..1710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 77,
        column: 24,
        span: 1711..1712,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 27,
        span: 1713..1715,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 3e0 \"",
        ),
        line: 77,
        column: 35,
        span: 1716..1723,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
        column: 39,
        span: 1724..1727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 77,
        column: 41,
        span: 1728..1729,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 44,
        span: 1730..1732,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 10  \"",
        ),
        line: 77,
        column: 52,
        span: 1733..1740,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
        column: 56,
        span: 1741..1744,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 77,
        column: 58,
        span: 1745..1746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 77,
        column: 59,
        span: 1746..1747,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 62,
        span: 1748..1750,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 77,
        column: 64,
        span: 1751..1752,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  10 \"",
        ),
        line: 77,
        column: 71,
        span: 1752..1759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 72,
        span: 1759..1760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 78,
        column: 9,
        span: 1763..1769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 10,
        span: 1769..1770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 78,
        column: 11,
        span: 1770..1771,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 78,
        column: 13,
        span: 1772..1773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 15,
        span: 1774..1775,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 78,
        column: 18,
        span: 1776..1778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 20,
        span: 1778..1780,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 78,
        column: 24,
        span: 1781..1784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 26,
        span: 1785..1786,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 78,
        column: 28,
        span: 1787..1788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 78,
        column: 30,
        span: 1789..1790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 78,
        column: 33,
        span: 1791..1793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "08",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 36,
        span: 1793..1796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 37,
        span: 1796..1797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 79,
        column: 4,
        span: 1800..1801,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 6,
        span: 1802..1803,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
        column: 0,
        span: 1803..1805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
        column: 9,
        span: 1808..1814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 10,
        span: 1814..1815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
        column: 11,
        span: 1815..1816,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 14,
        span: 1817..1819,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 80,
        column: 16,
        span: 1820..1821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
        column: 17,
        span: 1821..1822,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 80,
        column: 21,
        span: 1823..1826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 23,
        span: 1826..1828,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 26,
        span: 1829..1831,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 80,
        column: 28,
        span: 1832..1833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 29,
        span: 1832..1834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 30,
        span: 1834..1835,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 81,
        column: 0,
        span: 1836..1839,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 83,
        column: 0,
        span: 1841..1843,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 84,
        column: 8,
        span: 1846..1851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 84,
        column: 10,
        span: 1852..1853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 12,
        span: 1854..1855,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 84,
        column: 14,
        span: 1856..1857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 0,
        span: 1856..1858,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 85,
        column: 8,
        span: 1861..1866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 85,
        column: 11,
        span: 1867..1869,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 13,
        span: 1870..1871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 15,
        span: 1871..1873,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 85,
        column: 17,
        span: 1874..1875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 85,
        column: 19,
        span: 1876..1877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 86,
        column: 4,
        span: 1894..1895,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 6,
        span: 1896..1897,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 86,
        column: 8,
        span: 1898..1899,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 86,
        column: 10,
        span: 1900..1901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 11,
        span: 1900..1902,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 86,
        column: 12,
        span: 1902..1903,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 14,
        span: 1904..1905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 17,
        span: 1905..1908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 18,
        span: 1908..1909,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 21,
        span: 1909..1912,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 22,
        span: 1912..1913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 25,
        span: 1913..1916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 26,
        span: 1916..1917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 29,
        span: 1917..1920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 30,
        span: 1920..1921,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 33,
        span: 1921..1924,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 86,
        column: 35,
        span: 1925..1926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 9,
        span: 1929..1935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 10,
        span: 1935..1936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
        column: 11,
        span: 1936..1937,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
        column: 12,
        span: 1937..1938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 87,
        column: 14,
        span: 1938..1940,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
        column: 15,
        span: 1940..1941,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 18,
        span: 1942..1944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
        column: 20,
        span: 1945..1946,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
        column: 21,
        span: 1946..1947,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 22,
        span: 1946..1948,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
        column: 23,
        span: 1948..1949,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 87,
        column: 27,
        span: 1950..1953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
        column: 29,
        span: 1954..1955,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
        column: 30,
        span: 1955..1956,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 87,
        column: 31,
        span: 1956..1957,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 32,
        span: 1956..1958,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
        column: 33,
        span: 1958..1959,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 36,
        span: 1960..1962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
        column: 38,
        span: 1963..1964,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
        column: 39,
        span: 1964..1965,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 40,
        span: 1964..1966,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
        column: 41,
        span: 1966..1967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 42,
        span: 1967..1968,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 88,
        column: 0,
        span: 1969..1972,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 90,
        column: 3,
        span: 1974..1976,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 91,
        column: 8,
        span: 1999..2004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
        column: 10,
        span: 2005..2006,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 11,
        span: 2006..2007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 91,
        column: 13,
        span: 2008..2009,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 15,
        span: 2010..2011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 91,
        column: 20,
        span: 2012..2016,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 21,
        span: 2016..2017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 91,
        column: 25,
        span: 2017..2021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 26,
        span: 2021..2022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 91,
        column: 29,
        span: 2021..2025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 30,
        span: 2025..2026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
        column: 9,
        span: 2029..2035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 10,
        span: 2035..2036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 92,
        column: 11,
        span: 2036..2037,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 14,
        span: 2038..2040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 92,
        column: 18,
        span: 2040..2044,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
        column: 22,
        span: 2045..2048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 92,
        column: 24,
        span: 2049..2050,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 27,
        span: 2051..2053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 92,
        column: 31,
        span: 2053..2057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 32,
        span: 2057..2058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 93,
        column: 4,
        span: 2061..2062,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 5,
        span: 2062..2063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 93,
        column: 7,
        span: 2064..2065,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 9,
        span: 2066..2067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 93,
        column: 14,
        span: 2068..2072,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 15,
        span: 2072..2073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 93,
        column: 19,
        span: 2073..2077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 20,
        span: 2077..2078,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 93,
        column: 21,
        span: 2078..2079,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 93,
        column: 24,
        span: 2078..2082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 25,
        span: 2082..2083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 94,
        column: 9,
        span: 2086..2092,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 10,
        span: 2092..2093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
        column: 11,
        span: 2093..2094,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
        column: 14,
        span: 2095..2097,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 94,
        column: 16,
        span: 2098..2099,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 94,
        column: 19,
        span: 2098..2102,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 94,
        column: 23,
        span: 2103..2106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 94,
        column: 25,
        span: 2107..2108,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
        column: 28,
        span: 2109..2111,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 94,
        column: 30,
        span: 2112..2113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 94,
        column: 33,
        span: 2112..2116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 34,
        span: 2116..2117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 95,
        column: 4,
        span: 2120..2121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 5,
        span: 2121..2122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 95,
        column: 7,
        span: 2123..2124,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 9,
        span: 2125..2126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 95,
        column: 14,
        span: 2127..2131,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
        column: 15,
        span: 2131..2132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 95,
        column: 19,
        span: 2132..2136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 20,
        span: 2136..2137,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 95,
        column: 21,
        span: 2137..2138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "23",
            },
        ),
        line: 95,
        column: 25,
        span: 2137..2142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 26,
        span: 2142..2143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 9,
        span: 2146..2152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 10,
        span: 2152..2153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 96,
        column: 11,
        span: 2153..2154,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
        column: 14,
        span: 2155..2157,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 96,
        column: 16,
        span: 2158..2159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "23",
            },
        ),
        line: 96,
        column: 20,
        span: 2158..2163,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 96,
        column: 24,
        span: 2164..2167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 96,
        column: 26,
        span: 2168..2169,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
        column: 29,
        span: 2170..2172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 96,
        column: 33,
        span: 2172..2176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 34,
        span: 2176..2177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 4,
        span: 2180..2181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 5,
        span: 2181..2182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 97,
        column: 7,
        span: 2183..2184,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 9,
        span: 2185..2186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 97,
        column: 14,
        span: 2187..2191,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
        column: 15,
        span: 2191..2192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 97,
        column: 19,
        span: 2192..2196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 20,
        span: 2196..2197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "35",
            },
        ),
        line: 97,
        column: 24,
        span: 2196..2201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 25,
        span: 2201..2202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
        column: 9,
        span: 2205..2211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 10,
        span: 2211..2212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 98,
        column: 11,
        span: 2212..2213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 14,
        span: 2214..2216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "35",
            },
        ),
        line: 98,
        column: 19,
        span: 2216..2221,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 98,
        column: 23,
        span: 2222..2225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 98,
        column: 25,
        span: 2226..2227,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 28,
        span: 2228..2230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 98,
        column: 32,
        span: 2230..2234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 33,
        span: 2234..2235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
        column: 4,
        span: 2238..2239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 5,
        span: 2239..2240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 99,
        column: 7,
        span: 2241..2242,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 9,
        span: 2243..2244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 99,
        column: 14,
        span: 2245..2249,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 15,
        span: 2249..2250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 99,
        column: 19,
        span: 2250..2254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 20,
        span: 2254..2255,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 99,
        column: 21,
        span: 2255..2256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 22,
        span: 2255..2257,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 99,
        column: 24,
        span: 2258..2259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 26,
        span: 2259..2261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 27,
        span: 2261..2262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
        column: 9,
        span: 2273..2279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 10,
        span: 2279..2280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
        column: 11,
        span: 2280..2281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
        column: 14,
        span: 2282..2284,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 100,
        column: 16,
        span: 2285..2286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 17,
        span: 2285..2287,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 100,
        column: 19,
        span: 2288..2289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 21,
        span: 2289..2291,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 100,
        column: 25,
        span: 2292..2295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 100,
        column: 27,
        span: 2296..2297,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
        column: 30,
        span: 2298..2300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 100,
        column: 34,
        span: 2300..2304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 35,
        span: 2304..2305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 101,
        column: 4,
        span: 2308..2309,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 5,
        span: 2309..2310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 101,
        column: 7,
        span: 2311..2312,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 9,
        span: 2313..2314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 101,
        column: 14,
        span: 2315..2319,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
        column: 15,
        span: 2319..2320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 101,
        column: 19,
        span: 2320..2324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 20,
        span: 2324..2325,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 21,
        span: 2324..2326,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 101,
        column: 23,
        span: 2327..2328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 25,
        span: 2328..2330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 26,
        span: 2330..2331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 102,
        column: 9,
        span: 2342..2348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 10,
        span: 2348..2349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 102,
        column: 11,
        span: 2349..2350,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
        column: 14,
        span: 2351..2353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 16,
        span: 2353..2355,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 102,
        column: 18,
        span: 2356..2357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 20,
        span: 2357..2359,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 102,
        column: 24,
        span: 2360..2363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 102,
        column: 26,
        span: 2364..2365,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
        column: 29,
        span: 2366..2368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 102,
        column: 33,
        span: 2368..2372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 34,
        span: 2372..2373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 103,
        column: 4,
        span: 2376..2377,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 5,
        span: 2377..2378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 103,
        column: 7,
        span: 2379..2380,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
        column: 9,
        span: 2381..2382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 103,
        column: 14,
        span: 2383..2387,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
        column: 15,
        span: 2387..2388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 103,
        column: 19,
        span: 2388..2392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 20,
        span: 2392..2393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 21,
        span: 2392..2394,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 103,
        column: 23,
        span: 2395..2396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 25,
        span: 2396..2398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 26,
        span: 2398..2399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
        column: 9,
        span: 2410..2416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 10,
        span: 2416..2417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 104,
        column: 15,
        span: 2417..2422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 16,
        span: 2422..2423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
        column: 17,
        span: 2423..2424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 18,
        span: 2424..2425,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 104,
        column: 22,
        span: 2426..2429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 104,
        column: 28,
        span: 2430..2435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 29,
        span: 2435..2436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 104,
        column: 30,
        span: 2436..2437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 31,
        span: 2437..2438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 32,
        span: 2438..2439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 4,
        span: 2442..2443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 5,
        span: 2443..2444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 105,
        column: 7,
        span: 2445..2446,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 9,
        span: 2447..2448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 105,
        column: 14,
        span: 2449..2453,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 15,
        span: 2453..2454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 105,
        column: 19,
        span: 2454..2458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 20,
        span: 2458..2459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 21,
        span: 2458..2460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 22,
        span: 2460..2461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 106,
        column: 9,
        span: 2489..2495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 10,
        span: 2495..2496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 106,
        column: 13,
        span: 2496..2499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 14,
        span: 2499..2500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 106,
        column: 15,
        span: 2500..2501,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 16,
        span: 2501..2502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 18,
        span: 2502..2504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 19,
        span: 2504..2505,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 106,
        column: 23,
        span: 2506..2509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 106,
        column: 27,
        span: 2510..2513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 28,
        span: 2513..2514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 106,
        column: 29,
        span: 2514..2515,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 30,
        span: 2515..2516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 106,
        column: 34,
        span: 2516..2520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 35,
        span: 2520..2521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 36,
        span: 2521..2522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 107,
        column: 4,
        span: 2525..2526,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 5,
        span: 2526..2527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 107,
        column: 7,
        span: 2528..2529,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 9,
        span: 2530..2531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 107,
        column: 14,
        span: 2532..2536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
        column: 15,
        span: 2536..2537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 107,
        column: 19,
        span: 2537..2541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 20,
        span: 2541..2542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 107,
        column: 26,
        span: 2542..2548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 27,
        span: 2548..2549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 108,
        column: 9,
        span: 2552..2558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 10,
        span: 2558..2559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 108,
        column: 13,
        span: 2559..2562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 14,
        span: 2562..2563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 15,
        span: 2563..2564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 16,
        span: 2564..2565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 108,
        column: 23,
        span: 2566..2572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 24,
        span: 2572..2573,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 108,
        column: 28,
        span: 2574..2577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 108,
        column: 32,
        span: 2578..2581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 33,
        span: 2581..2582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 108,
        column: 34,
        span: 2582..2583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 35,
        span: 2583..2584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 108,
        column: 39,
        span: 2584..2588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 40,
        span: 2588..2589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 41,
        span: 2589..2590,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
        column: 0,
        span: 2591..2594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 7,
        span: 2596..2602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 8,
        span: 2602..2603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 111,
        column: 12,
        span: 2603..2607,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
        column: 13,
        span: 2607..2608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 111,
        column: 17,
        span: 2608..2612,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 111,
        column: 19,
        span: 2613..2614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 111,
        column: 25,
        span: 2614..2620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 26,
        span: 2620..2621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 7,
        span: 2622..2628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 8,
        span: 2628..2629,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 112,
        column: 9,
        span: 2629..2630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 112,
        column: 13,
        span: 2630..2634,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 14,
        span: 2634..2635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 112,
        column: 18,
        span: 2635..2639,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 112,
        column: 20,
        span: 2640..2641,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 112,
        column: 22,
        span: 2642..2643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 112,
        column: 27,
        span: 2642..2648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 28,
        span: 2648..2649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 116,
        column: 7,
        span: 2674..2680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 8,
        span: 2680..2681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 116,
        column: 14,
        span: 2681..2687,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 116,
        column: 16,
        span: 2688..2689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 116,
        column: 23,
        span: 2690..2696,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 116,
        column: 25,
        span: 2697..2698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 27,
        span: 2698..2700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 28,
        span: 2700..2701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 7,
        span: 2702..2708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 8,
        span: 2708..2709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 117,
        column: 14,
        span: 2709..2715,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 117,
        column: 16,
        span: 2716..2717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 18,
        span: 2717..2719,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 117,
        column: 20,
        span: 2720..2721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 117,
        column: 27,
        span: 2722..2728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 28,
        span: 2728..2729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
        column: 7,
        span: 2730..2736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 8,
        span: 2736..2737,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 9,
        span: 2736..2738,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 118,
        column: 11,
        span: 2739..2740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 118,
        column: 18,
        span: 2741..2747,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 21,
        span: 2748..2750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 118,
        column: 28,
        span: 2751..2757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 29,
        span: 2757..2758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
        column: 7,
        span: 2759..2765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 8,
        span: 2765..2766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 119,
        column: 14,
        span: 2766..2772,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 119,
        column: 16,
        span: 2773..2774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 119,
        column: 23,
        span: 2775..2781,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 26,
        span: 2782..2784,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 28,
        span: 2784..2786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 29,
        span: 2786..2787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
        column: 7,
        span: 2788..2794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 8,
        span: 2794..2795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
        column: 14,
        span: 2795..2801,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 120,
        column: 16,
        span: 2802..2803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
        column: 23,
        span: 2804..2810,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 120,
        column: 25,
        span: 2811..2812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
        column: 32,
        span: 2813..2819,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 35,
        span: 2820..2822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
        column: 42,
        span: 2823..2829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 43,
        span: 2829..2830,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 125,
        column: 4,
        span: 2876..2879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 125,
        column: 6,
        span: 2880..2881,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 7,
        span: 2881..2882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 125,
        column: 9,
        span: 2883..2884,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 125,
        column: 12,
        span: 2885..2887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 125,
        column: 18,
        span: 2888..2893,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 125,
        column: 20,
        span: 2894..2895,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 22,
        span: 2896..2897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 24,
        span: 2896..2899,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 25,
        span: 2899..2900,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 27,
        span: 2901..2902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 29,
        span: 2901..2904,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 30,
        span: 2904..2905,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 32,
        span: 2906..2907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 33,
        span: 2906..2908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 34,
        span: 2908..2909,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 36,
        span: 2910..2911,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 37,
        span: 2910..2912,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 38,
        span: 2912..2913,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 40,
        span: 2914..2915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 41,
        span: 2914..2916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 42,
        span: 2916..2917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 44,
        span: 2917..2919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 45,
        span: 2919..2920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 47,
        span: 2920..2922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 48,
        span: 2922..2923,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 50,
        span: 2923..2925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 51,
        span: 2925..2926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 53,
        span: 2926..2928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 54,
        span: 2928..2929,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 57,
        span: 2929..2932,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 125,
        column: 59,
        span: 2933..2934,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 125,
        column: 0,
        span: 2935..2937,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 126,
        column: 6,
        span: 2940..2943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 126,
        column: 8,
        span: 2944..2945,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 9,
        span: 2945..2946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 126,
        column: 11,
        span: 2947..2948,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 126,
        column: 14,
        span: 2949..2951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 126,
        column: 20,
        span: 2952..2957,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 126,
        column: 22,
        span: 2958..2959,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 24,
        span: 2960..2961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 26,
        span: 2960..2963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 27,
        span: 2963..2964,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 29,
        span: 2965..2966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 31,
        span: 2965..2968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 32,
        span: 2968..2969,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 34,
        span: 2970..2971,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 35,
        span: 2970..2972,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 36,
        span: 2972..2973,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 38,
        span: 2974..2975,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 39,
        span: 2974..2976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 40,
        span: 2976..2977,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 42,
        span: 2978..2979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 43,
        span: 2978..2980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 44,
        span: 2980..2981,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 46,
        span: 2981..2983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 47,
        span: 2983..2984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 49,
        span: 2984..2986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 50,
        span: 2986..2987,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 52,
        span: 2987..2989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 53,
        span: 2989..2990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 56,
        span: 2990..2993,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 126,
        column: 58,
        span: 2994..2995,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 126,
        column: 0,
        span: 2996..2998,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 127,
        column: 8,
        span: 3003..3006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 127,
        column: 10,
        span: 3007..3008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 11,
        span: 3008..3009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ti",
        ),
        line: 127,
        column: 14,
        span: 3010..3012,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 127,
        column: 17,
        span: 3013..3015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 127,
        column: 23,
        span: 3016..3021,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 127,
        column: 25,
        span: 3022..3023,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 27,
        span: 3023..3025,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 28,
        span: 3025..3026,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 127,
        column: 32,
        span: 3026..3030,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 127,
        column: 34,
        span: 3031..3032,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 127,
        column: 37,
        span: 3033..3035,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 128,
        column: 10,
        span: 3079..3082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 128,
        column: 12,
        span: 3083..3084,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 13,
        span: 3084..3085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tj",
        ),
        line: 128,
        column: 16,
        span: 3086..3088,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 128,
        column: 19,
        span: 3089..3091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 128,
        column: 25,
        span: 3092..3097,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 128,
        column: 27,
        span: 3098..3099,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 29,
        span: 3099..3101,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 30,
        span: 3101..3102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 128,
        column: 34,
        span: 3102..3106,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 128,
        column: 36,
        span: 3107..3108,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 128,
        column: 39,
        span: 3109..3111,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 129,
        column: 14,
        span: 3155..3160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
        column: 16,
        span: 3161..3162,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 18,
        span: 3163..3164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 129,
        column: 20,
        span: 3165..3166,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 129,
        column: 22,
        span: 3167..3168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ti",
        ),
        line: 129,
        column: 0,
        span: 3169..3171,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 130,
        column: 14,
        span: 3180..3185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 130,
        column: 16,
        span: 3186..3187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 18,
        span: 3188..3189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 130,
        column: 20,
        span: 3190..3191,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 130,
        column: 22,
        span: 3192..3193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tj",
        ),
        line: 130,
        column: 0,
        span: 3194..3196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
        column: 15,
        span: 3205..3211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 16,
        span: 3211..3212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 131,
        column: 17,
        span: 3212..3213,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 131,
        column: 20,
        span: 3214..3216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 131,
        column: 22,
        span: 3217..3218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
        column: 25,
        span: 3219..3221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 131,
        column: 30,
        span: 3222..3226,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
        column: 31,
        span: 3226..3227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 131,
        column: 36,
        span: 3227..3232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 37,
        span: 3232..3233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 131,
        column: 38,
        span: 3233..3234,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 131,
        column: 40,
        span: 3235..3236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 131,
        column: 42,
        span: 3237..3238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 43,
        span: 3238..3239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 44,
        span: 3239..3240,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
        column: 0,
        span: 3247..3250,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
        column: 0,
        span: 3255..3258,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 134,
        column: 0,
        span: 3261..3264,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 135,
        column: 0,
        span: 3265..3268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 7,
        span: 3270..3276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 8,
        span: 3276..3277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 9,
        span: 3276..3278,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 137,
        column: 12,
        span: 3279..3281,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 137,
        column: 16,
        span: 3281..3285,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 19,
        span: 3286..3288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 21,
        span: 3288..3290,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 137,
        column: 23,
        span: 3291..3292,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 25,
        span: 3292..3294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 26,
        span: 3294..3295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 3296..3302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 3302..3303,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 138,
        column: 9,
        span: 3303..3304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 10,
        span: 3303..3305,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 138,
        column: 13,
        span: 3306..3308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 138,
        column: 17,
        span: 3308..3312,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 20,
        span: 3313..3315,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 138,
        column: 22,
        span: 3316..3317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 23,
        span: 3316..3318,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 138,
        column: 25,
        span: 3319..3320,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 27,
        span: 3320..3322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 28,
        span: 3322..3323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 7,
        span: 3324..3330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 8,
        span: 3330..3331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 139,
        column: 11,
        span: 3331..3334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 12,
        span: 3334..3335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 139,
        column: 15,
        span: 3334..3338,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 139,
        column: 18,
        span: 3339..3341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 139,
        column: 22,
        span: 3341..3345,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 23,
        span: 3345..3346,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 139,
        column: 27,
        span: 3346..3350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 28,
        span: 3350..3351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 29,
        span: 3351..3352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 3353..3359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 3359..3360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 140,
        column: 11,
        span: 3360..3363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 12,
        span: 3363..3364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 140,
        column: 15,
        span: 3363..3367,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 140,
        column: 18,
        span: 3368..3370,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 140,
        column: 20,
        span: 3371..3372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 140,
        column: 23,
        span: 3371..3375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 24,
        span: 3375..3376,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 140,
        column: 26,
        span: 3377..3378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 140,
        column: 29,
        span: 3377..3381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 30,
        span: 3381..3382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 31,
        span: 3382..3383,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 142,
        column: 3,
        span: 3385..3387,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 143,
        column: 8,
        span: 3430..3435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 143,
        column: 10,
        span: 3436..3437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 11,
        span: 3437..3438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 143,
        column: 0,
        span: 3439..3440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 144,
        column: 4,
        span: 3443..3444,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 144,
        column: 6,
        span: 3445..3446,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 8,
        span: 3446..3448,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 144,
        column: 9,
        span: 3448..3449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
        column: 16,
        span: 3450..3456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 17,
        span: 3456..3457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 144,
        column: 18,
        span: 3457..3458,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 144,
        column: 21,
        span: 3459..3461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 144,
        column: 25,
        span: 3461..3465,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 28,
        span: 3466..3468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 30,
        span: 3468..3470,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 144,
        column: 32,
        span: 3471..3472,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 34,
        span: 3472..3474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 35,
        span: 3474..3475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 145,
        column: 4,
        span: 3478..3479,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 6,
        span: 3480..3481,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 145,
        column: 10,
        span: 3481..3485,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 145,
        column: 11,
        span: 3485..3486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
        column: 18,
        span: 3487..3493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 19,
        span: 3493..3494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 145,
        column: 20,
        span: 3494..3495,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 145,
        column: 23,
        span: 3496..3498,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 25,
        span: 3498..3500,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
        column: 28,
        span: 3501..3503,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 30,
        span: 3503..3505,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 145,
        column: 32,
        span: 3506..3507,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 34,
        span: 3507..3509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 35,
        span: 3509..3510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 146,
        column: 4,
        span: 3513..3514,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
        column: 6,
        span: 3515..3516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 146,
        column: 10,
        span: 3516..3520,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 146,
        column: 11,
        span: 3520..3521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 18,
        span: 3522..3528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 19,
        span: 3528..3529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 146,
        column: 22,
        span: 3529..3532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 23,
        span: 3532..3533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 146,
        column: 24,
        span: 3533..3534,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 146,
        column: 27,
        span: 3535..3537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 29,
        span: 3537..3539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 30,
        span: 3539..3540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 146,
        column: 34,
        span: 3540..3544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 35,
        span: 3544..3545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 36,
        span: 3545..3546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 9,
        span: 3549..3555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 10,
        span: 3555..3556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 147,
        column: 13,
        span: 3556..3559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 14,
        span: 3559..3560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 147,
        column: 15,
        span: 3560..3561,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 147,
        column: 18,
        span: 3562..3564,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 147,
        column: 20,
        span: 3565..3566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 21,
        span: 3565..3567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 22,
        span: 3567..3568,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 147,
        column: 24,
        span: 3569..3570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 147,
        column: 27,
        span: 3569..3573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 28,
        span: 3573..3574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 29,
        span: 3574..3575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 149,
        column: 4,
        span: 3579..3580,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 6,
        span: 3581..3582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 149,
        column: 10,
        span: 3582..3586,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 149,
        column: 11,
        span: 3586..3587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 149,
        column: 13,
        span: 3588..3589,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 15,
        span: 3590..3591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 149,
        column: 19,
        span: 3591..3595,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 149,
        column: 20,
        span: 3595..3596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 27,
        span: 3597..3603,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 28,
        span: 3603..3604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 149,
        column: 31,
        span: 3604..3607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 32,
        span: 3607..3608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 149,
        column: 33,
        span: 3608..3609,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 149,
        column: 36,
        span: 3610..3612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 149,
        column: 38,
        span: 3613..3614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 39,
        span: 3614..3615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 149,
        column: 43,
        span: 3615..3619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 44,
        span: 3619..3620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 45,
        span: 3620..3621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 150,
        column: 4,
        span: 3624..3625,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
        column: 6,
        span: 3626..3627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 150,
        column: 10,
        span: 3627..3631,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 150,
        column: 11,
        span: 3631..3632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 150,
        column: 13,
        span: 3633..3634,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
        column: 15,
        span: 3635..3636,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 150,
        column: 17,
        span: 3637..3638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 150,
        column: 20,
        span: 3637..3641,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 150,
        column: 21,
        span: 3641..3642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
        column: 28,
        span: 3643..3649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 29,
        span: 3649..3650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 150,
        column: 32,
        span: 3650..3653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 33,
        span: 3653..3654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 150,
        column: 34,
        span: 3654..3655,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 150,
        column: 37,
        span: 3656..3658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 150,
        column: 39,
        span: 3659..3660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 40,
        span: 3660..3661,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 150,
        column: 42,
        span: 3662..3663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 150,
        column: 45,
        span: 3662..3666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 46,
        span: 3666..3667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 47,
        span: 3667..3668,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
        column: 0,
        span: 3669..3672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
        column: 7,
        span: 3674..3680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 8,
        span: 3680..3681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 153,
        column: 14,
        span: 3681..3687,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 153,
        column: 17,
        span: 3688..3690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 153,
        column: 24,
        span: 3691..3697,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 27,
        span: 3698..3700,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 29,
        span: 3700..3702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 30,
        span: 3702..3703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 7,
        span: 3704..3710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 8,
        span: 3710..3711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 154,
        column: 14,
        span: 3711..3717,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 154,
        column: 17,
        span: 3718..3720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 19,
        span: 3720..3722,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 22,
        span: 3723..3725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 154,
        column: 29,
        span: 3726..3732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 30,
        span: 3732..3733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
        column: 7,
        span: 3734..3740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 8,
        span: 3740..3741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 9,
        span: 3741..3742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 155,
        column: 15,
        span: 3742..3748,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 155,
        column: 17,
        span: 3749..3750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 19,
        span: 3750..3752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 20,
        span: 3752..3753,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 155,
        column: 23,
        span: 3754..3756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 155,
        column: 30,
        span: 3757..3763,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 155,
        column: 33,
        span: 3764..3766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 35,
        span: 3766..3768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 36,
        span: 3768..3769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
        column: 7,
        span: 3770..3776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 8,
        span: 3776..3777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 156,
        column: 14,
        span: 3777..3783,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 156,
        column: 17,
        span: 3784..3786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 19,
        span: 3787..3788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 156,
        column: 25,
        span: 3788..3794,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 156,
        column: 27,
        span: 3795..3796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 29,
        span: 3796..3798,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 30,
        span: 3798..3799,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 156,
        column: 33,
        span: 3800..3802,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 35,
        span: 3802..3804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 36,
        span: 3804..3805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 157,
        column: 7,
        span: 3806..3812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 8,
        span: 3812..3813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 157,
        column: 14,
        span: 3813..3819,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 157,
        column: 17,
        span: 3820..3822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 157,
        column: 24,
        span: 3823..3829,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 157,
        column: 27,
        span: 3830..3832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 29,
        span: 3832..3834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 30,
        span: 3834..3835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 158,
        column: 7,
        span: 3836..3842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 8,
        span: 3842..3843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 158,
        column: 14,
        span: 3843..3849,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 158,
        column: 17,
        span: 3850..3852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 158,
        column: 24,
        span: 3853..3859,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 158,
        column: 27,
        span: 3860..3862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 29,
        span: 3862..3864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 30,
        span: 3864..3865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
        column: 7,
        span: 3866..3872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 8,
        span: 3872..3873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 9,
        span: 3873..3874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 159,
        column: 15,
        span: 3874..3880,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 159,
        column: 17,
        span: 3881..3882,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 19,
        span: 3882..3884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 20,
        span: 3884..3885,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 159,
        column: 23,
        span: 3886..3888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 159,
        column: 30,
        span: 3889..3895,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
        column: 33,
        span: 3896..3898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 35,
        span: 3898..3900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 36,
        span: 3900..3901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 160,
        column: 7,
        span: 3902..3908,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 8,
        span: 3908..3909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 160,
        column: 14,
        span: 3909..3915,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 160,
        column: 17,
        span: 3916..3918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 19,
        span: 3919..3920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 160,
        column: 25,
        span: 3920..3926,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 160,
        column: 27,
        span: 3927..3928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 29,
        span: 3928..3930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 30,
        span: 3930..3931,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 160,
        column: 33,
        span: 3932..3934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 35,
        span: 3934..3936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 36,
        span: 3936..3937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
        column: 7,
        span: 3938..3944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 8,
        span: 3944..3945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 161,
        column: 14,
        span: 3945..3951,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 161,
        column: 17,
        span: 3952..3954,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 19,
        span: 3954..3956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
        column: 22,
        span: 3957..3959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 161,
        column: 29,
        span: 3960..3966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 30,
        span: 3966..3967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 163,
        column: 7,
        span: 3969..3975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 8,
        span: 3975..3976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 163,
        column: 14,
        span: 3976..3982,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 163,
        column: 17,
        span: 3983..3985,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 163,
        column: 19,
        span: 3986..3987,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 20,
        span: 3986..3988,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 23,
        span: 3989..3991,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 163,
        column: 25,
        span: 3992..3993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 163,
        column: 31,
        span: 3993..3999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 32,
        span: 3999..4000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 164,
        column: 7,
        span: 4001..4007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 8,
        span: 4007..4008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 164,
        column: 14,
        span: 4008..4014,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 164,
        column: 17,
        span: 4015..4017,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 164,
        column: 19,
        span: 4018..4019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 20,
        span: 4018..4020,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 164,
        column: 23,
        span: 4021..4023,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 25,
        span: 4023..4025,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 164,
        column: 27,
        span: 4026..4027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 29,
        span: 4028..4029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 164,
        column: 36,
        span: 4029..4036,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 164,
        column: 38,
        span: 4037..4038,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 40,
        span: 4038..4040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 41,
        span: 4040..4041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 42,
        span: 4041..4042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 165,
        column: 7,
        span: 4043..4049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 8,
        span: 4049..4050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 165,
        column: 14,
        span: 4050..4056,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 165,
        column: 17,
        span: 4057..4059,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
        column: 19,
        span: 4060..4061,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 20,
        span: 4060..4062,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 165,
        column: 23,
        span: 4063..4065,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
        column: 25,
        span: 4066..4067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 165,
        column: 31,
        span: 4067..4073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 32,
        span: 4073..4074,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 169,
        column: 0,
        span: 4099..4101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
        column: 9,
        span: 4104..4110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 10,
        span: 4110..4111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 11,
        span: 4110..4112,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 170,
        column: 13,
        span: 4113..4114,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 170,
        column: 15,
        span: 4115..4116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 16,
        span: 4115..4117,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
        column: 19,
        span: 4118..4120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 21,
        span: 4120..4122,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 170,
        column: 23,
        span: 4123..4124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 25,
        span: 4124..4126,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 170,
        column: 27,
        span: 4127..4128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 29,
        span: 4128..4130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 30,
        span: 4130..4131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 9,
        span: 4134..4140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 10,
        span: 4140..4141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 171,
        column: 12,
        span: 4141..4143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 13,
        span: 4143..4144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 14,
        span: 4144..4145,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 171,
        column: 15,
        span: 4145..4146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 16,
        span: 4145..4147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 17,
        span: 4147..4148,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 171,
        column: 19,
        span: 4149..4150,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 171,
        column: 21,
        span: 4151..4152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 22,
        span: 4151..4153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 23,
        span: 4153..4154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 25,
        span: 4154..4156,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 171,
        column: 27,
        span: 4157..4158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 29,
        span: 4159..4160,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 171,
        column: 30,
        span: 4160..4161,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 31,
        span: 4160..4162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 32,
        span: 4162..4163,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 171,
        column: 34,
        span: 4164..4165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 36,
        span: 4165..4167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 37,
        span: 4167..4168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 38,
        span: 4168..4169,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 172,
        column: 6,
        span: 4172..4175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 172,
        column: 8,
        span: 4176..4177,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 172,
        column: 10,
        span: 4178..4179,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 172,
        column: 12,
        span: 4180..4181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 13,
        span: 4180..4182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 14,
        span: 4182..4183,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 16,
        span: 4183..4185,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 172,
        column: 19,
        span: 4186..4188,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 173,
        column: 8,
        span: 4229..4232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 173,
        column: 10,
        span: 4233..4234,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 12,
        span: 4235..4236,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 173,
        column: 14,
        span: 4237..4238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 15,
        span: 4237..4239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 16,
        span: 4239..4240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 18,
        span: 4240..4242,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 173,
        column: 0,
        span: 4243..4245,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 175,
        column: 9,
        span: 4301..4303,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 175,
        column: 13,
        span: 4304..4307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 175,
        column: 19,
        span: 4308..4313,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 175,
        column: 22,
        span: 4314..4316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 175,
        column: 24,
        span: 4317..4318,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 175,
        column: 27,
        span: 4319..4321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 29,
        span: 4321..4323,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 175,
        column: 32,
        span: 4324..4326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 175,
        column: 34,
        span: 4327..4328,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 175,
        column: 36,
        span: 4329..4330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 38,
        span: 4330..4332,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 175,
        column: 0,
        span: 4333..4337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
        column: 15,
        span: 4346..4352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 16,
        span: 4352..4353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 176,
        column: 18,
        span: 4353..4355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 19,
        span: 4355..4356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 176,
        column: 20,
        span: 4356..4357,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 176,
        column: 22,
        span: 4358..4359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 176,
        column: 24,
        span: 4360..4361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 25,
        span: 4361..4362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 27,
        span: 4362..4364,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 176,
        column: 29,
        span: 4365..4366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 176,
        column: 31,
        span: 4367..4368,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 176,
        column: 33,
        span: 4369..4370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 35,
        span: 4371..4372,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 176,
        column: 36,
        span: 4372..4373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 176,
        column: 37,
        span: 4373..4374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 38,
        span: 4374..4375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 39,
        span: 4375..4376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 40,
        span: 4376..4377,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 177,
        column: 0,
        span: 4384..4387,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 178,
        column: 0,
        span: 4392..4395,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 179,
        column: 0,
        span: 4398..4401,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
        column: 0,
        span: 4402..4405,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 183,
        column: 3,
        span: 4464..4466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 183,
        column: 13,
        span: 4467..4476,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 183,
        column: 15,
        span: 4477..4478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 183,
        column: 23,
        span: 4479..4486,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 183,
        column: 0,
        span: 4487..4491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 184,
        column: 9,
        span: 4494..4500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 10,
        span: 4500..4501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 184,
        column: 13,
        span: 4500..4504,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 184,
        column: 15,
        span: 4505..4506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 184,
        column: 25,
        span: 4507..4516,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 184,
        column: 28,
        span: 4517..4519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 30,
        span: 4520..4521,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 31,
        span: 4520..4522,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 184,
        column: 34,
        span: 4523..4525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 184,
        column: 44,
        span: 4526..4535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 45,
        span: 4535..4536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 46,
        span: 4536..4537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 9,
        span: 4540..4546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 10,
        span: 4546..4547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 185,
        column: 13,
        span: 4546..4550,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 185,
        column: 15,
        span: 4551..4552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 185,
        column: 25,
        span: 4553..4562,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 185,
        column: 27,
        span: 4563..4564,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 185,
        column: 31,
        span: 4564..4568,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 185,
        column: 34,
        span: 4569..4571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 36,
        span: 4572..4573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 37,
        span: 4572..4574,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 185,
        column: 40,
        span: 4575..4577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 185,
        column: 50,
        span: 4578..4587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 51,
        span: 4587..4588,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 185,
        column: 53,
        span: 4589..4590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 185,
        column: 57,
        span: 4590..4594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 58,
        span: 4594..4595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 9,
        span: 4598..4604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 10,
        span: 4604..4605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 186,
        column: 13,
        span: 4604..4608,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 186,
        column: 15,
        span: 4609..4610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 186,
        column: 25,
        span: 4611..4620,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 186,
        column: 27,
        span: 4621..4622,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 186,
        column: 31,
        span: 4622..4626,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 186,
        column: 34,
        span: 4627..4629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 36,
        span: 4630..4631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 37,
        span: 4630..4632,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 186,
        column: 40,
        span: 4633..4635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 186,
        column: 50,
        span: 4636..4645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 51,
        span: 4645..4646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 52,
        span: 4646..4647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 188,
        column: 9,
        span: 4684..4690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 10,
        span: 4690..4691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 188,
        column: 13,
        span: 4690..4694,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 188,
        column: 15,
        span: 4695..4696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 188,
        column: 25,
        span: 4697..4706,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 188,
        column: 27,
        span: 4707..4708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 188,
        column: 31,
        span: 4708..4712,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 188,
        column: 34,
        span: 4713..4715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 36,
        span: 4716..4717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 37,
        span: 4716..4718,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 188,
        column: 40,
        span: 4719..4721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 188,
        column: 50,
        span: 4722..4731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 51,
        span: 4731..4732,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 188,
        column: 53,
        span: 4733..4734,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 55,
        span: 4734..4736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 56,
        span: 4736..4737,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 189,
        column: 5,
        span: 4738..4742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 9,
        span: 4799..4805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 10,
        span: 4805..4806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 190,
        column: 16,
        span: 4806..4812,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 19,
        span: 4813..4815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 190,
        column: 26,
        span: 4816..4822,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 190,
        column: 28,
        span: 4823..4824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 190,
        column: 32,
        span: 4824..4828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 33,
        span: 4828..4829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 9,
        span: 4832..4838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 10,
        span: 4838..4839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 191,
        column: 16,
        span: 4839..4845,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 191,
        column: 18,
        span: 4846..4847,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 20,
        span: 4847..4849,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 23,
        span: 4850..4852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 191,
        column: 30,
        span: 4853..4859,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 191,
        column: 32,
        span: 4860..4861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 191,
        column: 36,
        span: 4861..4865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 37,
        span: 4865..4866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 9,
        span: 4869..4875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 10,
        span: 4875..4876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 192,
        column: 16,
        span: 4876..4882,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 192,
        column: 18,
        span: 4883..4884,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 20,
        span: 4884..4886,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 192,
        column: 23,
        span: 4887..4889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 192,
        column: 30,
        span: 4890..4896,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 192,
        column: 32,
        span: 4897..4898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 192,
        column: 36,
        span: 4898..4902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 37,
        span: 4902..4903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 9,
        span: 4906..4912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 10,
        span: 4912..4913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 193,
        column: 16,
        span: 4913..4919,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 193,
        column: 19,
        span: 4920..4922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 193,
        column: 26,
        span: 4923..4929,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 193,
        column: 28,
        span: 4930..4931,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 193,
        column: 32,
        span: 4931..4935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 33,
        span: 4935..4936,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 194,
        column: 0,
        span: 4937..4940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 7,
        span: 4941..4947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 8,
        span: 4947..4948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 195,
        column: 14,
        span: 4948..4954,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 195,
        column: 16,
        span: 4955..4956,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 195,
        column: 20,
        span: 4956..4960,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 195,
        column: 23,
        span: 4961..4963,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 195,
        column: 27,
        span: 4963..4967,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 195,
        column: 29,
        span: 4968..4969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 31,
        span: 4970..4971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 195,
        column: 38,
        span: 4971..4978,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
        column: 40,
        span: 4979..4980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 42,
        span: 4980..4982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 43,
        span: 4982..4983,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
        column: 45,
        span: 4984..4985,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 195,
        column: 49,
        span: 4985..4989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 50,
        span: 4989..4990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 7,
        span: 4991..4997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 8,
        span: 4997..4998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 196,
        column: 14,
        span: 4998..5004,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 196,
        column: 16,
        span: 5005..5006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 196,
        column: 20,
        span: 5006..5010,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 23,
        span: 5011..5013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 196,
        column: 30,
        span: 5014..5020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 31,
        span: 5020..5021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 197,
        column: 7,
        span: 5022..5028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 8,
        span: 5028..5029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 197,
        column: 14,
        span: 5029..5035,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 197,
        column: 16,
        span: 5036..5037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 197,
        column: 20,
        span: 5037..5041,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 197,
        column: 23,
        span: 5042..5044,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 197,
        column: 25,
        span: 5045..5046,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 197,
        column: 28,
        span: 5045..5049,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 197,
        column: 30,
        span: 5050..5051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 32,
        span: 5052..5053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 197,
        column: 39,
        span: 5053..5060,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 197,
        column: 41,
        span: 5061..5062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 43,
        span: 5062..5064,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 44,
        span: 5064..5065,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 45,
        span: 5065..5066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
        column: 7,
        span: 5106..5112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 8,
        span: 5112..5113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
        column: 9,
        span: 5112..5114,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 201,
        column: 11,
        span: 5115..5116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 201,
        column: 15,
        span: 5116..5120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 16,
        span: 5120..5121,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 201,
        column: 17,
        span: 5121..5122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
        column: 24,
        span: 5123..5129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 25,
        span: 5129..5130,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 201,
        column: 28,
        span: 5130..5133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 30,
        span: 5134..5135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
        column: 31,
        span: 5134..5136,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 201,
        column: 33,
        span: 5137..5138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 201,
        column: 37,
        span: 5138..5142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 38,
        span: 5142..5143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 39,
        span: 5143..5144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 7,
        span: 5145..5151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 8,
        span: 5151..5152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
        column: 9,
        span: 5151..5153,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 202,
        column: 12,
        span: 5154..5156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 202,
        column: 16,
        span: 5156..5160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 17,
        span: 5160..5161,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 202,
        column: 18,
        span: 5161..5162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 25,
        span: 5163..5169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 26,
        span: 5169..5170,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 202,
        column: 29,
        span: 5170..5173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 31,
        span: 5174..5175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
        column: 32,
        span: 5174..5176,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 202,
        column: 35,
        span: 5177..5179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 202,
        column: 39,
        span: 5179..5183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 40,
        span: 5183..5184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 41,
        span: 5184..5185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 7,
        span: 5186..5192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 8,
        span: 5192..5193,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 203,
        column: 9,
        span: 5193..5194,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 10,
        span: 5193..5195,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 203,
        column: 12,
        span: 5196..5197,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 203,
        column: 14,
        span: 5198..5199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 203,
        column: 17,
        span: 5198..5202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 18,
        span: 5202..5203,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 203,
        column: 19,
        span: 5203..5204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 26,
        span: 5205..5211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 27,
        span: 5211..5212,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 203,
        column: 30,
        span: 5212..5215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 32,
        span: 5216..5217,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 203,
        column: 33,
        span: 5217..5218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 34,
        span: 5217..5219,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 203,
        column: 36,
        span: 5220..5221,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 203,
        column: 38,
        span: 5222..5223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 203,
        column: 41,
        span: 5222..5226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 42,
        span: 5226..5227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 43,
        span: 5227..5228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 7,
        span: 5229..5235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 8,
        span: 5235..5236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 9,
        span: 5235..5237,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 204,
        column: 12,
        span: 5238..5240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 204,
        column: 16,
        span: 5240..5244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 17,
        span: 5244..5245,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 204,
        column: 18,
        span: 5245..5246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 25,
        span: 5247..5253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 26,
        span: 5253..5254,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 204,
        column: 29,
        span: 5254..5257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 31,
        span: 5258..5259,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 204,
        column: 32,
        span: 5259..5260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 33,
        span: 5259..5261,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 204,
        column: 36,
        span: 5262..5264,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 204,
        column: 38,
        span: 5265..5266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 204,
        column: 41,
        span: 5265..5269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 42,
        span: 5269..5270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 43,
        span: 5270..5271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 7,
        span: 5272..5278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 8,
        span: 5278..5279,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 205,
        column: 9,
        span: 5279..5280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 10,
        span: 5279..5281,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 205,
        column: 12,
        span: 5282..5283,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 205,
        column: 14,
        span: 5284..5285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 205,
        column: 17,
        span: 5284..5288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 18,
        span: 5288..5289,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 205,
        column: 19,
        span: 5289..5290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 26,
        span: 5291..5297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 27,
        span: 5297..5298,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 205,
        column: 30,
        span: 5298..5301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 32,
        span: 5302..5303,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 205,
        column: 33,
        span: 5303..5304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 34,
        span: 5303..5305,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 205,
        column: 36,
        span: 5306..5307,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 205,
        column: 38,
        span: 5308..5309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 205,
        column: 41,
        span: 5308..5312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 42,
        span: 5312..5313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 43,
        span: 5313..5314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
        column: 7,
        span: 5315..5321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 8,
        span: 5321..5322,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
        column: 9,
        span: 5322..5323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
        column: 10,
        span: 5322..5324,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 206,
        column: 13,
        span: 5325..5327,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
        column: 15,
        span: 5328..5329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 206,
        column: 18,
        span: 5328..5332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 19,
        span: 5332..5333,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 206,
        column: 20,
        span: 5333..5334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
        column: 27,
        span: 5335..5341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 28,
        span: 5341..5342,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 206,
        column: 31,
        span: 5342..5345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 33,
        span: 5346..5347,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
        column: 34,
        span: 5347..5348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
        column: 35,
        span: 5347..5349,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 206,
        column: 38,
        span: 5350..5352,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
        column: 40,
        span: 5353..5354,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 206,
        column: 43,
        span: 5353..5357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 44,
        span: 5357..5358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 45,
        span: 5358..5359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 207,
        column: 7,
        span: 5360..5366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 8,
        span: 5366..5367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 207,
        column: 14,
        span: 5367..5373,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 207,
        column: 17,
        span: 5374..5376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 207,
        column: 24,
        span: 5377..5383,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 207,
        column: 26,
        span: 5384..5385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 207,
        column: 30,
        span: 5385..5389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 31,
        span: 5389..5390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 7,
        span: 5391..5397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 8,
        span: 5397..5398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 208,
        column: 14,
        span: 5398..5404,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 208,
        column: 16,
        span: 5405..5406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 208,
        column: 20,
        span: 5406..5410,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 208,
        column: 23,
        span: 5411..5413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 208,
        column: 30,
        span: 5414..5420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 31,
        span: 5420..5421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 209,
        column: 7,
        span: 5422..5428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 8,
        span: 5428..5429,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 209,
        column: 11,
        span: 5429..5432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 13,
        span: 5433..5434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 209,
        column: 19,
        span: 5434..5440,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 209,
        column: 21,
        span: 5441..5442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 209,
        column: 28,
        span: 5443..5449,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 209,
        column: 30,
        span: 5450..5451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 209,
        column: 34,
        span: 5451..5455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 35,
        span: 5455..5456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 36,
        span: 5456..5457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 210,
        column: 7,
        span: 5458..5464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 8,
        span: 5464..5465,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 210,
        column: 11,
        span: 5465..5468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 13,
        span: 5469..5470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 210,
        column: 19,
        span: 5470..5476,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 210,
        column: 21,
        span: 5477..5478,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 210,
        column: 25,
        span: 5478..5482,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 210,
        column: 27,
        span: 5483..5484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 210,
        column: 34,
        span: 5485..5491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 35,
        span: 5491..5492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 36,
        span: 5492..5493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
        column: 7,
        span: 5494..5500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 8,
        span: 5500..5501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 211,
        column: 14,
        span: 5501..5507,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 211,
        column: 16,
        span: 5508..5509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 211,
        column: 23,
        span: 5510..5516,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 211,
        column: 25,
        span: 5517..5518,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 211,
        column: 27,
        span: 5519..5520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 211,
        column: 30,
        span: 5519..5523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 31,
        span: 5523..5524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
        column: 7,
        span: 5525..5531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 8,
        span: 5531..5532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 212,
        column: 14,
        span: 5532..5538,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 212,
        column: 17,
        span: 5539..5541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 212,
        column: 24,
        span: 5542..5548,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 212,
        column: 26,
        span: 5549..5550,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 212,
        column: 28,
        span: 5551..5552,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 212,
        column: 31,
        span: 5551..5555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 32,
        span: 5555..5556,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 214,
        column: 0,
        span: 5558..5560,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 215,
        column: 8,
        span: 5563..5568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 215,
        column: 15,
        span: 5569..5575,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 215,
        column: 17,
        span: 5576..5577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 19,
        span: 5577..5579,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 215,
        column: 21,
        span: 5580..5581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 23,
        span: 5582..5583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 215,
        column: 30,
        span: 5583..5590,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 215,
        column: 32,
        span: 5591..5592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 34,
        span: 5592..5594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 35,
        span: 5594..5595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 216,
        column: 9,
        span: 5598..5604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 10,
        span: 5604..5605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 216,
        column: 16,
        span: 5605..5611,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 216,
        column: 18,
        span: 5612..5613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 216,
        column: 25,
        span: 5614..5620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 26,
        span: 5620..5621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
        column: 9,
        span: 5624..5630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 10,
        span: 5630..5631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 217,
        column: 16,
        span: 5631..5637,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 217,
        column: 19,
        span: 5638..5640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 217,
        column: 26,
        span: 5641..5647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 27,
        span: 5647..5648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
        column: 9,
        span: 5651..5657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 10,
        span: 5657..5658,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 218,
        column: 13,
        span: 5658..5661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 15,
        span: 5662..5663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 218,
        column: 21,
        span: 5663..5669,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 218,
        column: 24,
        span: 5670..5672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 218,
        column: 31,
        span: 5673..5679,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 32,
        span: 5679..5680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 33,
        span: 5680..5681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 219,
        column: 9,
        span: 5684..5690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 10,
        span: 5690..5691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 219,
        column: 16,
        span: 5691..5697,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 219,
        column: 19,
        span: 5698..5700,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 219,
        column: 21,
        span: 5701..5702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
        column: 22,
        span: 5701..5703,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 219,
        column: 24,
        span: 5704..5705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 26,
        span: 5706..5707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 219,
        column: 33,
        span: 5707..5714,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 219,
        column: 35,
        span: 5715..5716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
        column: 37,
        span: 5716..5718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 38,
        span: 5718..5719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 39,
        span: 5719..5720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 220,
        column: 9,
        span: 5723..5729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 10,
        span: 5729..5730,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 220,
        column: 11,
        span: 5730..5731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
        column: 12,
        span: 5730..5732,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 220,
        column: 14,
        span: 5733..5734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 16,
        span: 5735..5736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 220,
        column: 23,
        span: 5736..5743,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 220,
        column: 25,
        span: 5744..5745,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
        column: 27,
        span: 5745..5747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 28,
        span: 5747..5748,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 220,
        column: 31,
        span: 5749..5751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 220,
        column: 38,
        span: 5752..5758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 39,
        span: 5758..5759,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 221,
        column: 0,
        span: 5760..5763,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 223,
        column: 3,
        span: 5765..5767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 223,
        column: 13,
        span: 5768..5777,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 223,
        column: 15,
        span: 5778..5779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 223,
        column: 23,
        span: 5780..5787,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 223,
        column: 0,
        span: 5788..5792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 224,
        column: 8,
        span: 5795..5800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 9,
        span: 5800..5801,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing order (floats cannot represent all integers)\"",
        ),
        line: 224,
        column: 63,
        span: 5801..5855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 64,
        span: 5855..5856,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 225,
        column: 8,
        span: 5859..5864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 225,
        column: 13,
        span: 5865..5869,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 225,
        column: 15,
        span: 5870..5871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 17,
        span: 5871..5873,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 225,
        column: 19,
        span: 5874..5875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 225,
        column: 0,
        span: 5876..5885,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 226,
        column: 8,
        span: 5888..5893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 226,
        column: 14,
        span: 5894..5899,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 16,
        span: 5900..5901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 226,
        column: 21,
        span: 5902..5906,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 226,
        column: 23,
        span: 5907..5908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 0,
        span: 5908..5910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
        column: 9,
        span: 5913..5919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 10,
        span: 5919..5920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 227,
        column: 14,
        span: 5920..5924,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 227,
        column: 16,
        span: 5925..5926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 227,
        column: 22,
        span: 5927..5932,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 227,
        column: 24,
        span: 5933..5934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 26,
        span: 5934..5936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 27,
        span: 5936..5937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
        column: 9,
        span: 5940..5946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 10,
        span: 5946..5947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 228,
        column: 14,
        span: 5947..5951,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 228,
        column: 16,
        span: 5952..5953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 18,
        span: 5953..5955,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 228,
        column: 20,
        span: 5956..5957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 228,
        column: 26,
        span: 5958..5963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 27,
        span: 5963..5964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 229,
        column: 9,
        span: 5967..5973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 10,
        span: 5973..5974,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 229,
        column: 11,
        span: 5974..5975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 12,
        span: 5975..5976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 229,
        column: 16,
        span: 5976..5980,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 229,
        column: 18,
        span: 5981..5982,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
        column: 20,
        span: 5982..5984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 21,
        span: 5984..5985,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 229,
        column: 23,
        span: 5986..5987,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 229,
        column: 25,
        span: 5988..5989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 229,
        column: 30,
        span: 5989..5994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 31,
        span: 5994..5995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 230,
        column: 9,
        span: 5998..6004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 10,
        span: 6004..6005,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 230,
        column: 13,
        span: 6005..6008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 15,
        span: 6009..6010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 230,
        column: 19,
        span: 6010..6014,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 230,
        column: 22,
        span: 6015..6017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 230,
        column: 28,
        span: 6018..6023,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 230,
        column: 30,
        span: 6024..6025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 32,
        span: 6025..6027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 33,
        span: 6027..6028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 34,
        span: 6028..6029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 9,
        span: 6032..6038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 10,
        span: 6038..6039,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 231,
        column: 11,
        span: 6039..6040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 231,
        column: 15,
        span: 6040..6044,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 231,
        column: 17,
        span: 6045..6046,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 231,
        column: 19,
        span: 6047..6048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 20,
        span: 6048..6049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 231,
        column: 25,
        span: 6049..6054,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
        column: 27,
        span: 6055..6056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 29,
        span: 6056..6058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 30,
        span: 6058..6059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 31,
        span: 6059..6060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 232,
        column: 9,
        span: 6063..6069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 10,
        span: 6069..6070,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 232,
        column: 13,
        span: 6070..6073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 15,
        span: 6074..6075,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 232,
        column: 16,
        span: 6075..6076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 232,
        column: 20,
        span: 6076..6080,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 232,
        column: 23,
        span: 6081..6083,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 232,
        column: 25,
        span: 6084..6085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 26,
        span: 6085..6086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 232,
        column: 31,
        span: 6086..6091,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 232,
        column: 33,
        span: 6092..6093,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
        column: 35,
        span: 6093..6095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 36,
        span: 6095..6096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 37,
        span: 6096..6097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 38,
        span: 6097..6098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 9,
        span: 6102..6108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 10,
        span: 6108..6109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 234,
        column: 14,
        span: 6109..6113,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 234,
        column: 16,
        span: 6114..6115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 18,
        span: 6115..6117,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 234,
        column: 20,
        span: 6118..6119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 234,
        column: 24,
        span: 6119..6123,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 234,
        column: 26,
        span: 6124..6125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 234,
        column: 32,
        span: 6126..6131,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 234,
        column: 35,
        span: 6132..6134,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 37,
        span: 6134..6136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 38,
        span: 6136..6137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 9,
        span: 6140..6146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 10,
        span: 6146..6147,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 235,
        column: 11,
        span: 6147..6148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 12,
        span: 6148..6149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 235,
        column: 16,
        span: 6149..6153,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 235,
        column: 18,
        span: 6154..6155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 235,
        column: 20,
        span: 6155..6157,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 235,
        column: 22,
        span: 6158..6159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 235,
        column: 26,
        span: 6159..6163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 27,
        span: 6163..6164,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 235,
        column: 29,
        span: 6165..6166,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 235,
        column: 31,
        span: 6167..6168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 235,
        column: 36,
        span: 6168..6173,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 235,
        column: 39,
        span: 6174..6176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 235,
        column: 41,
        span: 6176..6178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 42,
        span: 6178..6179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 9,
        span: 6183..6189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 10,
        span: 6189..6190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 237,
        column: 16,
        span: 6190..6196,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 237,
        column: 18,
        span: 6197..6198,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
        column: 20,
        span: 6198..6200,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 237,
        column: 22,
        span: 6201..6202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 237,
        column: 30,
        span: 6203..6210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 31,
        span: 6210..6211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
        column: 9,
        span: 6214..6220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 10,
        span: 6220..6221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 238,
        column: 16,
        span: 6221..6227,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 238,
        column: 18,
        span: 6228..6229,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 238,
        column: 20,
        span: 6230..6231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 21,
        span: 6230..6232,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 238,
        column: 23,
        span: 6233..6234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 238,
        column: 31,
        span: 6235..6242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 32,
        span: 6242..6243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 9,
        span: 6246..6252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 10,
        span: 6252..6253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 239,
        column: 16,
        span: 6253..6259,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 239,
        column: 19,
        span: 6260..6262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 21,
        span: 6262..6264,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 239,
        column: 23,
        span: 6265..6266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 239,
        column: 31,
        span: 6267..6274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 32,
        span: 6274..6275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 9,
        span: 6278..6284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 10,
        span: 6284..6285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 240,
        column: 16,
        span: 6285..6291,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 240,
        column: 19,
        span: 6292..6294,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 240,
        column: 21,
        span: 6295..6296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 22,
        span: 6295..6297,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 240,
        column: 24,
        span: 6298..6299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 240,
        column: 32,
        span: 6300..6307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 33,
        span: 6307..6308,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 241,
        column: 0,
        span: 6309..6313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 242,
        column: 8,
        span: 6316..6321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 9,
        span: 6321..6322,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing order (floats can represent all integers)\"",
        ),
        line: 242,
        column: 60,
        span: 6322..6373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 61,
        span: 6373..6374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
        column: 9,
        span: 6377..6383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 10,
        span: 6383..6384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 243,
        column: 16,
        span: 6384..6390,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 243,
        column: 18,
        span: 6391..6392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 243,
        column: 25,
        span: 6393..6399,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 243,
        column: 27,
        span: 6400..6401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 243,
        column: 31,
        span: 6401..6405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 32,
        span: 6405..6406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 244,
        column: 9,
        span: 6409..6415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 10,
        span: 6415..6416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 244,
        column: 16,
        span: 6416..6422,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 244,
        column: 18,
        span: 6423..6424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 244,
        column: 25,
        span: 6425..6431,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 244,
        column: 27,
        span: 6432..6433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 244,
        column: 31,
        span: 6433..6437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 32,
        span: 6437..6438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 245,
        column: 9,
        span: 6441..6447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 10,
        span: 6447..6448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 245,
        column: 16,
        span: 6448..6454,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 245,
        column: 18,
        span: 6455..6456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 245,
        column: 22,
        span: 6456..6460,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 245,
        column: 24,
        span: 6461..6462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 245,
        column: 31,
        span: 6463..6469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 32,
        span: 6469..6470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
        column: 9,
        span: 6473..6479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 10,
        span: 6479..6480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 246,
        column: 16,
        span: 6480..6486,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 246,
        column: 18,
        span: 6487..6488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 246,
        column: 22,
        span: 6488..6492,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 246,
        column: 24,
        span: 6493..6494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 246,
        column: 31,
        span: 6495..6501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 32,
        span: 6501..6502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 9,
        span: 6505..6511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 10,
        span: 6511..6512,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 247,
        column: 13,
        span: 6512..6515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 15,
        span: 6516..6517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 247,
        column: 21,
        span: 6517..6523,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 23,
        span: 6524..6525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 247,
        column: 27,
        span: 6525..6529,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 247,
        column: 29,
        span: 6530..6531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 247,
        column: 36,
        span: 6532..6538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 37,
        span: 6538..6539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 38,
        span: 6539..6540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
        column: 9,
        span: 6543..6549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 10,
        span: 6549..6550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 248,
        column: 16,
        span: 6550..6556,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 248,
        column: 18,
        span: 6557..6558,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 248,
        column: 22,
        span: 6558..6562,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 248,
        column: 25,
        span: 6563..6565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 248,
        column: 32,
        span: 6566..6572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 33,
        span: 6572..6573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 249,
        column: 9,
        span: 6576..6582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 10,
        span: 6582..6583,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 249,
        column: 13,
        span: 6583..6586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 15,
        span: 6587..6588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 249,
        column: 21,
        span: 6588..6594,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 249,
        column: 23,
        span: 6595..6596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 249,
        column: 30,
        span: 6597..6603,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 249,
        column: 32,
        span: 6604..6605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 249,
        column: 36,
        span: 6605..6609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 37,
        span: 6609..6610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 38,
        span: 6610..6611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 9,
        span: 6614..6620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 10,
        span: 6620..6621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 250,
        column: 16,
        span: 6621..6627,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 250,
        column: 18,
        span: 6628..6629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 250,
        column: 22,
        span: 6629..6633,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 250,
        column: 25,
        span: 6634..6636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 250,
        column: 32,
        span: 6637..6643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 33,
        span: 6643..6644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 251,
        column: 9,
        span: 6647..6653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 10,
        span: 6653..6654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 251,
        column: 16,
        span: 6654..6660,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 251,
        column: 19,
        span: 6661..6663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 251,
        column: 26,
        span: 6664..6670,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 251,
        column: 28,
        span: 6671..6672,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 251,
        column: 32,
        span: 6672..6676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 33,
        span: 6676..6677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 252,
        column: 9,
        span: 6680..6686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 10,
        span: 6686..6687,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 252,
        column: 13,
        span: 6687..6690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 15,
        span: 6691..6692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 252,
        column: 21,
        span: 6692..6698,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 252,
        column: 23,
        span: 6699..6700,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 252,
        column: 27,
        span: 6700..6704,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 252,
        column: 30,
        span: 6705..6707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 252,
        column: 37,
        span: 6708..6714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 38,
        span: 6714..6715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 39,
        span: 6715..6716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 9,
        span: 6719..6725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 10,
        span: 6725..6726,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 253,
        column: 13,
        span: 6726..6729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 15,
        span: 6730..6731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 253,
        column: 21,
        span: 6731..6737,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 253,
        column: 23,
        span: 6738..6739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 253,
        column: 27,
        span: 6739..6743,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 253,
        column: 30,
        span: 6744..6746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 253,
        column: 37,
        span: 6747..6753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 38,
        span: 6753..6754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 39,
        span: 6754..6755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 9,
        span: 6758..6764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 10,
        span: 6764..6765,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 254,
        column: 13,
        span: 6765..6768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 15,
        span: 6769..6770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 254,
        column: 21,
        span: 6770..6776,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 254,
        column: 24,
        span: 6777..6779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 254,
        column: 31,
        span: 6780..6786,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 254,
        column: 33,
        span: 6787..6788,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 254,
        column: 37,
        span: 6788..6792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 38,
        span: 6792..6793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 39,
        span: 6793..6794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
        column: 9,
        span: 6797..6803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 10,
        span: 6803..6804,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 255,
        column: 13,
        span: 6804..6807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 15,
        span: 6808..6809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 255,
        column: 21,
        span: 6809..6815,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 255,
        column: 24,
        span: 6816..6818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 255,
        column: 31,
        span: 6819..6825,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 255,
        column: 33,
        span: 6826..6827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 255,
        column: 37,
        span: 6827..6831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 38,
        span: 6831..6832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 39,
        span: 6832..6833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 9,
        span: 6837..6843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 10,
        span: 6843..6844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 257,
        column: 16,
        span: 6844..6850,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 257,
        column: 18,
        span: 6851..6852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 257,
        column: 25,
        span: 6853..6859,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 257,
        column: 27,
        span: 6860..6861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 257,
        column: 31,
        span: 6861..6865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 32,
        span: 6865..6866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 9,
        span: 6869..6875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 10,
        span: 6875..6876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 258,
        column: 16,
        span: 6876..6882,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 258,
        column: 18,
        span: 6883..6884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 258,
        column: 25,
        span: 6885..6891,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 258,
        column: 27,
        span: 6892..6893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 258,
        column: 31,
        span: 6893..6897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 32,
        span: 6897..6898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 9,
        span: 6901..6907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 10,
        span: 6907..6908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 259,
        column: 16,
        span: 6908..6914,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 259,
        column: 19,
        span: 6915..6917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 259,
        column: 26,
        span: 6918..6924,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 259,
        column: 28,
        span: 6925..6926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 259,
        column: 32,
        span: 6926..6930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 33,
        span: 6930..6931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 260,
        column: 9,
        span: 6934..6940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 10,
        span: 6940..6941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 260,
        column: 16,
        span: 6941..6947,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 260,
        column: 18,
        span: 6948..6949,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 260,
        column: 22,
        span: 6949..6953,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 260,
        column: 24,
        span: 6954..6955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 260,
        column: 31,
        span: 6956..6962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 32,
        span: 6962..6963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 261,
        column: 9,
        span: 6966..6972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 10,
        span: 6972..6973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 261,
        column: 16,
        span: 6973..6979,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 261,
        column: 18,
        span: 6980..6981,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 261,
        column: 22,
        span: 6981..6985,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 261,
        column: 25,
        span: 6986..6988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 261,
        column: 32,
        span: 6989..6995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 33,
        span: 6995..6996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 262,
        column: 9,
        span: 6999..7005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 10,
        span: 7005..7006,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 262,
        column: 13,
        span: 7006..7009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 15,
        span: 7010..7011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 262,
        column: 21,
        span: 7011..7017,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 262,
        column: 23,
        span: 7018..7019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 262,
        column: 27,
        span: 7019..7023,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 262,
        column: 29,
        span: 7024..7025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 262,
        column: 36,
        span: 7026..7032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 37,
        span: 7032..7033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 38,
        span: 7033..7034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
        column: 9,
        span: 7037..7043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 10,
        span: 7043..7044,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 263,
        column: 13,
        span: 7044..7047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 15,
        span: 7048..7049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 263,
        column: 21,
        span: 7049..7055,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 263,
        column: 23,
        span: 7056..7057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 263,
        column: 27,
        span: 7057..7061,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 263,
        column: 29,
        span: 7062..7063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 263,
        column: 36,
        span: 7064..7070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 37,
        span: 7070..7071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 38,
        span: 7071..7072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 264,
        column: 9,
        span: 7075..7081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 10,
        span: 7081..7082,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 264,
        column: 13,
        span: 7082..7085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 15,
        span: 7086..7087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 264,
        column: 21,
        span: 7087..7093,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 264,
        column: 23,
        span: 7094..7095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 264,
        column: 30,
        span: 7096..7102,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 264,
        column: 32,
        span: 7103..7104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 264,
        column: 36,
        span: 7104..7108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 37,
        span: 7108..7109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 38,
        span: 7109..7110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 9,
        span: 7113..7119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 10,
        span: 7119..7120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 265,
        column: 16,
        span: 7120..7126,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 265,
        column: 18,
        span: 7127..7128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 265,
        column: 22,
        span: 7128..7132,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 265,
        column: 25,
        span: 7133..7135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 265,
        column: 32,
        span: 7136..7142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 33,
        span: 7142..7143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 266,
        column: 9,
        span: 7146..7152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 10,
        span: 7152..7153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 266,
        column: 16,
        span: 7153..7159,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 266,
        column: 19,
        span: 7160..7162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 266,
        column: 26,
        span: 7163..7169,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 266,
        column: 28,
        span: 7170..7171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 266,
        column: 32,
        span: 7171..7175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 33,
        span: 7175..7176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
        column: 9,
        span: 7179..7185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 10,
        span: 7185..7186,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 267,
        column: 13,
        span: 7186..7189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 15,
        span: 7190..7191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 267,
        column: 21,
        span: 7191..7197,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 267,
        column: 23,
        span: 7198..7199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 267,
        column: 27,
        span: 7199..7203,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 267,
        column: 30,
        span: 7204..7206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 267,
        column: 37,
        span: 7207..7213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 38,
        span: 7213..7214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 39,
        span: 7214..7215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
        column: 9,
        span: 7218..7224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 10,
        span: 7224..7225,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 268,
        column: 13,
        span: 7225..7228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 15,
        span: 7229..7230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 268,
        column: 21,
        span: 7230..7236,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 268,
        column: 23,
        span: 7237..7238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 268,
        column: 27,
        span: 7238..7242,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 268,
        column: 30,
        span: 7243..7245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 268,
        column: 37,
        span: 7246..7252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 38,
        span: 7252..7253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 39,
        span: 7253..7254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
        column: 9,
        span: 7257..7263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 10,
        span: 7263..7264,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 269,
        column: 13,
        span: 7264..7267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 15,
        span: 7268..7269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 269,
        column: 21,
        span: 7269..7275,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 269,
        column: 24,
        span: 7276..7278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 269,
        column: 31,
        span: 7279..7285,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 269,
        column: 33,
        span: 7286..7287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 269,
        column: 37,
        span: 7287..7291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 38,
        span: 7291..7292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 39,
        span: 7292..7293,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 270,
        column: 0,
        span: 7294..7297,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 272,
        column: 0,
        span: 7299..7301,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 273,
        column: 8,
        span: 7304..7309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 273,
        column: 12,
        span: 7310..7313,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 273,
        column: 14,
        span: 7314..7315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 273,
        column: 19,
        span: 7315..7320,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 273,
        column: 20,
        span: 7320..7321,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 273,
        column: 22,
        span: 7322..7323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 24,
        span: 7323..7325,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 273,
        column: 26,
        span: 7326..7327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 0,
        span: 7327..7329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 274,
        column: 9,
        span: 7332..7338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 10,
        span: 7338..7339,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 274,
        column: 13,
        span: 7339..7342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 15,
        span: 7343..7344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 274,
        column: 18,
        span: 7344..7347,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 274,
        column: 20,
        span: 7348..7349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 22,
        span: 7349..7351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 23,
        span: 7351..7352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 24,
        span: 7352..7353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
        column: 9,
        span: 7356..7362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 10,
        span: 7362..7363,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 275,
        column: 13,
        span: 7363..7366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 15,
        span: 7367..7368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 275,
        column: 18,
        span: 7368..7371,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 275,
        column: 20,
        span: 7372..7373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 275,
        column: 27,
        span: 7374..7380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 28,
        span: 7380..7381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 29,
        span: 7381..7382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 276,
        column: 9,
        span: 7385..7391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 10,
        span: 7391..7392,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 276,
        column: 13,
        span: 7392..7395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 15,
        span: 7396..7397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 276,
        column: 18,
        span: 7397..7400,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 276,
        column: 21,
        span: 7401..7403,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 276,
        column: 23,
        span: 7404..7405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 24,
        span: 7404..7406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 25,
        span: 7406..7407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 26,
        span: 7407..7408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 9,
        span: 7411..7417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 10,
        span: 7417..7418,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 277,
        column: 13,
        span: 7418..7421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 15,
        span: 7422..7423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 277,
        column: 18,
        span: 7423..7426,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 277,
        column: 21,
        span: 7427..7429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 277,
        column: 28,
        span: 7430..7436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 29,
        span: 7436..7437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 30,
        span: 7437..7438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
        column: 9,
        span: 7441..7447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 10,
        span: 7447..7448,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 278,
        column: 13,
        span: 7448..7451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 15,
        span: 7452..7453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 278,
        column: 18,
        span: 7453..7456,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 278,
        column: 20,
        span: 7457..7458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 278,
        column: 27,
        span: 7459..7465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 28,
        span: 7465..7466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 29,
        span: 7466..7467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
        column: 9,
        span: 7470..7476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 10,
        span: 7476..7477,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 279,
        column: 13,
        span: 7477..7480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 15,
        span: 7481..7482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 279,
        column: 21,
        span: 7482..7488,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 279,
        column: 24,
        span: 7489..7491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 279,
        column: 28,
        span: 7492..7495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 29,
        span: 7495..7496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 30,
        span: 7496..7497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
        column: 9,
        span: 7500..7506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 10,
        span: 7506..7507,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 280,
        column: 13,
        span: 7507..7510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 15,
        span: 7511..7512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 280,
        column: 21,
        span: 7512..7518,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 280,
        column: 23,
        span: 7519..7520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 280,
        column: 27,
        span: 7521..7524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 28,
        span: 7524..7525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 29,
        span: 7525..7526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 281,
        column: 9,
        span: 7529..7535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 10,
        span: 7535..7536,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 281,
        column: 13,
        span: 7536..7539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 15,
        span: 7540..7541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 16,
        span: 7540..7542,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 281,
        column: 19,
        span: 7543..7545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 281,
        column: 23,
        span: 7546..7549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 24,
        span: 7549..7550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 25,
        span: 7550..7551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 282,
        column: 9,
        span: 7554..7560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 10,
        span: 7560..7561,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 282,
        column: 13,
        span: 7561..7564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 15,
        span: 7565..7566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
        column: 16,
        span: 7565..7567,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 282,
        column: 18,
        span: 7568..7569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 282,
        column: 22,
        span: 7570..7573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 23,
        span: 7573..7574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 24,
        span: 7574..7575,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 283,
        column: 0,
        span: 7576..7579,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 287,
        column: 6,
        span: 7617..7622,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 287,
        column: 15,
        span: 7623..7631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 287,
        column: 26,
        span: 7632..7642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 27,
        span: 7642..7643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 287,
        column: 30,
        span: 7643..7646,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 31,
        span: 7646..7647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 287,
        column: 36,
        span: 7648..7652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 37,
        span: 7652..7653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 288,
        column: 13,
        span: 7656..7666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 14,
        span: 7666..7667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 288,
        column: 17,
        span: 7667..7670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 18,
        span: 7670..7671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 288,
        column: 25,
        span: 7672..7678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 26,
        span: 7678..7679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 288,
        column: 30,
        span: 7679..7683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 31,
        span: 7683..7684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 288,
        column: 35,
        span: 7684..7688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 36,
        span: 7688..7689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 37,
        span: 7689..7690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 38,
        span: 7690..7691,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 289,
        column: 0,
        span: 7692..7695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 290,
        column: 11,
        span: 7696..7706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 12,
        span: 7706..7707,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"divide by zero\"",
        ),
        line: 290,
        column: 28,
        span: 7707..7723,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 290,
        column: 29,
        span: 7723..7724,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2 // 0\"",
        ),
        line: 290,
        column: 45,
        span: 7725..7740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 46,
        span: 7740..7741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 291,
        column: 11,
        span: 7742..7752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 12,
        span: 7752..7753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 291,
        column: 18,
        span: 7753..7759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 19,
        span: 7759..7760,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2.3 >> 0\"",
        ),
        line: 291,
        column: 37,
        span: 7761..7778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 38,
        span: 7778..7779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 292,
        column: 11,
        span: 7780..7790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 12,
        span: 7790..7791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 292,
        column: 18,
        span: 7791..7797,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 19,
        span: 7797..7798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 21,
        span: 7799..7800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2.0^%d & 1\"",
        ),
        line: 292,
        column: 40,
        span: 7800..7819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 41,
        span: 7819..7820,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 292,
        column: 42,
        span: 7820..7821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 292,
        column: 48,
        span: 7821..7827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 49,
        span: 7827..7828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 292,
        column: 56,
        span: 7828..7835,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 292,
        column: 58,
        span: 7836..7837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 60,
        span: 7837..7839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 61,
        span: 7839..7840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 62,
        span: 7840..7841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 293,
        column: 11,
        span: 7842..7852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 12,
        span: 7852..7853,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'huge'\"",
        ),
        line: 293,
        column: 26,
        span: 7853..7867,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 27,
        span: 7867..7868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return math.huge << 1\"",
        ),
        line: 293,
        column: 51,
        span: 7869..7892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 52,
        span: 7892..7893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 294,
        column: 11,
        span: 7894..7904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 12,
        span: 7904..7905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 294,
        column: 18,
        span: 7905..7911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 19,
        span: 7911..7912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 21,
        span: 7913..7914,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 1 | 2.0^%d\"",
        ),
        line: 294,
        column: 40,
        span: 7914..7933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 41,
        span: 7933..7934,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 294,
        column: 42,
        span: 7934..7935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 294,
        column: 48,
        span: 7935..7941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 49,
        span: 7941..7942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 294,
        column: 56,
        span: 7942..7949,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 294,
        column: 58,
        span: 7950..7951,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
        column: 60,
        span: 7951..7953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 61,
        span: 7953..7954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 62,
        span: 7954..7955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 295,
        column: 11,
        span: 7956..7966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 12,
        span: 7966..7967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 295,
        column: 18,
        span: 7967..7973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 19,
        span: 7973..7974,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2.3 ~ 0.0\"",
        ),
        line: 295,
        column: 38,
        span: 7975..7993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 39,
        span: 7993..7994,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 299,
        column: 6,
        span: 8072..8077,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 299,
        column: 15,
        span: 8078..8086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 299,
        column: 19,
        span: 8087..8090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 20,
        span: 8090..8091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 299,
        column: 21,
        span: 8091..8092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 22,
        span: 8092..8093,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 299,
        column: 29,
        span: 8094..8100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 299,
        column: 31,
        span: 8101..8102,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 299,
        column: 33,
        span: 8103..8104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 299,
        column: 35,
        span: 8105..8106,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 299,
        column: 0,
        span: 8107..8110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 300,
        column: 11,
        span: 8111..8121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 12,
        span: 8121..8122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 300,
        column: 18,
        span: 8122..8128,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
        column: 19,
        span: 8128..8129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 300,
        column: 23,
        span: 8130..8133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
        column: 24,
        span: 8133..8134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 300,
        column: 29,
        span: 8135..8139,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 300,
        column: 30,
        span: 8139..8140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 300,
        column: 34,
        span: 8140..8144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 35,
        span: 8144..8145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 301,
        column: 11,
        span: 8155..8165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 12,
        span: 8165..8166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 301,
        column: 18,
        span: 8166..8172,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 19,
        span: 8172..8173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 301,
        column: 23,
        span: 8174..8177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 24,
        span: 8177..8178,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 301,
        column: 26,
        span: 8179..8180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 301,
        column: 30,
        span: 8180..8184,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 301,
        column: 31,
        span: 8184..8185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 301,
        column: 35,
        span: 8185..8189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 36,
        span: 8189..8190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 302,
        column: 11,
        span: 8199..8209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 12,
        span: 8209..8210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 302,
        column: 18,
        span: 8210..8216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 19,
        span: 8216..8217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 302,
        column: 23,
        span: 8218..8221,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 24,
        span: 8221..8222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 26,
        span: 8222..8224,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 302,
        column: 28,
        span: 8225..8226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 30,
        span: 8226..8228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 31,
        span: 8228..8229,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 304,
        column: 3,
        span: 8243..8245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 304,
        column: 13,
        span: 8246..8255,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 304,
        column: 15,
        span: 8256..8257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 304,
        column: 23,
        span: 8258..8265,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 304,
        column: 0,
        span: 8266..8270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 306,
        column: 9,
        span: 8336..8342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 10,
        span: 8342..8343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 306,
        column: 16,
        span: 8343..8349,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 306,
        column: 18,
        span: 8350..8351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 306,
        column: 22,
        span: 8351..8355,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 306,
        column: 25,
        span: 8356..8358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 306,
        column: 32,
        span: 8359..8365,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 306,
        column: 34,
        span: 8366..8367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 306,
        column: 38,
        span: 8367..8371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 39,
        span: 8371..8372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 307,
        column: 9,
        span: 8375..8381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 10,
        span: 8381..8382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 307,
        column: 16,
        span: 8382..8388,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 307,
        column: 18,
        span: 8389..8390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 307,
        column: 22,
        span: 8390..8394,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 307,
        column: 25,
        span: 8395..8397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 307,
        column: 32,
        span: 8398..8404,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 307,
        column: 34,
        span: 8405..8406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 307,
        column: 38,
        span: 8406..8410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 39,
        span: 8410..8411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 308,
        column: 13,
        span: 8414..8424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 14,
        span: 8424..8425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 308,
        column: 20,
        span: 8425..8431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 21,
        span: 8431..8432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 308,
        column: 25,
        span: 8433..8436,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 26,
        span: 8436..8437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 308,
        column: 33,
        span: 8438..8444,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 308,
        column: 35,
        span: 8445..8446,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 308,
        column: 39,
        span: 8446..8450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 40,
        span: 8450..8451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 309,
        column: 9,
        span: 8454..8460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 10,
        span: 8460..8461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 309,
        column: 13,
        span: 8461..8464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 14,
        span: 8464..8465,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 309,
        column: 17,
        span: 8464..8468,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 309,
        column: 19,
        span: 8469..8470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 21,
        span: 8471..8472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 309,
        column: 28,
        span: 8472..8479,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 309,
        column: 30,
        span: 8480..8481,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 32,
        span: 8481..8483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 33,
        span: 8483..8484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 34,
        span: 8484..8485,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 309,
        column: 37,
        span: 8486..8488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 39,
        span: 8488..8490,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 309,
        column: 42,
        span: 8491..8493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 44,
        span: 8494..8495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 309,
        column: 51,
        span: 8495..8502,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 309,
        column: 53,
        span: 8503..8504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 55,
        span: 8504..8506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 56,
        span: 8506..8507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 57,
        span: 8507..8508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 310,
        column: 9,
        span: 8511..8517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 10,
        span: 8517..8518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 310,
        column: 13,
        span: 8518..8521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 14,
        span: 8521..8522,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
        column: 15,
        span: 8522..8523,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 310,
        column: 18,
        span: 8522..8526,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 310,
        column: 20,
        span: 8527..8528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 22,
        span: 8529..8530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 310,
        column: 29,
        span: 8530..8537,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
        column: 31,
        span: 8538..8539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 33,
        span: 8539..8541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 34,
        span: 8541..8542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 35,
        span: 8542..8543,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 310,
        column: 38,
        span: 8544..8546,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
        column: 40,
        span: 8547..8548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 41,
        span: 8548..8549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 42,
        span: 8548..8550,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 310,
        column: 45,
        span: 8551..8553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 47,
        span: 8554..8555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 310,
        column: 54,
        span: 8555..8562,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
        column: 56,
        span: 8563..8564,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 58,
        span: 8564..8566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 59,
        span: 8566..8567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 60,
        span: 8567..8568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 61,
        span: 8568..8569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 311,
        column: 9,
        span: 8572..8578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 10,
        span: 8578..8579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 11,
        span: 8579..8580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 311,
        column: 14,
        span: 8579..8583,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 311,
        column: 16,
        span: 8584..8585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 18,
        span: 8586..8587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 311,
        column: 27,
        span: 8587..8596,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 311,
        column: 29,
        span: 8597..8598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 31,
        span: 8598..8600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 32,
        span: 8600..8601,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 311,
        column: 34,
        span: 8602..8603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 311,
        column: 38,
        span: 8603..8607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 39,
        span: 8607..8608,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 311,
        column: 42,
        span: 8609..8611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 44,
        span: 8611..8613,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 311,
        column: 47,
        span: 8614..8616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 49,
        span: 8617..8618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 50,
        span: 8617..8619,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 311,
        column: 53,
        span: 8620..8622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 55,
        span: 8623..8624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 311,
        column: 64,
        span: 8624..8633,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 311,
        column: 66,
        span: 8634..8635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 68,
        span: 8635..8637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 69,
        span: 8637..8638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 70,
        span: 8638..8639,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 311,
        column: 72,
        span: 8640..8641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 74,
        span: 8641..8643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 75,
        span: 8643..8644,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 313,
        column: 8,
        span: 8693..8698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 313,
        column: 11,
        span: 8699..8701,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
        column: 13,
        span: 8702..8703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 313,
        column: 20,
        span: 8704..8710,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 313,
        column: 22,
        span: 8711..8712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 24,
        span: 8713..8714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 25,
        span: 8713..8715,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 313,
        column: 28,
        span: 8716..8718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 30,
        span: 8719..8720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 313,
        column: 39,
        span: 8720..8729,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 313,
        column: 41,
        span: 8730..8731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 313,
        column: 49,
        span: 8732..8739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 50,
        span: 8739..8740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 51,
        span: 8740..8741,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 313,
        column: 53,
        span: 8742..8743,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 0,
        span: 8743..8745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 314,
        column: 9,
        span: 8748..8754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 10,
        span: 8754..8755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 314,
        column: 13,
        span: 8755..8758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 14,
        span: 8758..8759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 314,
        column: 16,
        span: 8759..8761,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 314,
        column: 18,
        span: 8762..8763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 314,
        column: 22,
        span: 8763..8767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 23,
        span: 8767..8768,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
        column: 26,
        span: 8769..8771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 314,
        column: 29,
        span: 8772..8774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 30,
        span: 8774..8775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 315,
        column: 5,
        span: 8795..8797,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 315,
        column: 7,
        span: 8798..8799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 315,
        column: 10,
        span: 8800..8802,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 315,
        column: 12,
        span: 8803..8804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 0,
        span: 8804..8806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 316,
        column: 9,
        span: 8809..8815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 10,
        span: 8815..8816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 316,
        column: 13,
        span: 8816..8819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 14,
        span: 8819..8820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 316,
        column: 16,
        span: 8820..8822,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 316,
        column: 18,
        span: 8823..8824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 316,
        column: 22,
        span: 8824..8828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 23,
        span: 8828..8829,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 316,
        column: 26,
        span: 8830..8832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 316,
        column: 29,
        span: 8833..8835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 30,
        span: 8835..8836,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 317,
        column: 0,
        span: 8862..8866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 319,
        column: 9,
        span: 8929..8935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 10,
        span: 8935..8936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 319,
        column: 16,
        span: 8936..8942,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 319,
        column: 18,
        span: 8943..8944,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 319,
        column: 22,
        span: 8944..8948,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 319,
        column: 24,
        span: 8949..8950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 319,
        column: 31,
        span: 8951..8957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 32,
        span: 8957..8958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 320,
        column: 9,
        span: 8961..8967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 10,
        span: 8967..8968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 320,
        column: 16,
        span: 8968..8974,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 320,
        column: 18,
        span: 8975..8976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 320,
        column: 22,
        span: 8976..8980,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 320,
        column: 24,
        span: 8981..8982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 320,
        column: 31,
        span: 8983..8989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 32,
        span: 8989..8990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
        column: 9,
        span: 8993..8999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 10,
        span: 8999..9000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 321,
        column: 13,
        span: 9000..9003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 14,
        span: 9003..9004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 321,
        column: 20,
        span: 9004..9010,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 321,
        column: 22,
        span: 9011..9012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 321,
        column: 26,
        span: 9012..9016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 27,
        span: 9016..9017,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 321,
        column: 30,
        span: 9018..9020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 321,
        column: 37,
        span: 9021..9027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 38,
        span: 9027..9028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 322,
        column: 13,
        span: 9031..9041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 14,
        span: 9041..9042,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no integer rep\"",
        ),
        line: 322,
        column: 30,
        span: 9042..9058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
        column: 31,
        span: 9058..9059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 322,
        column: 35,
        span: 9060..9063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
        column: 36,
        span: 9063..9064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 322,
        column: 43,
        span: 9065..9071,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 322,
        column: 45,
        span: 9072..9073,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 322,
        column: 49,
        span: 9073..9077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 50,
        span: 9077..9078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 323,
        column: 13,
        span: 9081..9091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 14,
        span: 9091..9092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no integer rep\"",
        ),
        line: 323,
        column: 30,
        span: 9092..9108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 31,
        span: 9108..9109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 323,
        column: 35,
        span: 9110..9113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 36,
        span: 9113..9114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 323,
        column: 43,
        span: 9115..9121,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 323,
        column: 45,
        span: 9122..9123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 323,
        column: 49,
        span: 9123..9127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 50,
        span: 9127..9128,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 324,
        column: 0,
        span: 9129..9132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 327,
        column: 7,
        span: 9205..9211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 8,
        span: 9211..9212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 327,
        column: 11,
        span: 9212..9215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 12,
        span: 9215..9216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 327,
        column: 18,
        span: 9216..9222,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 327,
        column: 20,
        span: 9223..9224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 327,
        column: 24,
        span: 9224..9228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 25,
        span: 9228..9229,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 28,
        span: 9230..9232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 327,
        column: 35,
        span: 9233..9239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 36,
        span: 9239..9240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 332,
        column: 7,
        span: 9271..9277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 8,
        span: 9277..9278,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 332,
        column: 11,
        span: 9278..9281,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 332,
        column: 13,
        span: 9282..9283,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 15,
        span: 9283..9285,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
        column: 18,
        span: 9286..9288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 20,
        span: 9288..9290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 21,
        span: 9290..9291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 333,
        column: 7,
        span: 9292..9298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 8,
        span: 9298..9299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2 \"",
        ),
        line: 333,
        column: 12,
        span: 9299..9303,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 333,
        column: 14,
        span: 9304..9305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 16,
        span: 9305..9307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 333,
        column: 19,
        span: 9308..9310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 21,
        span: 9310..9312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 22,
        span: 9312..9313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 334,
        column: 7,
        span: 9314..9320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 8,
        span: 9320..9321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" -2 \"",
        ),
        line: 334,
        column: 14,
        span: 9321..9327,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 334,
        column: 16,
        span: 9328..9329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 334,
        column: 18,
        span: 9329..9331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 334,
        column: 21,
        span: 9332..9334,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 334,
        column: 23,
        span: 9335..9336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 334,
        column: 24,
        span: 9335..9337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
        column: 25,
        span: 9337..9338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 335,
        column: 7,
        span: 9339..9345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 8,
        span: 9345..9346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" -0xa \"",
        ),
        line: 335,
        column: 16,
        span: 9346..9354,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 335,
        column: 18,
        span: 9355..9356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
        column: 20,
        span: 9356..9358,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 335,
        column: 23,
        span: 9359..9361,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 335,
        column: 25,
        span: 9362..9363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
        column: 26,
        span: 9362..9364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 27,
        span: 9364..9365,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 339,
        column: 0,
        span: 9421..9423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
        column: 9,
        span: 9444..9450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 10,
        span: 9450..9451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 341,
        column: 13,
        span: 9451..9454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 14,
        span: 9454..9455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 341,
        column: 22,
        span: 9455..9463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 23,
        span: 9463..9464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 341,
        column: 31,
        span: 9464..9472,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 32,
        span: 9472..9473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 341,
        column: 38,
        span: 9473..9479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 39,
        span: 9479..9480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 40,
        span: 9480..9481,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 41,
        span: 9481..9482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 341,
        column: 48,
        span: 9483..9489,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 49,
        span: 9489..9490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 50,
        span: 9490..9491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
        column: 9,
        span: 9494..9500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 10,
        span: 9500..9501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 342,
        column: 13,
        span: 9501..9504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 14,
        span: 9504..9505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 342,
        column: 22,
        span: 9505..9513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 23,
        span: 9513..9514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 342,
        column: 31,
        span: 9514..9522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 32,
        span: 9522..9523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 342,
        column: 38,
        span: 9523..9529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 39,
        span: 9529..9530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 40,
        span: 9530..9531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 41,
        span: 9531..9532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 342,
        column: 48,
        span: 9533..9539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 49,
        span: 9539..9540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 50,
        span: 9540..9541,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 345,
        column: 8,
        span: 9602..9607,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 345,
        column: 17,
        span: 9608..9616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "incd",
        ),
        line: 345,
        column: 22,
        span: 9617..9621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 23,
        span: 9621..9622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 345,
        column: 24,
        span: 9622..9623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 25,
        span: 9623..9624,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 346,
        column: 10,
        span: 9629..9634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 346,
        column: 12,
        span: 9635..9636,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 346,
        column: 14,
        span: 9637..9638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 346,
        column: 21,
        span: 9639..9645,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 346,
        column: 22,
        span: 9645..9646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 346,
        column: 28,
        span: 9646..9652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 29,
        span: 9652..9653,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 346,
        column: 33,
        span: 9653..9657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 34,
        span: 9657..9658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 346,
        column: 36,
        span: 9659..9660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 37,
        span: 9660..9661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 347,
        column: 6,
        span: 9666..9667,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 347,
        column: 8,
        span: 9668..9669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 347,
        column: 15,
        span: 9670..9676,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
        column: 16,
        span: 9676..9677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 347,
        column: 20,
        span: 9677..9681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 21,
        span: 9681..9682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 347,
        column: 22,
        span: 9682..9683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 23,
        span: 9683..9684,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d$\"",
        ),
        line: 347,
        column: 29,
        span: 9685..9690,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 30,
        span: 9690..9691,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 347,
        column: 39,
        span: 9692..9700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 40,
        span: 9700..9701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 347,
        column: 41,
        span: 9701..9702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 42,
        span: 9702..9703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
        column: 13,
        span: 9710..9716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 14,
        span: 9716..9717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 348,
        column: 15,
        span: 9717..9718,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 348,
        column: 18,
        span: 9719..9721,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'9'",
        ),
        line: 348,
        column: 22,
        span: 9722..9725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 23,
        span: 9725..9726,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 349,
        column: 13,
        span: 9733..9739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 349,
        column: 20,
        span: 9740..9746,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 349,
        column: 21,
        span: 9746..9747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 349,
        column: 25,
        span: 9747..9751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 26,
        span: 9751..9752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 349,
        column: 32,
        span: 9752..9758,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 349,
        column: 33,
        span: 9758..9759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 349,
        column: 37,
        span: 9759..9763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 38,
        span: 9763..9764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 349,
        column: 39,
        span: 9764..9765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 40,
        span: 9765..9766,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 349,
        column: 42,
        span: 9767..9768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 349,
        column: 44,
        span: 9768..9770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 45,
        span: 9770..9771,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 350,
        column: 8,
        span: 9776..9779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 9,
        span: 9779..9780,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 351,
        column: 11,
        span: 9785..9791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 351,
        column: 0,
        span: 9792..9793,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 352,
        column: 0,
        span: 9796..9799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 355,
        column: 9,
        span: 9838..9844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 10,
        span: 9844..9845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 355,
        column: 13,
        span: 9845..9848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 14,
        span: 9848..9849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 355,
        column: 22,
        span: 9849..9857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 23,
        span: 9857..9858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "incd",
        ),
        line: 355,
        column: 27,
        span: 9858..9862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 28,
        span: 9862..9863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 355,
        column: 34,
        span: 9863..9869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 35,
        span: 9869..9870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 36,
        span: 9870..9871,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 355,
        column: 37,
        span: 9871..9872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 355,
        column: 44,
        span: 9873..9879,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 355,
        column: 46,
        span: 9880..9881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 355,
        column: 50,
        span: 9881..9885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 51,
        span: 9885..9886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 52,
        span: 9886..9887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 356,
        column: 9,
        span: 9890..9896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 10,
        span: 9896..9897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 356,
        column: 13,
        span: 9897..9900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 14,
        span: 9900..9901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 356,
        column: 22,
        span: 9901..9909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 23,
        span: 9909..9910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "incd",
        ),
        line: 356,
        column: 27,
        span: 9910..9914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 28,
        span: 9914..9915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 356,
        column: 34,
        span: 9915..9921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 35,
        span: 9921..9922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 36,
        span: 9922..9923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
        column: 37,
        span: 9923..9924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 356,
        column: 44,
        span: 9925..9931,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 356,
        column: 46,
        span: 9932..9933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 356,
        column: 50,
        span: 9933..9937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 51,
        span: 9937..9938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 52,
        span: 9938..9939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 359,
        column: 9,
        span: 9962..9968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 10,
        span: 9968..9969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 359,
        column: 13,
        span: 9969..9972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 14,
        span: 9972..9973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 359,
        column: 22,
        span: 9973..9981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 23,
        span: 9981..9982,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 359,
        column: 26,
        span: 9982..9985,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 359,
        column: 29,
        span: 9986..9988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 359,
        column: 36,
        span: 9989..9995,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 359,
        column: 37,
        span: 9995..9996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 359,
        column: 40,
        span: 9996..9999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 41,
        span: 9999..10000,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 359,
        column: 44,
        span: 10000..10003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 45,
        span: 10003..10004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
        column: 48,
        span: 10004..10007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 49,
        span: 10007..10008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 50,
        span: 10008..10009,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 51,
        span: 10009..10010,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 359,
        column: 56,
        span: 10010..10015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 57,
        span: 10015..10016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 58,
        span: 10016..10017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
        column: 9,
        span: 10020..10026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 10,
        span: 10026..10027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 360,
        column: 13,
        span: 10027..10030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 14,
        span: 10030..10031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 360,
        column: 22,
        span: 10031..10039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 23,
        span: 10039..10040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-1\"",
        ),
        line: 360,
        column: 27,
        span: 10040..10044,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 360,
        column: 30,
        span: 10045..10047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 360,
        column: 37,
        span: 10048..10054,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
        column: 38,
        span: 10054..10055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 360,
        column: 41,
        span: 10055..10058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 42,
        span: 10058..10059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 360,
        column: 45,
        span: 10059..10062,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 46,
        span: 10062..10063,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 49,
        span: 10063..10066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 50,
        span: 10066..10067,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 51,
        span: 10067..10068,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 52,
        span: 10068..10069,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 360,
        column: 54,
        span: 10070..10071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 360,
        column: 58,
        span: 10070..10075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 59,
        span: 10075..10076,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 60,
        span: 10076..10077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 363,
        column: 9,
        span: 10117..10123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 10,
        span: 10123..10124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 363,
        column: 13,
        span: 10124..10127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 14,
        span: 10127..10128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 363,
        column: 22,
        span: 10128..10136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 23,
        span: 10136..10137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x1\"",
        ),
        line: 363,
        column: 28,
        span: 10137..10142,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 363,
        column: 31,
        span: 10143..10145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 363,
        column: 38,
        span: 10146..10152,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
        column: 39,
        span: 10152..10153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 363,
        column: 42,
        span: 10153..10156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 43,
        span: 10156..10157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 363,
        column: 46,
        span: 10157..10160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 47,
        span: 10160..10161,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 50,
        span: 10161..10164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 51,
        span: 10164..10165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 52,
        span: 10165..10166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 53,
        span: 10166..10167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 55,
        span: 10167..10169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 56,
        span: 10169..10170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 57,
        span: 10170..10171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 366,
        column: 9,
        span: 10200..10206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 10,
        span: 10206..10207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 366,
        column: 16,
        span: 10207..10213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 366,
        column: 19,
        span: 10214..10216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 366,
        column: 24,
        span: 10217..10221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 25,
        span: 10221..10222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 366,
        column: 34,
        span: 10222..10231,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 366,
        column: 37,
        span: 10232..10234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 366,
        column: 44,
        span: 10235..10241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 45,
        span: 10241..10242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 46,
        span: 10242..10243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 47,
        span: 10243..10244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 48,
        span: 10244..10245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 367,
        column: 9,
        span: 10248..10254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 10,
        span: 10254..10255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 367,
        column: 13,
        span: 10255..10258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 14,
        span: 10258..10259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 367,
        column: 20,
        span: 10259..10265,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
        column: 21,
        span: 10265..10266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 367,
        column: 26,
        span: 10267..10271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 27,
        span: 10271..10272,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 367,
        column: 36,
        span: 10272..10281,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 367,
        column: 39,
        span: 10282..10284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 367,
        column: 46,
        span: 10285..10291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 47,
        span: 10291..10292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 48,
        span: 10292..10293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 49,
        span: 10293..10294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 50,
        span: 10294..10295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 51,
        span: 10295..10296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 369,
        column: 9,
        span: 10300..10306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 10,
        span: 10306..10307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 369,
        column: 13,
        span: 10307..10310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 14,
        span: 10310..10311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 369,
        column: 39,
        span: 10310..10336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
        column: 40,
        span: 10336..10337,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 64,
        span: 10337..10361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 65,
        span: 10361..10362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 66,
        span: 10362..10363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 370,
        column: 9,
        span: 10366..10372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 10,
        span: 10372..10373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 370,
        column: 13,
        span: 10373..10376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 14,
        span: 10376..10377,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 370,
        column: 15,
        span: 10377..10378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 370,
        column: 40,
        span: 10377..10403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 41,
        span: 10403..10404,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 370,
        column: 43,
        span: 10405..10406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
        column: 66,
        span: 10405..10429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 67,
        span: 10429..10430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 68,
        span: 10430..10431,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 371,
        column: 0,
        span: 10432..10435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
        column: 7,
        span: 10488..10494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 8,
        span: 10494..10495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 377,
        column: 16,
        span: 10495..10503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 17,
        span: 10503..10504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 377,
        column: 20,
        span: 10503..10507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 21,
        span: 10507..10508,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
        column: 24,
        span: 10509..10511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 377,
        column: 28,
        span: 10511..10515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 29,
        span: 10515..10516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 378,
        column: 7,
        span: 10517..10523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 8,
        span: 10523..10524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 378,
        column: 11,
        span: 10524..10527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 12,
        span: 10527..10528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 378,
        column: 20,
        span: 10528..10536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 21,
        span: 10536..10537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 22,
        span: 10536..10538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 23,
        span: 10538..10539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 24,
        span: 10539..10540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 26,
        span: 10540..10542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 27,
        span: 10542..10543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 28,
        span: 10543..10544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 379,
        column: 7,
        span: 10545..10551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 8,
        span: 10551..10552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 379,
        column: 11,
        span: 10552..10555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 12,
        span: 10555..10556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 379,
        column: 20,
        span: 10556..10564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 21,
        span: 10564..10565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 379,
        column: 27,
        span: 10565..10571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 28,
        span: 10571..10572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 29,
        span: 10572..10573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 379,
        column: 36,
        span: 10574..10580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 37,
        span: 10580..10581,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 379,
        column: 41,
        span: 10582..10585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 379,
        column: 45,
        span: 10586..10589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 46,
        span: 10589..10590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 379,
        column: 54,
        span: 10590..10598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 55,
        span: 10598..10599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 379,
        column: 61,
        span: 10599..10605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 62,
        span: 10605..10606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 63,
        span: 10606..10607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 379,
        column: 70,
        span: 10608..10614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 71,
        span: 10614..10615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 72,
        span: 10615..10616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 380,
        column: 7,
        span: 10617..10623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 8,
        span: 10623..10624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 380,
        column: 16,
        span: 10624..10632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 17,
        span: 10632..10633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 18,
        span: 10632..10634,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 380,
        column: 20,
        span: 10635..10636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 22,
        span: 10636..10638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 23,
        span: 10638..10639,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 380,
        column: 26,
        span: 10640..10642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 28,
        span: 10642..10644,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 380,
        column: 30,
        span: 10645..10646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 32,
        span: 10646..10648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 33,
        span: 10648..10649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
        column: 7,
        span: 10678..10684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 8,
        span: 10684..10685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 383,
        column: 16,
        span: 10685..10693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 17,
        span: 10693..10694,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 383,
        column: 20,
        span: 10694..10697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 21,
        span: 10697..10698,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
        column: 24,
        span: 10699..10701,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 26,
        span: 10701..10703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 27,
        span: 10703..10704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 384,
        column: 7,
        span: 10705..10711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 8,
        span: 10711..10712,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 384,
        column: 11,
        span: 10712..10715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 384,
        column: 20,
        span: 10716..10724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 21,
        span: 10724..10725,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 384,
        column: 23,
        span: 10725..10727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 24,
        span: 10727..10728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 25,
        span: 10728..10729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 385,
        column: 7,
        span: 10730..10736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 8,
        span: 10736..10737,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 385,
        column: 11,
        span: 10737..10740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 385,
        column: 20,
        span: 10741..10749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 21,
        span: 10749..10750,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  \"",
        ),
        line: 385,
        column: 25,
        span: 10750..10754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 26,
        span: 10754..10755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 27,
        span: 10755..10756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 386,
        column: 7,
        span: 10757..10763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 8,
        span: 10763..10764,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 386,
        column: 11,
        span: 10764..10767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 386,
        column: 20,
        span: 10768..10776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 21,
        span: 10776..10777,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 386,
        column: 24,
        span: 10777..10780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 25,
        span: 10780..10781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 26,
        span: 10781..10782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 7,
        span: 10783..10789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 8,
        span: 10789..10790,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 387,
        column: 11,
        span: 10790..10793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 387,
        column: 20,
        span: 10794..10802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 21,
        span: 10802..10803,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  -0x \"",
        ),
        line: 387,
        column: 29,
        span: 10803..10811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 30,
        span: 10811..10812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 31,
        span: 10812..10813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 388,
        column: 7,
        span: 10814..10820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 8,
        span: 10820..10821,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 388,
        column: 11,
        span: 10821..10824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 388,
        column: 20,
        span: 10825..10833,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 388,
        column: 22,
        span: 10834..10835,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 388,
        column: 23,
        span: 10835..10836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 24,
        span: 10836..10837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
        column: 7,
        span: 10838..10844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 8,
        span: 10844..10845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 389,
        column: 16,
        span: 10845..10853,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0.01'",
        ),
        line: 389,
        column: 24,
        span: 10854..10861,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
        column: 27,
        span: 10862..10864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 29,
        span: 10864..10866,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 389,
        column: 31,
        span: 10867..10868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 35,
        span: 10868..10872,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 389,
        column: 39,
        span: 10873..10876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 389,
        column: 48,
        span: 10877..10885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+.01'",
        ),
        line: 389,
        column: 55,
        span: 10886..10892,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
        column: 58,
        span: 10893..10895,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 389,
        column: 63,
        span: 10895..10900,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 389,
        column: 0,
        span: 10901..10904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 390,
        column: 11,
        span: 10907..10915,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.01'",
        ),
        line: 390,
        column: 17,
        span: 10916..10921,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
        column: 20,
        span: 10922..10924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 390,
        column: 25,
        span: 10924..10929,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 390,
        column: 29,
        span: 10930..10933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 390,
        column: 38,
        span: 10934..10942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-1.'",
        ),
        line: 390,
        column: 44,
        span: 10943..10948,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
        column: 47,
        span: 10949..10951,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 390,
        column: 49,
        span: 10952..10953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 50,
        span: 10952..10954,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 390,
        column: 0,
        span: 10955..10958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 391,
        column: 11,
        span: 10961..10969,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+1.'",
        ),
        line: 391,
        column: 17,
        span: 10970..10975,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
        column: 20,
        span: 10976..10978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
        column: 22,
        span: 10978..10980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 23,
        span: 10980..10981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 392,
        column: 7,
        span: 10982..10988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 8,
        span: 10988..10989,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 392,
        column: 11,
        span: 10989..10992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 392,
        column: 20,
        span: 10993..11001,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+ 0.01'",
        ),
        line: 392,
        column: 29,
        span: 11002..11010,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 392,
        column: 33,
        span: 11011..11014,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 392,
        column: 37,
        span: 11015..11018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 392,
        column: 46,
        span: 11019..11027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+.e1'",
        ),
        line: 392,
        column: 53,
        span: 11028..11034,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 392,
        column: 0,
        span: 11035..11038,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 393,
        column: 6,
        span: 11041..11044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 393,
        column: 15,
        span: 11045..11053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1e'",
        ),
        line: 393,
        column: 20,
        span: 11054..11058,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 393,
        column: 24,
        span: 11059..11062,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 393,
        column: 28,
        span: 11063..11066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 393,
        column: 37,
        span: 11067..11075,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1.0e+'",
        ),
        line: 393,
        column: 45,
        span: 11076..11083,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 393,
        column: 0,
        span: 11084..11087,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 394,
        column: 6,
        span: 11090..11093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 394,
        column: 15,
        span: 11094..11102,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 394,
        column: 19,
        span: 11103..11106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 20,
        span: 11106..11107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
        column: 7,
        span: 11108..11114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 8,
        span: 11114..11115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 395,
        column: 16,
        span: 11115..11123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 17,
        span: 11123..11124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-012'",
        ),
        line: 395,
        column: 23,
        span: 11124..11130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 24,
        span: 11130..11131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
        column: 27,
        span: 11132..11134,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 395,
        column: 29,
        span: 11135..11136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "010",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 32,
        span: 11135..11139,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 395,
        column: 34,
        span: 11140..11141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 36,
        span: 11141..11143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 37,
        span: 11143..11144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 396,
        column: 7,
        span: 11145..11151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 8,
        span: 11151..11152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 396,
        column: 16,
        span: 11152..11160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 17,
        span: 11160..11161,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-1.2e2'",
        ),
        line: 396,
        column: 25,
        span: 11161..11169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 26,
        span: 11169..11170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 396,
        column: 29,
        span: 11171..11173,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 396,
        column: 31,
        span: 11174..11175,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 396,
        column: 33,
        span: 11176..11177,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 396,
        column: 35,
        span: 11178..11179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 38,
        span: 11178..11182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 39,
        span: 11182..11183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 398,
        column: 7,
        span: 11185..11191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 8,
        span: 11191..11192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 398,
        column: 16,
        span: 11192..11200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 17,
        span: 11200..11201,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xffffffffffff\"",
        ),
        line: 398,
        column: 33,
        span: 11201..11217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 34,
        span: 11217..11218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 37,
        span: 11219..11221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 39,
        span: 11222..11223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 40,
        span: 11222..11224,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 398,
        column: 43,
        span: 11225..11227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 45,
        span: 11228..11229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 46,
        span: 11228..11230,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 398,
        column: 48,
        span: 11231..11232,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 51,
        span: 11232..11235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 52,
        span: 11235..11236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 53,
        span: 11236..11237,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 398,
        column: 55,
        span: 11238..11239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 57,
        span: 11239..11241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 58,
        span: 11241..11242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 399,
        column: 7,
        span: 11243..11249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 8,
        span: 11249..11250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 399,
        column: 16,
        span: 11250..11258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 17,
        span: 11258..11259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 399,
        column: 21,
        span: 11259..11263,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 399,
        column: 24,
        span: 11264..11266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 399,
        column: 31,
        span: 11267..11273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 399,
        column: 32,
        span: 11273..11274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 399,
        column: 35,
        span: 11274..11277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 36,
        span: 11277..11278,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 399,
        column: 39,
        span: 11278..11281,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 399,
        column: 40,
        span: 11281..11282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 42,
        span: 11283..11284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 399,
        column: 49,
        span: 11284..11291,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 399,
        column: 52,
        span: 11292..11294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 54,
        span: 11294..11296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 55,
        span: 11296..11297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 56,
        span: 11297..11298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 57,
        span: 11298..11299,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 399,
        column: 60,
        span: 11300..11302,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 399,
        column: 62,
        span: 11303..11304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 63,
        span: 11303..11305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 64,
        span: 11305..11306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 400,
        column: 7,
        span: 11307..11313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 8,
        span: 11313..11314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 400,
        column: 16,
        span: 11314..11322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 17,
        span: 11322..11323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-0x\"",
        ),
        line: 400,
        column: 22,
        span: 11323..11328,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 400,
        column: 25,
        span: 11329..11331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 400,
        column: 32,
        span: 11332..11338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 400,
        column: 33,
        span: 11338..11339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 400,
        column: 36,
        span: 11339..11342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 37,
        span: 11342..11343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 400,
        column: 40,
        span: 11343..11346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 400,
        column: 41,
        span: 11346..11347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 43,
        span: 11348..11349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 400,
        column: 50,
        span: 11349..11356,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 400,
        column: 53,
        span: 11357..11359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
        column: 55,
        span: 11359..11361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 56,
        span: 11361..11362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 57,
        span: 11362..11363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 58,
        span: 11363..11364,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 400,
        column: 61,
        span: 11365..11367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
        column: 63,
        span: 11367..11369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 64,
        span: 11369..11370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 403,
        column: 7,
        span: 11404..11410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 8,
        span: 11410..11411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 403,
        column: 16,
        span: 11411..11419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 17,
        span: 11419..11420,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  001010  '",
        ),
        line: 403,
        column: 29,
        span: 11420..11432,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
        column: 30,
        span: 11432..11433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
        column: 32,
        span: 11433..11435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 33,
        span: 11435..11436,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 403,
        column: 36,
        span: 11437..11439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
        column: 39,
        span: 11439..11442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 40,
        span: 11442..11443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 404,
        column: 7,
        span: 11444..11450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
        column: 8,
        span: 11450..11451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 404,
        column: 16,
        span: 11451..11459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
        column: 17,
        span: 11459..11460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  001010  '",
        ),
        line: 404,
        column: 29,
        span: 11460..11472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 404,
        column: 30,
        span: 11472..11473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
        column: 33,
        span: 11473..11476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
        column: 34,
        span: 11476..11477,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 404,
        column: 37,
        span: 11478..11480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "001010",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
        column: 44,
        span: 11480..11487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
        column: 45,
        span: 11487..11488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 405,
        column: 7,
        span: 11489..11495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 8,
        span: 11495..11496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 405,
        column: 16,
        span: 11496..11504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 17,
        span: 11504..11505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -1010  '",
        ),
        line: 405,
        column: 28,
        span: 11505..11516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 405,
        column: 29,
        span: 11516..11517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 405,
        column: 31,
        span: 11517..11519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 32,
        span: 11519..11520,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 405,
        column: 35,
        span: 11521..11523,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 405,
        column: 37,
        span: 11524..11525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 405,
        column: 39,
        span: 11524..11527,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 40,
        span: 11527..11528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 406,
        column: 7,
        span: 11529..11535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
        column: 8,
        span: 11535..11536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 406,
        column: 16,
        span: 11536..11544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
        column: 17,
        span: 11544..11545,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 406,
        column: 21,
        span: 11545..11549,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
        column: 22,
        span: 11549..11550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
        column: 25,
        span: 11550..11553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
        column: 26,
        span: 11553..11554,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 406,
        column: 29,
        span: 11555..11557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
        column: 32,
        span: 11557..11560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
        column: 33,
        span: 11560..11561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 407,
        column: 7,
        span: 11562..11568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 8,
        span: 11568..11569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 407,
        column: 16,
        span: 11569..11577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 17,
        span: 11577..11578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -10  '",
        ),
        line: 407,
        column: 26,
        span: 11578..11587,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 407,
        column: 27,
        span: 11587..11588,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 30,
        span: 11588..11591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 31,
        span: 11591..11592,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 407,
        column: 34,
        span: 11593..11595,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 407,
        column: 36,
        span: 11596..11597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 38,
        span: 11596..11599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 39,
        span: 11599..11600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 408,
        column: 7,
        span: 11601..11607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 8,
        span: 11607..11608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 408,
        column: 16,
        span: 11608..11616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 17,
        span: 11616..11617,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  +1Z  '",
        ),
        line: 408,
        column: 26,
        span: 11617..11626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 27,
        span: 11626..11627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 30,
        span: 11627..11630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 31,
        span: 11630..11631,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 408,
        column: 34,
        span: 11632..11634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 37,
        span: 11634..11637,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 408,
        column: 39,
        span: 11638..11639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 42,
        span: 11639..11642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 43,
        span: 11642..11643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 409,
        column: 7,
        span: 11644..11650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 8,
        span: 11650..11651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 409,
        column: 16,
        span: 11651..11659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 17,
        span: 11659..11660,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -1z  '",
        ),
        line: 409,
        column: 26,
        span: 11660..11669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 409,
        column: 27,
        span: 11669..11670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
        column: 30,
        span: 11670..11673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 31,
        span: 11673..11674,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 409,
        column: 34,
        span: 11675..11677,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 409,
        column: 36,
        span: 11678..11679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
        column: 38,
        span: 11678..11681,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 409,
        column: 40,
        span: 11682..11683,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 409,
        column: 42,
        span: 11684..11685,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
        column: 44,
        span: 11684..11687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 45,
        span: 11687..11688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 410,
        column: 7,
        span: 11689..11695,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 8,
        span: 11695..11696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 410,
        column: 16,
        span: 11696..11704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 17,
        span: 11704..11705,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-fFfa'",
        ),
        line: 410,
        column: 24,
        span: 11705..11712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 410,
        column: 25,
        span: 11712..11713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 28,
        span: 11713..11716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 29,
        span: 11716..11717,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
        column: 32,
        span: 11718..11720,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 410,
        column: 34,
        span: 11721..11722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 35,
        span: 11722..11723,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 37,
        span: 11722..11725,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 410,
        column: 39,
        span: 11726..11727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 41,
        span: 11728..11729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 43,
        span: 11728..11731,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 410,
        column: 45,
        span: 11732..11733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 47,
        span: 11734..11735,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 49,
        span: 11734..11737,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 410,
        column: 51,
        span: 11738..11739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 53,
        span: 11740..11741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 55,
        span: 11740..11743,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 410,
        column: 57,
        span: 11744..11745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 59,
        span: 11746..11747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 61,
        span: 11746..11749,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 410,
        column: 63,
        span: 11750..11751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 65,
        span: 11752..11753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 67,
        span: 11752..11755,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 410,
        column: 69,
        span: 11756..11757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 72,
        span: 11757..11760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 73,
        span: 11760..11761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 74,
        span: 11761..11762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 75,
        span: 11762..11763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 76,
        span: 11763..11764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 77,
        span: 11764..11765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 78,
        span: 11765..11766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 79,
        span: 11766..11767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 411,
        column: 7,
        span: 11768..11774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 8,
        span: 11774..11775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 411,
        column: 16,
        span: 11775..11783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 17,
        span: 11783..11784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 411,
        column: 23,
        span: 11784..11790,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 411,
        column: 24,
        span: 11790..11791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 411,
        column: 27,
        span: 11791..11794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 28,
        span: 11794..11795,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1'",
        ),
        line: 411,
        column: 31,
        span: 11795..11798,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 32,
        span: 11798..11799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 34,
        span: 11800..11801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 411,
        column: 41,
        span: 11801..11808,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 411,
        column: 43,
        span: 11809..11810,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 45,
        span: 11810..11812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 46,
        span: 11812..11813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 47,
        span: 11813..11814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 48,
        span: 11814..11815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 50,
        span: 11815..11817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 51,
        span: 11817..11818,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 411,
        column: 53,
        span: 11819..11820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 55,
        span: 11820..11822,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 411,
        column: 58,
        span: 11823..11825,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 60,
        span: 11825..11827,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 411,
        column: 62,
        span: 11828..11829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 64,
        span: 11830..11831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 411,
        column: 71,
        span: 11831..11838,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 411,
        column: 73,
        span: 11839..11840,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 75,
        span: 11840..11842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 76,
        span: 11842..11843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 77,
        span: 11843..11844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
        column: 7,
        span: 11845..11851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 8,
        span: 11851..11852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 412,
        column: 16,
        span: 11852..11860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 17,
        span: 11860..11861,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ffffFFFF'",
        ),
        line: 412,
        column: 27,
        span: 11861..11871,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 28,
        span: 11871..11872,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 31,
        span: 11872..11875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 32,
        span: 11875..11876,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 412,
        column: 34,
        span: 11877..11878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 36,
        span: 11878..11880,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 412,
        column: 39,
        span: 11881..11883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 41,
        span: 11884..11885,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 42,
        span: 11884..11886,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 412,
        column: 45,
        span: 11887..11889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 48,
        span: 11889..11892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 49,
        span: 11892..11893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 50,
        span: 11893..11894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 413,
        column: 7,
        span: 11895..11901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 8,
        span: 11901..11902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 413,
        column: 16,
        span: 11902..11910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 17,
        span: 11910..11911,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0ffffFFFF'",
        ),
        line: 413,
        column: 28,
        span: 11911..11922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 413,
        column: 29,
        span: 11922..11923,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 32,
        span: 11923..11926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 33,
        span: 11926..11927,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 413,
        column: 35,
        span: 11928..11929,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 37,
        span: 11929..11931,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 413,
        column: 40,
        span: 11932..11934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 42,
        span: 11935..11936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 43,
        span: 11935..11937,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 413,
        column: 46,
        span: 11938..11940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 49,
        span: 11940..11943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 50,
        span: 11943..11944,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 51,
        span: 11944..11945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 414,
        column: 7,
        span: 11946..11952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 8,
        span: 11952..11953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 414,
        column: 16,
        span: 11953..11961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 17,
        span: 11961..11962,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0ffffffFFFF'",
        ),
        line: 414,
        column: 31,
        span: 11962..11976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
        column: 32,
        span: 11976..11977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
        column: 35,
        span: 11977..11980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 36,
        span: 11980..11981,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 414,
        column: 38,
        span: 11982..11983,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
        column: 40,
        span: 11983..11985,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 414,
        column: 43,
        span: 11986..11988,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 414,
        column: 45,
        span: 11989..11990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 46,
        span: 11990..11991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
        column: 47,
        span: 11990..11992,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 414,
        column: 50,
        span: 11993..11995,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
        column: 53,
        span: 11995..11998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 54,
        span: 11998..11999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 55,
        span: 11999..12000,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 415,
        column: 4,
        span: 12001..12004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 415,
        column: 6,
        span: 12005..12006,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
        column: 8,
        span: 12007..12008,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 10,
        span: 12008..12010,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
        column: 11,
        span: 12010..12011,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 14,
        span: 12011..12014,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 415,
        column: 0,
        span: 12015..12017,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 416,
        column: 8,
        span: 12020..12025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 416,
        column: 11,
        span: 12026..12028,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 416,
        column: 13,
        span: 12029..12030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 416,
        column: 15,
        span: 12031..12032,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 416,
        column: 17,
        span: 12033..12034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 416,
        column: 0,
        span: 12035..12036,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 417,
        column: 8,
        span: 12039..12044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i10",
        ),
        line: 417,
        column: 12,
        span: 12045..12048,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 417,
        column: 14,
        span: 12049..12050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 417,
        column: 17,
        span: 12051..12053,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 417,
        column: 19,
        span: 12054..12055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 417,
        column: 22,
        span: 12056..12058,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 417,
        column: 24,
        span: 12059..12060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 417,
        column: 27,
        span: 12061..12063,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 417,
        column: 29,
        span: 12064..12065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 417,
        column: 32,
        span: 12066..12068,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 417,
        column: 34,
        span: 12069..12070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 417,
        column: 37,
        span: 12071..12073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 9,
        span: 12084..12090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 10,
        span: 12090..12091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 418,
        column: 18,
        span: 12091..12099,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 19,
        span: 12099..12100,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\t10000000000\\t'",
        ),
        line: 418,
        column: 36,
        span: 12100..12117,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 418,
        column: 37,
        span: 12117..12118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 418,
        column: 39,
        span: 12119..12120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 40,
        span: 12120..12121,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
        column: 43,
        span: 12122..12124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i10",
        ),
        line: 418,
        column: 47,
        span: 12125..12128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 48,
        span: 12128..12129,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 419,
        column: 0,
        span: 12130..12133,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 421,
        column: 3,
        span: 12135..12137,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 421,
        column: 7,
        span: 12138..12141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 421,
        column: 13,
        span: 12142..12147,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 421,
        column: 0,
        span: 12148..12152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 423,
        column: 9,
        span: 12190..12196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 10,
        span: 12196..12197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 423,
        column: 18,
        span: 12197..12205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 19,
        span: 12205..12206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 423,
        column: 23,
        span: 12206..12210,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 423,
        column: 26,
        span: 12211..12213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 423,
        column: 33,
        span: 12214..12220,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 423,
        column: 34,
        span: 12220..12221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 423,
        column: 37,
        span: 12221..12224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 38,
        span: 12224..12225,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 423,
        column: 41,
        span: 12225..12228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
        column: 42,
        span: 12228..12229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 45,
        span: 12229..12232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 46,
        span: 12232..12233,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 423,
        column: 49,
        span: 12234..12236,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 423,
        column: 54,
        span: 12237..12241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 55,
        span: 12241..12242,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 423,
        column: 58,
        span: 12243..12245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 423,
        column: 62,
        span: 12245..12249,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 423,
        column: 64,
        span: 12250..12251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 66,
        span: 12252..12253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 67,
        span: 12252..12254,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 423,
        column: 69,
        span: 12255..12256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 72,
        span: 12256..12259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 73,
        span: 12259..12260,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 423,
        column: 75,
        span: 12261..12262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 77,
        span: 12262..12264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 78,
        span: 12264..12265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 424,
        column: 9,
        span: 12268..12274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 10,
        span: 12274..12275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 424,
        column: 18,
        span: 12275..12283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 19,
        span: 12283..12284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 424,
        column: 23,
        span: 12284..12288,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 424,
        column: 26,
        span: 12289..12291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 424,
        column: 33,
        span: 12292..12298,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 424,
        column: 34,
        span: 12298..12299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 424,
        column: 37,
        span: 12299..12302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 38,
        span: 12302..12303,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 424,
        column: 41,
        span: 12303..12306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 424,
        column: 42,
        span: 12306..12307,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 46,
        span: 12307..12311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 47,
        span: 12311..12312,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 424,
        column: 50,
        span: 12313..12315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 424,
        column: 55,
        span: 12316..12320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 56,
        span: 12320..12321,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 59,
        span: 12322..12324,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 424,
        column: 63,
        span: 12324..12328,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 424,
        column: 65,
        span: 12329..12330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 67,
        span: 12331..12332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 68,
        span: 12331..12333,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 424,
        column: 70,
        span: 12334..12335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 74,
        span: 12335..12339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 75,
        span: 12339..12340,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 424,
        column: 77,
        span: 12341..12342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 79,
        span: 12342..12344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 80,
        span: 12344..12345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 425,
        column: 9,
        span: 12348..12354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 10,
        span: 12354..12355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 425,
        column: 18,
        span: 12355..12363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 19,
        span: 12363..12364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 425,
        column: 23,
        span: 12364..12368,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 425,
        column: 26,
        span: 12369..12371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 425,
        column: 33,
        span: 12372..12378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 425,
        column: 34,
        span: 12378..12379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 425,
        column: 37,
        span: 12379..12382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 38,
        span: 12382..12383,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 425,
        column: 41,
        span: 12383..12386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 42,
        span: 12386..12387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 46,
        span: 12387..12391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 47,
        span: 12391..12392,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 425,
        column: 50,
        span: 12393..12395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 425,
        column: 55,
        span: 12396..12400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 56,
        span: 12400..12401,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 425,
        column: 59,
        span: 12402..12404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 425,
        column: 63,
        span: 12404..12408,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 425,
        column: 65,
        span: 12409..12410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 67,
        span: 12411..12412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 68,
        span: 12411..12413,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 425,
        column: 70,
        span: 12414..12415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 74,
        span: 12415..12419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 75,
        span: 12419..12420,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 425,
        column: 77,
        span: 12421..12422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 79,
        span: 12422..12424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 80,
        span: 12424..12425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 426,
        column: 9,
        span: 12428..12434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 10,
        span: 12434..12435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 426,
        column: 18,
        span: 12435..12443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 19,
        span: 12443..12444,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 426,
        column: 23,
        span: 12444..12448,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 426,
        column: 26,
        span: 12449..12451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 426,
        column: 33,
        span: 12452..12458,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 426,
        column: 34,
        span: 12458..12459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 426,
        column: 37,
        span: 12459..12462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 38,
        span: 12462..12463,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 426,
        column: 41,
        span: 12463..12466,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 426,
        column: 42,
        span: 12466..12467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 46,
        span: 12467..12471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 47,
        span: 12471..12472,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 426,
        column: 50,
        span: 12473..12475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 426,
        column: 55,
        span: 12476..12480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 56,
        span: 12480..12481,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 426,
        column: 59,
        span: 12482..12484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 426,
        column: 63,
        span: 12484..12488,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 426,
        column: 65,
        span: 12489..12490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 67,
        span: 12491..12492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 68,
        span: 12491..12493,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 426,
        column: 70,
        span: 12494..12495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 74,
        span: 12495..12499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 75,
        span: 12499..12500,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 426,
        column: 77,
        span: 12501..12502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 79,
        span: 12502..12504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 80,
        span: 12504..12505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 427,
        column: 9,
        span: 12508..12514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 10,
        span: 12514..12515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 427,
        column: 18,
        span: 12515..12523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 19,
        span: 12523..12524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x3.'",
        ),
        line: 427,
        column: 25,
        span: 12524..12530,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 427,
        column: 28,
        span: 12531..12533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 427,
        column: 35,
        span: 12534..12540,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 427,
        column: 36,
        span: 12540..12541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 427,
        column: 39,
        span: 12541..12544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 40,
        span: 12544..12545,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 427,
        column: 43,
        span: 12545..12548,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
        column: 44,
        span: 12548..12549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
        column: 49,
        span: 12549..12554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 50,
        span: 12554..12555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 51,
        span: 12555..12556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 427,
        column: 54,
        span: 12557..12559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
        column: 56,
        span: 12559..12561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 57,
        span: 12561..12562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 428,
        column: 9,
        span: 12565..12571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 10,
        span: 12571..12572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 428,
        column: 18,
        span: 12572..12580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 19,
        span: 12580..12581,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x'",
        ),
        line: 428,
        column: 23,
        span: 12581..12585,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 428,
        column: 26,
        span: 12586..12588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 428,
        column: 33,
        span: 12589..12595,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
        column: 34,
        span: 12595..12596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 428,
        column: 37,
        span: 12596..12599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 38,
        span: 12599..12600,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 428,
        column: 41,
        span: 12600..12603,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 428,
        column: 42,
        span: 12603..12604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
        column: 47,
        span: 12604..12609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 48,
        span: 12609..12610,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 428,
        column: 51,
        span: 12611..12613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 428,
        column: 55,
        span: 12614..12617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 56,
        span: 12617..12618,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
        column: 59,
        span: 12619..12621,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
        column: 62,
        span: 12621..12624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 63,
        span: 12624..12625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 429,
        column: 9,
        span: 12628..12634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 10,
        span: 12634..12635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 429,
        column: 18,
        span: 12635..12643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 19,
        span: 12643..12644,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 429,
        column: 25,
        span: 12644..12650,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 429,
        column: 28,
        span: 12651..12653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 429,
        column: 35,
        span: 12654..12660,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 429,
        column: 36,
        span: 12660..12661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 429,
        column: 39,
        span: 12661..12664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 40,
        span: 12664..12665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 429,
        column: 43,
        span: 12665..12668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
        column: 44,
        span: 12668..12669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 47,
        span: 12669..12672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 48,
        span: 12672..12673,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 429,
        column: 51,
        span: 12674..12676,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 429,
        column: 55,
        span: 12677..12680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 56,
        span: 12680..12681,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 429,
        column: 59,
        span: 12682..12684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 429,
        column: 63,
        span: 12684..12688,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 429,
        column: 65,
        span: 12689..12690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 67,
        span: 12691..12692,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 429,
        column: 68,
        span: 12692..12693,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 69,
        span: 12692..12694,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 429,
        column: 71,
        span: 12695..12696,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 74,
        span: 12696..12699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 75,
        span: 12699..12700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 76,
        span: 12700..12701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 430,
        column: 9,
        span: 12704..12710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 10,
        span: 12710..12711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 430,
        column: 18,
        span: 12711..12719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 19,
        span: 12719..12720,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 430,
        column: 25,
        span: 12720..12726,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 430,
        column: 28,
        span: 12727..12729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 430,
        column: 35,
        span: 12730..12736,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 430,
        column: 36,
        span: 12736..12737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 430,
        column: 39,
        span: 12737..12740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 40,
        span: 12740..12741,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 430,
        column: 43,
        span: 12741..12744,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 430,
        column: 44,
        span: 12744..12745,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
        column: 48,
        span: 12745..12749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 49,
        span: 12749..12750,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 430,
        column: 52,
        span: 12751..12753,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 430,
        column: 56,
        span: 12754..12757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 57,
        span: 12757..12758,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 430,
        column: 60,
        span: 12759..12761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 430,
        column: 64,
        span: 12761..12765,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 430,
        column: 66,
        span: 12766..12767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 68,
        span: 12768..12769,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 430,
        column: 69,
        span: 12769..12770,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
        column: 70,
        span: 12769..12771,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 430,
        column: 72,
        span: 12772..12773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "151",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
        column: 76,
        span: 12773..12777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 77,
        span: 12777..12778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 78,
        span: 12778..12779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 431,
        column: 9,
        span: 12782..12788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
        column: 10,
        span: 12788..12789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 431,
        column: 18,
        span: 12789..12797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
        column: 19,
        span: 12797..12798,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 431,
        column: 25,
        span: 12798..12804,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 431,
        column: 28,
        span: 12805..12807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 431,
        column: 35,
        span: 12808..12814,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 431,
        column: 36,
        span: 12814..12815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 431,
        column: 39,
        span: 12815..12818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
        column: 40,
        span: 12818..12819,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 431,
        column: 43,
        span: 12819..12822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
        column: 44,
        span: 12822..12823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
        column: 48,
        span: 12823..12827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
        column: 49,
        span: 12827..12828,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 431,
        column: 52,
        span: 12829..12831,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 431,
        column: 56,
        span: 12832..12835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
        column: 57,
        span: 12835..12836,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 431,
        column: 60,
        span: 12837..12839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 431,
        column: 64,
        span: 12839..12843,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 431,
        column: 66,
        span: 12844..12845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
        column: 68,
        span: 12846..12847,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 431,
        column: 69,
        span: 12847..12848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
        column: 70,
        span: 12847..12849,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 431,
        column: 72,
        span: 12850..12851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "301",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
        column: 76,
        span: 12851..12855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
        column: 77,
        span: 12855..12856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
        column: 78,
        span: 12856..12857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 432,
        column: 9,
        span: 12860..12866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 10,
        span: 12866..12867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 432,
        column: 18,
        span: 12867..12875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 19,
        span: 12875..12876,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 432,
        column: 25,
        span: 12876..12882,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 432,
        column: 28,
        span: 12883..12885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 432,
        column: 35,
        span: 12886..12892,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 432,
        column: 36,
        span: 12892..12893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 432,
        column: 39,
        span: 12893..12896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 40,
        span: 12896..12897,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 432,
        column: 43,
        span: 12897..12900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 44,
        span: 12900..12901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
        column: 48,
        span: 12901..12905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 49,
        span: 12905..12906,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 432,
        column: 52,
        span: 12907..12909,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 432,
        column: 56,
        span: 12910..12913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 57,
        span: 12913..12914,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 432,
        column: 60,
        span: 12915..12917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 432,
        column: 64,
        span: 12917..12921,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 432,
        column: 66,
        span: 12922..12923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 68,
        span: 12924..12925,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 432,
        column: 69,
        span: 12925..12926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
        column: 70,
        span: 12925..12927,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 432,
        column: 72,
        span: 12928..12929,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "501",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
        column: 76,
        span: 12929..12933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 77,
        span: 12933..12934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 78,
        span: 12934..12935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 434,
        column: 9,
        span: 12939..12945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 10,
        span: 12945..12946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 434,
        column: 18,
        span: 12946..12954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 19,
        span: 12954..12955,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xe03'",
        ),
        line: 434,
        column: 26,
        span: 12955..12962,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 434,
        column: 29,
        span: 12963..12965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 434,
        column: 36,
        span: 12966..12972,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 434,
        column: 37,
        span: 12972..12973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 434,
        column: 40,
        span: 12973..12976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 41,
        span: 12976..12977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 434,
        column: 44,
        span: 12977..12980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 45,
        span: 12980..12981,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 434,
        column: 50,
        span: 12981..12986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 51,
        span: 12986..12987,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 434,
        column: 54,
        span: 12988..12990,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p-4000'",
        ),
        line: 434,
        column: 63,
        span: 12991..12999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 64,
        span: 12999..13000,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 434,
        column: 67,
        span: 13001..13003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3587",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 434,
        column: 74,
        span: 13003..13010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 75,
        span: 13010..13011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 435,
        column: 9,
        span: 13014..13020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 10,
        span: 13020..13021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 435,
        column: 18,
        span: 13021..13029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 19,
        span: 13029..13030,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x.'",
        ),
        line: 435,
        column: 24,
        span: 13030..13035,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 435,
        column: 27,
        span: 13036..13038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 435,
        column: 34,
        span: 13039..13045,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 435,
        column: 35,
        span: 13045..13046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 435,
        column: 38,
        span: 13046..13049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 39,
        span: 13049..13050,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 435,
        column: 42,
        span: 13050..13053,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 435,
        column: 43,
        span: 13053..13054,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
        column: 48,
        span: 13054..13059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 49,
        span: 13059..13060,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 435,
        column: 52,
        span: 13061..13063,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'74p4004'",
        ),
        line: 435,
        column: 62,
        span: 13064..13073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 63,
        span: 13073..13074,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 66,
        span: 13075..13077,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "7",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 435,
        column: 72,
        span: 13077..13083,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 73,
        span: 13083..13084,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 436,
        column: 0,
        span: 13085..13088,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 440,
        column: 6,
        span: 13133..13138,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 440,
        column: 15,
        span: 13139..13147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 440,
        column: 17,
        span: 13148..13149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 18,
        span: 13149..13150,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 440,
        column: 21,
        span: 13150..13153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 22,
        span: 13153..13154,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 441,
        column: 5,
        span: 13157..13159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 441,
        column: 12,
        span: 13160..13166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 441,
        column: 13,
        span: 13166..13167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 441,
        column: 16,
        span: 13167..13170,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
        column: 17,
        span: 13170..13171,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 441,
        column: 21,
        span: 13172..13175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 441,
        column: 22,
        span: 13175..13176,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 441,
        column: 25,
        span: 13177..13179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 441,
        column: 27,
        span: 13179..13181,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 441,
        column: 0,
        span: 13182..13186,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 442,
        column: 11,
        span: 13191..13197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 13,
        span: 13198..13199,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 442,
        column: 16,
        span: 13199..13202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 17,
        span: 13202..13203,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 443,
        column: 0,
        span: 13206..13210,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 444,
        column: 11,
        span: 13215..13221,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"***\"",
        ),
        line: 444,
        column: 17,
        span: 13222..13227,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 445,
        column: 0,
        span: 13230..13233,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 446,
        column: 0,
        span: 13234..13237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 448,
        column: 7,
        span: 13239..13245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 8,
        span: 13245..13246,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 448,
        column: 11,
        span: 13246..13249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 448,
        column: 13,
        span: 13250..13251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 14,
        span: 13251..13252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 448,
        column: 22,
        span: 13252..13260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 23,
        span: 13260..13261,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'fFfa'",
        ),
        line: 448,
        column: 29,
        span: 13261..13267,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 448,
        column: 30,
        span: 13267..13268,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 448,
        column: 33,
        span: 13268..13271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 34,
        span: 13271..13272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 35,
        span: 13272..13273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 36,
        span: 13273..13274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 449,
        column: 7,
        span: 13275..13281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 8,
        span: 13281..13282,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 449,
        column: 11,
        span: 13282..13285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 449,
        column: 13,
        span: 13286..13287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 14,
        span: 13287..13288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 449,
        column: 22,
        span: 13288..13296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 23,
        span: 13296..13297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'099'",
        ),
        line: 449,
        column: 28,
        span: 13297..13302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 449,
        column: 29,
        span: 13302..13303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 449,
        column: 31,
        span: 13303..13305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 32,
        span: 13305..13306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 33,
        span: 13306..13307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 34,
        span: 13307..13308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 450,
        column: 7,
        span: 13309..13315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 8,
        span: 13315..13316,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 450,
        column: 11,
        span: 13316..13319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 450,
        column: 13,
        span: 13320..13321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 14,
        span: 13321..13322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 450,
        column: 22,
        span: 13322..13330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 23,
        span: 13330..13331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0'",
        ),
        line: 450,
        column: 28,
        span: 13331..13336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
        column: 29,
        span: 13336..13337,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 450,
        column: 31,
        span: 13337..13339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 32,
        span: 13339..13340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 33,
        span: 13340..13341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 34,
        span: 13341..13342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 451,
        column: 7,
        span: 13343..13349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 8,
        span: 13349..13350,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 451,
        column: 11,
        span: 13350..13353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 451,
        column: 13,
        span: 13354..13355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 14,
        span: 13355..13356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 451,
        column: 22,
        span: 13356..13364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 23,
        span: 13364..13365,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 451,
        column: 25,
        span: 13365..13367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 26,
        span: 13367..13368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 28,
        span: 13368..13370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 29,
        span: 13370..13371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 30,
        span: 13371..13372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 31,
        span: 13372..13373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 452,
        column: 7,
        span: 13374..13380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 8,
        span: 13380..13381,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 452,
        column: 11,
        span: 13381..13384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 452,
        column: 13,
        span: 13385..13386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 14,
        span: 13386..13387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 452,
        column: 22,
        span: 13387..13395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 23,
        span: 13395..13396,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 452,
        column: 27,
        span: 13396..13400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 452,
        column: 28,
        span: 13400..13401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 452,
        column: 30,
        span: 13401..13403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 31,
        span: 13403..13404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 32,
        span: 13404..13405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 33,
        span: 13405..13406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 453,
        column: 7,
        span: 13407..13413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 8,
        span: 13413..13414,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 453,
        column: 11,
        span: 13414..13417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 453,
        column: 13,
        span: 13418..13419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 14,
        span: 13419..13420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 453,
        column: 22,
        span: 13420..13428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 23,
        span: 13428..13429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 453,
        column: 27,
        span: 13429..13433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
        column: 28,
        span: 13433..13434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
        column: 30,
        span: 13434..13436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 31,
        span: 13436..13437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 32,
        span: 13437..13438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 33,
        span: 13438..13439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 454,
        column: 7,
        span: 13440..13446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 8,
        span: 13446..13447,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 454,
        column: 11,
        span: 13447..13450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 454,
        column: 13,
        span: 13451..13452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 14,
        span: 13452..13453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 454,
        column: 22,
        span: 13453..13461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 23,
        span: 13461..13462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xf'",
        ),
        line: 454,
        column: 28,
        span: 13462..13467,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 454,
        column: 29,
        span: 13467..13468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 454,
        column: 32,
        span: 13468..13471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 33,
        span: 13471..13472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 34,
        span: 13472..13473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 35,
        span: 13473..13474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
        column: 7,
        span: 13476..13482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 8,
        span: 13482..13483,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 456,
        column: 11,
        span: 13483..13486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 456,
        column: 13,
        span: 13487..13488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 14,
        span: 13488..13489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 456,
        column: 22,
        span: 13489..13497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 23,
        span: 13497..13498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'inf'",
        ),
        line: 456,
        column: 28,
        span: 13498..13503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 29,
        span: 13503..13504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 30,
        span: 13504..13505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 31,
        span: 13505..13506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 457,
        column: 7,
        span: 13507..13513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 8,
        span: 13513..13514,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 457,
        column: 11,
        span: 13514..13517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 457,
        column: 13,
        span: 13518..13519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 14,
        span: 13519..13520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 457,
        column: 22,
        span: 13520..13528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 23,
        span: 13528..13529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' INF '",
        ),
        line: 457,
        column: 30,
        span: 13529..13536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 31,
        span: 13536..13537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 32,
        span: 13537..13538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 33,
        span: 13538..13539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 458,
        column: 7,
        span: 13540..13546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 8,
        span: 13546..13547,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 458,
        column: 11,
        span: 13547..13550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 458,
        column: 13,
        span: 13551..13552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 14,
        span: 13552..13553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 458,
        column: 22,
        span: 13553..13561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 23,
        span: 13561..13562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'Nan'",
        ),
        line: 458,
        column: 28,
        span: 13562..13567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 29,
        span: 13567..13568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 30,
        span: 13568..13569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 31,
        span: 13569..13570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 459,
        column: 7,
        span: 13571..13577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 8,
        span: 13577..13578,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 459,
        column: 11,
        span: 13578..13581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 459,
        column: 13,
        span: 13582..13583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 14,
        span: 13583..13584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 459,
        column: 22,
        span: 13584..13592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 23,
        span: 13592..13593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nan'",
        ),
        line: 459,
        column: 28,
        span: 13593..13598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 29,
        span: 13598..13599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 30,
        span: 13599..13600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 31,
        span: 13600..13601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 461,
        column: 7,
        span: 13603..13609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 8,
        span: 13609..13610,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 461,
        column: 11,
        span: 13610..13613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 461,
        column: 13,
        span: 13614..13615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 14,
        span: 13615..13616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 461,
        column: 22,
        span: 13616..13624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 23,
        span: 13624..13625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 461,
        column: 27,
        span: 13625..13629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 28,
        span: 13629..13630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 29,
        span: 13630..13631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 30,
        span: 13631..13632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 462,
        column: 7,
        span: 13633..13639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 8,
        span: 13639..13640,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 462,
        column: 11,
        span: 13640..13643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 462,
        column: 13,
        span: 13644..13645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 14,
        span: 13645..13646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 462,
        column: 22,
        span: 13646..13654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 23,
        span: 13654..13655,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 462,
        column: 25,
        span: 13655..13657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 26,
        span: 13657..13658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 27,
        span: 13658..13659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 28,
        span: 13659..13660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 463,
        column: 7,
        span: 13661..13667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 8,
        span: 13667..13668,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 463,
        column: 11,
        span: 13668..13671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 463,
        column: 13,
        span: 13672..13673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 14,
        span: 13673..13674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 463,
        column: 22,
        span: 13674..13682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 23,
        span: 13682..13683,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1  a'",
        ),
        line: 463,
        column: 29,
        span: 13683..13689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 30,
        span: 13689..13690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 31,
        span: 13690..13691,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 32,
        span: 13691..13692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 464,
        column: 7,
        span: 13693..13699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 8,
        span: 13699..13700,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 464,
        column: 11,
        span: 13700..13703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 464,
        column: 13,
        span: 13704..13705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 14,
        span: 13705..13706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 464,
        column: 22,
        span: 13706..13714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 23,
        span: 13714..13715,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1  a'",
        ),
        line: 464,
        column: 29,
        span: 13715..13721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 464,
        column: 30,
        span: 13721..13722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
        column: 32,
        span: 13722..13724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 33,
        span: 13724..13725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 34,
        span: 13725..13726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 35,
        span: 13726..13727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 465,
        column: 7,
        span: 13728..13734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 8,
        span: 13734..13735,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 465,
        column: 11,
        span: 13735..13738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 465,
        column: 13,
        span: 13739..13740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 14,
        span: 13740..13741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 465,
        column: 22,
        span: 13741..13749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 23,
        span: 13749..13750,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0'",
        ),
        line: 465,
        column: 28,
        span: 13750..13755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 29,
        span: 13755..13756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 30,
        span: 13756..13757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 31,
        span: 13757..13758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 466,
        column: 7,
        span: 13759..13765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 8,
        span: 13765..13766,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 466,
        column: 11,
        span: 13766..13769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 466,
        column: 13,
        span: 13770..13771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 14,
        span: 13771..13772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 466,
        column: 22,
        span: 13772..13780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 23,
        span: 13780..13781,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1 \\0'",
        ),
        line: 466,
        column: 29,
        span: 13781..13787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 30,
        span: 13787..13788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 31,
        span: 13788..13789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 32,
        span: 13789..13790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 467,
        column: 7,
        span: 13791..13797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 8,
        span: 13797..13798,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 467,
        column: 11,
        span: 13798..13801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 467,
        column: 13,
        span: 13802..13803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 14,
        span: 13803..13804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 467,
        column: 22,
        span: 13804..13812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 23,
        span: 13812..13813,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0 '",
        ),
        line: 467,
        column: 29,
        span: 13813..13819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 30,
        span: 13819..13820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 31,
        span: 13820..13821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 32,
        span: 13821..13822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 468,
        column: 7,
        span: 13823..13829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
        column: 8,
        span: 13829..13830,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 468,
        column: 11,
        span: 13830..13833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 468,
        column: 13,
        span: 13834..13835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
        column: 14,
        span: 13835..13836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 468,
        column: 22,
        span: 13836..13844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
        column: 23,
        span: 13844..13845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'e1'",
        ),
        line: 468,
        column: 27,
        span: 13845..13849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
        column: 28,
        span: 13849..13850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
        column: 29,
        span: 13850..13851,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
        column: 30,
        span: 13851..13852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 469,
        column: 7,
        span: 13853..13859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 8,
        span: 13859..13860,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 469,
        column: 11,
        span: 13860..13863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 469,
        column: 13,
        span: 13864..13865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 14,
        span: 13865..13866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 469,
        column: 22,
        span: 13866..13874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 23,
        span: 13874..13875,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'e  1'",
        ),
        line: 469,
        column: 29,
        span: 13875..13881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 30,
        span: 13881..13882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 31,
        span: 13882..13883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 32,
        span: 13883..13884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 470,
        column: 7,
        span: 13885..13891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 8,
        span: 13891..13892,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 470,
        column: 11,
        span: 13892..13895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 470,
        column: 13,
        span: 13896..13897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 14,
        span: 13897..13898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 470,
        column: 22,
        span: 13898..13906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 23,
        span: 13906..13907,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' 3.4.5 '",
        ),
        line: 470,
        column: 32,
        span: 13907..13916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 33,
        span: 13916..13917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 34,
        span: 13917..13918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 35,
        span: 13918..13919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 475,
        column: 7,
        span: 13977..13983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
        column: 8,
        span: 13983..13984,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 475,
        column: 11,
        span: 13984..13987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 475,
        column: 20,
        span: 13988..13996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
        column: 21,
        span: 13996..13997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x'",
        ),
        line: 475,
        column: 25,
        span: 13997..14001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
        column: 26,
        span: 14001..14002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
        column: 27,
        span: 14002..14003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 476,
        column: 7,
        span: 14004..14010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
        column: 8,
        span: 14010..14011,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 476,
        column: 11,
        span: 14011..14014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 476,
        column: 20,
        span: 14015..14023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
        column: 21,
        span: 14023..14024,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 476,
        column: 24,
        span: 14024..14027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
        column: 25,
        span: 14027..14028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
        column: 26,
        span: 14028..14029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 477,
        column: 7,
        span: 14030..14036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
        column: 8,
        span: 14036..14037,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 477,
        column: 11,
        span: 14037..14040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 477,
        column: 20,
        span: 14041..14049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
        column: 21,
        span: 14049..14050,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x3'",
        ),
        line: 477,
        column: 25,
        span: 14050..14054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
        column: 26,
        span: 14054..14055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
        column: 27,
        span: 14055..14056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 478,
        column: 7,
        span: 14057..14063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 8,
        span: 14063..14064,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 478,
        column: 11,
        span: 14064..14067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 478,
        column: 20,
        span: 14068..14076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 21,
        span: 14076..14077,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x3.3.3'",
        ),
        line: 478,
        column: 30,
        span: 14077..14086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 31,
        span: 14086..14087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 32,
        span: 14087..14088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 479,
        column: 7,
        span: 14111..14117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
        column: 8,
        span: 14117..14118,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 479,
        column: 11,
        span: 14118..14121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 479,
        column: 20,
        span: 14122..14130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
        column: 21,
        span: 14130..14131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'00x2'",
        ),
        line: 479,
        column: 27,
        span: 14131..14137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
        column: 28,
        span: 14137..14138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
        column: 29,
        span: 14138..14139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 480,
        column: 7,
        span: 14140..14146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 8,
        span: 14146..14147,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 480,
        column: 11,
        span: 14147..14150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 480,
        column: 20,
        span: 14151..14159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 21,
        span: 14159..14160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x 2'",
        ),
        line: 480,
        column: 27,
        span: 14160..14166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 28,
        span: 14166..14167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 29,
        span: 14167..14168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 481,
        column: 7,
        span: 14169..14175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
        column: 8,
        span: 14175..14176,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 481,
        column: 11,
        span: 14176..14179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 481,
        column: 20,
        span: 14180..14188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
        column: 21,
        span: 14188..14189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0 x2'",
        ),
        line: 481,
        column: 27,
        span: 14189..14195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
        column: 28,
        span: 14195..14196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
        column: 29,
        span: 14196..14197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 482,
        column: 7,
        span: 14198..14204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 8,
        span: 14204..14205,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 482,
        column: 11,
        span: 14205..14208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 482,
        column: 20,
        span: 14209..14217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 21,
        span: 14217..14218,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'23x'",
        ),
        line: 482,
        column: 26,
        span: 14218..14223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 27,
        span: 14223..14224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 28,
        span: 14224..14225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 483,
        column: 7,
        span: 14226..14232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 8,
        span: 14232..14233,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 483,
        column: 11,
        span: 14233..14236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 483,
        column: 20,
        span: 14237..14245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 21,
        span: 14245..14246,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'- 0xaa'",
        ),
        line: 483,
        column: 29,
        span: 14246..14254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 30,
        span: 14254..14255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 31,
        span: 14255..14256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 484,
        column: 7,
        span: 14257..14263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
        column: 8,
        span: 14263..14264,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 484,
        column: 11,
        span: 14264..14267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 484,
        column: 20,
        span: 14268..14276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
        column: 21,
        span: 14276..14277,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xaaP '",
        ),
        line: 484,
        column: 30,
        span: 14277..14286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
        column: 31,
        span: 14286..14287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
        column: 32,
        span: 14287..14288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 485,
        column: 7,
        span: 14304..14310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
        column: 8,
        span: 14310..14311,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 485,
        column: 11,
        span: 14311..14314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 485,
        column: 20,
        span: 14315..14323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
        column: 21,
        span: 14323..14324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.51p'",
        ),
        line: 485,
        column: 30,
        span: 14324..14333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
        column: 31,
        span: 14333..14334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
        column: 32,
        span: 14334..14335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 486,
        column: 7,
        span: 14336..14342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
        column: 8,
        span: 14342..14343,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 486,
        column: 11,
        span: 14343..14346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 486,
        column: 20,
        span: 14347..14355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
        column: 21,
        span: 14355..14356,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x5p+-2'",
        ),
        line: 486,
        column: 30,
        span: 14356..14365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
        column: 31,
        span: 14365..14366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
        column: 32,
        span: 14366..14367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 491,
        column: 7,
        span: 14403..14409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
        column: 8,
        span: 14409..14410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10",
            ),
        ),
        line: 491,
        column: 12,
        span: 14409..14414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 491,
        column: 15,
        span: 14415..14417,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
        column: 18,
        span: 14417..14420,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 491,
        column: 22,
        span: 14421..14424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfff",
            ),
        ),
        line: 491,
        column: 28,
        span: 14424..14430,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 491,
        column: 31,
        span: 14431..14433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
        column: 33,
        span: 14433..14435,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 491,
        column: 35,
        span: 14436..14437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
        column: 38,
        span: 14437..14440,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 491,
        column: 40,
        span: 14441..14442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
        column: 42,
        span: 14442..14444,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 491,
        column: 46,
        span: 14445..14448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0XFB",
            ),
        ),
        line: 491,
        column: 51,
        span: 14448..14453,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 491,
        column: 54,
        span: 14454..14456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "251",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
        column: 58,
        span: 14456..14460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
        column: 59,
        span: 14460..14461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 492,
        column: 7,
        span: 14462..14468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 8,
        span: 14468..14469,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "00",
                    after_decimal: "",
                },
                exponent: "12",
            },
        ),
        line: 492,
        column: 14,
        span: 14468..14475,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
        column: 17,
        span: 14476..14478,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 19,
        span: 14478..14480,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 492,
        column: 23,
        span: 14481..14484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
                exponent: "-3",
            },
        ),
        line: 492,
        column: 31,
        span: 14484..14492,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
        column: 34,
        span: 14493..14495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 36,
        span: 14495..14497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 37,
        span: 14497..14498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 493,
        column: 7,
        span: 14499..14505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
        column: 8,
        span: 14505..14506,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 493,
        column: 18,
        span: 14505..14516,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 493,
        column: 21,
        span: 14517..14519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
        column: 23,
        span: 14520..14521,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
        column: 24,
        span: 14520..14522,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 493,
        column: 27,
        span: 14523..14525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
        column: 30,
        span: 14525..14528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 31,
        span: 14528..14529,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 493,
        column: 33,
        span: 14530..14531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
        column: 35,
        span: 14531..14533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 36,
        span: 14533..14534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 494,
        column: 7,
        span: 14535..14541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 494,
        column: 8,
        span: 14541..14542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 494,
        column: 16,
        span: 14542..14550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 494,
        column: 17,
        span: 14550..14551,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0x2'",
        ),
        line: 494,
        column: 23,
        span: 14551..14557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
        column: 24,
        span: 14557..14558,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 494,
        column: 27,
        span: 14559..14561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 494,
        column: 29,
        span: 14561..14563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
        column: 30,
        span: 14563..14564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 495,
        column: 7,
        span: 14565..14571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 8,
        span: 14571..14572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 495,
        column: 16,
        span: 14572..14580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 17,
        span: 14580..14581,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xaA'",
        ),
        line: 495,
        column: 24,
        span: 14581..14588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 25,
        span: 14588..14589,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 495,
        column: 28,
        span: 14590..14592,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 495,
        column: 30,
        span: 14593..14594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "170",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 33,
        span: 14593..14597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 34,
        span: 14597..14598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 496,
        column: 7,
        span: 14599..14605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 8,
        span: 14605..14606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 496,
        column: 16,
        span: 14606..14614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 17,
        span: 14614..14615,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xffFFFfff'",
        ),
        line: 496,
        column: 30,
        span: 14615..14628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 31,
        span: 14628..14629,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 496,
        column: 34,
        span: 14630..14632,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 496,
        column: 36,
        span: 14633..14634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 37,
        span: 14634..14635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 38,
        span: 14634..14636,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 496,
        column: 41,
        span: 14637..14639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 44,
        span: 14639..14642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 45,
        span: 14642..14643,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 496,
        column: 47,
        span: 14644..14645,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 49,
        span: 14645..14647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 50,
        span: 14647..14648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 499,
        column: 7,
        span: 14694..14700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 499,
        column: 8,
        span: 14700..14701,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
                exponent: "+1",
            },
        ),
        line: 499,
        column: 12,
        span: 14700..14705,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 499,
        column: 15,
        span: 14706..14708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
        column: 17,
        span: 14708..14710,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 499,
        column: 21,
        span: 14711..14714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xE",
            ),
        ),
        line: 499,
        column: 25,
        span: 14714..14718,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 499,
        column: 27,
        span: 14719..14720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
        column: 29,
        span: 14720..14722,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 499,
        column: 32,
        span: 14723..14725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
        column: 35,
        span: 14725..14728,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 499,
        column: 39,
        span: 14729..14732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xe",
            ),
        ),
        line: 499,
        column: 43,
        span: 14732..14736,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 499,
        column: 45,
        span: 14737..14738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
        column: 47,
        span: 14738..14740,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 499,
        column: 50,
        span: 14741..14743,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
        column: 53,
        span: 14743..14746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 499,
        column: 54,
        span: 14746..14747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 504,
        column: 7,
        span: 14769..14775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 8,
        span: 14775..14776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 504,
        column: 16,
        span: 14776..14784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 17,
        span: 14784..14785,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  0x2.5  '",
        ),
        line: 504,
        column: 28,
        span: 14785..14796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 29,
        span: 14796..14797,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 504,
        column: 32,
        span: 14798..14800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x25",
            ),
        ),
        line: 504,
        column: 37,
        span: 14800..14805,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 504,
        column: 39,
        span: 14806..14807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 504,
        column: 42,
        span: 14807..14810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 43,
        span: 14810..14811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 505,
        column: 7,
        span: 14812..14818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
        column: 8,
        span: 14818..14819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 505,
        column: 16,
        span: 14819..14827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
        column: 17,
        span: 14827..14828,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -0x2.5  '",
        ),
        line: 505,
        column: 29,
        span: 14828..14840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
        column: 30,
        span: 14840..14841,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 505,
        column: 33,
        span: 14842..14844,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 505,
        column: 35,
        span: 14845..14846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x25",
            ),
        ),
        line: 505,
        column: 39,
        span: 14845..14850,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 505,
        column: 41,
        span: 14851..14852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 505,
        column: 44,
        span: 14852..14855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
        column: 45,
        span: 14855..14856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 506,
        column: 7,
        span: 14857..14863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 8,
        span: 14863..14864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 506,
        column: 16,
        span: 14864..14872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 17,
        span: 14872..14873,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  +0x0.51p+8  '",
        ),
        line: 506,
        column: 33,
        span: 14873..14889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 34,
        span: 14889..14890,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 506,
        column: 37,
        span: 14891..14893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x51",
            ),
        ),
        line: 506,
        column: 42,
        span: 14893..14898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 43,
        span: 14898..14899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 507,
        column: 7,
        span: 14900..14906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 507,
        column: 8,
        span: 14906..14907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "",
                    after_decimal: ".FfffFFFF",
                },
            ),
        ),
        line: 507,
        column: 19,
        span: 14906..14918,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 507,
        column: 22,
        span: 14919..14921,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 507,
        column: 24,
        span: 14921..14923,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 507,
        column: 26,
        span: 14924..14925,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x.00000001'",
        ),
        line: 507,
        column: 40,
        span: 14926..14939,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 507,
        column: 41,
        span: 14939..14940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 508,
        column: 7,
        span: 14941..14947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 508,
        column: 8,
        span: 14947..14948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xA.a'",
        ),
        line: 508,
        column: 15,
        span: 14948..14955,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 508,
        column: 17,
        span: 14956..14957,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 508,
        column: 19,
        span: 14957..14959,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 508,
        column: 22,
        span: 14960..14962,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 508,
        column: 25,
        span: 14962..14965,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 508,
        column: 27,
        span: 14966..14967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 508,
        column: 30,
        span: 14967..14970,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 508,
        column: 32,
        span: 14971..14972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 508,
        column: 35,
        span: 14972..14975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 508,
        column: 36,
        span: 14975..14976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 509,
        column: 7,
        span: 14977..14983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 509,
        column: 8,
        span: 14983..14984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0a",
                    after_decimal: ".a",
                },
                exponent: "4",
            },
        ),
        line: 509,
        column: 15,
        span: 14983..14991,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 509,
        column: 18,
        span: 14992..14994,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0XAA",
            ),
        ),
        line: 509,
        column: 23,
        span: 14994..14999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 509,
        column: 24,
        span: 14999..15000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 510,
        column: 7,
        span: 15001..15007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 510,
        column: 8,
        span: 15007..15008,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "04",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 510,
        column: 14,
        span: 15007..15014,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 510,
        column: 17,
        span: 15015..15017,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 510,
        column: 19,
        span: 15017..15019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 510,
        column: 20,
        span: 15019..15020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 511,
        column: 7,
        span: 15021..15027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 511,
        column: 8,
        span: 15027..15028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 511,
        column: 13,
        span: 15027..15033,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 511,
        column: 16,
        span: 15034..15036,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x1.'",
        ),
        line: 511,
        column: 23,
        span: 15037..15043,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 511,
        column: 25,
        span: 15044..15045,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0x.1'",
        ),
        line: 511,
        column: 33,
        span: 15046..15053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 511,
        column: 34,
        span: 15053..15054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 512,
        column: 7,
        span: 15055..15061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 512,
        column: 8,
        span: 15061..15062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "abcdf",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 512,
        column: 18,
        span: 15061..15072,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 512,
        column: 21,
        span: 15073..15075,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".ABCDF",
                },
                exponent: "+24",
            },
        ),
        line: 512,
        column: 35,
        span: 15075..15089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 512,
        column: 36,
        span: 15089..15090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 515,
        column: 7,
        span: 15093..15099,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 515,
        column: 8,
        span: 15099..15100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 515,
        column: 11,
        span: 15099..15103,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 515,
        column: 14,
        span: 15104..15106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 515,
        column: 17,
        span: 15106..15109,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 515,
        column: 19,
        span: 15110..15111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 515,
        column: 23,
        span: 15111..15114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 515,
        column: 24,
        span: 15114..15115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 516,
        column: 7,
        span: 15116..15122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 516,
        column: 8,
        span: 15122..15123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 516,
        column: 13,
        span: 15122..15128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 516,
        column: 16,
        span: 15129..15131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "2",
            },
        ),
        line: 516,
        column: 20,
        span: 15131..15135,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 516,
        column: 24,
        span: 15136..15139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 516,
        column: 29,
        span: 15139..15143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 516,
        column: 32,
        span: 15144..15146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 516,
        column: 37,
        span: 15146..15151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 516,
        column: 38,
        span: 15151..15152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 517,
        column: 7,
        span: 15153..15159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 8,
        span: 15159..15160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1111111111",
                    after_decimal: "",
                },
            ),
        ),
        line: 517,
        column: 18,
        span: 15159..15170,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 517,
        column: 20,
        span: 15171..15172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1111111110",
                    after_decimal: "",
                },
            ),
        ),
        line: 517,
        column: 31,
        span: 15172..15183,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 517,
        column: 34,
        span: 15184..15186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1000",
                    after_decimal: ".00",
                },
                exponent: "-03",
            },
        ),
        line: 517,
        column: 46,
        span: 15186..15198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 47,
        span: 15198..15199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 518,
        column: 7,
        span: 15200..15206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 518,
        column: 8,
        span: 15206..15207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 518,
        column: 11,
        span: 15206..15210,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 518,
        column: 14,
        span: 15211..15213,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1.'",
        ),
        line: 518,
        column: 19,
        span: 15214..15218,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 518,
        column: 21,
        span: 15219..15220,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.1'",
        ),
        line: 518,
        column: 26,
        span: 15221..15225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 518,
        column: 27,
        span: 15225..15226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 519,
        column: 7,
        span: 15227..15233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 8,
        span: 15233..15234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 519,
        column: 16,
        span: 15234..15242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1111111111'",
        ),
        line: 519,
        column: 29,
        span: 15243..15255,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 519,
        column: 31,
        span: 15256..15257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 519,
        column: 40,
        span: 15258..15266,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1111111110'",
        ),
        line: 519,
        column: 53,
        span: 15267..15279,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 519,
        column: 56,
        span: 15280..15282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 520,
        column: 11,
        span: 15285..15293,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  +0.001e+3 \\n\\t\"",
        ),
        line: 520,
        column: 30,
        span: 15294..15312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
        column: 31,
        span: 15312..15313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 522,
        column: 7,
        span: 15315..15321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 8,
        span: 15321..15322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
                exponent: "-30",
            },
        ),
        line: 522,
        column: 15,
        span: 15321..15329,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 522,
        column: 17,
        span: 15330..15331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
                exponent: "-31",
            },
        ),
        line: 522,
        column: 25,
        span: 15331..15339,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 522,
        column: 29,
        span: 15340..15343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
                exponent: "30",
            },
        ),
        line: 522,
        column: 36,
        span: 15343..15350,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 522,
        column: 38,
        span: 15351..15352,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
                exponent: "31",
            },
        ),
        line: 522,
        column: 45,
        span: 15352..15359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 46,
        span: 15359..15360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 524,
        column: 7,
        span: 15362..15368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
        column: 8,
        span: 15368..15369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".123456",
                },
            ),
        ),
        line: 524,
        column: 16,
        span: 15368..15377,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 524,
        column: 18,
        span: 15378..15379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".123455",
                },
            ),
        ),
        line: 524,
        column: 27,
        span: 15379..15388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
        column: 28,
        span: 15388..15389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 526,
        column: 7,
        span: 15391..15397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 526,
        column: 8,
        span: 15397..15398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 526,
        column: 16,
        span: 15398..15406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 526,
        column: 17,
        span: 15406..15407,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+1.23E18'",
        ),
        line: 526,
        column: 27,
        span: 15407..15417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
        column: 28,
        span: 15417..15418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 526,
        column: 31,
        span: 15419..15421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".23",
                },
            ),
        ),
        line: 526,
        column: 36,
        span: 15421..15426,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 526,
        column: 38,
        span: 15427..15428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 526,
        column: 43,
        span: 15428..15433,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 526,
        column: 45,
        span: 15434..15435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "18",
                    after_decimal: "",
                },
            ),
        ),
        line: 526,
        column: 48,
        span: 15435..15438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
        column: 49,
        span: 15438..15439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 529,
        column: 7,
        span: 15468..15474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 8,
        span: 15474..15475,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 529,
        column: 11,
        span: 15475..15478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 13,
        span: 15479..15480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
        column: 14,
        span: 15479..15481,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 529,
        column: 16,
        span: 15482..15483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
        column: 18,
        span: 15483..15485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 19,
        span: 15485..15486,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 529,
        column: 23,
        span: 15487..15490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 25,
        span: 15491..15492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
        column: 26,
        span: 15491..15493,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 529,
        column: 28,
        span: 15494..15495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
        column: 30,
        span: 15495..15497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 31,
        span: 15497..15498,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 529,
        column: 35,
        span: 15499..15502,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 529,
        column: 39,
        span: 15503..15506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 41,
        span: 15507..15508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
        column: 42,
        span: 15507..15509,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 529,
        column: 44,
        span: 15510..15511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
        column: 46,
        span: 15511..15513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 47,
        span: 15513..15514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 48,
        span: 15514..15515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 530,
        column: 7,
        span: 15516..15522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 8,
        span: 15522..15523,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 530,
        column: 11,
        span: 15523..15526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 13,
        span: 15527..15528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 530,
        column: 16,
        span: 15528..15531,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 530,
        column: 18,
        span: 15532..15533,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 530,
        column: 22,
        span: 15534..15537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 23,
        span: 15537..15538,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 530,
        column: 27,
        span: 15539..15542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 29,
        span: 15543..15544,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 530,
        column: 32,
        span: 15544..15547,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 530,
        column: 34,
        span: 15548..15549,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 530,
        column: 38,
        span: 15550..15553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 39,
        span: 15553..15554,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 530,
        column: 43,
        span: 15555..15558,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 530,
        column: 47,
        span: 15559..15562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 49,
        span: 15563..15564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 530,
        column: 52,
        span: 15564..15567,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 530,
        column: 54,
        span: 15568..15569,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 530,
        column: 58,
        span: 15570..15573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 59,
        span: 15573..15574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 60,
        span: 15574..15575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 531,
        column: 7,
        span: 15576..15582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
        column: 8,
        span: 15582..15583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
        column: 9,
        span: 15583..15584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
        column: 10,
        span: 15583..15585,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 531,
        column: 13,
        span: 15586..15588,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
        column: 15,
        span: 15588..15590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
        column: 16,
        span: 15590..15591,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 531,
        column: 20,
        span: 15592..15595,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
        column: 22,
        span: 15596..15597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
        column: 23,
        span: 15596..15598,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 531,
        column: 26,
        span: 15599..15601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
        column: 28,
        span: 15601..15603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
        column: 29,
        span: 15603..15604,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 531,
        column: 33,
        span: 15605..15608,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 531,
        column: 37,
        span: 15609..15612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
        column: 39,
        span: 15613..15614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
        column: 40,
        span: 15613..15615,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 531,
        column: 43,
        span: 15616..15618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
        column: 45,
        span: 15618..15620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
        column: 46,
        span: 15620..15621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
        column: 47,
        span: 15621..15622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 532,
        column: 7,
        span: 15623..15629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 8,
        span: 15629..15630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 9,
        span: 15630..15631,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 532,
        column: 12,
        span: 15631..15634,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 532,
        column: 15,
        span: 15635..15637,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 532,
        column: 19,
        span: 15638..15641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 20,
        span: 15641..15642,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 532,
        column: 24,
        span: 15643..15646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 26,
        span: 15647..15648,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 532,
        column: 29,
        span: 15648..15651,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 532,
        column: 32,
        span: 15652..15654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 532,
        column: 36,
        span: 15655..15658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 37,
        span: 15658..15659,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 532,
        column: 41,
        span: 15660..15663,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 532,
        column: 45,
        span: 15664..15667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 47,
        span: 15668..15669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 532,
        column: 50,
        span: 15669..15672,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 532,
        column: 53,
        span: 15673..15675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 532,
        column: 57,
        span: 15676..15679,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 58,
        span: 15679..15680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 59,
        span: 15680..15681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 533,
        column: 7,
        span: 15682..15688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 8,
        span: 15688..15689,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 533,
        column: 11,
        span: 15689..15692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 13,
        span: 15693..15694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
        column: 14,
        span: 15693..15695,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 533,
        column: 16,
        span: 15696..15697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
        column: 18,
        span: 15697..15699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 19,
        span: 15699..15700,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 533,
        column: 23,
        span: 15701..15704,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 533,
        column: 27,
        span: 15705..15708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 29,
        span: 15709..15710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
        column: 30,
        span: 15709..15711,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 533,
        column: 32,
        span: 15712..15713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
        column: 34,
        span: 15713..15715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 35,
        span: 15715..15716,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 533,
        column: 39,
        span: 15717..15720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 41,
        span: 15721..15722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
        column: 42,
        span: 15721..15723,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 533,
        column: 44,
        span: 15724..15725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
        column: 46,
        span: 15725..15727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 47,
        span: 15727..15728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 48,
        span: 15728..15729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 534,
        column: 7,
        span: 15730..15736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 8,
        span: 15736..15737,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 534,
        column: 11,
        span: 15737..15740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 13,
        span: 15741..15742,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 534,
        column: 16,
        span: 15742..15745,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 534,
        column: 18,
        span: 15746..15747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 534,
        column: 22,
        span: 15748..15751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 23,
        span: 15751..15752,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 534,
        column: 27,
        span: 15753..15756,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 534,
        column: 31,
        span: 15757..15760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 33,
        span: 15761..15762,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 534,
        column: 36,
        span: 15762..15765,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 534,
        column: 38,
        span: 15766..15767,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 534,
        column: 42,
        span: 15768..15771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 43,
        span: 15771..15772,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 534,
        column: 47,
        span: 15773..15776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 49,
        span: 15777..15778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 534,
        column: 52,
        span: 15778..15781,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 534,
        column: 54,
        span: 15782..15783,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 534,
        column: 58,
        span: 15784..15787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 59,
        span: 15787..15788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 60,
        span: 15788..15789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 535,
        column: 7,
        span: 15790..15796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 8,
        span: 15796..15797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 9,
        span: 15797..15798,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 10,
        span: 15797..15799,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 535,
        column: 13,
        span: 15800..15802,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 15,
        span: 15802..15804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 16,
        span: 15804..15805,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 535,
        column: 20,
        span: 15806..15809,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 535,
        column: 24,
        span: 15810..15813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 26,
        span: 15814..15815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 27,
        span: 15814..15816,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 535,
        column: 30,
        span: 15817..15819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 32,
        span: 15819..15821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 33,
        span: 15821..15822,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 535,
        column: 37,
        span: 15823..15826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 39,
        span: 15827..15828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 40,
        span: 15827..15829,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 535,
        column: 43,
        span: 15830..15832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 45,
        span: 15832..15834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 46,
        span: 15834..15835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 47,
        span: 15835..15836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 536,
        column: 7,
        span: 15837..15843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
        column: 8,
        span: 15843..15844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
        column: 9,
        span: 15844..15845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 536,
        column: 12,
        span: 15845..15848,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 536,
        column: 15,
        span: 15849..15851,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 536,
        column: 19,
        span: 15852..15855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
        column: 20,
        span: 15855..15856,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 536,
        column: 24,
        span: 15857..15860,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 536,
        column: 28,
        span: 15861..15864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
        column: 30,
        span: 15865..15866,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 536,
        column: 33,
        span: 15866..15869,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 536,
        column: 36,
        span: 15870..15872,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 536,
        column: 40,
        span: 15873..15876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
        column: 41,
        span: 15876..15877,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 536,
        column: 45,
        span: 15878..15881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
        column: 47,
        span: 15882..15883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 536,
        column: 50,
        span: 15883..15886,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 536,
        column: 53,
        span: 15887..15889,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 536,
        column: 57,
        span: 15890..15893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
        column: 58,
        span: 15893..15894,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
        column: 59,
        span: 15894..15895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 537,
        column: 7,
        span: 15896..15902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
        column: 8,
        span: 15902..15903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
        column: 11,
        span: 15902..15906,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 537,
        column: 13,
        span: 15907..15908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 537,
        column: 17,
        span: 15908..15912,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 537,
        column: 21,
        span: 15913..15916,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
        column: 25,
        span: 15916..15920,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 537,
        column: 28,
        span: 15921..15923,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 537,
        column: 32,
        span: 15923..15927,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 537,
        column: 36,
        span: 15928..15931,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 537,
        column: 40,
        span: 15932..15935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
        column: 42,
        span: 15936..15937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
        column: 45,
        span: 15936..15940,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 537,
        column: 47,
        span: 15941..15942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
        column: 51,
        span: 15942..15946,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
        column: 52,
        span: 15946..15947,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 537,
        column: 56,
        span: 15948..15951,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
        column: 60,
        span: 15951..15955,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 537,
        column: 63,
        span: 15956..15958,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 537,
        column: 67,
        span: 15958..15962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
        column: 68,
        span: 15962..15963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 540,
        column: 7,
        span: 15989..15995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
        column: 8,
        span: 15995..15996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 540,
        column: 11,
        span: 15996..15999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
        column: 12,
        span: 15999..16000,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 540,
        column: 13,
        span: 16000..16001,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
        column: 14,
        span: 16000..16002,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 540,
        column: 16,
        span: 16003..16004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
        column: 18,
        span: 16004..16006,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 540,
        column: 19,
        span: 16006..16007,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
        column: 21,
        span: 16007..16009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
        column: 22,
        span: 16009..16010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
        column: 23,
        span: 16010..16011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 541,
        column: 7,
        span: 16012..16018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 541,
        column: 8,
        span: 16018..16019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 541,
        column: 11,
        span: 16019..16022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 541,
        column: 12,
        span: 16022..16023,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 541,
        column: 13,
        span: 16022..16024,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 541,
        column: 15,
        span: 16025..16026,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 541,
        column: 17,
        span: 16027..16028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 541,
        column: 18,
        span: 16027..16029,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 541,
        column: 19,
        span: 16029..16030,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 541,
        column: 21,
        span: 16031..16032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 541,
        column: 22,
        span: 16031..16033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 541,
        column: 23,
        span: 16033..16034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 541,
        column: 24,
        span: 16034..16035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 542,
        column: 7,
        span: 16036..16042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
        column: 8,
        span: 16042..16043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 542,
        column: 11,
        span: 16043..16046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
        column: 12,
        span: 16046..16047,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 542,
        column: 13,
        span: 16047..16048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 542,
        column: 16,
        span: 16047..16051,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 542,
        column: 18,
        span: 16052..16053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 542,
        column: 20,
        span: 16053..16055,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 542,
        column: 21,
        span: 16055..16056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 542,
        column: 25,
        span: 16056..16060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
        column: 26,
        span: 16060..16061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
        column: 27,
        span: 16061..16062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 543,
        column: 7,
        span: 16063..16069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 543,
        column: 8,
        span: 16069..16070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 543,
        column: 11,
        span: 16070..16073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 543,
        column: 12,
        span: 16073..16074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 543,
        column: 13,
        span: 16073..16075,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 543,
        column: 15,
        span: 16076..16077,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 543,
        column: 17,
        span: 16078..16079,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 543,
        column: 20,
        span: 16078..16082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 543,
        column: 21,
        span: 16082..16083,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 543,
        column: 23,
        span: 16084..16085,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 543,
        column: 26,
        span: 16084..16088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 543,
        column: 27,
        span: 16088..16089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 543,
        column: 28,
        span: 16089..16090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 544,
        column: 7,
        span: 16091..16097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 544,
        column: 8,
        span: 16097..16098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 544,
        column: 11,
        span: 16098..16101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 544,
        column: 12,
        span: 16101..16102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 544,
        column: 13,
        span: 16101..16103,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 544,
        column: 15,
        span: 16104..16105,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 544,
        column: 17,
        span: 16106..16107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 544,
        column: 18,
        span: 16106..16108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 544,
        column: 19,
        span: 16108..16109,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 544,
        column: 21,
        span: 16110..16111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 544,
        column: 22,
        span: 16110..16112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 544,
        column: 23,
        span: 16112..16113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 544,
        column: 24,
        span: 16113..16114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 545,
        column: 7,
        span: 16115..16121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 545,
        column: 8,
        span: 16121..16122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 545,
        column: 11,
        span: 16122..16125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 545,
        column: 12,
        span: 16125..16126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 545,
        column: 13,
        span: 16125..16127,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 545,
        column: 15,
        span: 16128..16129,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 545,
        column: 17,
        span: 16130..16131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 545,
        column: 20,
        span: 16130..16134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 545,
        column: 21,
        span: 16134..16135,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 545,
        column: 23,
        span: 16136..16137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 545,
        column: 26,
        span: 16136..16140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 545,
        column: 27,
        span: 16140..16141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 545,
        column: 28,
        span: 16141..16142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 546,
        column: 7,
        span: 16143..16149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 546,
        column: 8,
        span: 16149..16150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 546,
        column: 11,
        span: 16150..16153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 546,
        column: 12,
        span: 16153..16154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 546,
        column: 13,
        span: 16153..16155,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 546,
        column: 15,
        span: 16156..16157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 546,
        column: 17,
        span: 16157..16159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 546,
        column: 18,
        span: 16159..16160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 546,
        column: 20,
        span: 16160..16162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 546,
        column: 21,
        span: 16162..16163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 546,
        column: 22,
        span: 16163..16164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 547,
        column: 7,
        span: 16165..16171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 8,
        span: 16171..16172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 547,
        column: 11,
        span: 16172..16175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 12,
        span: 16175..16176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 547,
        column: 13,
        span: 16175..16177,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 547,
        column: 15,
        span: 16178..16179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 547,
        column: 19,
        span: 16179..16183,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 547,
        column: 20,
        span: 16183..16184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 547,
        column: 24,
        span: 16184..16188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 25,
        span: 16188..16189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 26,
        span: 16189..16190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 548,
        column: 7,
        span: 16191..16197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 8,
        span: 16197..16198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 548,
        column: 11,
        span: 16198..16201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 12,
        span: 16201..16202,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 548,
        column: 13,
        span: 16202..16203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
        column: 14,
        span: 16202..16204,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 548,
        column: 16,
        span: 16205..16206,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 548,
        column: 18,
        span: 16207..16208,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
        column: 19,
        span: 16207..16209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 548,
        column: 20,
        span: 16209..16210,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 548,
        column: 22,
        span: 16211..16212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
        column: 23,
        span: 16211..16213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 24,
        span: 16213..16214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 25,
        span: 16214..16215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 549,
        column: 7,
        span: 16216..16222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 549,
        column: 8,
        span: 16222..16223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 549,
        column: 11,
        span: 16223..16226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 549,
        column: 12,
        span: 16226..16227,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 549,
        column: 13,
        span: 16227..16228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 549,
        column: 14,
        span: 16227..16229,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 549,
        column: 16,
        span: 16230..16231,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 549,
        column: 18,
        span: 16232..16233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 549,
        column: 21,
        span: 16232..16236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 549,
        column: 22,
        span: 16236..16237,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 549,
        column: 24,
        span: 16238..16239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 549,
        column: 27,
        span: 16238..16242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 549,
        column: 28,
        span: 16242..16243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 549,
        column: 29,
        span: 16243..16244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 550,
        column: 7,
        span: 16245..16251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 550,
        column: 8,
        span: 16251..16252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 550,
        column: 11,
        span: 16252..16255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 550,
        column: 12,
        span: 16255..16256,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 550,
        column: 13,
        span: 16256..16257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 550,
        column: 14,
        span: 16256..16258,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 550,
        column: 16,
        span: 16259..16260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 550,
        column: 18,
        span: 16260..16262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 550,
        column: 19,
        span: 16262..16263,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 550,
        column: 21,
        span: 16263..16265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 550,
        column: 22,
        span: 16265..16266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 550,
        column: 23,
        span: 16266..16267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 551,
        column: 7,
        span: 16268..16274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
        column: 8,
        span: 16274..16275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 551,
        column: 11,
        span: 16275..16278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
        column: 12,
        span: 16278..16279,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 551,
        column: 13,
        span: 16279..16280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 551,
        column: 14,
        span: 16279..16281,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 551,
        column: 16,
        span: 16282..16283,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 551,
        column: 20,
        span: 16283..16287,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 551,
        column: 21,
        span: 16287..16288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 551,
        column: 25,
        span: 16288..16292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 551,
        column: 26,
        span: 16292..16293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 551,
        column: 27,
        span: 16293..16294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 552,
        column: 7,
        span: 16295..16301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
        column: 8,
        span: 16301..16302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 552,
        column: 11,
        span: 16302..16305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
        column: 12,
        span: 16305..16306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".25",
                },
            ),
        ),
        line: 552,
        column: 16,
        span: 16305..16310,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 552,
        column: 18,
        span: 16311..16312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 552,
        column: 20,
        span: 16312..16314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 552,
        column: 21,
        span: 16314..16315,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".25",
                },
            ),
        ),
        line: 552,
        column: 26,
        span: 16315..16320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 27,
        span: 16320..16321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 28,
        span: 16321..16322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 553,
        column: 7,
        span: 16323..16329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 8,
        span: 16329..16330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 553,
        column: 11,
        span: 16330..16333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 12,
        span: 16333..16334,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 553,
        column: 16,
        span: 16333..16338,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 553,
        column: 18,
        span: 16339..16340,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 553,
        column: 20,
        span: 16340..16342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 553,
        column: 21,
        span: 16342..16343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 553,
        column: 25,
        span: 16343..16347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 26,
        span: 16347..16348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 27,
        span: 16348..16349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 554,
        column: 7,
        span: 16350..16356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
        column: 8,
        span: 16356..16357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 554,
        column: 11,
        span: 16357..16360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
        column: 12,
        span: 16360..16361,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 554,
        column: 13,
        span: 16361..16362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 554,
        column: 17,
        span: 16361..16366,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 554,
        column: 19,
        span: 16367..16368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 554,
        column: 21,
        span: 16368..16370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 554,
        column: 22,
        span: 16370..16371,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 554,
        column: 26,
        span: 16371..16375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
        column: 27,
        span: 16375..16376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
        column: 28,
        span: 16376..16377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 555,
        column: 7,
        span: 16378..16384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
        column: 8,
        span: 16384..16385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 555,
        column: 11,
        span: 16385..16388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
        column: 12,
        span: 16388..16389,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 555,
        column: 13,
        span: 16389..16390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 555,
        column: 17,
        span: 16389..16394,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 555,
        column: 19,
        span: 16395..16396,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 555,
        column: 21,
        span: 16397..16398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 555,
        column: 22,
        span: 16397..16399,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 555,
        column: 23,
        span: 16399..16400,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 555,
        column: 27,
        span: 16400..16404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 28,
        span: 16404..16405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 29,
        span: 16405..16406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 556,
        column: 7,
        span: 16407..16413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
        column: 8,
        span: 16413..16414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 556,
        column: 12,
        span: 16414..16418,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
        column: 13,
        span: 16418..16419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 556,
        column: 15,
        span: 16419..16421,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 556,
        column: 17,
        span: 16422..16423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 556,
        column: 22,
        span: 16424..16428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
        column: 23,
        span: 16428..16429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 556,
        column: 25,
        span: 16429..16431,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 556,
        column: 27,
        span: 16432..16433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
        column: 29,
        span: 16433..16435,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 556,
        column: 32,
        span: 16436..16438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
        column: 34,
        span: 16438..16440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
        column: 35,
        span: 16440..16441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 557,
        column: 7,
        span: 16442..16448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 557,
        column: 8,
        span: 16448..16449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 557,
        column: 12,
        span: 16449..16453,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 557,
        column: 13,
        span: 16453..16454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 557,
        column: 15,
        span: 16454..16456,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 557,
        column: 17,
        span: 16457..16458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 557,
        column: 22,
        span: 16459..16463,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 557,
        column: 23,
        span: 16463..16464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 557,
        column: 25,
        span: 16464..16466,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 557,
        column: 27,
        span: 16467..16468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 557,
        column: 33,
        span: 16468..16474,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 557,
        column: 36,
        span: 16475..16477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".141",
                },
            ),
        ),
        line: 557,
        column: 42,
        span: 16477..16483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 557,
        column: 43,
        span: 16483..16484,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 559,
        column: 3,
        span: 16486..16488,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 560,
        column: 8,
        span: 16513..16518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 560,
        column: 10,
        span: 16519..16520,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 560,
        column: 11,
        span: 16520..16521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 560,
        column: 13,
        span: 16522..16523,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 560,
        column: 15,
        span: 16524..16525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 560,
        column: 17,
        span: 16525..16527,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 560,
        column: 18,
        span: 16527..16528,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        line: 560,
        column: 0,
        span: 16528..16534,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 561,
        column: 8,
        span: 16537..16542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 561,
        column: 10,
        span: 16543..16544,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 561,
        column: 12,
        span: 16545..16546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 561,
        column: 14,
        span: 16547..16548,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 561,
        column: 0,
        span: 16549..16551,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 562,
        column: 10,
        span: 16556..16561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 562,
        column: 12,
        span: 16562..16563,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 562,
        column: 14,
        span: 16564..16565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
        column: 16,
        span: 16566..16567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 562,
        column: 17,
        span: 16567..16568,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 562,
        column: 19,
        span: 16569..16570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 562,
        column: 21,
        span: 16571..16572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
        column: 22,
        span: 16572..16573,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 562,
        column: 25,
        span: 16574..16576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 562,
        column: 0,
        span: 16576..16578,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 563,
        column: 7,
        span: 16583..16585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 563,
        column: 10,
        span: 16585..16588,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 563,
        column: 12,
        span: 16589..16590,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 563,
        column: 14,
        span: 16591..16592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 563,
        column: 15,
        span: 16592..16593,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 563,
        column: 17,
        span: 16594..16595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 563,
        column: 19,
        span: 16595..16597,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 563,
        column: 0,
        span: 16598..16602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 564,
        column: 8,
        span: 16609..16610,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 564,
        column: 10,
        span: 16611..16612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 564,
        column: 12,
        span: 16613..16614,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 564,
        column: 14,
        span: 16615..16616,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 564,
        column: 0,
        span: 16616..16618,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 565,
        column: 0,
        span: 16623..16627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 566,
        column: 8,
        span: 16634..16635,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 566,
        column: 10,
        span: 16636..16637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 566,
        column: 0,
        span: 16638..16639,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 567,
        column: 0,
        span: 16644..16647,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 568,
        column: 0,
        span: 16650..16653,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 570,
        column: 8,
        span: 16703..16708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 570,
        column: 10,
        span: 16709..16710,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 570,
        column: 12,
        span: 16711..16712,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
        column: 15,
        span: 16712..16715,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 570,
        column: 17,
        span: 16716..16717,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 570,
        column: 19,
        span: 16718..16719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
        column: 20,
        span: 16719..16720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 570,
        column: 21,
        span: 16720..16721,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 570,
        column: 23,
        span: 16722..16723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
        column: 25,
        span: 16724..16725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 570,
        column: 26,
        span: 16725..16726,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 570,
        column: 29,
        span: 16727..16729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
        column: 32,
        span: 16729..16732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
        column: 33,
        span: 16732..16733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
        column: 34,
        span: 16733..16734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 571,
        column: 9,
        span: 16760..16766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
        column: 10,
        span: 16766..16767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 571,
        column: 11,
        span: 16767..16768,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 571,
        column: 13,
        span: 16769..16770,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 571,
        column: 15,
        span: 16770..16772,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 571,
        column: 19,
        span: 16773..16776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 571,
        column: 21,
        span: 16777..16778,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 571,
        column: 23,
        span: 16779..16780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 571,
        column: 25,
        span: 16781..16782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 571,
        column: 28,
        span: 16783..16785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 571,
        column: 30,
        span: 16785..16787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
        column: 31,
        span: 16787..16788,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 572,
        column: 8,
        span: 16791..16796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "delta",
        ),
        line: 572,
        column: 14,
        span: 16797..16802,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 572,
        column: 16,
        span: 16803..16804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 572,
        column: 18,
        span: 16805..16806,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 572,
        column: 20,
        span: 16807..16808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
        column: 0,
        span: 16808..16813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 573,
        column: 9,
        span: 16816..16822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 10,
        span: 16822..16823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 573,
        column: 12,
        span: 16823..16825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 13,
        span: 16825..16826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 14,
        span: 16826..16827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 573,
        column: 17,
        span: 16826..16830,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 573,
        column: 19,
        span: 16831..16832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 573,
        column: 21,
        span: 16833..16834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 22,
        span: 16834..16835,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 573,
        column: 24,
        span: 16836..16837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 26,
        span: 16838..16839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 573,
        column: 27,
        span: 16838..16840,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 573,
        column: 29,
        span: 16841..16842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 573,
        column: 31,
        span: 16843..16844,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 32,
        span: 16844..16845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
        column: 33,
        span: 16845..16846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 35,
        span: 16847..16848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 573,
        column: 38,
        span: 16847..16851,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 573,
        column: 40,
        span: 16852..16853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 573,
        column: 42,
        span: 16854..16855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 43,
        span: 16855..16856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
        column: 44,
        span: 16856..16857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "delta",
        ),
        line: 573,
        column: 50,
        span: 16858..16863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 51,
        span: 16863..16864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 52,
        span: 16864..16865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 574,
        column: 9,
        span: 16868..16874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 10,
        span: 16874..16875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 574,
        column: 12,
        span: 16875..16877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 13,
        span: 16877..16878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 14,
        span: 16878..16879,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 574,
        column: 15,
        span: 16879..16880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 574,
        column: 18,
        span: 16879..16883,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 574,
        column: 20,
        span: 16884..16885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 574,
        column: 22,
        span: 16886..16887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 23,
        span: 16887..16888,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 574,
        column: 25,
        span: 16889..16890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 27,
        span: 16891..16892,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
        column: 28,
        span: 16891..16893,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 574,
        column: 30,
        span: 16894..16895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 574,
        column: 32,
        span: 16896..16897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 33,
        span: 16897..16898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 574,
        column: 34,
        span: 16898..16899,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 36,
        span: 16900..16901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
        column: 37,
        span: 16900..16902,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 574,
        column: 39,
        span: 16903..16904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 574,
        column: 41,
        span: 16905..16906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 42,
        span: 16906..16907,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 574,
        column: 44,
        span: 16908..16909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 46,
        span: 16910..16911,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 574,
        column: 49,
        span: 16910..16914,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 574,
        column: 51,
        span: 16915..16916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 574,
        column: 53,
        span: 16917..16918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 54,
        span: 16918..16919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 574,
        column: 55,
        span: 16919..16920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "delta",
        ),
        line: 574,
        column: 61,
        span: 16921..16926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 62,
        span: 16926..16927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 63,
        span: 16927..16928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 575,
        column: 9,
        span: 16931..16937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 10,
        span: 16937..16938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 575,
        column: 12,
        span: 16938..16940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 13,
        span: 16940..16941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 14,
        span: 16941..16942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 575,
        column: 17,
        span: 16941..16945,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 575,
        column: 19,
        span: 16946..16947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 575,
        column: 21,
        span: 16948..16949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 22,
        span: 16949..16950,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 575,
        column: 24,
        span: 16951..16952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 26,
        span: 16953..16954,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 575,
        column: 27,
        span: 16954..16955,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 575,
        column: 28,
        span: 16954..16956,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 575,
        column: 30,
        span: 16957..16958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 575,
        column: 32,
        span: 16959..16960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 33,
        span: 16960..16961,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 575,
        column: 34,
        span: 16961..16962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 36,
        span: 16963..16964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 575,
        column: 39,
        span: 16963..16967,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 575,
        column: 41,
        span: 16968..16969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 575,
        column: 43,
        span: 16970..16971,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 44,
        span: 16971..16972,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 575,
        column: 46,
        span: 16973..16974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 48,
        span: 16975..16976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 575,
        column: 49,
        span: 16975..16977,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 575,
        column: 51,
        span: 16978..16979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 575,
        column: 53,
        span: 16980..16981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 54,
        span: 16981..16982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 575,
        column: 55,
        span: 16982..16983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "delta",
        ),
        line: 575,
        column: 61,
        span: 16984..16989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 62,
        span: 16989..16990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 63,
        span: 16990..16991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 576,
        column: 9,
        span: 16994..17000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 10,
        span: 17000..17001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 576,
        column: 12,
        span: 17001..17003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 13,
        span: 17003..17004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 14,
        span: 17004..17005,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 576,
        column: 15,
        span: 17005..17006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 576,
        column: 18,
        span: 17005..17009,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 576,
        column: 20,
        span: 17010..17011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 576,
        column: 22,
        span: 17012..17013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 23,
        span: 17013..17014,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 576,
        column: 25,
        span: 17015..17016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 27,
        span: 17017..17018,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 576,
        column: 28,
        span: 17018..17019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 576,
        column: 29,
        span: 17018..17020,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 576,
        column: 31,
        span: 17021..17022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 576,
        column: 33,
        span: 17023..17024,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 34,
        span: 17024..17025,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 576,
        column: 35,
        span: 17025..17026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 37,
        span: 17027..17028,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 576,
        column: 38,
        span: 17028..17029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 576,
        column: 41,
        span: 17028..17032,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 576,
        column: 43,
        span: 17033..17034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 576,
        column: 45,
        span: 17035..17036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 46,
        span: 17036..17037,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 576,
        column: 47,
        span: 17037..17038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "delta",
        ),
        line: 576,
        column: 53,
        span: 17039..17044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 54,
        span: 17044..17045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 55,
        span: 17045..17046,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 577,
        column: 0,
        span: 17047..17050,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 581,
        column: 4,
        span: 17114..17117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 581,
        column: 6,
        span: 17118..17119,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 581,
        column: 8,
        span: 17120..17121,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 581,
        column: 10,
        span: 17122..17123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
        column: 12,
        span: 17122..17125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
        column: 13,
        span: 17125..17126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
        column: 16,
        span: 17126..17129,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 581,
        column: 0,
        span: 17130..17132,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 582,
        column: 6,
        span: 17135..17138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 582,
        column: 8,
        span: 17139..17140,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 582,
        column: 10,
        span: 17141..17142,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 582,
        column: 12,
        span: 17143..17144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 14,
        span: 17143..17146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
        column: 15,
        span: 17146..17147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 18,
        span: 17147..17150,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 582,
        column: 0,
        span: 17151..17153,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 583,
        column: 7,
        span: 17158..17160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 583,
        column: 9,
        span: 17161..17162,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 583,
        column: 12,
        span: 17163..17165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 583,
        column: 14,
        span: 17165..17167,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 583,
        column: 0,
        span: 17168..17172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 584,
        column: 13,
        span: 17179..17185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
        column: 14,
        span: 17185..17186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
        column: 15,
        span: 17186..17187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 584,
        column: 16,
        span: 17187..17188,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 584,
        column: 18,
        span: 17189..17190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 584,
        column: 22,
        span: 17190..17194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
        column: 23,
        span: 17194..17195,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 584,
        column: 25,
        span: 17196..17197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 584,
        column: 27,
        span: 17198..17199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 584,
        column: 30,
        span: 17200..17202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 584,
        column: 32,
        span: 17203..17204,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 584,
        column: 34,
        span: 17205..17206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 584,
        column: 36,
        span: 17207..17208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
        column: 37,
        span: 17208..17209,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 585,
        column: 0,
        span: 17214..17217,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 586,
        column: 0,
        span: 17220..17223,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 587,
        column: 0,
        span: 17224..17227,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 589,
        column: 4,
        span: 17229..17232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 589,
        column: 6,
        span: 17233..17234,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 589,
        column: 8,
        span: 17235..17236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 10,
        span: 17236..17238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
        column: 11,
        span: 17238..17239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 14,
        span: 17239..17242,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 589,
        column: 0,
        span: 17243..17245,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 590,
        column: 6,
        span: 17248..17251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 590,
        column: 8,
        span: 17252..17253,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 590,
        column: 10,
        span: 17254..17255,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 590,
        column: 12,
        span: 17256..17257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 590,
        column: 14,
        span: 17256..17259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 590,
        column: 15,
        span: 17259..17260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 590,
        column: 18,
        span: 17260..17263,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 590,
        column: 0,
        span: 17264..17266,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 591,
        column: 7,
        span: 17271..17273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 591,
        column: 9,
        span: 17274..17275,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 591,
        column: 12,
        span: 17276..17278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
        column: 14,
        span: 17278..17280,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 591,
        column: 0,
        span: 17281..17285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 592,
        column: 13,
        span: 17292..17298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 14,
        span: 17298..17299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 15,
        span: 17299..17300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 592,
        column: 16,
        span: 17299..17301,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 592,
        column: 18,
        span: 17302..17303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 592,
        column: 20,
        span: 17304..17305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 21,
        span: 17305..17306,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 592,
        column: 23,
        span: 17307..17308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 592,
        column: 25,
        span: 17309..17310,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 592,
        column: 28,
        span: 17311..17313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 30,
        span: 17314..17315,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 592,
        column: 31,
        span: 17314..17316,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 592,
        column: 34,
        span: 17317..17319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 592,
        column: 36,
        span: 17320..17321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 37,
        span: 17321..17322,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 592,
        column: 39,
        span: 17323..17324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 592,
        column: 41,
        span: 17325..17326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 42,
        span: 17326..17327,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 593,
        column: 0,
        span: 17332..17335,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 594,
        column: 0,
        span: 17338..17341,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 595,
        column: 0,
        span: 17342..17345,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 597,
        column: 3,
        span: 17347..17349,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 598,
        column: 8,
        span: 17393..17398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 598,
        column: 10,
        span: 17399..17400,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 598,
        column: 12,
        span: 17401..17402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 598,
        column: 0,
        span: 17402..17405,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 599,
        column: 8,
        span: 17408..17413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 599,
        column: 10,
        span: 17414..17415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 11,
        span: 17414..17416,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 599,
        column: 14,
        span: 17417..17419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 599,
        column: 16,
        span: 17420..17421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 599,
        column: 17,
        span: 17421..17422,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 599,
        column: 19,
        span: 17423..17424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 21,
        span: 17424..17426,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 599,
        column: 0,
        span: 17427..17429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 600,
        column: 11,
        span: 17434..17440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
        column: 12,
        span: 17440..17441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
        column: 13,
        span: 17441..17442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 14,
        span: 17441..17443,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 600,
        column: 17,
        span: 17444..17446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 600,
        column: 19,
        span: 17447..17448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
        column: 20,
        span: 17448..17449,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 600,
        column: 22,
        span: 17450..17451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 24,
        span: 17451..17453,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 600,
        column: 27,
        span: 17454..17456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 600,
        column: 29,
        span: 17457..17458,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 600,
        column: 31,
        span: 17459..17460,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 33,
        span: 17460..17462,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 600,
        column: 35,
        span: 17463..17464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 37,
        span: 17464..17466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
        column: 38,
        span: 17466..17467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 601,
        column: 6,
        span: 17472..17473,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 601,
        column: 8,
        span: 17474..17475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 601,
        column: 10,
        span: 17476..17477,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 601,
        column: 12,
        span: 17478..17479,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 601,
        column: 0,
        span: 17479..17481,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 602,
        column: 0,
        span: 17484..17487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 604,
        column: 4,
        span: 17491..17492,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 604,
        column: 6,
        span: 17493..17494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 604,
        column: 0,
        span: 17494..17497,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 605,
        column: 8,
        span: 17500..17505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 605,
        column: 10,
        span: 17505..17507,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 605,
        column: 12,
        span: 17508..17509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 605,
        column: 14,
        span: 17510..17511,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 605,
        column: 16,
        span: 17512..17513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 605,
        column: 21,
        span: 17514..17518,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 605,
        column: 22,
        span: 17518..17519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 605,
        column: 26,
        span: 17519..17523,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 605,
        column: 0,
        span: 17524..17526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 606,
        column: 11,
        span: 17531..17537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 12,
        span: 17537..17538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
        column: 13,
        span: 17537..17539,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 606,
        column: 15,
        span: 17540..17541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 606,
        column: 17,
        span: 17542..17543,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 606,
        column: 19,
        span: 17544..17545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
        column: 21,
        span: 17545..17547,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 606,
        column: 24,
        span: 17548..17550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 606,
        column: 26,
        span: 17551..17552,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 606,
        column: 28,
        span: 17553..17554,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
        column: 30,
        span: 17554..17556,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 606,
        column: 32,
        span: 17557..17558,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
        column: 34,
        span: 17558..17560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 35,
        span: 17560..17561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 607,
        column: 6,
        span: 17566..17567,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 607,
        column: 8,
        span: 17568..17569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 607,
        column: 10,
        span: 17570..17571,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 607,
        column: 12,
        span: 17572..17573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 607,
        column: 0,
        span: 17573..17575,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 608,
        column: 0,
        span: 17578..17581,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 609,
        column: 0,
        span: 17582..17585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 611,
        column: 7,
        span: 17587..17593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
        column: 8,
        span: 17593..17594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 611,
        column: 11,
        span: 17594..17597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
        column: 12,
        span: 17597..17598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 611,
        column: 18,
        span: 17598..17604,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 611,
        column: 20,
        span: 17605..17606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 611,
        column: 27,
        span: 17607..17613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 611,
        column: 28,
        span: 17613..17614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 611,
        column: 30,
        span: 17614..17616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
        column: 31,
        span: 17616..17617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
        column: 32,
        span: 17617..17618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 612,
        column: 7,
        span: 17619..17625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
        column: 8,
        span: 17625..17626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 612,
        column: 11,
        span: 17626..17629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
        column: 12,
        span: 17629..17630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 612,
        column: 18,
        span: 17630..17636,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 612,
        column: 20,
        span: 17637..17638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 612,
        column: 27,
        span: 17639..17645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 612,
        column: 28,
        span: 17645..17646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 612,
        column: 30,
        span: 17646..17648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
        column: 31,
        span: 17648..17649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
        column: 32,
        span: 17649..17650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 613,
        column: 7,
        span: 17651..17657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 8,
        span: 17657..17658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 9,
        span: 17658..17659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 613,
        column: 15,
        span: 17659..17665,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 613,
        column: 17,
        span: 17666..17667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 613,
        column: 19,
        span: 17667..17669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 20,
        span: 17669..17670,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 613,
        column: 22,
        span: 17671..17672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 613,
        column: 29,
        span: 17673..17679,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 613,
        column: 32,
        span: 17680..17682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 613,
        column: 39,
        span: 17683..17689,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 613,
        column: 41,
        span: 17690..17691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 613,
        column: 43,
        span: 17691..17693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 44,
        span: 17693..17694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 614,
        column: 7,
        span: 17695..17701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
        column: 8,
        span: 17701..17702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
        column: 9,
        span: 17702..17703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 614,
        column: 15,
        span: 17703..17709,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 614,
        column: 17,
        span: 17710..17711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 614,
        column: 19,
        span: 17711..17713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 614,
        column: 20,
        span: 17713..17714,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 614,
        column: 22,
        span: 17715..17716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 614,
        column: 29,
        span: 17717..17723,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 614,
        column: 32,
        span: 17724..17726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 614,
        column: 39,
        span: 17727..17733,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 614,
        column: 41,
        span: 17734..17735,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 614,
        column: 43,
        span: 17735..17737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 614,
        column: 44,
        span: 17737..17738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 615,
        column: 7,
        span: 17739..17745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
        column: 8,
        span: 17745..17746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 615,
        column: 14,
        span: 17746..17752,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 615,
        column: 16,
        span: 17753..17754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 615,
        column: 23,
        span: 17755..17761,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 615,
        column: 26,
        span: 17762..17764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 615,
        column: 33,
        span: 17765..17771,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 615,
        column: 35,
        span: 17772..17773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 615,
        column: 37,
        span: 17773..17775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
        column: 38,
        span: 17775..17776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 617,
        column: 7,
        span: 17778..17784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 617,
        column: 8,
        span: 17784..17785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 617,
        column: 14,
        span: 17785..17791,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 617,
        column: 16,
        span: 17792..17793,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 617,
        column: 18,
        span: 17794..17795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 617,
        column: 19,
        span: 17794..17796,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 617,
        column: 22,
        span: 17797..17799,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 617,
        column: 24,
        span: 17799..17801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 617,
        column: 25,
        span: 17801..17802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 618,
        column: 7,
        span: 17803..17809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 8,
        span: 17809..17810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 618,
        column: 14,
        span: 17810..17816,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 618,
        column: 16,
        span: 17817..17818,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 618,
        column: 18,
        span: 17819..17820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 618,
        column: 19,
        span: 17819..17821,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 618,
        column: 22,
        span: 17822..17824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 618,
        column: 24,
        span: 17824..17826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
        column: 25,
        span: 17826..17827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 619,
        column: 7,
        span: 17828..17834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 619,
        column: 8,
        span: 17834..17835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 619,
        column: 14,
        span: 17835..17841,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 619,
        column: 16,
        span: 17842..17843,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 619,
        column: 18,
        span: 17844..17845,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
        column: 19,
        span: 17844..17846,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 619,
        column: 22,
        span: 17847..17849,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 619,
        column: 24,
        span: 17850..17851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
        column: 25,
        span: 17850..17852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 619,
        column: 26,
        span: 17852..17853,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 623,
        column: 3,
        span: 17945..17947,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 623,
        column: 7,
        span: 17948..17951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 623,
        column: 13,
        span: 17952..17957,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 623,
        column: 0,
        span: 17958..17962,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 624,
        column: 8,
        span: 17965..17970,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 624,
        column: 17,
        span: 17971..17979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 624,
        column: 22,
        span: 17980..17984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
        column: 23,
        span: 17984..17985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 624,
        column: 24,
        span: 17985..17986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
        column: 25,
        span: 17986..17987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 624,
        column: 32,
        span: 17988..17994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
        column: 33,
        span: 17994..17995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 624,
        column: 38,
        span: 17995..18000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
        column: 39,
        span: 18000..18001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 624,
        column: 40,
        span: 18001..18002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
        column: 41,
        span: 18002..18003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
        column: 42,
        span: 18003..18004,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 624,
        column: 46,
        span: 18005..18008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 625,
        column: 7,
        span: 18034..18038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 625,
        column: 8,
        span: 18038..18039,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 625,
        column: 11,
        span: 18038..18042,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 625,
        column: 13,
        span: 18043..18044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 625,
        column: 15,
        span: 18044..18046,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 625,
        column: 16,
        span: 18046..18047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 626,
        column: 7,
        span: 18050..18054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 8,
        span: 18054..18055,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 626,
        column: 11,
        span: 18054..18058,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 626,
        column: 13,
        span: 18059..18060,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 626,
        column: 15,
        span: 18060..18062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 16,
        span: 18062..18063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 627,
        column: 7,
        span: 18066..18070,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 627,
        column: 8,
        span: 18070..18071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 627,
        column: 12,
        span: 18071..18075,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 627,
        column: 13,
        span: 18075..18076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 627,
        column: 17,
        span: 18076..18080,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 627,
        column: 19,
        span: 18081..18082,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 627,
        column: 21,
        span: 18082..18084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 627,
        column: 22,
        span: 18084..18085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 628,
        column: 7,
        span: 18088..18092,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 628,
        column: 8,
        span: 18092..18093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 628,
        column: 12,
        span: 18093..18097,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 628,
        column: 13,
        span: 18097..18098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 628,
        column: 17,
        span: 18098..18102,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 628,
        column: 19,
        span: 18103..18104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 628,
        column: 24,
        span: 18104..18109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 628,
        column: 25,
        span: 18109..18110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 629,
        column: 7,
        span: 18113..18117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
        column: 8,
        span: 18117..18118,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 629,
        column: 9,
        span: 18118..18119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 629,
        column: 13,
        span: 18119..18123,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 629,
        column: 14,
        span: 18123..18124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 629,
        column: 18,
        span: 18124..18128,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 629,
        column: 20,
        span: 18129..18130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 629,
        column: 25,
        span: 18130..18135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
        column: 26,
        span: 18135..18136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 630,
        column: 7,
        span: 18139..18143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 630,
        column: 8,
        span: 18143..18144,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 630,
        column: 9,
        span: 18144..18145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 630,
        column: 13,
        span: 18145..18149,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 630,
        column: 14,
        span: 18149..18150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 630,
        column: 18,
        span: 18150..18154,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 630,
        column: 20,
        span: 18155..18156,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 630,
        column: 22,
        span: 18157..18158,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 630,
        column: 26,
        span: 18157..18162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 630,
        column: 27,
        span: 18162..18163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 631,
        column: 9,
        span: 18166..18172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 631,
        column: 10,
        span: 18172..18173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 631,
        column: 11,
        span: 18172..18174,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 631,
        column: 13,
        span: 18175..18176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 631,
        column: 18,
        span: 18177..18181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 631,
        column: 19,
        span: 18181..18182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 631,
        column: 23,
        span: 18182..18186,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 631,
        column: 26,
        span: 18187..18189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 631,
        column: 28,
        span: 18189..18191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 631,
        column: 29,
        span: 18191..18192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 632,
        column: 9,
        span: 18195..18201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
        column: 10,
        span: 18201..18202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 632,
        column: 14,
        span: 18201..18206,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 632,
        column: 16,
        span: 18207..18208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 632,
        column: 21,
        span: 18209..18213,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 632,
        column: 22,
        span: 18213..18214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 632,
        column: 26,
        span: 18214..18218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 632,
        column: 29,
        span: 18219..18221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 632,
        column: 34,
        span: 18221..18226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
        column: 35,
        span: 18226..18227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 633,
        column: 9,
        span: 18230..18236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 633,
        column: 10,
        span: 18236..18237,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 633,
        column: 14,
        span: 18236..18241,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 633,
        column: 16,
        span: 18242..18243,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 633,
        column: 18,
        span: 18244..18245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 633,
        column: 22,
        span: 18245..18249,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 633,
        column: 23,
        span: 18249..18250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 633,
        column: 27,
        span: 18250..18254,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 633,
        column: 30,
        span: 18255..18257,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 633,
        column: 32,
        span: 18258..18259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 633,
        column: 36,
        span: 18259..18263,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 633,
        column: 37,
        span: 18263..18264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 633,
        column: 41,
        span: 18264..18268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 633,
        column: 42,
        span: 18268..18269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 634,
        column: 9,
        span: 18272..18278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 634,
        column: 10,
        span: 18278..18279,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 634,
        column: 11,
        span: 18279..18280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 634,
        column: 12,
        span: 18279..18281,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 634,
        column: 14,
        span: 18282..18283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 634,
        column: 19,
        span: 18284..18288,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
        column: 20,
        span: 18288..18289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 634,
        column: 24,
        span: 18289..18293,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 634,
        column: 27,
        span: 18294..18296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 634,
        column: 32,
        span: 18297..18301,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
        column: 33,
        span: 18301..18302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 634,
        column: 37,
        span: 18302..18306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
        column: 38,
        span: 18306..18307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 635,
        column: 9,
        span: 18310..18316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 635,
        column: 10,
        span: 18316..18317,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 635,
        column: 11,
        span: 18317..18318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 635,
        column: 12,
        span: 18317..18319,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 635,
        column: 14,
        span: 18320..18321,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 635,
        column: 16,
        span: 18322..18323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 635,
        column: 20,
        span: 18323..18327,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 635,
        column: 21,
        span: 18327..18328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 635,
        column: 25,
        span: 18328..18332,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 635,
        column: 28,
        span: 18333..18335,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 635,
        column: 30,
        span: 18336..18337,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 635,
        column: 31,
        span: 18336..18338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 635,
        column: 32,
        span: 18338..18339,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 636,
        column: 0,
        span: 18340..18343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 640,
        column: 7,
        span: 18378..18384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
        column: 8,
        span: 18384..18385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 640,
        column: 12,
        span: 18385..18389,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 640,
        column: 13,
        span: 18389..18390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 640,
        column: 16,
        span: 18390..18393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
        column: 17,
        span: 18393..18394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 640,
        column: 18,
        span: 18393..18395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 640,
        column: 19,
        span: 18395..18396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 640,
        column: 21,
        span: 18396..18398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
        column: 22,
        span: 18398..18399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
        column: 23,
        span: 18399..18400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 641,
        column: 7,
        span: 18401..18407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
        column: 8,
        span: 18407..18408,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 641,
        column: 11,
        span: 18408..18411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 641,
        column: 16,
        span: 18412..18416,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 641,
        column: 17,
        span: 18416..18417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 641,
        column: 20,
        span: 18417..18420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
        column: 21,
        span: 18420..18421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
        column: 22,
        span: 18420..18422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 641,
        column: 23,
        span: 18422..18423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
        column: 25,
        span: 18423..18425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
        column: 26,
        span: 18425..18426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
        column: 27,
        span: 18426..18427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 642,
        column: 7,
        span: 18428..18434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 8,
        span: 18434..18435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 642,
        column: 12,
        span: 18435..18439,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 642,
        column: 13,
        span: 18439..18440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 642,
        column: 16,
        span: 18440..18443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 17,
        span: 18443..18444,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 642,
        column: 18,
        span: 18444..18445,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 642,
        column: 19,
        span: 18444..18446,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 642,
        column: 20,
        span: 18446..18447,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 642,
        column: 22,
        span: 18448..18449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 642,
        column: 23,
        span: 18448..18450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 24,
        span: 18450..18451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 25,
        span: 18451..18452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 643,
        column: 7,
        span: 18453..18459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 643,
        column: 8,
        span: 18459..18460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 643,
        column: 12,
        span: 18460..18464,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 643,
        column: 13,
        span: 18464..18465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 643,
        column: 16,
        span: 18465..18468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 643,
        column: 17,
        span: 18468..18469,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 643,
        column: 18,
        span: 18468..18470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 643,
        column: 19,
        span: 18470..18471,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 643,
        column: 21,
        span: 18472..18473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 643,
        column: 22,
        span: 18472..18474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 643,
        column: 23,
        span: 18474..18475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 643,
        column: 24,
        span: 18475..18476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 644,
        column: 7,
        span: 18477..18483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 644,
        column: 8,
        span: 18483..18484,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 644,
        column: 11,
        span: 18484..18487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 644,
        column: 16,
        span: 18488..18492,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 644,
        column: 17,
        span: 18492..18493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 644,
        column: 20,
        span: 18493..18496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 644,
        column: 21,
        span: 18496..18497,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 644,
        column: 22,
        span: 18497..18498,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 644,
        column: 23,
        span: 18497..18499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 644,
        column: 24,
        span: 18499..18500,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 644,
        column: 26,
        span: 18501..18502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 644,
        column: 27,
        span: 18501..18503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 644,
        column: 28,
        span: 18503..18504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 644,
        column: 29,
        span: 18504..18505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 645,
        column: 7,
        span: 18506..18512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 645,
        column: 8,
        span: 18512..18513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 645,
        column: 12,
        span: 18513..18517,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 645,
        column: 13,
        span: 18517..18518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 645,
        column: 16,
        span: 18518..18521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 645,
        column: 17,
        span: 18521..18522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 645,
        column: 23,
        span: 18522..18528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 645,
        column: 24,
        span: 18528..18529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 645,
        column: 31,
        span: 18530..18536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 645,
        column: 32,
        span: 18536..18537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 645,
        column: 33,
        span: 18537..18538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 646,
        column: 7,
        span: 18539..18545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 646,
        column: 8,
        span: 18545..18546,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 646,
        column: 11,
        span: 18546..18549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 646,
        column: 16,
        span: 18550..18554,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 646,
        column: 17,
        span: 18554..18555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 646,
        column: 20,
        span: 18555..18558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 646,
        column: 21,
        span: 18558..18559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 646,
        column: 27,
        span: 18559..18565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 646,
        column: 28,
        span: 18565..18566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 646,
        column: 35,
        span: 18567..18573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 646,
        column: 36,
        span: 18573..18574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 646,
        column: 37,
        span: 18574..18575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 649,
        column: 7,
        span: 18578..18584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 649,
        column: 8,
        span: 18584..18585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 649,
        column: 10,
        span: 18585..18587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 649,
        column: 11,
        span: 18587..18588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 649,
        column: 15,
        span: 18588..18592,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 649,
        column: 16,
        span: 18592..18593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 649,
        column: 19,
        span: 18593..18596,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 649,
        column: 20,
        span: 18596..18597,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 649,
        column: 21,
        span: 18597..18598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 649,
        column: 24,
        span: 18597..18601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 649,
        column: 25,
        span: 18601..18602,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 649,
        column: 27,
        span: 18603..18604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 649,
        column: 29,
        span: 18604..18606,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 649,
        column: 31,
        span: 18607..18608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 649,
        column: 36,
        span: 18609..18613,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 649,
        column: 37,
        span: 18613..18614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 649,
        column: 40,
        span: 18614..18617,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 649,
        column: 41,
        span: 18617..18618,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 649,
        column: 42,
        span: 18618..18619,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 649,
        column: 45,
        span: 18618..18622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 649,
        column: 46,
        span: 18622..18623,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 649,
        column: 48,
        span: 18624..18625,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 649,
        column: 50,
        span: 18625..18627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 649,
        column: 51,
        span: 18627..18628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 649,
        column: 53,
        span: 18628..18630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 649,
        column: 54,
        span: 18630..18631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 649,
        column: 55,
        span: 18631..18632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 650,
        column: 7,
        span: 18633..18639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 650,
        column: 8,
        span: 18639..18640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 650,
        column: 10,
        span: 18640..18642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 650,
        column: 11,
        span: 18642..18643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 650,
        column: 15,
        span: 18643..18647,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 650,
        column: 16,
        span: 18647..18648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tan",
        ),
        line: 650,
        column: 19,
        span: 18648..18651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 650,
        column: 20,
        span: 18651..18652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 650,
        column: 24,
        span: 18652..18656,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 650,
        column: 25,
        span: 18656..18657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 650,
        column: 27,
        span: 18657..18659,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 650,
        column: 29,
        span: 18660..18661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 650,
        column: 31,
        span: 18661..18663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 650,
        column: 32,
        span: 18663..18664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 650,
        column: 33,
        span: 18664..18665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 650,
        column: 35,
        span: 18665..18667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 650,
        column: 36,
        span: 18667..18668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 650,
        column: 37,
        span: 18668..18669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 651,
        column: 7,
        span: 18670..18676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
        column: 8,
        span: 18676..18677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 651,
        column: 10,
        span: 18677..18679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
        column: 11,
        span: 18679..18680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 651,
        column: 15,
        span: 18680..18684,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 651,
        column: 16,
        span: 18684..18685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 651,
        column: 19,
        span: 18685..18688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
        column: 20,
        span: 18688..18689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 651,
        column: 24,
        span: 18689..18693,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 651,
        column: 25,
        span: 18693..18694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 651,
        column: 27,
        span: 18694..18696,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 651,
        column: 29,
        span: 18697..18698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
        column: 31,
        span: 18698..18700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
        column: 32,
        span: 18700..18701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 651,
        column: 33,
        span: 18701..18702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
        column: 35,
        span: 18702..18704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
        column: 36,
        span: 18704..18705,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 651,
        column: 40,
        span: 18706..18709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 651,
        column: 43,
        span: 18710..18712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
        column: 44,
        span: 18712..18713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 651,
        column: 48,
        span: 18713..18717,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 651,
        column: 49,
        span: 18717..18718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 651,
        column: 52,
        span: 18718..18721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
        column: 53,
        span: 18721..18722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 651,
        column: 57,
        span: 18722..18726,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 651,
        column: 58,
        span: 18726..18727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 651,
        column: 60,
        span: 18727..18729,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 651,
        column: 62,
        span: 18730..18731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
        column: 64,
        span: 18731..18733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
        column: 65,
        span: 18733..18734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 651,
        column: 66,
        span: 18734..18735,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
        column: 68,
        span: 18735..18737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
        column: 69,
        span: 18737..18738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
        column: 70,
        span: 18738..18739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 652,
        column: 7,
        span: 18740..18746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
        column: 8,
        span: 18746..18747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 652,
        column: 10,
        span: 18747..18749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
        column: 11,
        span: 18749..18750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 652,
        column: 15,
        span: 18750..18754,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 652,
        column: 16,
        span: 18754..18755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "atan",
        ),
        line: 652,
        column: 20,
        span: 18755..18759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
        column: 21,
        span: 18759..18760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 652,
        column: 22,
        span: 18759..18761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 652,
        column: 23,
        span: 18761..18762,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 652,
        column: 24,
        span: 18762..18763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 652,
        column: 29,
        span: 18764..18768,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 652,
        column: 30,
        span: 18768..18769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 652,
        column: 32,
        span: 18769..18771,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 652,
        column: 34,
        span: 18772..18773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 652,
        column: 36,
        span: 18773..18775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 652,
        column: 37,
        span: 18775..18776,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 652,
        column: 41,
        span: 18777..18780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 652,
        column: 44,
        span: 18781..18783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
        column: 45,
        span: 18783..18784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 652,
        column: 49,
        span: 18784..18788,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 652,
        column: 50,
        span: 18788..18789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "acos",
        ),
        line: 652,
        column: 54,
        span: 18789..18793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
        column: 55,
        span: 18793..18794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 652,
        column: 56,
        span: 18793..18795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 652,
        column: 57,
        span: 18795..18796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 652,
        column: 58,
        span: 18796..18797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 652,
        column: 63,
        span: 18798..18802,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 652,
        column: 64,
        span: 18802..18803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 652,
        column: 66,
        span: 18803..18805,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 652,
        column: 68,
        span: 18806..18807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 652,
        column: 70,
        span: 18807..18809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 652,
        column: 71,
        span: 18809..18810,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 652,
        column: 0,
        span: 18811..18814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 653,
        column: 5,
        span: 18817..18819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 653,
        column: 6,
        span: 18819..18820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 653,
        column: 10,
        span: 18820..18824,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 653,
        column: 11,
        span: 18824..18825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asin",
        ),
        line: 653,
        column: 15,
        span: 18825..18829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 653,
        column: 16,
        span: 18829..18830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 653,
        column: 17,
        span: 18829..18831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 653,
        column: 18,
        span: 18831..18832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 653,
        column: 19,
        span: 18832..18833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 653,
        column: 24,
        span: 18834..18838,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 653,
        column: 25,
        span: 18838..18839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 653,
        column: 27,
        span: 18839..18841,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 653,
        column: 29,
        span: 18842..18843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 653,
        column: 31,
        span: 18843..18845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 653,
        column: 32,
        span: 18845..18846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 653,
        column: 33,
        span: 18846..18847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 654,
        column: 7,
        span: 18848..18854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 8,
        span: 18854..18855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 654,
        column: 10,
        span: 18855..18857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 11,
        span: 18857..18858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 654,
        column: 15,
        span: 18858..18862,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
        column: 16,
        span: 18862..18863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        line: 654,
        column: 19,
        span: 18863..18866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 20,
        span: 18866..18867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 654,
        column: 24,
        span: 18867..18871,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
        column: 25,
        span: 18871..18872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 654,
        column: 27,
        span: 18872..18874,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 654,
        column: 29,
        span: 18875..18876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
        column: 31,
        span: 18876..18878,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 32,
        span: 18878..18879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 654,
        column: 33,
        span: 18879..18880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
        column: 36,
        span: 18880..18883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 37,
        span: 18883..18884,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 654,
        column: 41,
        span: 18885..18888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 654,
        column: 44,
        span: 18889..18891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 45,
        span: 18891..18892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 654,
        column: 49,
        span: 18892..18896,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
        column: 50,
        span: 18896..18897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rad",
        ),
        line: 654,
        column: 53,
        span: 18897..18900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 54,
        span: 18900..18901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
        column: 56,
        span: 18900..18903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 57,
        span: 18903..18904,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 654,
        column: 58,
        span: 18904..18905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 654,
        column: 63,
        span: 18906..18910,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
        column: 64,
        span: 18910..18911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 654,
        column: 66,
        span: 18911..18913,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 654,
        column: 68,
        span: 18914..18915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
        column: 70,
        span: 18915..18917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 71,
        span: 18917..18918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 72,
        span: 18918..18919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 655,
        column: 7,
        span: 18920..18926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
        column: 8,
        span: 18926..18927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 655,
        column: 12,
        span: 18927..18931,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 655,
        column: 13,
        span: 18931..18932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 655,
        column: 16,
        span: 18932..18935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
        column: 17,
        span: 18935..18936,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 655,
        column: 18,
        span: 18936..18937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".43",
                },
            ),
        ),
        line: 655,
        column: 23,
        span: 18936..18942,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
        column: 24,
        span: 18942..18943,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 655,
        column: 27,
        span: 18944..18946,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".43",
                },
            ),
        ),
        line: 655,
        column: 33,
        span: 18946..18952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
        column: 34,
        span: 18952..18953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 656,
        column: 7,
        span: 18954..18960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 8,
        span: 18960..18961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 656,
        column: 11,
        span: 18961..18964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 12,
        span: 18964..18965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 656,
        column: 16,
        span: 18965..18969,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 656,
        column: 17,
        span: 18969..18970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 656,
        column: 20,
        span: 18970..18973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 21,
        span: 18973..18974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 656,
        column: 27,
        span: 18974..18980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 28,
        span: 18980..18981,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 656,
        column: 29,
        span: 18981..18982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 656,
        column: 36,
        span: 18983..18989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 37,
        span: 18989..18990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 38,
        span: 18990..18991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 657,
        column: 7,
        span: 18992..18998,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 657,
        column: 8,
        span: 18998..18999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 657,
        column: 11,
        span: 18999..19002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 657,
        column: 12,
        span: 19002..19003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 657,
        column: 16,
        span: 19003..19007,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 657,
        column: 17,
        span: 19007..19008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 657,
        column: 20,
        span: 19008..19011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 657,
        column: 21,
        span: 19011..19012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 657,
        column: 27,
        span: 19012..19018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 657,
        column: 28,
        span: 19018..19019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 657,
        column: 29,
        span: 19019..19020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 657,
        column: 36,
        span: 19021..19027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 657,
        column: 37,
        span: 19027..19028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 657,
        column: 38,
        span: 19028..19029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 658,
        column: 7,
        span: 19030..19036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
        column: 8,
        span: 19036..19037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 658,
        column: 11,
        span: 19037..19040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
        column: 12,
        span: 19040..19041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 658,
        column: 16,
        span: 19041..19045,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 658,
        column: 17,
        span: 19045..19046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 658,
        column: 20,
        span: 19046..19049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
        column: 21,
        span: 19049..19050,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 658,
        column: 22,
        span: 19050..19051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 658,
        column: 28,
        span: 19051..19057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
        column: 29,
        span: 19057..19058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 658,
        column: 30,
        span: 19058..19059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 658,
        column: 37,
        span: 19060..19066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
        column: 38,
        span: 19066..19067,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
        column: 39,
        span: 19067..19068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 659,
        column: 7,
        span: 19069..19075,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 659,
        column: 8,
        span: 19075..19076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 659,
        column: 10,
        span: 19076..19078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 659,
        column: 11,
        span: 19078..19079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 659,
        column: 15,
        span: 19079..19083,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 659,
        column: 16,
        span: 19083..19084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "atan",
        ),
        line: 659,
        column: 20,
        span: 19084..19088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 659,
        column: 21,
        span: 19088..19089,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 659,
        column: 22,
        span: 19088..19090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 659,
        column: 23,
        span: 19090..19091,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 659,
        column: 25,
        span: 19091..19093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 659,
        column: 26,
        span: 19093..19094,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 659,
        column: 27,
        span: 19094..19095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 659,
        column: 32,
        span: 19096..19100,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 659,
        column: 33,
        span: 19100..19101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 659,
        column: 35,
        span: 19101..19103,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 659,
        column: 37,
        span: 19104..19105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 659,
        column: 39,
        span: 19105..19107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 659,
        column: 40,
        span: 19107..19108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 659,
        column: 41,
        span: 19108..19109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 660,
        column: 7,
        span: 19110..19116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 660,
        column: 8,
        span: 19116..19117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 660,
        column: 12,
        span: 19117..19121,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 660,
        column: 13,
        span: 19121..19122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 660,
        column: 17,
        span: 19122..19126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 660,
        column: 18,
        span: 19126..19127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 660,
        column: 20,
        span: 19126..19129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 660,
        column: 21,
        span: 19129..19130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 660,
        column: 23,
        span: 19130..19132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 660,
        column: 24,
        span: 19132..19133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 660,
        column: 27,
        span: 19134..19136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 660,
        column: 29,
        span: 19136..19138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 660,
        column: 30,
        span: 19138..19139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 661,
        column: 7,
        span: 19140..19146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 661,
        column: 8,
        span: 19146..19147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 661,
        column: 10,
        span: 19147..19149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 661,
        column: 11,
        span: 19149..19150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 661,
        column: 15,
        span: 19150..19154,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 661,
        column: 16,
        span: 19154..19155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sqrt",
        ),
        line: 661,
        column: 20,
        span: 19155..19159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 661,
        column: 21,
        span: 19159..19160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 661,
        column: 23,
        span: 19159..19162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 661,
        column: 24,
        span: 19162..19163,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 661,
        column: 26,
        span: 19164..19165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 661,
        column: 28,
        span: 19165..19167,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 661,
        column: 29,
        span: 19167..19168,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 661,
        column: 32,
        span: 19168..19171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 661,
        column: 33,
        span: 19171..19172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 661,
        column: 34,
        span: 19172..19173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 662,
        column: 7,
        span: 19174..19180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
        column: 8,
        span: 19180..19181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 662,
        column: 10,
        span: 19181..19183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
        column: 11,
        span: 19183..19184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 662,
        column: 15,
        span: 19184..19188,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 662,
        column: 16,
        span: 19188..19189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 662,
        column: 19,
        span: 19189..19192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
        column: 20,
        span: 19192..19193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 662,
        column: 21,
        span: 19192..19194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 662,
        column: 22,
        span: 19194..19195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 662,
        column: 25,
        span: 19195..19198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
        column: 26,
        span: 19198..19199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 662,
        column: 27,
        span: 19199..19200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 662,
        column: 32,
        span: 19201..19205,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 662,
        column: 33,
        span: 19205..19206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 662,
        column: 36,
        span: 19206..19209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
        column: 37,
        span: 19209..19210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 662,
        column: 38,
        span: 19209..19211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
        column: 39,
        span: 19211..19212,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 662,
        column: 41,
        span: 19213..19214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 662,
        column: 46,
        span: 19215..19219,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 662,
        column: 47,
        span: 19219..19220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 662,
        column: 50,
        span: 19220..19223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
        column: 51,
        span: 19223..19224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 662,
        column: 53,
        span: 19223..19226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
        column: 54,
        span: 19226..19227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
        column: 55,
        span: 19227..19228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
        column: 56,
        span: 19228..19229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 663,
        column: 7,
        span: 19230..19236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 663,
        column: 8,
        span: 19236..19237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 663,
        column: 10,
        span: 19237..19239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 663,
        column: 11,
        span: 19239..19240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 663,
        column: 15,
        span: 19240..19244,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 663,
        column: 16,
        span: 19244..19245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 663,
        column: 19,
        span: 19245..19248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 663,
        column: 20,
        span: 19248..19249,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 663,
        column: 21,
        span: 19248..19250,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 663,
        column: 22,
        span: 19250..19251,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 663,
        column: 24,
        span: 19251..19253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
        column: 25,
        span: 19253..19254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 663,
        column: 26,
        span: 19254..19255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 663,
        column: 28,
        span: 19255..19257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
        column: 29,
        span: 19257..19258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
        column: 30,
        span: 19258..19259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 664,
        column: 7,
        span: 19260..19266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
        column: 8,
        span: 19266..19267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 664,
        column: 10,
        span: 19267..19269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
        column: 11,
        span: 19269..19270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 664,
        column: 15,
        span: 19270..19274,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 664,
        column: 16,
        span: 19274..19275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 664,
        column: 19,
        span: 19275..19278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
        column: 20,
        span: 19278..19279,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 664,
        column: 21,
        span: 19278..19280,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 664,
        column: 22,
        span: 19280..19281,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 664,
        column: 24,
        span: 19281..19283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
        column: 25,
        span: 19283..19284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 664,
        column: 26,
        span: 19284..19285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 664,
        column: 28,
        span: 19285..19287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
        column: 29,
        span: 19287..19288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
        column: 30,
        span: 19288..19289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 665,
        column: 7,
        span: 19290..19296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 665,
        column: 8,
        span: 19296..19297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 665,
        column: 10,
        span: 19297..19299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 665,
        column: 11,
        span: 19299..19300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 665,
        column: 15,
        span: 19300..19304,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 665,
        column: 16,
        span: 19304..19305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exp",
        ),
        line: 665,
        column: 19,
        span: 19305..19308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 665,
        column: 20,
        span: 19308..19309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 665,
        column: 21,
        span: 19308..19310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 665,
        column: 22,
        span: 19310..19311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 665,
        column: 23,
        span: 19311..19312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 665,
        column: 25,
        span: 19312..19314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 665,
        column: 26,
        span: 19314..19315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 665,
        column: 27,
        span: 19315..19316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 666,
        column: 7,
        span: 19317..19323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
        column: 8,
        span: 19323..19324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 666,
        column: 10,
        span: 19324..19326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
        column: 11,
        span: 19326..19327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 666,
        column: 15,
        span: 19327..19331,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 666,
        column: 16,
        span: 19331..19332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 666,
        column: 19,
        span: 19332..19335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
        column: 20,
        span: 19335..19336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 666,
        column: 22,
        span: 19335..19338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
        column: 23,
        span: 19338..19339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 666,
        column: 24,
        span: 19339..19340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 666,
        column: 29,
        span: 19341..19345,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 666,
        column: 30,
        span: 19345..19346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 666,
        column: 33,
        span: 19346..19349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
        column: 34,
        span: 19349..19350,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 666,
        column: 36,
        span: 19349..19352,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 666,
        column: 38,
        span: 19353..19354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
        column: 40,
        span: 19355..19356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 666,
        column: 41,
        span: 19355..19357,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 666,
        column: 43,
        span: 19358..19359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 666,
        column: 48,
        span: 19360..19364,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 666,
        column: 49,
        span: 19364..19365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 666,
        column: 51,
        span: 19365..19367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
        column: 52,
        span: 19367..19368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
        column: 53,
        span: 19368..19369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
        column: 54,
        span: 19369..19370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
        column: 55,
        span: 19370..19371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 669,
        column: 7,
        span: 19374..19380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
        column: 8,
        span: 19380..19381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 669,
        column: 16,
        span: 19381..19389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
        column: 17,
        span: 19389..19390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' 1.3e-2 '",
        ),
        line: 669,
        column: 27,
        span: 19390..19400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
        column: 28,
        span: 19400..19401,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 669,
        column: 31,
        span: 19402..19404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
                exponent: "-2",
            },
        ),
        line: 669,
        column: 38,
        span: 19404..19411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
        column: 39,
        span: 19411..19412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 670,
        column: 7,
        span: 19413..19419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 670,
        column: 8,
        span: 19419..19420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 670,
        column: 16,
        span: 19420..19428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 670,
        column: 17,
        span: 19428..19429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -1.00000000000001 '",
        ),
        line: 670,
        column: 38,
        span: 19429..19450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 670,
        column: 39,
        span: 19450..19451,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 670,
        column: 42,
        span: 19452..19454,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 670,
        column: 44,
        span: 19455..19456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".00000000000001",
                },
            ),
        ),
        line: 670,
        column: 60,
        span: 19455..19472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 670,
        column: 61,
        span: 19472..19473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 674,
        column: 7,
        span: 19520..19526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
        column: 8,
        span: 19526..19527,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388609",
                    after_decimal: "",
                },
            ),
        ),
        line: 674,
        column: 15,
        span: 19526..19534,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 674,
        column: 17,
        span: 19535..19536,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 674,
        column: 19,
        span: 19537..19538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388609",
                    after_decimal: "",
                },
            ),
        ),
        line: 674,
        column: 26,
        span: 19537..19545,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 674,
        column: 29,
        span: 19546..19548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 674,
        column: 31,
        span: 19548..19550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
        column: 32,
        span: 19550..19551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 675,
        column: 7,
        span: 19552..19558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 675,
        column: 8,
        span: 19558..19559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388608",
                    after_decimal: "",
                },
            ),
        ),
        line: 675,
        column: 15,
        span: 19558..19566,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 675,
        column: 17,
        span: 19567..19568,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 675,
        column: 19,
        span: 19569..19570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388608",
                    after_decimal: "",
                },
            ),
        ),
        line: 675,
        column: 26,
        span: 19569..19577,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 675,
        column: 29,
        span: 19578..19580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 675,
        column: 31,
        span: 19580..19582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 675,
        column: 32,
        span: 19582..19583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 676,
        column: 7,
        span: 19584..19590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
        column: 8,
        span: 19590..19591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388607",
                    after_decimal: "",
                },
            ),
        ),
        line: 676,
        column: 15,
        span: 19590..19598,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 676,
        column: 17,
        span: 19599..19600,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 676,
        column: 19,
        span: 19601..19602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388607",
                    after_decimal: "",
                },
            ),
        ),
        line: 676,
        column: 26,
        span: 19601..19609,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 676,
        column: 29,
        span: 19610..19612,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 676,
        column: 31,
        span: 19612..19614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
        column: 32,
        span: 19614..19615,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 680,
        column: 3,
        span: 19619..19621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 681,
        column: 9,
        span: 19648..19654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 10,
        span: 19654..19655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 681,
        column: 13,
        span: 19655..19658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 14,
        span: 19658..19659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 681,
        column: 18,
        span: 19659..19663,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 681,
        column: 19,
        span: 19663..19664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 681,
        column: 24,
        span: 19664..19669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 25,
        span: 19669..19670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 681,
        column: 28,
        span: 19669..19673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 29,
        span: 19673..19674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 681,
        column: 30,
        span: 19674..19675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 681,
        column: 32,
        span: 19675..19677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 33,
        span: 19677..19678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 34,
        span: 19678..19679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 682,
        column: 9,
        span: 19682..19688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 10,
        span: 19688..19689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 682,
        column: 13,
        span: 19689..19692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 14,
        span: 19692..19693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 682,
        column: 18,
        span: 19693..19697,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 682,
        column: 19,
        span: 19697..19698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 682,
        column: 23,
        span: 19698..19702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 24,
        span: 19702..19703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 682,
        column: 27,
        span: 19702..19706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 28,
        span: 19706..19707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 682,
        column: 29,
        span: 19707..19708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 682,
        column: 31,
        span: 19708..19710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 32,
        span: 19710..19711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 33,
        span: 19711..19712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 683,
        column: 9,
        span: 19715..19721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
        column: 10,
        span: 19721..19722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 683,
        column: 13,
        span: 19722..19725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
        column: 14,
        span: 19725..19726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 683,
        column: 18,
        span: 19726..19730,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 683,
        column: 19,
        span: 19730..19731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 683,
        column: 24,
        span: 19731..19736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
        column: 25,
        span: 19736..19737,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 683,
        column: 26,
        span: 19737..19738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 683,
        column: 29,
        span: 19737..19741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
        column: 30,
        span: 19741..19742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 683,
        column: 31,
        span: 19742..19743,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 683,
        column: 33,
        span: 19744..19745,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 683,
        column: 34,
        span: 19744..19746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
        column: 35,
        span: 19746..19747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
        column: 36,
        span: 19747..19748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 684,
        column: 9,
        span: 19751..19757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
        column: 10,
        span: 19757..19758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 684,
        column: 13,
        span: 19758..19761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
        column: 14,
        span: 19761..19762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 684,
        column: 18,
        span: 19762..19766,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 684,
        column: 19,
        span: 19766..19767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 684,
        column: 23,
        span: 19767..19771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
        column: 24,
        span: 19771..19772,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 684,
        column: 25,
        span: 19772..19773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 684,
        column: 28,
        span: 19772..19776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
        column: 29,
        span: 19776..19777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 684,
        column: 30,
        span: 19777..19778,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 684,
        column: 32,
        span: 19779..19780,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 684,
        column: 33,
        span: 19779..19781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
        column: 34,
        span: 19781..19782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
        column: 35,
        span: 19782..19783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 685,
        column: 9,
        span: 19786..19792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 685,
        column: 10,
        span: 19792..19793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 685,
        column: 13,
        span: 19793..19796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 685,
        column: 14,
        span: 19796..19797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 685,
        column: 18,
        span: 19797..19801,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 685,
        column: 19,
        span: 19801..19802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 685,
        column: 24,
        span: 19802..19807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 685,
        column: 25,
        span: 19807..19808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 685,
        column: 31,
        span: 19808..19814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 685,
        column: 32,
        span: 19814..19815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 685,
        column: 33,
        span: 19815..19816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 685,
        column: 40,
        span: 19817..19823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 685,
        column: 41,
        span: 19823..19824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 685,
        column: 42,
        span: 19824..19825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 686,
        column: 9,
        span: 19828..19834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 686,
        column: 10,
        span: 19834..19835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 686,
        column: 13,
        span: 19835..19838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 686,
        column: 14,
        span: 19838..19839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 686,
        column: 18,
        span: 19839..19843,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 686,
        column: 19,
        span: 19843..19844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 686,
        column: 23,
        span: 19844..19848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 686,
        column: 24,
        span: 19848..19849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 686,
        column: 30,
        span: 19849..19855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 686,
        column: 31,
        span: 19855..19856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 686,
        column: 32,
        span: 19856..19857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 686,
        column: 39,
        span: 19858..19864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 686,
        column: 40,
        span: 19864..19865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 686,
        column: 41,
        span: 19865..19866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 687,
        column: 9,
        span: 19869..19875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 10,
        span: 19875..19876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 687,
        column: 13,
        span: 19876..19879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 14,
        span: 19879..19880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 687,
        column: 18,
        span: 19880..19884,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 687,
        column: 19,
        span: 19884..19885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 687,
        column: 24,
        span: 19885..19890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 25,
        span: 19890..19891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 687,
        column: 31,
        span: 19891..19897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 32,
        span: 19897..19898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 687,
        column: 33,
        span: 19898..19899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 687,
        column: 40,
        span: 19900..19906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 41,
        span: 19906..19907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 42,
        span: 19907..19908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 688,
        column: 9,
        span: 19911..19917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
        column: 10,
        span: 19917..19918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 688,
        column: 13,
        span: 19918..19921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
        column: 14,
        span: 19921..19922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 688,
        column: 18,
        span: 19922..19926,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 688,
        column: 19,
        span: 19926..19927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 688,
        column: 24,
        span: 19927..19932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
        column: 25,
        span: 19932..19933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 688,
        column: 31,
        span: 19933..19939,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 688,
        column: 33,
        span: 19940..19941,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 688,
        column: 37,
        span: 19941..19945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
        column: 38,
        span: 19945..19946,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 688,
        column: 39,
        span: 19946..19947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 688,
        column: 46,
        span: 19948..19954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
        column: 47,
        span: 19954..19955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
        column: 48,
        span: 19955..19956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 689,
        column: 9,
        span: 19959..19965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 689,
        column: 10,
        span: 19965..19966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 689,
        column: 13,
        span: 19966..19969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 689,
        column: 14,
        span: 19969..19970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 689,
        column: 18,
        span: 19970..19974,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 689,
        column: 19,
        span: 19974..19975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 689,
        column: 23,
        span: 19975..19979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 689,
        column: 24,
        span: 19979..19980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 689,
        column: 30,
        span: 19980..19986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 689,
        column: 31,
        span: 19986..19987,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 689,
        column: 32,
        span: 19987..19988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 689,
        column: 39,
        span: 19989..19995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 689,
        column: 40,
        span: 19995..19996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 689,
        column: 41,
        span: 19996..19997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 690,
        column: 9,
        span: 20000..20006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 690,
        column: 10,
        span: 20006..20007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 690,
        column: 13,
        span: 20007..20010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 690,
        column: 14,
        span: 20010..20011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 690,
        column: 18,
        span: 20011..20015,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 690,
        column: 19,
        span: 20015..20016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 690,
        column: 23,
        span: 20016..20020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 690,
        column: 24,
        span: 20020..20021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 690,
        column: 30,
        span: 20021..20027,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 690,
        column: 32,
        span: 20028..20029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 690,
        column: 36,
        span: 20029..20033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 690,
        column: 37,
        span: 20033..20034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 690,
        column: 38,
        span: 20034..20035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 690,
        column: 45,
        span: 20036..20042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 690,
        column: 46,
        span: 20042..20043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 690,
        column: 47,
        span: 20043..20044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 691,
        column: 9,
        span: 20047..20053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 691,
        column: 10,
        span: 20053..20054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 691,
        column: 14,
        span: 20054..20058,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 691,
        column: 15,
        span: 20058..20059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 691,
        column: 20,
        span: 20059..20064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 691,
        column: 21,
        span: 20064..20065,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 691,
        column: 25,
        span: 20064..20069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 691,
        column: 26,
        span: 20069..20070,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 691,
        column: 29,
        span: 20071..20073,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 691,
        column: 34,
        span: 20073..20078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 691,
        column: 35,
        span: 20078..20079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 692,
        column: 9,
        span: 20082..20088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 692,
        column: 10,
        span: 20088..20089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 692,
        column: 14,
        span: 20089..20093,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 692,
        column: 15,
        span: 20093..20094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 692,
        column: 19,
        span: 20094..20098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 692,
        column: 20,
        span: 20098..20099,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 692,
        column: 24,
        span: 20098..20103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 692,
        column: 25,
        span: 20103..20104,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 692,
        column: 28,
        span: 20105..20107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 692,
        column: 33,
        span: 20107..20112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 692,
        column: 34,
        span: 20112..20113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 693,
        column: 9,
        span: 20116..20122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 693,
        column: 10,
        span: 20122..20123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 693,
        column: 14,
        span: 20123..20127,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 693,
        column: 15,
        span: 20127..20128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 693,
        column: 20,
        span: 20128..20133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 693,
        column: 21,
        span: 20133..20134,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 693,
        column: 22,
        span: 20134..20135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 693,
        column: 26,
        span: 20134..20139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 693,
        column: 27,
        span: 20139..20140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 693,
        column: 30,
        span: 20141..20143,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 693,
        column: 32,
        span: 20144..20145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 693,
        column: 36,
        span: 20144..20149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 693,
        column: 37,
        span: 20149..20150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 694,
        column: 9,
        span: 20153..20159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 694,
        column: 10,
        span: 20159..20160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 694,
        column: 14,
        span: 20160..20164,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 694,
        column: 15,
        span: 20164..20165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 694,
        column: 19,
        span: 20165..20169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 694,
        column: 20,
        span: 20169..20170,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 694,
        column: 21,
        span: 20170..20171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 694,
        column: 25,
        span: 20170..20175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 694,
        column: 26,
        span: 20175..20176,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 694,
        column: 29,
        span: 20177..20179,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 694,
        column: 31,
        span: 20180..20181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 694,
        column: 35,
        span: 20180..20185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 694,
        column: 36,
        span: 20185..20186,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 695,
        column: 6,
        span: 20189..20192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 695,
        column: 8,
        span: 20193..20194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 695,
        column: 9,
        span: 20194..20195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 695,
        column: 11,
        span: 20196..20197,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 695,
        column: 14,
        span: 20198..20200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 695,
        column: 20,
        span: 20201..20206,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 695,
        column: 22,
        span: 20207..20208,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
        column: 25,
        span: 20208..20211,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 695,
        column: 26,
        span: 20211..20212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
        column: 29,
        span: 20212..20215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 695,
        column: 30,
        span: 20215..20216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "63",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
        column: 33,
        span: 20216..20219,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 695,
        column: 34,
        span: 20219..20220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
        column: 37,
        span: 20220..20223,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 695,
        column: 39,
        span: 20224..20225,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 695,
        column: 0,
        span: 20226..20228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 696,
        column: 11,
        span: 20233..20239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 696,
        column: 12,
        span: 20239..20240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 696,
        column: 16,
        span: 20240..20244,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 696,
        column: 17,
        span: 20244..20245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 696,
        column: 22,
        span: 20245..20250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 696,
        column: 23,
        span: 20250..20251,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 696,
        column: 24,
        span: 20250..20252,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 696,
        column: 26,
        span: 20253..20254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 696,
        column: 28,
        span: 20255..20256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 696,
        column: 29,
        span: 20256..20257,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 696,
        column: 32,
        span: 20258..20260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 696,
        column: 34,
        span: 20260..20262,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 696,
        column: 36,
        span: 20263..20264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 696,
        column: 38,
        span: 20265..20266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 696,
        column: 39,
        span: 20266..20267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 697,
        column: 11,
        span: 20272..20278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 697,
        column: 12,
        span: 20278..20279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 697,
        column: 16,
        span: 20279..20283,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 697,
        column: 17,
        span: 20283..20284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 697,
        column: 22,
        span: 20284..20289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 697,
        column: 23,
        span: 20289..20290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 697,
        column: 24,
        span: 20289..20291,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 697,
        column: 26,
        span: 20292..20293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 697,
        column: 28,
        span: 20294..20295,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 697,
        column: 30,
        span: 20296..20297,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 697,
        column: 34,
        span: 20297..20301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 697,
        column: 35,
        span: 20301..20302,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 697,
        column: 38,
        span: 20303..20305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 697,
        column: 40,
        span: 20305..20307,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 697,
        column: 42,
        span: 20308..20309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 697,
        column: 44,
        span: 20310..20311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 697,
        column: 45,
        span: 20311..20312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 698,
        column: 11,
        span: 20317..20323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 698,
        column: 12,
        span: 20323..20324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 698,
        column: 16,
        span: 20324..20328,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 698,
        column: 17,
        span: 20328..20329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 698,
        column: 21,
        span: 20329..20333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 698,
        column: 22,
        span: 20333..20334,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 698,
        column: 23,
        span: 20333..20335,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 698,
        column: 25,
        span: 20336..20337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 698,
        column: 27,
        span: 20338..20339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 698,
        column: 28,
        span: 20339..20340,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 698,
        column: 31,
        span: 20341..20343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 698,
        column: 33,
        span: 20343..20345,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 698,
        column: 35,
        span: 20346..20347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 698,
        column: 37,
        span: 20348..20349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 698,
        column: 38,
        span: 20349..20350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 699,
        column: 11,
        span: 20355..20361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
        column: 12,
        span: 20361..20362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 699,
        column: 16,
        span: 20362..20366,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 699,
        column: 17,
        span: 20366..20367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 699,
        column: 21,
        span: 20367..20371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
        column: 22,
        span: 20371..20372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 699,
        column: 23,
        span: 20371..20373,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 699,
        column: 25,
        span: 20374..20375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 699,
        column: 27,
        span: 20376..20377,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 699,
        column: 29,
        span: 20378..20379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 699,
        column: 33,
        span: 20379..20383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
        column: 34,
        span: 20383..20384,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 699,
        column: 37,
        span: 20385..20387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 699,
        column: 39,
        span: 20387..20389,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 699,
        column: 41,
        span: 20390..20391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 699,
        column: 43,
        span: 20392..20393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
        column: 44,
        span: 20393..20394,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 700,
        column: 0,
        span: 20397..20400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 701,
        column: 13,
        span: 20403..20413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 701,
        column: 14,
        span: 20413..20414,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number expected\"",
        ),
        line: 701,
        column: 31,
        span: 20414..20431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 701,
        column: 32,
        span: 20431..20432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 701,
        column: 37,
        span: 20433..20437,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 701,
        column: 38,
        span: 20437..20438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 701,
        column: 43,
        span: 20438..20443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 701,
        column: 44,
        span: 20443..20444,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 701,
        column: 46,
        span: 20445..20446,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 701,
        column: 47,
        span: 20446..20447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 701,
        column: 48,
        span: 20447..20448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 702,
        column: 13,
        span: 20451..20461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 702,
        column: 14,
        span: 20461..20462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number expected\"",
        ),
        line: 702,
        column: 31,
        span: 20462..20479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 702,
        column: 32,
        span: 20479..20480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 702,
        column: 37,
        span: 20481..20485,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 702,
        column: 38,
        span: 20485..20486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 702,
        column: 42,
        span: 20486..20490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 702,
        column: 43,
        span: 20490..20491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 702,
        column: 49,
        span: 20492..20497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 702,
        column: 50,
        span: 20497..20498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 703,
        column: 9,
        span: 20501..20507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
        column: 10,
        span: 20507..20508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 703,
        column: 13,
        span: 20508..20511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
        column: 14,
        span: 20511..20512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 703,
        column: 18,
        span: 20512..20516,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
        column: 19,
        span: 20516..20517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 703,
        column: 28,
        span: 20517..20526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
        column: 29,
        span: 20526..20527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 703,
        column: 35,
        span: 20527..20533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
        column: 36,
        span: 20533..20534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 703,
        column: 37,
        span: 20534..20535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 703,
        column: 44,
        span: 20536..20542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
        column: 45,
        span: 20542..20543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
        column: 46,
        span: 20543..20544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 704,
        column: 9,
        span: 20547..20553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
        column: 10,
        span: 20553..20554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 704,
        column: 13,
        span: 20554..20557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
        column: 14,
        span: 20557..20558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 704,
        column: 18,
        span: 20558..20562,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 704,
        column: 19,
        span: 20562..20563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 704,
        column: 28,
        span: 20563..20572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
        column: 29,
        span: 20572..20573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 704,
        column: 35,
        span: 20573..20579,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 704,
        column: 38,
        span: 20580..20582,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 704,
        column: 41,
        span: 20583..20585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
        column: 42,
        span: 20585..20586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 704,
        column: 43,
        span: 20586..20587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 704,
        column: 50,
        span: 20588..20594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
        column: 51,
        span: 20594..20595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
        column: 52,
        span: 20595..20596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 705,
        column: 9,
        span: 20599..20605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 705,
        column: 10,
        span: 20605..20606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 705,
        column: 13,
        span: 20606..20609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 705,
        column: 14,
        span: 20609..20610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 705,
        column: 18,
        span: 20610..20614,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 705,
        column: 19,
        span: 20614..20615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 705,
        column: 28,
        span: 20615..20624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 705,
        column: 29,
        span: 20624..20625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 705,
        column: 35,
        span: 20625..20631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 705,
        column: 36,
        span: 20631..20632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 705,
        column: 37,
        span: 20632..20633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 705,
        column: 44,
        span: 20634..20640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 705,
        column: 45,
        span: 20640..20641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 705,
        column: 46,
        span: 20641..20642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 706,
        column: 9,
        span: 20645..20651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
        column: 10,
        span: 20651..20652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 706,
        column: 13,
        span: 20652..20655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
        column: 14,
        span: 20655..20656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 706,
        column: 18,
        span: 20656..20660,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 706,
        column: 19,
        span: 20660..20661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 706,
        column: 28,
        span: 20661..20670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
        column: 29,
        span: 20670..20671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 706,
        column: 35,
        span: 20671..20677,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 706,
        column: 38,
        span: 20678..20680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 706,
        column: 41,
        span: 20681..20683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
        column: 42,
        span: 20683..20684,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 706,
        column: 43,
        span: 20684..20685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 706,
        column: 50,
        span: 20686..20692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
        column: 51,
        span: 20692..20693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
        column: 52,
        span: 20693..20694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 707,
        column: 9,
        span: 20697..20703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
        column: 10,
        span: 20703..20704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 707,
        column: 13,
        span: 20704..20707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
        column: 14,
        span: 20707..20708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 707,
        column: 18,
        span: 20708..20712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 707,
        column: 19,
        span: 20712..20713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 707,
        column: 28,
        span: 20713..20722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
        column: 29,
        span: 20722..20723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 707,
        column: 35,
        span: 20723..20729,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 707,
        column: 37,
        span: 20730..20731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 707,
        column: 41,
        span: 20731..20735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
        column: 42,
        span: 20735..20736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 707,
        column: 43,
        span: 20736..20737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 707,
        column: 50,
        span: 20738..20744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
        column: 51,
        span: 20744..20745,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
        column: 52,
        span: 20745..20746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 708,
        column: 9,
        span: 20749..20755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 708,
        column: 10,
        span: 20755..20756,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 708,
        column: 13,
        span: 20756..20759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 708,
        column: 18,
        span: 20760..20764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 708,
        column: 19,
        span: 20764..20765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 708,
        column: 28,
        span: 20765..20774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 708,
        column: 29,
        span: 20774..20775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 708,
        column: 32,
        span: 20774..20778,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 708,
        column: 34,
        span: 20779..20780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 708,
        column: 41,
        span: 20781..20787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 708,
        column: 42,
        span: 20787..20788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 708,
        column: 43,
        span: 20788..20789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 709,
        column: 9,
        span: 20792..20798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
        column: 10,
        span: 20798..20799,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 709,
        column: 13,
        span: 20799..20802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 709,
        column: 18,
        span: 20803..20807,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 709,
        column: 19,
        span: 20807..20808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 709,
        column: 28,
        span: 20808..20817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
        column: 29,
        span: 20817..20818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 709,
        column: 33,
        span: 20818..20822,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 709,
        column: 34,
        span: 20822..20823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 709,
        column: 36,
        span: 20823..20825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
        column: 37,
        span: 20825..20826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
        column: 38,
        span: 20826..20827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 710,
        column: 9,
        span: 20830..20836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
        column: 10,
        span: 20836..20837,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 710,
        column: 13,
        span: 20837..20840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 710,
        column: 18,
        span: 20841..20845,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
        column: 19,
        span: 20845..20846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 710,
        column: 28,
        span: 20846..20855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
        column: 29,
        span: 20855..20856,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 710,
        column: 30,
        span: 20856..20857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 710,
        column: 34,
        span: 20857..20861,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
        column: 35,
        span: 20861..20862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 710,
        column: 37,
        span: 20862..20864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
        column: 38,
        span: 20864..20865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
        column: 39,
        span: 20865..20866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 711,
        column: 9,
        span: 20869..20875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 711,
        column: 10,
        span: 20875..20876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 711,
        column: 14,
        span: 20876..20880,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 711,
        column: 15,
        span: 20880..20881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 711,
        column: 20,
        span: 20881..20886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 711,
        column: 21,
        span: 20886..20887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 711,
        column: 25,
        span: 20887..20891,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 711,
        column: 26,
        span: 20891..20892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 711,
        column: 30,
        span: 20892..20896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 711,
        column: 31,
        span: 20896..20897,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 711,
        column: 34,
        span: 20898..20900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 711,
        column: 39,
        span: 20901..20905,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 711,
        column: 40,
        span: 20905..20906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 711,
        column: 44,
        span: 20906..20910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 711,
        column: 45,
        span: 20910..20911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 712,
        column: 9,
        span: 20914..20920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 712,
        column: 10,
        span: 20920..20921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 712,
        column: 14,
        span: 20921..20925,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 712,
        column: 15,
        span: 20925..20926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 712,
        column: 19,
        span: 20926..20930,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 712,
        column: 20,
        span: 20930..20931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 712,
        column: 24,
        span: 20931..20935,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 712,
        column: 25,
        span: 20935..20936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 712,
        column: 29,
        span: 20936..20940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 712,
        column: 30,
        span: 20940..20941,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 712,
        column: 33,
        span: 20942..20944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 712,
        column: 38,
        span: 20945..20949,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 712,
        column: 39,
        span: 20949..20950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 712,
        column: 43,
        span: 20950..20954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 712,
        column: 44,
        span: 20954..20955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 713,
        column: 9,
        span: 20958..20964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 713,
        column: 10,
        span: 20964..20965,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 713,
        column: 13,
        span: 20965..20968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 713,
        column: 18,
        span: 20969..20973,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 713,
        column: 19,
        span: 20973..20974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 713,
        column: 28,
        span: 20974..20983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 713,
        column: 29,
        span: 20983..20984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 713,
        column: 33,
        span: 20984..20988,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 713,
        column: 34,
        span: 20988..20989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 713,
        column: 38,
        span: 20989..20993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 713,
        column: 39,
        span: 20993..20994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 713,
        column: 40,
        span: 20994..20995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 714,
        column: 9,
        span: 20998..21004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 714,
        column: 10,
        span: 21004..21005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 714,
        column: 14,
        span: 21005..21009,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 714,
        column: 15,
        span: 21009..21010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 714,
        column: 20,
        span: 21010..21015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 714,
        column: 21,
        span: 21015..21016,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 714,
        column: 22,
        span: 21016..21017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 714,
        column: 26,
        span: 21017..21021,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 714,
        column: 27,
        span: 21021..21022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 714,
        column: 31,
        span: 21022..21026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 714,
        column: 32,
        span: 21026..21027,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 714,
        column: 35,
        span: 21028..21030,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 714,
        column: 37,
        span: 21031..21032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 714,
        column: 41,
        span: 21032..21036,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 714,
        column: 42,
        span: 21036..21037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 714,
        column: 46,
        span: 21037..21041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 714,
        column: 47,
        span: 21041..21042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 715,
        column: 9,
        span: 21045..21051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 715,
        column: 10,
        span: 21051..21052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 715,
        column: 14,
        span: 21052..21056,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 715,
        column: 15,
        span: 21056..21057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 715,
        column: 19,
        span: 21057..21061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 715,
        column: 20,
        span: 21061..21062,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 715,
        column: 21,
        span: 21062..21063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 715,
        column: 25,
        span: 21063..21067,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 715,
        column: 26,
        span: 21067..21068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 715,
        column: 30,
        span: 21068..21072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 715,
        column: 31,
        span: 21072..21073,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 715,
        column: 34,
        span: 21074..21076,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 715,
        column: 36,
        span: 21077..21078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 715,
        column: 40,
        span: 21078..21082,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 715,
        column: 41,
        span: 21082..21083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 715,
        column: 45,
        span: 21083..21087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 715,
        column: 46,
        span: 21087..21088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 716,
        column: 9,
        span: 21091..21097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
        column: 10,
        span: 21097..21098,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 716,
        column: 13,
        span: 21098..21101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 716,
        column: 18,
        span: 21102..21106,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 716,
        column: 19,
        span: 21106..21107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 716,
        column: 28,
        span: 21107..21116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
        column: 29,
        span: 21116..21117,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 716,
        column: 30,
        span: 21117..21118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 716,
        column: 34,
        span: 21118..21122,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 716,
        column: 35,
        span: 21122..21123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 716,
        column: 39,
        span: 21123..21127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
        column: 40,
        span: 21127..21128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
        column: 41,
        span: 21128..21129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 717,
        column: 9,
        span: 21132..21138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 717,
        column: 10,
        span: 21138..21139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 717,
        column: 14,
        span: 21139..21143,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 717,
        column: 15,
        span: 21143..21144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 717,
        column: 24,
        span: 21144..21153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 717,
        column: 25,
        span: 21153..21154,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"34.0\"",
        ),
        line: 717,
        column: 31,
        span: 21154..21160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 717,
        column: 32,
        span: 21160..21161,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 717,
        column: 35,
        span: 21162..21164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 717,
        column: 38,
        span: 21164..21167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 717,
        column: 39,
        span: 21167..21168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 718,
        column: 9,
        span: 21171..21177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 718,
        column: 10,
        span: 21177..21178,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 718,
        column: 13,
        span: 21178..21181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 718,
        column: 18,
        span: 21182..21186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 718,
        column: 19,
        span: 21186..21187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 718,
        column: 28,
        span: 21187..21196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 718,
        column: 29,
        span: 21196..21197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"34.3\"",
        ),
        line: 718,
        column: 35,
        span: 21197..21203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 718,
        column: 36,
        span: 21203..21204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 718,
        column: 37,
        span: 21204..21205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 719,
        column: 9,
        span: 21208..21214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 719,
        column: 10,
        span: 21214..21215,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 719,
        column: 13,
        span: 21215..21218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 719,
        column: 18,
        span: 21219..21223,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 719,
        column: 19,
        span: 21223..21224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 719,
        column: 28,
        span: 21224..21233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 719,
        column: 29,
        span: 21233..21234,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 719,
        column: 30,
        span: 21234..21235,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 719,
        column: 31,
        span: 21235..21236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 719,
        column: 32,
        span: 21236..21237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 719,
        column: 33,
        span: 21237..21238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 720,
        column: 9,
        span: 21241..21247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 720,
        column: 10,
        span: 21247..21248,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 720,
        column: 13,
        span: 21248..21251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 720,
        column: 18,
        span: 21252..21256,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 720,
        column: 19,
        span: 21256..21257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 720,
        column: 28,
        span: 21257..21266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 720,
        column: 29,
        span: 21266..21267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 720,
        column: 30,
        span: 21266..21268,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 720,
        column: 32,
        span: 21269..21270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 720,
        column: 34,
        span: 21270..21272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 720,
        column: 35,
        span: 21272..21273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 720,
        column: 36,
        span: 21273..21274,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 721,
        column: 0,
        span: 21282..21285,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 725,
        column: 4,
        span: 21317..21320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 725,
        column: 6,
        span: 21321..21322,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 725,
        column: 8,
        span: 21323..21324,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 725,
        column: 10,
        span: 21325..21326,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 725,
        column: 11,
        span: 21325..21327,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 725,
        column: 12,
        span: 21327..21328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 725,
        column: 14,
        span: 21328..21330,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 725,
        column: 0,
        span: 21331..21333,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 726,
        column: 6,
        span: 21336..21339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 726,
        column: 8,
        span: 21340..21341,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 726,
        column: 10,
        span: 21342..21343,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 726,
        column: 12,
        span: 21344..21345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 726,
        column: 13,
        span: 21344..21346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 726,
        column: 14,
        span: 21346..21347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 726,
        column: 16,
        span: 21347..21349,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 726,
        column: 0,
        span: 21350..21352,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 727,
        column: 7,
        span: 21357..21359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 727,
        column: 9,
        span: 21360..21361,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 727,
        column: 12,
        span: 21362..21364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 727,
        column: 14,
        span: 21364..21366,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 727,
        column: 0,
        span: 21367..21371,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 728,
        column: 12,
        span: 21378..21383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 728,
        column: 15,
        span: 21384..21386,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 728,
        column: 17,
        span: 21387..21388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 728,
        column: 22,
        span: 21389..21393,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 728,
        column: 23,
        span: 21393..21394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 728,
        column: 27,
        span: 21394..21398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 728,
        column: 28,
        span: 21398..21399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 728,
        column: 29,
        span: 21399..21400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 728,
        column: 30,
        span: 21400..21401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 728,
        column: 32,
        span: 21402..21403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 728,
        column: 33,
        span: 21403..21404,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 729,
        column: 12,
        span: 21411..21416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 729,
        column: 15,
        span: 21417..21419,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 729,
        column: 17,
        span: 21420..21421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 729,
        column: 22,
        span: 21422..21426,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 729,
        column: 23,
        span: 21426..21427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 729,
        column: 27,
        span: 21427..21431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 729,
        column: 28,
        span: 21431..21432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 729,
        column: 29,
        span: 21432..21433,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 729,
        column: 31,
        span: 21434..21435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 729,
        column: 35,
        span: 21435..21439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 729,
        column: 36,
        span: 21439..21440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 729,
        column: 38,
        span: 21441..21442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 729,
        column: 39,
        span: 21442..21443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 730,
        column: 13,
        span: 21450..21456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 730,
        column: 14,
        span: 21456..21457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 730,
        column: 16,
        span: 21457..21459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 730,
        column: 19,
        span: 21460..21462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 730,
        column: 22,
        span: 21463..21465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 730,
        column: 23,
        span: 21465..21466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 731,
        column: 13,
        span: 21473..21479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 731,
        column: 14,
        span: 21479..21480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 731,
        column: 18,
        span: 21480..21484,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 731,
        column: 19,
        span: 21484..21485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 731,
        column: 23,
        span: 21485..21489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 731,
        column: 24,
        span: 21489..21490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 731,
        column: 26,
        span: 21490..21492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 731,
        column: 27,
        span: 21492..21493,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 731,
        column: 30,
        span: 21494..21496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'integer'",
        ),
        line: 731,
        column: 40,
        span: 21497..21506,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 731,
        column: 44,
        span: 21507..21510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 731,
        column: 49,
        span: 21511..21515,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 731,
        column: 50,
        span: 21515..21516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 731,
        column: 54,
        span: 21516..21520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 731,
        column: 55,
        span: 21520..21521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 731,
        column: 57,
        span: 21521..21523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 731,
        column: 58,
        span: 21523..21524,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 731,
        column: 61,
        span: 21525..21527,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'float'",
        ),
        line: 731,
        column: 69,
        span: 21528..21535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 731,
        column: 70,
        span: 21535..21536,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 732,
        column: 9,
        span: 21543..21545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 732,
        column: 11,
        span: 21546..21547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 732,
        column: 12,
        span: 21547..21548,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 732,
        column: 15,
        span: 21549..21551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 732,
        column: 17,
        span: 21551..21553,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 732,
        column: 21,
        span: 21554..21557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 732,
        column: 23,
        span: 21558..21559,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 732,
        column: 26,
        span: 21560..21562,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 732,
        column: 28,
        span: 21562..21564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 732,
        column: 29,
        span: 21564..21565,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 732,
        column: 32,
        span: 21566..21568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 732,
        column: 34,
        span: 21569..21570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 732,
        column: 35,
        span: 21570..21571,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 732,
        column: 38,
        span: 21572..21574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 732,
        column: 40,
        span: 21574..21576,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 732,
        column: 44,
        span: 21577..21580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 732,
        column: 46,
        span: 21581..21582,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 732,
        column: 49,
        span: 21583..21585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 732,
        column: 51,
        span: 21585..21587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 732,
        column: 52,
        span: 21587..21588,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 732,
        column: 55,
        span: 21589..21591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 732,
        column: 58,
        span: 21592..21594,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 732,
        column: 61,
        span: 21595..21597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 732,
        column: 63,
        span: 21597..21599,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 732,
        column: 0,
        span: 21600..21604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 733,
        column: 15,
        span: 21613..21619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 733,
        column: 16,
        span: 21619..21620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 733,
        column: 19,
        span: 21620..21623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 733,
        column: 20,
        span: 21623..21624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 733,
        column: 22,
        span: 21624..21626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 733,
        column: 23,
        span: 21626..21627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 733,
        column: 25,
        span: 21628..21629,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 733,
        column: 27,
        span: 21630..21631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 733,
        column: 29,
        span: 21632..21633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 733,
        column: 30,
        span: 21633..21634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 733,
        column: 31,
        span: 21634..21635,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 734,
        column: 0,
        span: 21642..21645,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 735,
        column: 0,
        span: 21650..21653,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 736,
        column: 0,
        span: 21656..21659,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 737,
        column: 0,
        span: 21660..21663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 738,
        column: 7,
        span: 21664..21670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
        column: 8,
        span: 21670..21671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 738,
        column: 11,
        span: 21671..21674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
        column: 12,
        span: 21674..21675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 738,
        column: 16,
        span: 21675..21679,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 738,
        column: 17,
        span: 21679..21680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 738,
        column: 21,
        span: 21680..21684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
        column: 22,
        span: 21684..21685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 738,
        column: 28,
        span: 21685..21691,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
        column: 29,
        span: 21691..21692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 738,
        column: 36,
        span: 21693..21699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
        column: 37,
        span: 21699..21700,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
        column: 38,
        span: 21700..21701,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 738,
        column: 40,
        span: 21701..21703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
        column: 41,
        span: 21703..21704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
        column: 42,
        span: 21704..21705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 739,
        column: 7,
        span: 21706..21712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 739,
        column: 8,
        span: 21712..21713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 739,
        column: 11,
        span: 21713..21716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 739,
        column: 12,
        span: 21716..21717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 739,
        column: 16,
        span: 21717..21721,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 739,
        column: 17,
        span: 21721..21722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 739,
        column: 21,
        span: 21722..21726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 739,
        column: 22,
        span: 21726..21727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 739,
        column: 28,
        span: 21727..21733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 739,
        column: 29,
        span: 21733..21734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 739,
        column: 36,
        span: 21735..21741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 739,
        column: 37,
        span: 21741..21742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 739,
        column: 38,
        span: 21742..21743,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 739,
        column: 40,
        span: 21743..21745,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 739,
        column: 41,
        span: 21745..21746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 739,
        column: 42,
        span: 21746..21747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 740,
        column: 7,
        span: 21748..21754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 740,
        column: 8,
        span: 21754..21755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 740,
        column: 11,
        span: 21755..21758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 740,
        column: 12,
        span: 21758..21759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 740,
        column: 16,
        span: 21759..21763,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 740,
        column: 17,
        span: 21763..21764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 740,
        column: 21,
        span: 21764..21768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 740,
        column: 22,
        span: 21768..21769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 740,
        column: 28,
        span: 21769..21775,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 740,
        column: 30,
        span: 21776..21777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 740,
        column: 32,
        span: 21777..21779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 740,
        column: 33,
        span: 21779..21780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 740,
        column: 40,
        span: 21781..21787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 740,
        column: 41,
        span: 21787..21788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 740,
        column: 42,
        span: 21788..21789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 740,
        column: 49,
        span: 21790..21796,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 740,
        column: 51,
        span: 21797..21798,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 740,
        column: 53,
        span: 21798..21800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 740,
        column: 54,
        span: 21800..21801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 740,
        column: 55,
        span: 21801..21802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 741,
        column: 7,
        span: 21803..21809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
        column: 8,
        span: 21809..21810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 741,
        column: 11,
        span: 21810..21813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
        column: 12,
        span: 21813..21814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 741,
        column: 16,
        span: 21814..21818,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 741,
        column: 17,
        span: 21818..21819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 741,
        column: 21,
        span: 21819..21823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
        column: 22,
        span: 21823..21824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 741,
        column: 28,
        span: 21824..21830,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 741,
        column: 30,
        span: 21831..21832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 741,
        column: 32,
        span: 21832..21834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 741,
        column: 33,
        span: 21834..21835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 741,
        column: 40,
        span: 21836..21842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 741,
        column: 41,
        span: 21842..21843,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 741,
        column: 42,
        span: 21843..21844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 741,
        column: 49,
        span: 21845..21851,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 741,
        column: 51,
        span: 21852..21853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 741,
        column: 53,
        span: 21853..21855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 741,
        column: 54,
        span: 21855..21856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 741,
        column: 55,
        span: 21856..21857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 743,
        column: 11,
        span: 21859..21869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 743,
        column: 12,
        span: 21869..21870,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zero\"",
        ),
        line: 743,
        column: 18,
        span: 21870..21876,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
        column: 19,
        span: 21876..21877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 743,
        column: 24,
        span: 21878..21882,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 743,
        column: 25,
        span: 21882..21883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 743,
        column: 29,
        span: 21883..21887,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
        column: 30,
        span: 21887..21888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 743,
        column: 32,
        span: 21888..21890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
        column: 33,
        span: 21890..21891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 743,
        column: 35,
        span: 21891..21893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 743,
        column: 36,
        span: 21893..21894,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 746,
        column: 3,
        span: 21897..21899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 747,
        column: 13,
        span: 21921..21931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 747,
        column: 14,
        span: 21931..21932,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value expected\"",
        ),
        line: 747,
        column: 30,
        span: 21932..21948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 747,
        column: 31,
        span: 21948..21949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 747,
        column: 36,
        span: 21950..21954,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 747,
        column: 37,
        span: 21954..21955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 747,
        column: 40,
        span: 21955..21958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 747,
        column: 41,
        span: 21958..21959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 748,
        column: 13,
        span: 21962..21972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 748,
        column: 14,
        span: 21972..21973,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value expected\"",
        ),
        line: 748,
        column: 30,
        span: 21973..21989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 748,
        column: 31,
        span: 21989..21990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 748,
        column: 36,
        span: 21991..21995,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 748,
        column: 37,
        span: 21995..21996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 748,
        column: 40,
        span: 21996..21999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 748,
        column: 41,
        span: 21999..22000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 749,
        column: 9,
        span: 22003..22009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
        column: 10,
        span: 22009..22010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 749,
        column: 13,
        span: 22010..22013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
        column: 14,
        span: 22013..22014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 749,
        column: 18,
        span: 22014..22018,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 749,
        column: 19,
        span: 22018..22019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 749,
        column: 22,
        span: 22019..22022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
        column: 23,
        span: 22022..22023,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 749,
        column: 24,
        span: 22022..22024,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
        column: 25,
        span: 22024..22025,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 749,
        column: 26,
        span: 22025..22026,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 749,
        column: 28,
        span: 22026..22028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
        column: 29,
        span: 22028..22029,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
        column: 30,
        span: 22029..22030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 750,
        column: 9,
        span: 22033..22039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
        column: 10,
        span: 22039..22040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 750,
        column: 13,
        span: 22040..22043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
        column: 14,
        span: 22043..22044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 750,
        column: 18,
        span: 22044..22048,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 750,
        column: 19,
        span: 22048..22049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 750,
        column: 22,
        span: 22049..22052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
        column: 23,
        span: 22052..22053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
        column: 24,
        span: 22052..22054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
        column: 25,
        span: 22054..22055,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
        column: 27,
        span: 22055..22057,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
        column: 28,
        span: 22057..22058,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
        column: 30,
        span: 22058..22060,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
        column: 31,
        span: 22060..22061,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
        column: 33,
        span: 22061..22063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
        column: 34,
        span: 22063..22064,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
        column: 35,
        span: 22064..22065,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
        column: 37,
        span: 22065..22067,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
        column: 38,
        span: 22067..22068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
        column: 39,
        span: 22068..22069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 751,
        column: 9,
        span: 22072..22078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 751,
        column: 10,
        span: 22078..22079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 751,
        column: 14,
        span: 22079..22083,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 751,
        column: 15,
        span: 22083..22084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 751,
        column: 18,
        span: 22084..22087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 751,
        column: 19,
        span: 22087..22088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 751,
        column: 25,
        span: 22088..22094,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 751,
        column: 26,
        span: 22094..22095,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 751,
        column: 32,
        span: 22095..22101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 751,
        column: 33,
        span: 22101..22102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 751,
        column: 36,
        span: 22103..22105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 751,
        column: 42,
        span: 22105..22111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 751,
        column: 43,
        span: 22111..22112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 752,
        column: 9,
        span: 22115..22121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
        column: 10,
        span: 22121..22122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 752,
        column: 13,
        span: 22122..22125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
        column: 14,
        span: 22125..22126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 752,
        column: 18,
        span: 22126..22130,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 752,
        column: 19,
        span: 22130..22131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 752,
        column: 22,
        span: 22131..22134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
        column: 23,
        span: 22134..22135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 752,
        column: 29,
        span: 22135..22141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 752,
        column: 30,
        span: 22141..22142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 752,
        column: 37,
        span: 22143..22149,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 752,
        column: 39,
        span: 22150..22151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 752,
        column: 41,
        span: 22151..22153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
        column: 42,
        span: 22153..22154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 752,
        column: 43,
        span: 22154..22155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 752,
        column: 50,
        span: 22156..22162,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 752,
        column: 52,
        span: 22163..22164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 752,
        column: 54,
        span: 22164..22166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
        column: 55,
        span: 22166..22167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
        column: 56,
        span: 22167..22168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 753,
        column: 9,
        span: 22171..22177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 753,
        column: 10,
        span: 22177..22178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 753,
        column: 13,
        span: 22178..22181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 753,
        column: 14,
        span: 22181..22182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 753,
        column: 18,
        span: 22182..22186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 753,
        column: 19,
        span: 22186..22187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 753,
        column: 22,
        span: 22187..22190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 753,
        column: 23,
        span: 22190..22191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 753,
        column: 24,
        span: 22190..22192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 753,
        column: 25,
        span: 22192..22193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 753,
        column: 26,
        span: 22193..22194,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 753,
        column: 28,
        span: 22194..22196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 753,
        column: 29,
        span: 22196..22197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 753,
        column: 30,
        span: 22197..22198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 754,
        column: 9,
        span: 22201..22207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
        column: 10,
        span: 22207..22208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 754,
        column: 13,
        span: 22208..22211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
        column: 14,
        span: 22211..22212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 754,
        column: 18,
        span: 22212..22216,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
        column: 19,
        span: 22216..22217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 754,
        column: 22,
        span: 22217..22220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
        column: 23,
        span: 22220..22221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
        column: 24,
        span: 22220..22222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
        column: 25,
        span: 22222..22223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
        column: 27,
        span: 22223..22225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
        column: 28,
        span: 22225..22226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
        column: 30,
        span: 22226..22228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
        column: 31,
        span: 22228..22229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
        column: 33,
        span: 22229..22231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
        column: 34,
        span: 22231..22232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
        column: 35,
        span: 22232..22233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
        column: 37,
        span: 22233..22235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
        column: 38,
        span: 22235..22236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
        column: 39,
        span: 22236..22237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 755,
        column: 9,
        span: 22240..22246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
        column: 10,
        span: 22246..22247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 755,
        column: 14,
        span: 22247..22251,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 755,
        column: 15,
        span: 22251..22252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 755,
        column: 18,
        span: 22252..22255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
        column: 19,
        span: 22255..22256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 755,
        column: 22,
        span: 22255..22259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
        column: 23,
        span: 22259..22260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 755,
        column: 27,
        span: 22260..22264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
        column: 28,
        span: 22264..22265,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 755,
        column: 30,
        span: 22266..22267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 755,
        column: 33,
        span: 22266..22270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
        column: 34,
        span: 22270..22271,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 755,
        column: 38,
        span: 22271..22275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
        column: 39,
        span: 22275..22276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 755,
        column: 42,
        span: 22277..22279,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 755,
        column: 44,
        span: 22280..22281,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 755,
        column: 47,
        span: 22280..22284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
        column: 48,
        span: 22284..22285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 756,
        column: 9,
        span: 22288..22294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 756,
        column: 10,
        span: 22294..22295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 756,
        column: 14,
        span: 22295..22299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 756,
        column: 15,
        span: 22299..22300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 756,
        column: 18,
        span: 22300..22303,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 756,
        column: 19,
        span: 22303..22304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 756,
        column: 22,
        span: 22303..22307,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 756,
        column: 23,
        span: 22307..22308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".7",
                },
            ),
        ),
        line: 756,
        column: 27,
        span: 22308..22312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 756,
        column: 28,
        span: 22312..22313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".72",
                },
            ),
        ),
        line: 756,
        column: 33,
        span: 22313..22318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 756,
        column: 34,
        span: 22318..22319,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 756,
        column: 37,
        span: 22320..22322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".7",
                },
            ),
        ),
        line: 756,
        column: 41,
        span: 22322..22326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 756,
        column: 42,
        span: 22326..22327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 757,
        column: 9,
        span: 22330..22336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 757,
        column: 10,
        span: 22336..22337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 757,
        column: 14,
        span: 22337..22341,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 757,
        column: 15,
        span: 22341..22342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 757,
        column: 18,
        span: 22342..22345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 757,
        column: 19,
        span: 22345..22346,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 757,
        column: 20,
        span: 22346..22347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 757,
        column: 25,
        span: 22346..22352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 757,
        column: 26,
        span: 22352..22353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 757,
        column: 33,
        span: 22354..22360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 757,
        column: 34,
        span: 22360..22361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 757,
        column: 37,
        span: 22362..22364,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 757,
        column: 39,
        span: 22365..22366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 757,
        column: 44,
        span: 22365..22371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 757,
        column: 45,
        span: 22371..22372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 758,
        column: 9,
        span: 22375..22381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 758,
        column: 10,
        span: 22381..22382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 758,
        column: 13,
        span: 22382..22385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 758,
        column: 14,
        span: 22385..22386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 758,
        column: 18,
        span: 22386..22390,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 758,
        column: 19,
        span: 22390..22391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 758,
        column: 22,
        span: 22391..22394,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 758,
        column: 23,
        span: 22394..22395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 758,
        column: 29,
        span: 22395..22401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 758,
        column: 30,
        span: 22401..22402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 758,
        column: 37,
        span: 22403..22409,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 758,
        column: 39,
        span: 22410..22411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 758,
        column: 41,
        span: 22411..22413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 758,
        column: 42,
        span: 22413..22414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 758,
        column: 43,
        span: 22414..22415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 758,
        column: 50,
        span: 22416..22422,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 758,
        column: 52,
        span: 22423..22424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 758,
        column: 54,
        span: 22424..22426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 758,
        column: 55,
        span: 22426..22427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 758,
        column: 56,
        span: 22427..22428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 759,
        column: 9,
        span: 22431..22437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 759,
        column: 10,
        span: 22437..22438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 759,
        column: 13,
        span: 22438..22441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 759,
        column: 14,
        span: 22441..22442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 759,
        column: 18,
        span: 22442..22446,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 759,
        column: 19,
        span: 22446..22447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 759,
        column: 22,
        span: 22447..22450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 759,
        column: 23,
        span: 22450..22451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 759,
        column: 29,
        span: 22451..22457,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 759,
        column: 31,
        span: 22458..22459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 759,
        column: 33,
        span: 22459..22461,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 759,
        column: 34,
        span: 22461..22462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 759,
        column: 41,
        span: 22463..22469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 759,
        column: 42,
        span: 22469..22470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 759,
        column: 49,
        span: 22471..22477,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 759,
        column: 51,
        span: 22478..22479,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 759,
        column: 53,
        span: 22479..22481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 759,
        column: 54,
        span: 22481..22482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 759,
        column: 55,
        span: 22482..22483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 759,
        column: 62,
        span: 22484..22490,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 759,
        column: 64,
        span: 22491..22492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 759,
        column: 66,
        span: 22492..22494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 759,
        column: 67,
        span: 22494..22495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 759,
        column: 68,
        span: 22495..22496,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 760,
        column: 0,
        span: 22497..22500,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 763,
        column: 6,
        span: 22534..22539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 763,
        column: 8,
        span: 22540..22541,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 763,
        column: 9,
        span: 22541..22542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 763,
        column: 11,
        span: 22543..22544,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 763,
        column: 13,
        span: 22545..22546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 763,
        column: 18,
        span: 22547..22551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 763,
        column: 19,
        span: 22551..22552,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'20'",
        ),
        line: 763,
        column: 24,
        span: 22553..22557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 764,
        column: 7,
        span: 22558..22564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 764,
        column: 8,
        span: 22564..22565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 764,
        column: 9,
        span: 22565..22566,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 764,
        column: 11,
        span: 22567..22568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
        column: 13,
        span: 22569..22570,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
        column: 16,
        span: 22571..22573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
        column: 20,
        span: 22573..22577,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 764,
        column: 24,
        span: 22578..22581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 764,
        column: 26,
        span: 22582..22583,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 764,
        column: 28,
        span: 22584..22585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
        column: 30,
        span: 22586..22587,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
        column: 33,
        span: 22588..22590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
        column: 36,
        span: 22590..22593,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 764,
        column: 40,
        span: 22594..22597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 764,
        column: 42,
        span: 22598..22599,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 764,
        column: 44,
        span: 22600..22601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
        column: 46,
        span: 22602..22603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
        column: 49,
        span: 22604..22606,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 764,
        column: 51,
        span: 22607..22608,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
        column: 53,
        span: 22607..22610,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 764,
        column: 57,
        span: 22611..22614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 764,
        column: 59,
        span: 22615..22616,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 764,
        column: 61,
        span: 22617..22618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
        column: 63,
        span: 22619..22620,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
        column: 66,
        span: 22621..22623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 764,
        column: 70,
        span: 22623..22627,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 764,
        column: 74,
        span: 22628..22631,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 764,
        column: 76,
        span: 22632..22633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
        column: 77,
        span: 22633..22634,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
        column: 80,
        span: 22635..22637,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 764,
        column: 82,
        span: 22638..22639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
        column: 84,
        span: 22638..22641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 764,
        column: 85,
        span: 22641..22642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 765,
        column: 7,
        span: 22643..22649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 765,
        column: 8,
        span: 22649..22650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 765,
        column: 9,
        span: 22650..22651,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 765,
        column: 12,
        span: 22652..22654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 765,
        column: 17,
        span: 22655..22659,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 765,
        column: 21,
        span: 22660..22663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 765,
        column: 23,
        span: 22664..22665,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 765,
        column: 26,
        span: 22666..22668,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'20'",
        ),
        line: 765,
        column: 31,
        span: 22669..22673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 765,
        column: 32,
        span: 22673..22674,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 768,
        column: 0,
        span: 22677..22679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 769,
        column: 8,
        span: 22682..22687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 769,
        column: 9,
        span: 22687..22688,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing -0 and NaN\"",
        ),
        line: 769,
        column: 29,
        span: 22688..22708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 769,
        column: 30,
        span: 22708..22709,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 770,
        column: 8,
        span: 22712..22717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 770,
        column: 11,
        span: 22718..22720,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 770,
        column: 13,
        span: 22721..22722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 770,
        column: 18,
        span: 22722..22727,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 770,
        column: 19,
        span: 22727..22728,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 770,
        column: 21,
        span: 22729..22730,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 770,
        column: 23,
        span: 22731..22732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 770,
        column: 0,
        span: 22731..22735,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 771,
        column: 8,
        span: 22738..22743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 771,
        column: 10,
        span: 22744..22745,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 771,
        column: 12,
        span: 22746..22747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 771,
        column: 17,
        span: 22747..22752,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 771,
        column: 18,
        span: 22752..22753,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 771,
        column: 20,
        span: 22754..22755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 771,
        column: 0,
        span: 22755..22759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 772,
        column: 9,
        span: 22762..22768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 772,
        column: 10,
        span: 22768..22769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 772,
        column: 12,
        span: 22769..22771,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 772,
        column: 15,
        span: 22772..22774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 772,
        column: 17,
        span: 22775..22776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 772,
        column: 18,
        span: 22776..22777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 773,
        column: 9,
        span: 22780..22786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 773,
        column: 10,
        span: 22786..22787,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 773,
        column: 11,
        span: 22786..22788,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 773,
        column: 13,
        span: 22789..22790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 773,
        column: 16,
        span: 22791..22793,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 773,
        column: 18,
        span: 22794..22795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 773,
        column: 20,
        span: 22795..22797,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 773,
        column: 24,
        span: 22798..22801,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 773,
        column: 26,
        span: 22801..22803,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 773,
        column: 28,
        span: 22804..22805,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 773,
        column: 30,
        span: 22805..22807,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 773,
        column: 32,
        span: 22808..22809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 773,
        column: 34,
        span: 22810..22811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 773,
        column: 35,
        span: 22811..22812,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 774,
        column: 8,
        span: 22815..22820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 774,
        column: 10,
        span: 22821..22822,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 774,
        column: 12,
        span: 22823..22824,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 774,
        column: 14,
        span: 22825..22826,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 774,
        column: 16,
        span: 22827..22828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 774,
        column: 18,
        span: 22828..22830,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 774,
        column: 19,
        span: 22830..22831,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 774,
        column: 21,
        span: 22832..22833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 774,
        column: 23,
        span: 22833..22835,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 774,
        column: 25,
        span: 22836..22837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 775,
        column: 9,
        span: 22840..22846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 775,
        column: 10,
        span: 22846..22847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 775,
        column: 11,
        span: 22847..22848,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 775,
        column: 12,
        span: 22848..22849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 775,
        column: 13,
        span: 22849..22850,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 775,
        column: 14,
        span: 22850..22851,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 775,
        column: 17,
        span: 22852..22854,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 775,
        column: 19,
        span: 22854..22856,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 775,
        column: 23,
        span: 22857..22860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 775,
        column: 25,
        span: 22861..22862,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 775,
        column: 26,
        span: 22862..22863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 775,
        column: 28,
        span: 22863..22865,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 775,
        column: 29,
        span: 22865..22866,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 775,
        column: 32,
        span: 22867..22869,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 775,
        column: 34,
        span: 22869..22871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 775,
        column: 35,
        span: 22871..22872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 776,
        column: 4,
        span: 22875..22876,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 776,
        column: 5,
        span: 22876..22877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 776,
        column: 6,
        span: 22877..22878,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 776,
        column: 7,
        span: 22878..22879,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 776,
        column: 9,
        span: 22880..22881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 776,
        column: 0,
        span: 22881..22883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 777,
        column: 9,
        span: 22886..22892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 777,
        column: 10,
        span: 22892..22893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 777,
        column: 11,
        span: 22893..22894,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 777,
        column: 12,
        span: 22894..22895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 777,
        column: 13,
        span: 22895..22896,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 777,
        column: 14,
        span: 22896..22897,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 777,
        column: 17,
        span: 22898..22900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 777,
        column: 19,
        span: 22900..22902,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 777,
        column: 23,
        span: 22903..22906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 777,
        column: 25,
        span: 22907..22908,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 777,
        column: 26,
        span: 22908..22909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 777,
        column: 28,
        span: 22909..22911,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 777,
        column: 29,
        span: 22911..22912,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 777,
        column: 32,
        span: 22913..22915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 777,
        column: 34,
        span: 22915..22917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 777,
        column: 35,
        span: 22917..22918,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 778,
        column: 8,
        span: 22921..22926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 778,
        column: 12,
        span: 22927..22930,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 778,
        column: 14,
        span: 22931..22932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 778,
        column: 19,
        span: 22933..22937,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 778,
        column: 20,
        span: 22937..22938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 778,
        column: 24,
        span: 22938..22942,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 778,
        column: 26,
        span: 22943..22944,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 778,
        column: 28,
        span: 22944..22946,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 778,
        column: 30,
        span: 22947..22948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 778,
        column: 0,
        span: 22948..22950,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 779,
        column: 8,
        span: 22953..22958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 779,
        column: 11,
        span: 22959..22961,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 779,
        column: 13,
        span: 22962..22963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 779,
        column: 18,
        span: 22963..22968,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 779,
        column: 19,
        span: 22968..22969,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 779,
        column: 21,
        span: 22970..22971,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 779,
        column: 23,
        span: 22972..22973,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 779,
        column: 24,
        span: 22972..22974,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 779,
        column: 26,
        span: 22975..22976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 779,
        column: 0,
        span: 22977..22980,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 780,
        column: 8,
        span: 22983..22988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 780,
        column: 10,
        span: 22989..22990,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 780,
        column: 12,
        span: 22991..22992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 780,
        column: 17,
        span: 22992..22997,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 780,
        column: 18,
        span: 22997..22998,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 780,
        column: 20,
        span: 22999..23000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 780,
        column: 22,
        span: 23000..23002,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 780,
        column: 24,
        span: 23003..23004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 780,
        column: 0,
        span: 23005..23008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 781,
        column: 9,
        span: 23011..23017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 781,
        column: 10,
        span: 23017..23018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 781,
        column: 12,
        span: 23018..23020,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 781,
        column: 15,
        span: 23021..23023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 781,
        column: 17,
        span: 23024..23025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 781,
        column: 18,
        span: 23025..23026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 782,
        column: 9,
        span: 23029..23035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 782,
        column: 10,
        span: 23035..23036,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 782,
        column: 11,
        span: 23035..23037,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 782,
        column: 13,
        span: 23038..23039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 782,
        column: 16,
        span: 23040..23042,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 782,
        column: 18,
        span: 23043..23044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 782,
        column: 20,
        span: 23044..23046,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 782,
        column: 24,
        span: 23047..23050,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 782,
        column: 26,
        span: 23050..23052,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 782,
        column: 28,
        span: 23053..23054,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 782,
        column: 30,
        span: 23054..23056,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 782,
        column: 32,
        span: 23057..23058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 782,
        column: 34,
        span: 23059..23060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 782,
        column: 35,
        span: 23060..23061,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 783,
        column: 8,
        span: 23064..23069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 783,
        column: 12,
        span: 23070..23073,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 783,
        column: 14,
        span: 23074..23075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 783,
        column: 19,
        span: 23075..23080,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 783,
        column: 20,
        span: 23080..23081,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 783,
        column: 22,
        span: 23082..23083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 783,
        column: 26,
        span: 23084..23087,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 783,
        column: 28,
        span: 23088..23089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 783,
        column: 0,
        span: 23090..23093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 784,
        column: 9,
        span: 23096..23102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 784,
        column: 10,
        span: 23102..23103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 784,
        column: 13,
        span: 23103..23106,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 784,
        column: 16,
        span: 23107..23109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 784,
        column: 20,
        span: 23110..23113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 784,
        column: 21,
        span: 23113..23114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 785,
        column: 9,
        span: 23117..23123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 785,
        column: 10,
        span: 23123..23124,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 785,
        column: 13,
        span: 23124..23127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 785,
        column: 15,
        span: 23128..23129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 785,
        column: 18,
        span: 23129..23132,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 785,
        column: 20,
        span: 23133..23134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 785,
        column: 24,
        span: 23135..23138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 785,
        column: 25,
        span: 23138..23139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 785,
        column: 26,
        span: 23139..23140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 786,
        column: 9,
        span: 23143..23149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 786,
        column: 10,
        span: 23149..23150,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 786,
        column: 13,
        span: 23150..23153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 786,
        column: 15,
        span: 23154..23155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 786,
        column: 18,
        span: 23155..23158,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 786,
        column: 21,
        span: 23159..23161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 786,
        column: 25,
        span: 23162..23165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 786,
        column: 26,
        span: 23165..23166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 786,
        column: 27,
        span: 23166..23167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 787,
        column: 9,
        span: 23170..23176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 787,
        column: 10,
        span: 23176..23177,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 787,
        column: 13,
        span: 23177..23180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 787,
        column: 15,
        span: 23181..23182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 787,
        column: 18,
        span: 23182..23185,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 787,
        column: 20,
        span: 23186..23187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 787,
        column: 24,
        span: 23188..23191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 787,
        column: 25,
        span: 23191..23192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 787,
        column: 26,
        span: 23192..23193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 788,
        column: 9,
        span: 23196..23202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 788,
        column: 10,
        span: 23202..23203,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 788,
        column: 13,
        span: 23203..23206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 788,
        column: 15,
        span: 23207..23208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 788,
        column: 18,
        span: 23208..23211,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 788,
        column: 21,
        span: 23212..23214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 788,
        column: 25,
        span: 23215..23218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 788,
        column: 26,
        span: 23218..23219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 788,
        column: 27,
        span: 23219..23220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 789,
        column: 9,
        span: 23223..23229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
        column: 10,
        span: 23229..23230,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 789,
        column: 13,
        span: 23230..23233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
        column: 15,
        span: 23234..23235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 789,
        column: 16,
        span: 23234..23236,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 789,
        column: 18,
        span: 23237..23238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 789,
        column: 22,
        span: 23239..23242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
        column: 23,
        span: 23242..23243,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 789,
        column: 27,
        span: 23244..23247,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 789,
        column: 31,
        span: 23248..23251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
        column: 33,
        span: 23252..23253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 789,
        column: 36,
        span: 23253..23256,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 789,
        column: 38,
        span: 23257..23258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 789,
        column: 40,
        span: 23258..23260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
        column: 41,
        span: 23260..23261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
        column: 42,
        span: 23261..23262,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 790,
        column: 8,
        span: 23265..23270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 790,
        column: 13,
        span: 23271..23275,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 790,
        column: 15,
        span: 23276..23277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 790,
        column: 20,
        span: 23277..23282,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 790,
        column: 21,
        span: 23282..23283,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 790,
        column: 23,
        span: 23284..23285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 790,
        column: 25,
        span: 23285..23287,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 790,
        column: 27,
        span: 23288..23289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 790,
        column: 0,
        span: 23289..23291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 791,
        column: 9,
        span: 23294..23300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
        column: 10,
        span: 23300..23301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 791,
        column: 13,
        span: 23301..23304,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 791,
        column: 16,
        span: 23305..23307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 791,
        column: 21,
        span: 23308..23312,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 791,
        column: 25,
        span: 23313..23316,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 791,
        column: 29,
        span: 23317..23320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
        column: 31,
        span: 23321..23322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 791,
        column: 34,
        span: 23322..23325,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 791,
        column: 37,
        span: 23326..23328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 791,
        column: 42,
        span: 23329..23333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
        column: 43,
        span: 23333..23334,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 791,
        column: 47,
        span: 23335..23338,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 791,
        column: 51,
        span: 23339..23342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
        column: 53,
        span: 23343..23344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 791,
        column: 57,
        span: 23344..23348,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 791,
        column: 60,
        span: 23349..23351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 791,
        column: 64,
        span: 23352..23355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
        column: 65,
        span: 23355..23356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
        column: 66,
        span: 23356..23357,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 792,
        column: 8,
        span: 23360..23365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 792,
        column: 10,
        span: 23366..23367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 792,
        column: 12,
        span: 23368..23369,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 792,
        column: 14,
        span: 23370..23371,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 792,
        column: 15,
        span: 23371..23372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 793,
        column: 9,
        span: 23375..23381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 793,
        column: 10,
        span: 23381..23382,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 793,
        column: 13,
        span: 23382..23385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 793,
        column: 19,
        span: 23386..23391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 793,
        column: 20,
        span: 23391..23392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 793,
        column: 26,
        span: 23392..23398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 793,
        column: 27,
        span: 23398..23399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 793,
        column: 29,
        span: 23400..23401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 793,
        column: 30,
        span: 23401..23402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 793,
        column: 34,
        span: 23403..23406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 793,
        column: 35,
        span: 23406..23407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 793,
        column: 37,
        span: 23407..23409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 793,
        column: 38,
        span: 23409..23410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 793,
        column: 39,
        span: 23410..23411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 794,
        column: 9,
        span: 23414..23420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 794,
        column: 10,
        span: 23420..23421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 794,
        column: 11,
        span: 23421..23422,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 794,
        column: 12,
        span: 23422..23423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 794,
        column: 15,
        span: 23423..23426,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 794,
        column: 16,
        span: 23426..23427,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 794,
        column: 19,
        span: 23428..23430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 794,
        column: 25,
        span: 23431..23436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 794,
        column: 26,
        span: 23436..23437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 795,
        column: 4,
        span: 23440..23441,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 795,
        column: 5,
        span: 23441..23442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 795,
        column: 6,
        span: 23441..23443,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 795,
        column: 7,
        span: 23443..23444,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 795,
        column: 9,
        span: 23445..23446,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 795,
        column: 0,
        span: 23446..23448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 796,
        column: 9,
        span: 23451..23457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 796,
        column: 10,
        span: 23457..23458,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 796,
        column: 13,
        span: 23458..23461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 796,
        column: 19,
        span: 23462..23467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 796,
        column: 20,
        span: 23467..23468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 796,
        column: 26,
        span: 23468..23474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 796,
        column: 27,
        span: 23474..23475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 796,
        column: 29,
        span: 23476..23477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 796,
        column: 30,
        span: 23477..23478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 796,
        column: 34,
        span: 23479..23482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 796,
        column: 35,
        span: 23482..23483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 796,
        column: 37,
        span: 23483..23485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 796,
        column: 38,
        span: 23485..23486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 796,
        column: 39,
        span: 23486..23487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 797,
        column: 9,
        span: 23490..23496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 797,
        column: 10,
        span: 23496..23497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 797,
        column: 11,
        span: 23497..23498,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 797,
        column: 12,
        span: 23498..23499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 797,
        column: 15,
        span: 23499..23502,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 797,
        column: 16,
        span: 23502..23503,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 797,
        column: 19,
        span: 23504..23506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 797,
        column: 25,
        span: 23507..23512,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 797,
        column: 26,
        span: 23512..23513,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 800,
        column: 8,
        span: 23643..23648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 800,
        column: 11,
        span: 23649..23651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
        column: 12,
        span: 23651..23652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 800,
        column: 15,
        span: 23653..23655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
        column: 16,
        span: 23655..23656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 800,
        column: 19,
        span: 23657..23659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
        column: 20,
        span: 23659..23660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 800,
        column: 23,
        span: 23661..23663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
        column: 24,
        span: 23663..23664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a5",
        ),
        line: 800,
        column: 27,
        span: 23665..23667,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 800,
        column: 29,
        span: 23668..23669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 800,
        column: 31,
        span: 23669..23671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
        column: 32,
        span: 23671..23672,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 800,
        column: 34,
        span: 23672..23674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
        column: 35,
        span: 23674..23675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\\0\"",
        ),
        line: 800,
        column: 54,
        span: 23676..23694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
        column: 55,
        span: 23694..23695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 800,
        column: 57,
        span: 23695..23697,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
        column: 58,
        span: 23697..23698,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\\0\"",
        ),
        line: 800,
        column: 77,
        span: 23699..23717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 801,
        column: 9,
        span: 23720..23726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 801,
        column: 10,
        span: 23726..23727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 801,
        column: 12,
        span: 23727..23729,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 801,
        column: 15,
        span: 23730..23732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 801,
        column: 18,
        span: 23733..23735,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 801,
        column: 22,
        span: 23736..23739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 801,
        column: 25,
        span: 23740..23742,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 801,
        column: 28,
        span: 23743..23745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 801,
        column: 31,
        span: 23746..23748,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 801,
        column: 35,
        span: 23749..23752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 801,
        column: 38,
        span: 23753..23755,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 801,
        column: 41,
        span: 23756..23758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 801,
        column: 44,
        span: 23759..23761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 801,
        column: 45,
        span: 23761..23762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 802,
        column: 9,
        span: 23765..23771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 802,
        column: 10,
        span: 23771..23772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 802,
        column: 12,
        span: 23772..23774,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 802,
        column: 15,
        span: 23775..23777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a5",
        ),
        line: 802,
        column: 18,
        span: 23778..23780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 802,
        column: 19,
        span: 23780..23781,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 803,
        column: 0,
        span: 23782..23785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 806,
        column: 6,
        span: 23788..23793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 806,
        column: 7,
        span: 23793..23794,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'math.random'\"",
        ),
        line: 806,
        column: 30,
        span: 23794..23817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 806,
        column: 31,
        span: 23817..23818,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 808,
        column: 6,
        span: 23820..23825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 808,
        column: 13,
        span: 23826..23832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 808,
        column: 14,
        span: 23832..23833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 808,
        column: 18,
        span: 23834..23837,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 808,
        column: 19,
        span: 23837..23838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 808,
        column: 23,
        span: 23839..23842,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 808,
        column: 25,
        span: 23843..23844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 808,
        column: 30,
        span: 23845..23849,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 808,
        column: 31,
        span: 23849..23850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 808,
        column: 37,
        span: 23850..23856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 808,
        column: 38,
        span: 23856..23857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 808,
        column: 43,
        span: 23858..23862,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 808,
        column: 44,
        span: 23862..23863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 808,
        column: 47,
        span: 23863..23866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 808,
        column: 48,
        span: 23866..23867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 808,
        column: 53,
        span: 23868..23872,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 808,
        column: 54,
        span: 23872..23873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 808,
        column: 0,
        span: 23873..23876,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 810,
        column: 6,
        span: 23878..23883,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 810,
        column: 15,
        span: 23884..23892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testnear",
        ),
        line: 810,
        column: 24,
        span: 23893..23901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 810,
        column: 25,
        span: 23901..23902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 810,
        column: 28,
        span: 23902..23905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 810,
        column: 29,
        span: 23905..23906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 810,
        column: 33,
        span: 23907..23910,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 810,
        column: 34,
        span: 23910..23911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tol",
        ),
        line: 810,
        column: 38,
        span: 23912..23915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 810,
        column: 39,
        span: 23915..23916,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 811,
        column: 9,
        span: 23919..23925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 811,
        column: 11,
        span: 23926..23927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 811,
        column: 15,
        span: 23927..23931,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 811,
        column: 16,
        span: 23931..23932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 811,
        column: 19,
        span: 23932..23935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 811,
        column: 20,
        span: 23935..23936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 811,
        column: 23,
        span: 23936..23939,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 811,
        column: 25,
        span: 23940..23941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 811,
        column: 29,
        span: 23942..23945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 811,
        column: 30,
        span: 23945..23946,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 811,
        column: 32,
        span: 23947..23948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 811,
        column: 36,
        span: 23949..23952,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 811,
        column: 38,
        span: 23953..23954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tol",
        ),
        line: 811,
        column: 42,
        span: 23955..23958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 811,
        column: 43,
        span: 23958..23959,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 812,
        column: 0,
        span: 23960..23963,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 817,
        column: 0,
        span: 24097..24099,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 819,
        column: 8,
        span: 24157..24162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 819,
        column: 10,
        span: 24163..24164,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 819,
        column: 12,
        span: 24165..24166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 819,
        column: 17,
        span: 24166..24171,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 819,
        column: 18,
        span: 24171..24172,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 819,
        column: 20,
        span: 24173..24174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7a7040a5",
            ),
        ),
        line: 819,
        column: 31,
        span: 24174..24185,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 820,
        column: 8,
        span: 24203..24208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 820,
        column: 10,
        span: 24209..24210,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 820,
        column: 12,
        span: 24211..24212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 820,
        column: 17,
        span: 24212..24217,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 820,
        column: 18,
        span: 24217..24218,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 820,
        column: 20,
        span: 24219..24220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xa323c9d6",
            ),
        ),
        line: 820,
        column: 31,
        span: 24220..24231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 822,
        column: 7,
        span: 24249..24253,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 822,
        column: 8,
        span: 24253..24254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 822,
        column: 18,
        span: 24254..24264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 822,
        column: 19,
        span: 24264..24265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1007",
                    after_decimal: "",
                },
            ),
        ),
        line: 822,
        column: 23,
        span: 24264..24269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 822,
        column: 24,
        span: 24269..24270,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 824,
        column: 8,
        span: 24330..24335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 824,
        column: 12,
        span: 24336..24339,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 824,
        column: 14,
        span: 24340..24341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 824,
        column: 16,
        span: 24342..24343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 824,
        column: 17,
        span: 24343..24344,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 824,
        column: 20,
        span: 24345..24347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 824,
        column: 23,
        span: 24347..24350,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 824,
        column: 25,
        span: 24351..24352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 824,
        column: 27,
        span: 24353..24354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 824,
        column: 28,
        span: 24354..24355,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 824,
        column: 30,
        span: 24356..24357,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 824,
        column: 32,
        span: 24358..24359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 824,
        column: 33,
        span: 24359..24360,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 824,
        column: 34,
        span: 24360..24361,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 824,
        column: 35,
        span: 24360..24362,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 824,
        column: 38,
        span: 24363..24365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 824,
        column: 46,
        span: 24366..24373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 824,
        column: 47,
        span: 24373..24374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 825,
        column: 9,
        span: 24377..24383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 825,
        column: 10,
        span: 24383..24384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 825,
        column: 16,
        span: 24384..24390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 825,
        column: 17,
        span: 24390..24391,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 825,
        column: 18,
        span: 24390..24392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 825,
        column: 19,
        span: 24392..24393,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 825,
        column: 22,
        span: 24394..24396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 825,
        column: 26,
        span: 24397..24400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 825,
        column: 27,
        span: 24400..24401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 827,
        column: 7,
        span: 24405..24409,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 827,
        column: 8,
        span: 24409..24410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 827,
        column: 18,
        span: 24410..24420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 827,
        column: 19,
        span: 24420..24421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1007",
                    after_decimal: "",
                },
            ),
        ),
        line: 827,
        column: 23,
        span: 24420..24425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 827,
        column: 24,
        span: 24425..24426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 827,
        column: 26,
        span: 24426..24428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 827,
        column: 27,
        span: 24428..24429,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 830,
        column: 8,
        span: 24549..24554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 830,
        column: 0,
        span: 24555..24558,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 831,
        column: 5,
        span: 24561..24563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 831,
        column: 15,
        span: 24564..24573,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 831,
        column: 18,
        span: 24574..24576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 831,
        column: 21,
        span: 24576..24579,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 831,
        column: 0,
        span: 24580..24584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 833,
        column: 8,
        span: 24630..24633,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 833,
        column: 10,
        span: 24634..24635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 833,
        column: 12,
        span: 24636..24637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 833,
        column: 13,
        span: 24637..24638,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 833,
        column: 16,
        span: 24639..24641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 833,
        column: 18,
        span: 24642..24643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 833,
        column: 20,
        span: 24642..24645,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 833,
        column: 22,
        span: 24646..24647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 833,
        column: 32,
        span: 24648..24657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 833,
        column: 33,
        span: 24657..24658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 833,
        column: 34,
        span: 24658..24659,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 833,
        column: 36,
        span: 24660..24661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 833,
        column: 38,
        span: 24661..24663,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 833,
        column: 40,
        span: 24664..24665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 833,
        column: 0,
        span: 24665..24668,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 834,
        column: 0,
        span: 24671..24675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 836,
        column: 8,
        span: 24753..24756,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 836,
        column: 10,
        span: 24757..24758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
        column: 12,
        span: 24759..24760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 836,
        column: 13,
        span: 24760..24761,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 836,
        column: 15,
        span: 24762..24763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 17,
        span: 24763..24765,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 836,
        column: 19,
        span: 24766..24767,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 22,
        span: 24767..24770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
        column: 23,
        span: 24770..24771,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 836,
        column: 25,
        span: 24772..24773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 27,
        span: 24773..24775,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 836,
        column: 29,
        span: 24776..24777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
        column: 31,
        span: 24778..24779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 836,
        column: 40,
        span: 24779..24788,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 836,
        column: 42,
        span: 24789..24790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 45,
        span: 24790..24793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
        column: 46,
        span: 24793..24794,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 836,
        column: 48,
        span: 24795..24796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
        column: 50,
        span: 24797..24798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
        column: 51,
        span: 24798..24799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 836,
        column: 52,
        span: 24799..24800,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 836,
        column: 55,
        span: 24801..24803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
        column: 57,
        span: 24804..24805,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 59,
        span: 24804..24807,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 836,
        column: 61,
        span: 24808..24809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 836,
        column: 71,
        span: 24810..24819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
        column: 72,
        span: 24819..24820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
        column: 73,
        span: 24820..24821,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 836,
        column: 75,
        span: 24822..24823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 77,
        span: 24823..24825,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 836,
        column: 79,
        span: 24826..24827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 82,
        span: 24827..24830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
        column: 83,
        span: 24830..24831,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 837,
        column: 0,
        span: 24834..24837,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 838,
        column: 8,
        span: 24840..24845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rand",
        ),
        line: 838,
        column: 13,
        span: 24846..24850,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 838,
        column: 15,
        span: 24851..24852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 838,
        column: 22,
        span: 24853..24859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 838,
        column: 23,
        span: 24859..24860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 838,
        column: 24,
        span: 24860..24861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 839,
        column: 9,
        span: 24864..24870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 839,
        column: 10,
        span: 24870..24871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 839,
        column: 12,
        span: 24871..24873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 839,
        column: 13,
        span: 24873..24874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rand",
        ),
        line: 839,
        column: 17,
        span: 24874..24878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 839,
        column: 18,
        span: 24878..24879,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".7a7040a5a323c9d6",
                },
            ),
        ),
        line: 839,
        column: 39,
        span: 24879..24900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 839,
        column: 40,
        span: 24900..24901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 839,
        column: 42,
        span: 24901..24903,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 839,
        column: 44,
        span: 24904..24905,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 839,
        column: 46,
        span: 24906..24907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 839,
        column: 55,
        span: 24907..24916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 839,
        column: 56,
        span: 24916..24917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 839,
        column: 57,
        span: 24917..24918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 840,
        column: 9,
        span: 24921..24927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 840,
        column: 10,
        span: 24927..24928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rand",
        ),
        line: 840,
        column: 14,
        span: 24928..24932,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 840,
        column: 16,
        span: 24933..24934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 840,
        column: 18,
        span: 24934..24936,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 840,
        column: 20,
        span: 24937..24938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 840,
        column: 30,
        span: 24939..24948,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 840,
        column: 33,
        span: 24949..24951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 840,
        column: 37,
        span: 24952..24955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 840,
        column: 38,
        span: 24955..24956,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 841,
        column: 0,
        span: 24957..24960,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 843,
        column: 0,
        span: 24962..24964,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 845,
        column: 8,
        span: 25003..25008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 845,
        column: 10,
        span: 25009..25010,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 845,
        column: 11,
        span: 25010..25011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 845,
        column: 13,
        span: 25012..25013,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 845,
        column: 15,
        span: 25014..25015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 845,
        column: 20,
        span: 25016..25020,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 845,
        column: 21,
        span: 25020..25021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 845,
        column: 31,
        span: 25021..25031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 845,
        column: 32,
        span: 25031..25032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 845,
        column: 33,
        span: 25032..25033,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 846,
        column: 8,
        span: 25036..25041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 846,
        column: 12,
        span: 25042..25045,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 846,
        column: 14,
        span: 25046..25047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 846,
        column: 19,
        span: 25048..25052,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 846,
        column: 20,
        span: 25052..25053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 846,
        column: 26,
        span: 25053..25059,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 846,
        column: 27,
        span: 25059..25060,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 846,
        column: 28,
        span: 25059..25061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 846,
        column: 29,
        span: 25061..25062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 847,
        column: 4,
        span: 25065..25066,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 847,
        column: 5,
        span: 25066..25067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 847,
        column: 7,
        span: 25068..25069,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 847,
        column: 9,
        span: 25070..25071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 847,
        column: 14,
        span: 25072..25076,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 847,
        column: 15,
        span: 25076..25077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 847,
        column: 25,
        span: 25077..25087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 847,
        column: 26,
        span: 25087..25088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 847,
        column: 27,
        span: 25088..25089,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 847,
        column: 28,
        span: 25089..25090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 847,
        column: 30,
        span: 25091..25092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 847,
        column: 31,
        span: 25092..25093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 848,
        column: 9,
        span: 25123..25129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 848,
        column: 10,
        span: 25129..25130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 848,
        column: 14,
        span: 25130..25134,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 848,
        column: 15,
        span: 25134..25135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 848,
        column: 21,
        span: 25135..25141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 848,
        column: 22,
        span: 25141..25142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 848,
        column: 23,
        span: 25141..25143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 848,
        column: 24,
        span: 25143..25144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 848,
        column: 27,
        span: 25145..25147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 848,
        column: 31,
        span: 25148..25151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 848,
        column: 32,
        span: 25151..25152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 849,
        column: 7,
        span: 25155..25159,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 849,
        column: 8,
        span: 25159..25160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 849,
        column: 18,
        span: 25160..25170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 849,
        column: 19,
        span: 25170..25171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 849,
        column: 20,
        span: 25171..25172,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 849,
        column: 21,
        span: 25172..25173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 849,
        column: 23,
        span: 25174..25175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 849,
        column: 24,
        span: 25175..25176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 850,
        column: 9,
        span: 25219..25225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 850,
        column: 10,
        span: 25225..25226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 850,
        column: 14,
        span: 25226..25230,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 850,
        column: 15,
        span: 25230..25231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 850,
        column: 21,
        span: 25231..25237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 850,
        column: 22,
        span: 25237..25238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 850,
        column: 23,
        span: 25237..25239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 850,
        column: 24,
        span: 25239..25240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 850,
        column: 27,
        span: 25241..25243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 850,
        column: 31,
        span: 25244..25247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 850,
        column: 32,
        span: 25247..25248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 852,
        column: 8,
        span: 25297..25302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 852,
        column: 9,
        span: 25302..25303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 852,
        column: 15,
        span: 25303..25309,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 852,
        column: 16,
        span: 25309..25310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 852,
        column: 22,
        span: 25310..25316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 852,
        column: 23,
        span: 25316..25317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"random seeds: %d, %d\"",
        ),
        line: 852,
        column: 45,
        span: 25317..25339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 852,
        column: 46,
        span: 25339..25340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 852,
        column: 48,
        span: 25341..25342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 852,
        column: 49,
        span: 25342..25343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 852,
        column: 51,
        span: 25344..25345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 852,
        column: 52,
        span: 25345..25346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 852,
        column: 53,
        span: 25346..25347,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 853,
        column: 0,
        span: 25348..25351,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 855,
        column: 3,
        span: 25353..25355,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 856,
        column: 8,
        span: 25424..25429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 856,
        column: 17,
        span: 25430..25438,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
        column: 19,
        span: 25439..25440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 856,
        column: 24,
        span: 25441..25445,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 856,
        column: 25,
        span: 25445..25446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 856,
        column: 28,
        span: 25446..25449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 856,
        column: 29,
        span: 25449..25450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 856,
        column: 38,
        span: 25450..25459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 856,
        column: 39,
        span: 25459..25460,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 856,
        column: 42,
        span: 25460..25463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 856,
        column: 43,
        span: 25463..25464,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 857,
        column: 8,
        span: 25493..25498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mult",
        ),
        line: 857,
        column: 13,
        span: 25499..25503,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 857,
        column: 15,
        span: 25504..25505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 857,
        column: 17,
        span: 25505..25507,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 857,
        column: 19,
        span: 25508..25509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 857,
        column: 28,
        span: 25510..25518,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 858,
        column: 8,
        span: 25577..25582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 858,
        column: 15,
        span: 25583..25589,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 858,
        column: 17,
        span: 25590..25591,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 858,
        column: 19,
        span: 25592..25593,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 858,
        column: 20,
        span: 25593..25594,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 859,
        column: 6,
        span: 25639..25642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 859,
        column: 8,
        span: 25643..25644,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 859,
        column: 10,
        span: 25645..25646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
        column: 12,
        span: 25646..25648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 859,
        column: 13,
        span: 25648..25649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 859,
        column: 22,
        span: 25650..25658,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 859,
        column: 25,
        span: 25659..25661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 859,
        column: 32,
        span: 25662..25668,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 859,
        column: 33,
        span: 25668..25669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 859,
        column: 34,
        span: 25669..25670,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 859,
        column: 35,
        span: 25670..25671,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 859,
        column: 37,
        span: 25672..25673,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
        column: 39,
        span: 25673..25675,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 859,
        column: 0,
        span: 25676..25679,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 860,
        column: 8,
        span: 25682..25687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 860,
        column: 11,
        span: 25688..25690,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 860,
        column: 13,
        span: 25691..25692,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 860,
        column: 15,
        span: 25693..25694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 860,
        column: 19,
        span: 25694..25698,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 860,
        column: 20,
        span: 25698..25699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 860,
        column: 0,
        span: 25699..25703,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 861,
        column: 8,
        span: 25706..25711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 861,
        column: 12,
        span: 25712..25715,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 861,
        column: 14,
        span: 25716..25717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 861,
        column: 19,
        span: 25718..25722,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 861,
        column: 20,
        span: 25722..25723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 861,
        column: 0,
        span: 25723..25727,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 862,
        column: 8,
        span: 25730..25735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 862,
        column: 15,
        span: 25736..25742,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 862,
        column: 17,
        span: 25743..25744,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 862,
        column: 21,
        span: 25744..25748,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 862,
        column: 23,
        span: 25749..25750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 862,
        column: 32,
        span: 25751..25759,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 863,
        column: 8,
        span: 25788..25793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 863,
        column: 20,
        span: 25794..25805,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 863,
        column: 22,
        span: 25806..25807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 0,
        span: 25807..25809,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 865,
        column: 6,
        span: 25863..25866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 865,
        column: 8,
        span: 25867..25868,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 865,
        column: 10,
        span: 25869..25870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 865,
        column: 12,
        span: 25870..25872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 865,
        column: 13,
        span: 25872..25873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 865,
        column: 20,
        span: 25874..25880,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 865,
        column: 0,
        span: 25881..25883,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 866,
        column: 10,
        span: 25888..25893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 866,
        column: 12,
        span: 25894..25895,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 866,
        column: 14,
        span: 25896..25897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 866,
        column: 21,
        span: 25898..25904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 866,
        column: 22,
        span: 25904..25905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 866,
        column: 23,
        span: 25905..25906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 867,
        column: 11,
        span: 25911..25917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 867,
        column: 12,
        span: 25917..25918,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 867,
        column: 13,
        span: 25917..25919,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 867,
        column: 16,
        span: 25920..25922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 867,
        column: 18,
        span: 25923..25924,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 867,
        column: 22,
        span: 25925..25928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 867,
        column: 24,
        span: 25929..25930,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 867,
        column: 26,
        span: 25931..25932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 867,
        column: 28,
        span: 25932..25934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 867,
        column: 29,
        span: 25934..25935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 868,
        column: 7,
        span: 25940..25942,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 868,
        column: 9,
        span: 25943..25944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 868,
        column: 13,
        span: 25945..25948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 868,
        column: 14,
        span: 25948..25949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 868,
        column: 16,
        span: 25949..25951,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 868,
        column: 17,
        span: 25951..25952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 868,
        column: 19,
        span: 25953..25954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 868,
        column: 20,
        span: 25954..25955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 869,
        column: 8,
        span: 25960..25963,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 869,
        column: 10,
        span: 25964..25965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 869,
        column: 14,
        span: 25966..25969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 869,
        column: 15,
        span: 25969..25970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 869,
        column: 18,
        span: 25970..25973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 869,
        column: 19,
        span: 25973..25974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 869,
        column: 21,
        span: 25975..25976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 869,
        column: 22,
        span: 25976..25977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 870,
        column: 11,
        span: 25982..25988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 870,
        column: 12,
        span: 25988..25989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 870,
        column: 13,
        span: 25989..25990,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 870,
        column: 15,
        span: 25991..25992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mult",
        ),
        line: 870,
        column: 20,
        span: 25993..25997,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 870,
        column: 22,
        span: 25998..25999,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 870,
        column: 24,
        span: 25999..26001,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 870,
        column: 27,
        span: 26002..26004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 870,
        column: 29,
        span: 26004..26006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 870,
        column: 30,
        span: 26006..26007,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 871,
        column: 10,
        span: 26043..26048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 871,
        column: 14,
        span: 26049..26052,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 871,
        column: 16,
        span: 26053..26054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 871,
        column: 18,
        span: 26055..26056,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 871,
        column: 20,
        span: 26057..26058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 871,
        column: 29,
        span: 26059..26067,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 872,
        column: 7,
        span: 26107..26109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 872,
        column: 9,
        span: 26110..26111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 872,
        column: 10,
        span: 26111..26112,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 872,
        column: 12,
        span: 26113..26114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 872,
        column: 14,
        span: 26114..26116,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 872,
        column: 16,
        span: 26117..26118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 872,
        column: 20,
        span: 26119..26122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 872,
        column: 21,
        span: 26122..26123,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 872,
        column: 23,
        span: 26124..26125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 872,
        column: 25,
        span: 26125..26127,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 872,
        column: 28,
        span: 26128..26130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 872,
        column: 32,
        span: 26130..26134,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 872,
        column: 37,
        span: 26135..26139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 873,
        column: 13,
        span: 26168..26174,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 873,
        column: 14,
        span: 26174..26175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 873,
        column: 17,
        span: 26175..26178,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 873,
        column: 19,
        span: 26179..26180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 873,
        column: 21,
        span: 26180..26182,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 873,
        column: 22,
        span: 26182..26183,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 873,
        column: 24,
        span: 26184..26185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 873,
        column: 31,
        span: 26186..26192,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 873,
        column: 32,
        span: 26192..26193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 873,
        column: 35,
        span: 26193..26196,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 873,
        column: 37,
        span: 26197..26198,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 873,
        column: 39,
        span: 26198..26200,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 873,
        column: 40,
        span: 26200..26201,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 873,
        column: 42,
        span: 26202..26203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 873,
        column: 44,
        span: 26203..26205,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 874,
        column: 0,
        span: 26233..26236,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 875,
        column: 0,
        span: 26239..26242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 876,
        column: 14,
        span: 26245..26256,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 876,
        column: 16,
        span: 26257..26258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 876,
        column: 28,
        span: 26259..26270,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 876,
        column: 30,
        span: 26271..26272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 876,
        column: 0,
        span: 26273..26279,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 877,
        column: 5,
        span: 26282..26284,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 877,
        column: 9,
        span: 26285..26288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 877,
        column: 11,
        span: 26289..26290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 877,
        column: 13,
        span: 26290..26292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 877,
        column: 14,
        span: 26292..26293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 877,
        column: 16,
        span: 26293..26295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 877,
        column: 17,
        span: 26295..26296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 877,
        column: 19,
        span: 26296..26298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 877,
        column: 20,
        span: 26298..26299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 877,
        column: 26,
        span: 26299..26305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 877,
        column: 27,
        span: 26305..26306,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 877,
        column: 31,
        span: 26307..26310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 877,
        column: 34,
        span: 26311..26313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 877,
        column: 35,
        span: 26313..26314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 877,
        column: 38,
        span: 26314..26317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 877,
        column: 39,
        span: 26317..26318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 877,
        column: 41,
        span: 26318..26320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 877,
        column: 42,
        span: 26320..26321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 877,
        column: 48,
        span: 26321..26327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 877,
        column: 49,
        span: 26327..26328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 877,
        column: 50,
        span: 26328..26329,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 877,
        column: 0,
        span: 26330..26334,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 879,
        column: 0,
        span: 26338..26341,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 881,
        column: 8,
        span: 26383..26388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 881,
        column: 17,
        span: 26389..26397,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 881,
        column: 19,
        span: 26398..26399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 881,
        column: 21,
        span: 26400..26401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 881,
        column: 32,
        span: 26401..26412,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 881,
        column: 34,
        span: 26413..26414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 881,
        column: 43,
        span: 26415..26423,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 881,
        column: 45,
        span: 26424..26425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 881,
        column: 47,
        span: 26425..26427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 881,
        column: 48,
        span: 26427..26428,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 882,
        column: 6,
        span: 26431..26434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 882,
        column: 8,
        span: 26435..26436,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 882,
        column: 10,
        span: 26437..26438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 882,
        column: 12,
        span: 26438..26440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 882,
        column: 13,
        span: 26440..26441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randbits",
        ),
        line: 882,
        column: 22,
        span: 26442..26450,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 882,
        column: 0,
        span: 26451..26453,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 883,
        column: 7,
        span: 26458..26460,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 883,
        column: 11,
        span: 26461..26464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testnear",
        ),
        line: 883,
        column: 20,
        span: 26465..26473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 883,
        column: 21,
        span: 26473..26474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 883,
        column: 27,
        span: 26474..26480,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 883,
        column: 28,
        span: 26480..26481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 883,
        column: 29,
        span: 26481..26482,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 883,
        column: 30,
        span: 26482..26483,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 883,
        column: 31,
        span: 26483..26484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 883,
        column: 40,
        span: 26485..26493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 883,
        column: 41,
        span: 26493..26494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".10",
                },
            ),
        ),
        line: 883,
        column: 46,
        span: 26494..26499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 883,
        column: 47,
        span: 26499..26500,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 883,
        column: 0,
        span: 26501..26505,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 885,
        column: 0,
        span: 26511..26514,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 886,
        column: 0,
        span: 26517..26520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 887,
        column: 8,
        span: 26523..26528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 887,
        column: 9,
        span: 26528..26529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 887,
        column: 15,
        span: 26529..26535,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 887,
        column: 16,
        span: 26535..26536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 887,
        column: 22,
        span: 26536..26542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 887,
        column: 23,
        span: 26542..26543,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float random range in %d calls: [%f, %f]\"",
        ),
        line: 887,
        column: 65,
        span: 26543..26585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 887,
        column: 66,
        span: 26585..26586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 888,
        column: 16,
        span: 26591..26602,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 888,
        column: 17,
        span: 26602..26603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 888,
        column: 21,
        span: 26604..26607,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 888,
        column: 22,
        span: 26607..26608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 888,
        column: 25,
        span: 26609..26611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 888,
        column: 26,
        span: 26611..26612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 888,
        column: 27,
        span: 26612..26613,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 889,
        column: 0,
        span: 26614..26617,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 892,
        column: 3,
        span: 26620..26622,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 893,
        column: 8,
        span: 26658..26663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 893,
        column: 11,
        span: 26664..26666,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 893,
        column: 13,
        span: 26667..26668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 893,
        column: 0,
        span: 26668..26670,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 894,
        column: 8,
        span: 26673..26678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 894,
        column: 12,
        span: 26679..26682,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 894,
        column: 14,
        span: 26683..26684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 894,
        column: 0,
        span: 26684..26686,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 895,
        column: 8,
        span: 26689..26694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 895,
        column: 15,
        span: 26695..26701,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 895,
        column: 17,
        span: 26702..26703,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 895,
        column: 19,
        span: 26704..26705,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 895,
        column: 20,
        span: 26705..26706,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 896,
        column: 6,
        span: 26739..26742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 896,
        column: 8,
        span: 26743..26744,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 896,
        column: 10,
        span: 26745..26746,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 896,
        column: 12,
        span: 26746..26748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 896,
        column: 13,
        span: 26748..26749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 896,
        column: 21,
        span: 26750..26757,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 896,
        column: 24,
        span: 26758..26760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 896,
        column: 31,
        span: 26761..26767,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 896,
        column: 32,
        span: 26767..26768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 896,
        column: 33,
        span: 26768..26769,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 896,
        column: 34,
        span: 26769..26770,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 896,
        column: 36,
        span: 26771..26772,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 896,
        column: 38,
        span: 26772..26774,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 896,
        column: 0,
        span: 26775..26778,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 897,
        column: 8,
        span: 26781..26786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 897,
        column: 15,
        span: 26787..26793,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 897,
        column: 17,
        span: 26794..26795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 897,
        column: 21,
        span: 26795..26799,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 897,
        column: 23,
        span: 26800..26801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 897,
        column: 31,
        span: 26802..26809,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 898,
        column: 8,
        span: 26838..26843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 898,
        column: 20,
        span: 26844..26855,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 898,
        column: 22,
        span: 26856..26857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 898,
        column: 0,
        span: 26857..26859,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 900,
        column: 6,
        span: 26913..26916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 900,
        column: 8,
        span: 26917..26918,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 900,
        column: 10,
        span: 26919..26920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 900,
        column: 12,
        span: 26920..26922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 900,
        column: 13,
        span: 26922..26923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 900,
        column: 20,
        span: 26924..26930,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 900,
        column: 0,
        span: 26931..26933,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 901,
        column: 10,
        span: 26938..26943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 901,
        column: 12,
        span: 26944..26945,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 901,
        column: 14,
        span: 26946..26947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 901,
        column: 21,
        span: 26948..26954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 901,
        column: 22,
        span: 26954..26955,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 901,
        column: 23,
        span: 26954..26956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 901,
        column: 24,
        span: 26956..26957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 902,
        column: 7,
        span: 26962..26964,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 902,
        column: 9,
        span: 26965..26966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 902,
        column: 13,
        span: 26967..26970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 902,
        column: 14,
        span: 26970..26971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 902,
        column: 16,
        span: 26971..26973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 902,
        column: 17,
        span: 26973..26974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 902,
        column: 19,
        span: 26975..26976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 902,
        column: 20,
        span: 26976..26977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 903,
        column: 8,
        span: 26982..26985,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 903,
        column: 10,
        span: 26986..26987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 903,
        column: 14,
        span: 26988..26991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 903,
        column: 15,
        span: 26991..26992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 903,
        column: 18,
        span: 26992..26995,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 903,
        column: 19,
        span: 26995..26996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 903,
        column: 21,
        span: 26997..26998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 903,
        column: 22,
        span: 26998..26999,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 904,
        column: 10,
        span: 27004..27009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 904,
        column: 14,
        span: 27010..27013,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 904,
        column: 16,
        span: 27014..27015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 904,
        column: 18,
        span: 27016..27017,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 904,
        column: 20,
        span: 27018..27019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 904,
        column: 28,
        span: 27020..27027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 906,
        column: 11,
        span: 27092..27098,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 906,
        column: 12,
        span: 27098..27099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 906,
        column: 15,
        span: 27099..27102,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 906,
        column: 17,
        span: 27103..27104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 906,
        column: 19,
        span: 27104..27106,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 906,
        column: 20,
        span: 27106..27107,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 906,
        column: 22,
        span: 27108..27109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 906,
        column: 29,
        span: 27110..27116,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 906,
        column: 30,
        span: 27116..27117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 906,
        column: 33,
        span: 27117..27120,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 906,
        column: 35,
        span: 27121..27122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 906,
        column: 37,
        span: 27122..27124,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 906,
        column: 38,
        span: 27124..27125,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 906,
        column: 40,
        span: 27126..27127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 906,
        column: 42,
        span: 27128..27129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 906,
        column: 43,
        span: 27129..27130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 906,
        column: 44,
        span: 27130..27131,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 906,
        column: 47,
        span: 27132..27134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 906,
        column: 51,
        span: 27135..27138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 906,
        column: 52,
        span: 27138..27139,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 906,
        column: 54,
        span: 27140..27141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 906,
        column: 56,
        span: 27141..27143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 906,
        column: 57,
        span: 27143..27144,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 907,
        column: 0,
        span: 27147..27150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 908,
        column: 14,
        span: 27153..27164,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 908,
        column: 16,
        span: 27165..27166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 908,
        column: 28,
        span: 27167..27178,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 908,
        column: 30,
        span: 27179..27180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rounds",
        ),
        line: 908,
        column: 0,
        span: 27181..27187,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 909,
        column: 8,
        span: 27190..27195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 909,
        column: 12,
        span: 27196..27199,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 909,
        column: 14,
        span: 27200..27201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 909,
        column: 21,
        span: 27202..27208,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 909,
        column: 24,
        span: 27209..27211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 909,
        column: 0,
        span: 27211..27214,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 910,
        column: 5,
        span: 27217..27219,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 910,
        column: 9,
        span: 27220..27223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 910,
        column: 11,
        span: 27224..27225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 910,
        column: 17,
        span: 27225..27231,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 910,
        column: 19,
        span: 27232..27233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 910,
        column: 22,
        span: 27234..27236,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 910,
        column: 24,
        span: 27237..27238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 910,
        column: 28,
        span: 27239..27242,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 910,
        column: 32,
        span: 27243..27246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 910,
        column: 36,
        span: 27247..27250,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 910,
        column: 38,
        span: 27251..27252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 910,
        column: 45,
        span: 27253..27259,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 910,
        column: 47,
        span: 27260..27261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 910,
        column: 51,
        span: 27262..27265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 910,
        column: 52,
        span: 27265..27266,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 910,
        column: 0,
        span: 27267..27271,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 912,
        column: 0,
        span: 27275..27278,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 914,
        column: 8,
        span: 27320..27325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 914,
        column: 17,
        span: 27326..27334,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 914,
        column: 19,
        span: 27335..27336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 914,
        column: 21,
        span: 27337..27338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 914,
        column: 32,
        span: 27338..27349,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 914,
        column: 34,
        span: 27350..27351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 914,
        column: 42,
        span: 27352..27359,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 914,
        column: 44,
        span: 27360..27361,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 914,
        column: 46,
        span: 27361..27363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 914,
        column: 47,
        span: 27363..27364,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 915,
        column: 6,
        span: 27367..27370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 915,
        column: 8,
        span: 27371..27372,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 915,
        column: 10,
        span: 27373..27374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 915,
        column: 12,
        span: 27374..27376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 915,
        column: 13,
        span: 27376..27377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 915,
        column: 21,
        span: 27378..27385,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 915,
        column: 0,
        span: 27386..27388,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 916,
        column: 7,
        span: 27393..27395,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 916,
        column: 11,
        span: 27396..27399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testnear",
        ),
        line: 916,
        column: 20,
        span: 27400..27408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 916,
        column: 21,
        span: 27408..27409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "counts",
        ),
        line: 916,
        column: 27,
        span: 27409..27415,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 916,
        column: 28,
        span: 27415..27416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 916,
        column: 29,
        span: 27416..27417,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 916,
        column: 30,
        span: 27417..27418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
        column: 31,
        span: 27418..27419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 916,
        column: 40,
        span: 27420..27428,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
        column: 41,
        span: 27428..27429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".10",
                },
            ),
        ),
        line: 916,
        column: 46,
        span: 27429..27434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 916,
        column: 47,
        span: 27434..27435,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 916,
        column: 0,
        span: 27436..27440,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 918,
        column: 0,
        span: 27446..27449,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 919,
        column: 0,
        span: 27452..27455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 920,
        column: 8,
        span: 27458..27463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 920,
        column: 9,
        span: 27463..27464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 920,
        column: 15,
        span: 27464..27470,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 920,
        column: 16,
        span: 27470..27471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 920,
        column: 22,
        span: 27471..27477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 920,
        column: 23,
        span: 27477..27478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"integer random range in %d calls: [minint + %.0fppm, maxint - %.0fppm]\"",
        ),
        line: 921,
        column: 77,
        span: 27483..27555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 921,
        column: 78,
        span: 27555..27556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrounds",
        ),
        line: 922,
        column: 16,
        span: 27561..27572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 922,
        column: 17,
        span: 27572..27573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 922,
        column: 19,
        span: 27574..27575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 922,
        column: 25,
        span: 27575..27581,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 922,
        column: 27,
        span: 27582..27583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "low",
        ),
        line: 922,
        column: 31,
        span: 27584..27587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 922,
        column: 32,
        span: 27587..27588,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 922,
        column: 34,
        span: 27589..27590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 922,
        column: 41,
        span: 27591..27597,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 922,
        column: 43,
        span: 27598..27599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "6",
            },
        ),
        line: 922,
        column: 47,
        span: 27599..27603,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 922,
        column: 48,
        span: 27603..27604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 923,
        column: 6,
        span: 27609..27610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 923,
        column: 12,
        span: 27610..27616,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 923,
        column: 14,
        span: 27617..27618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "up",
        ),
        line: 923,
        column: 17,
        span: 27619..27621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 923,
        column: 18,
        span: 27621..27622,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 923,
        column: 20,
        span: 27623..27624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 923,
        column: 27,
        span: 27625..27631,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 923,
        column: 29,
        span: 27632..27633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "6",
            },
        ),
        line: 923,
        column: 33,
        span: 27633..27637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 923,
        column: 34,
        span: 27637..27638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 923,
        column: 35,
        span: 27638..27639,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 924,
        column: 0,
        span: 27640..27643,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 926,
        column: 0,
        span: 27645..27647,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 928,
        column: 8,
        span: 27684..27689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 928,
        column: 14,
        span: 27690..27695,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 928,
        column: 16,
        span: 27696..27697,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 928,
        column: 18,
        span: 27698..27699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
        column: 20,
        span: 27699..27701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 21,
        span: 27701..27702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
        column: 23,
        span: 27702..27704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 24,
        span: 27704..27705,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
        column: 26,
        span: 27705..27707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 27,
        span: 27707..27708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
        column: 29,
        span: 27708..27710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 30,
        span: 27710..27711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
        column: 32,
        span: 27711..27713,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 33,
        span: 27713..27714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
        column: 35,
        span: 27714..27716,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 928,
        column: 37,
        span: 27717..27718,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 929,
        column: 8,
        span: 27721..27726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 929,
        column: 12,
        span: 27727..27730,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 929,
        column: 14,
        span: 27731..27732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 929,
        column: 0,
        span: 27732..27736,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 930,
        column: 8,
        span: 27739..27744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrep",
        ),
        line: 930,
        column: 17,
        span: 27745..27753,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 930,
        column: 19,
        span: 27754..27755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 930,
        column: 0,
        span: 27755..27757,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 932,
        column: 6,
        span: 27761..27764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 932,
        column: 8,
        span: 27765..27766,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 932,
        column: 10,
        span: 27767..27768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 932,
        column: 12,
        span: 27768..27770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 932,
        column: 13,
        span: 27770..27771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 932,
        column: 17,
        span: 27772..27775,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 932,
        column: 19,
        span: 27776..27777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 932,
        column: 21,
        span: 27777..27779,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 932,
        column: 0,
        span: 27780..27782,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 933,
        column: 10,
        span: 27787..27792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 933,
        column: 12,
        span: 27793..27794,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 933,
        column: 14,
        span: 27795..27796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 933,
        column: 21,
        span: 27797..27803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 933,
        column: 22,
        span: 27803..27804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 933,
        column: 23,
        span: 27803..27805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 933,
        column: 24,
        span: 27805..27806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 934,
        column: 10,
        span: 27811..27816,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 934,
        column: 11,
        span: 27816..27817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 934,
        column: 12,
        span: 27817..27818,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 934,
        column: 13,
        span: 27818..27819,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 934,
        column: 15,
        span: 27820..27821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 934,
        column: 21,
        span: 27822..27827,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 934,
        column: 22,
        span: 27827..27828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 934,
        column: 23,
        span: 27828..27829,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 934,
        column: 24,
        span: 27829..27830,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 934,
        column: 26,
        span: 27831..27832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 934,
        column: 0,
        span: 27832..27834,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 935,
        column: 0,
        span: 27837..27840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrep",
        ),
        line: 936,
        column: 11,
        span: 27843..27851,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 936,
        column: 13,
        span: 27852..27853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrep",
        ),
        line: 936,
        column: 22,
        span: 27854..27862,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 936,
        column: 24,
        span: 27863..27864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 936,
        column: 0,
        span: 27865..27868,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 937,
        column: 6,
        span: 27871..27874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 937,
        column: 8,
        span: 27875..27876,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 937,
        column: 10,
        span: 27877..27878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 937,
        column: 12,
        span: 27878..27880,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 937,
        column: 13,
        span: 27880..27881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 937,
        column: 15,
        span: 27881..27883,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 937,
        column: 0,
        span: 27884..27886,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 938,
        column: 7,
        span: 27891..27893,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 938,
        column: 11,
        span: 27894..27897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testnear",
        ),
        line: 938,
        column: 20,
        span: 27898..27906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 938,
        column: 21,
        span: 27906..27907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 938,
        column: 26,
        span: 27907..27912,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 938,
        column: 27,
        span: 27912..27913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 938,
        column: 28,
        span: 27913..27914,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 938,
        column: 29,
        span: 27914..27915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 938,
        column: 30,
        span: 27915..27916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalrep",
        ),
        line: 938,
        column: 39,
        span: 27917..27925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 938,
        column: 40,
        span: 27925..27926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".05",
                },
            ),
        ),
        line: 938,
        column: 45,
        span: 27926..27931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 938,
        column: 46,
        span: 27931..27932,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 938,
        column: 0,
        span: 27933..27937,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 940,
        column: 0,
        span: 27943..27946,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 941,
        column: 0,
        span: 27949..27952,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 942,
        column: 0,
        span: 27953..27956,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 944,
        column: 0,
        span: 27958..27960,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 945,
        column: 8,
        span: 27963..27968,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 945,
        column: 17,
        span: 27969..27977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 945,
        column: 21,
        span: 27978..27981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 945,
        column: 22,
        span: 27981..27982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 945,
        column: 24,
        span: 27982..27984,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 945,
        column: 25,
        span: 27984..27985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 945,
        column: 28,
        span: 27986..27988,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 945,
        column: 29,
        span: 27988..27989,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 946,
        column: 10,
        span: 28037..28042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 946,
        column: 15,
        span: 28043..28047,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 946,
        column: 17,
        span: 28048..28049,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 946,
        column: 19,
        span: 28050..28051,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 946,
        column: 20,
        span: 28051..28052,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 946,
        column: 21,
        span: 28052..28053,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 946,
        column: 27,
        span: 28054..28059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 946,
        column: 33,
        span: 28060..28065,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 946,
        column: 35,
        span: 28066..28067,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 946,
        column: 37,
        span: 28067..28069,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 947,
        column: 10,
        span: 28111..28116,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 947,
        column: 15,
        span: 28117..28121,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 947,
        column: 0,
        span: 28122..28124,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 948,
        column: 12,
        span: 28131..28136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 948,
        column: 14,
        span: 28137..28138,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 948,
        column: 16,
        span: 28139..28140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 948,
        column: 23,
        span: 28141..28147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 948,
        column: 24,
        span: 28147..28148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 948,
        column: 26,
        span: 28148..28150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 948,
        column: 27,
        span: 28150..28151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 948,
        column: 30,
        span: 28152..28154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 948,
        column: 31,
        span: 28154..28155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 949,
        column: 13,
        span: 28162..28168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 949,
        column: 14,
        span: 28168..28169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 949,
        column: 16,
        span: 28169..28171,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 949,
        column: 19,
        span: 28172..28174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 949,
        column: 21,
        span: 28175..28176,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 949,
        column: 25,
        span: 28177..28180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 949,
        column: 27,
        span: 28181..28182,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 949,
        column: 30,
        span: 28183..28185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 949,
        column: 33,
        span: 28186..28188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 949,
        column: 34,
        span: 28188..28189,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 950,
        column: 9,
        span: 28196..28198,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 950,
        column: 13,
        span: 28199..28202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 950,
        column: 18,
        span: 28203..28207,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 950,
        column: 19,
        span: 28207..28208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 950,
        column: 20,
        span: 28208..28209,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 950,
        column: 21,
        span: 28209..28210,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 950,
        column: 26,
        span: 28211..28215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 951,
        column: 13,
        span: 28237..28241,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 951,
        column: 14,
        span: 28241..28242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 951,
        column: 15,
        span: 28242..28243,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 951,
        column: 16,
        span: 28243..28244,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 951,
        column: 18,
        span: 28245..28246,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 951,
        column: 0,
        span: 28247..28251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 952,
        column: 14,
        span: 28260..28265,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 952,
        column: 16,
        span: 28266..28267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 952,
        column: 22,
        span: 28268..28273,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 952,
        column: 24,
        span: 28274..28275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 952,
        column: 0,
        span: 28275..28277,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 953,
        column: 11,
        span: 28286..28288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 953,
        column: 17,
        span: 28289..28294,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 953,
        column: 20,
        span: 28295..28297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 953,
        column: 23,
        span: 28298..28300,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 953,
        column: 25,
        span: 28301..28302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 953,
        column: 28,
        span: 28303..28305,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 953,
        column: 30,
        span: 28306..28307,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 953,
        column: 32,
        span: 28307..28309,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 953,
        column: 37,
        span: 28310..28314,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 955,
        column: 0,
        span: 28351..28354,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 956,
        column: 0,
        span: 28361..28364,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 957,
        column: 0,
        span: 28369..28372,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 958,
        column: 0,
        span: 28375..28378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 960,
        column: 6,
        span: 28382..28385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 960,
        column: 7,
        span: 28385..28386,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 960,
        column: 8,
        span: 28386..28387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 960,
        column: 10,
        span: 28386..28389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 960,
        column: 11,
        span: 28389..28390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 960,
        column: 13,
        span: 28390..28392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 960,
        column: 14,
        span: 28392..28393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 961,
        column: 6,
        span: 28396..28399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 961,
        column: 7,
        span: 28399..28400,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 961,
        column: 8,
        span: 28399..28401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 961,
        column: 9,
        span: 28401..28402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 961,
        column: 11,
        span: 28402..28404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 961,
        column: 12,
        span: 28404..28405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 962,
        column: 6,
        span: 28408..28411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 962,
        column: 7,
        span: 28411..28412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 962,
        column: 8,
        span: 28411..28413,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 962,
        column: 9,
        span: 28413..28414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 962,
        column: 11,
        span: 28414..28416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 962,
        column: 12,
        span: 28416..28417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 963,
        column: 6,
        span: 28420..28423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 963,
        column: 7,
        span: 28423..28424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 963,
        column: 8,
        span: 28423..28425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 963,
        column: 9,
        span: 28425..28426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 963,
        column: 12,
        span: 28426..28429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 963,
        column: 13,
        span: 28429..28430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 964,
        column: 6,
        span: 28433..28436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 964,
        column: 7,
        span: 28436..28437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 964,
        column: 8,
        span: 28436..28438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 964,
        column: 9,
        span: 28438..28439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 964,
        column: 12,
        span: 28439..28442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 964,
        column: 13,
        span: 28442..28443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 965,
        column: 6,
        span: 28446..28449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 965,
        column: 7,
        span: 28449..28450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 965,
        column: 8,
        span: 28449..28451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 965,
        column: 9,
        span: 28451..28452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 965,
        column: 12,
        span: 28452..28455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 965,
        column: 13,
        span: 28455..28456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 966,
        column: 6,
        span: 28459..28462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 966,
        column: 7,
        span: 28462..28463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 966,
        column: 8,
        span: 28462..28464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 966,
        column: 9,
        span: 28464..28465,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 966,
        column: 12,
        span: 28465..28468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 966,
        column: 13,
        span: 28468..28469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 967,
        column: 6,
        span: 28472..28475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 967,
        column: 7,
        span: 28475..28476,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 967,
        column: 8,
        span: 28476..28477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 967,
        column: 10,
        span: 28476..28479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 967,
        column: 11,
        span: 28479..28480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 967,
        column: 14,
        span: 28480..28483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 967,
        column: 15,
        span: 28483..28484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 968,
        column: 6,
        span: 28487..28490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 968,
        column: 7,
        span: 28490..28491,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 968,
        column: 8,
        span: 28491..28492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 968,
        column: 10,
        span: 28491..28494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 968,
        column: 11,
        span: 28494..28495,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 968,
        column: 13,
        span: 28496..28497,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 968,
        column: 15,
        span: 28496..28499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 968,
        column: 16,
        span: 28499..28500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 969,
        column: 6,
        span: 28521..28524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 969,
        column: 7,
        span: 28524..28525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 969,
        column: 13,
        span: 28525..28531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 969,
        column: 14,
        span: 28531..28532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 969,
        column: 21,
        span: 28533..28539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 969,
        column: 22,
        span: 28539..28540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 970,
        column: 6,
        span: 28555..28558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 970,
        column: 7,
        span: 28558..28559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 970,
        column: 13,
        span: 28559..28565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 970,
        column: 14,
        span: 28565..28566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 970,
        column: 21,
        span: 28567..28573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 970,
        column: 22,
        span: 28573..28574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 971,
        column: 6,
        span: 28589..28592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 971,
        column: 7,
        span: 28592..28593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 971,
        column: 13,
        span: 28593..28599,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 971,
        column: 14,
        span: 28599..28600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 971,
        column: 21,
        span: 28601..28607,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 971,
        column: 23,
        span: 28608..28609,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 971,
        column: 25,
        span: 28609..28611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 971,
        column: 26,
        span: 28611..28612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 972,
        column: 6,
        span: 28615..28618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 972,
        column: 7,
        span: 28618..28619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 972,
        column: 13,
        span: 28619..28625,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 972,
        column: 15,
        span: 28626..28627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 972,
        column: 17,
        span: 28627..28629,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 972,
        column: 18,
        span: 28629..28630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 972,
        column: 25,
        span: 28631..28637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 972,
        column: 26,
        span: 28637..28638,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 973,
        column: 0,
        span: 28639..28642,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 975,
        column: 0,
        span: 28644..28646,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 976,
        column: 8,
        span: 28649..28654,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 976,
        column: 17,
        span: 28655..28663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 976,
        column: 21,
        span: 28664..28667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 976,
        column: 22,
        span: 28667..28668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 976,
        column: 24,
        span: 28668..28670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 976,
        column: 25,
        span: 28670..28671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 976,
        column: 28,
        span: 28672..28674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 976,
        column: 29,
        span: 28674..28675,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 977,
        column: 10,
        span: 28715..28720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 977,
        column: 14,
        span: 28721..28724,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 977,
        column: 16,
        span: 28725..28726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 977,
        column: 0,
        span: 28727..28733,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 978,
        column: 10,
        span: 28738..28743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 978,
        column: 14,
        span: 28744..28747,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 978,
        column: 16,
        span: 28748..28749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 978,
        column: 0,
        span: 28750..28756,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 979,
        column: 10,
        span: 28761..28766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 979,
        column: 12,
        span: 28767..28768,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 979,
        column: 14,
        span: 28769..28770,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 979,
        column: 0,
        span: 28770..28774,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 980,
        column: 10,
        span: 28779..28784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 980,
        column: 15,
        span: 28785..28789,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 980,
        column: 17,
        span: 28790..28791,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 980,
        column: 19,
        span: 28792..28793,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 980,
        column: 20,
        span: 28793..28794,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 980,
        column: 21,
        span: 28794..28795,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 980,
        column: 27,
        span: 28796..28801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 980,
        column: 33,
        span: 28802..28807,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 980,
        column: 35,
        span: 28808..28809,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 980,
        column: 37,
        span: 28809..28811,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 982,
        column: 8,
        span: 28855..28858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 982,
        column: 10,
        span: 28859..28860,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 982,
        column: 12,
        span: 28861..28862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 982,
        column: 14,
        span: 28862..28864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 982,
        column: 15,
        span: 28864..28865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 982,
        column: 17,
        span: 28866..28867,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 982,
        column: 0,
        span: 28868..28870,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 983,
        column: 12,
        span: 28877..28882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 983,
        column: 14,
        span: 28883..28884,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 983,
        column: 16,
        span: 28885..28886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 983,
        column: 23,
        span: 28887..28893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 983,
        column: 24,
        span: 28893..28894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 983,
        column: 26,
        span: 28894..28896,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 983,
        column: 27,
        span: 28896..28897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 983,
        column: 30,
        span: 28898..28900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 983,
        column: 31,
        span: 28900..28901,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 984,
        column: 9,
        span: 28908..28910,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 984,
        column: 13,
        span: 28911..28914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 984,
        column: 18,
        span: 28915..28919,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 984,
        column: 19,
        span: 28919..28920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 984,
        column: 20,
        span: 28920..28921,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 984,
        column: 21,
        span: 28921..28922,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 984,
        column: 26,
        span: 28923..28927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 985,
        column: 15,
        span: 28949..28955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 985,
        column: 16,
        span: 28955..28956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 985,
        column: 18,
        span: 28956..28958,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 985,
        column: 21,
        span: 28959..28961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 985,
        column: 23,
        span: 28962..28963,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 985,
        column: 27,
        span: 28964..28967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 985,
        column: 29,
        span: 28968..28969,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 985,
        column: 32,
        span: 28970..28972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 985,
        column: 35,
        span: 28973..28975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 985,
        column: 36,
        span: 28975..28976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 986,
        column: 12,
        span: 28985..28988,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 986,
        column: 14,
        span: 28989..28990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 986,
        column: 19,
        span: 28991..28995,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 986,
        column: 20,
        span: 28995..28996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 986,
        column: 23,
        span: 28996..28999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 986,
        column: 24,
        span: 28999..29000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 986,
        column: 27,
        span: 29000..29003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 986,
        column: 28,
        span: 29003..29004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 986,
        column: 30,
        span: 29005..29006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 986,
        column: 31,
        span: 29006..29007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 987,
        column: 12,
        span: 29016..29019,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 987,
        column: 14,
        span: 29020..29021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 987,
        column: 19,
        span: 29022..29026,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 987,
        column: 20,
        span: 29026..29027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 987,
        column: 23,
        span: 29027..29030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 987,
        column: 24,
        span: 29030..29031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 987,
        column: 27,
        span: 29031..29034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 987,
        column: 28,
        span: 29034..29035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 987,
        column: 30,
        span: 29036..29037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 987,
        column: 31,
        span: 29037..29038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 988,
        column: 13,
        span: 29047..29051,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 988,
        column: 14,
        span: 29051..29052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 988,
        column: 15,
        span: 29052..29053,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 988,
        column: 16,
        span: 29053..29054,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 988,
        column: 18,
        span: 29055..29056,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 988,
        column: 0,
        span: 29057..29061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 989,
        column: 14,
        span: 29070..29075,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 989,
        column: 16,
        span: 29076..29077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 989,
        column: 22,
        span: 29078..29083,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 989,
        column: 24,
        span: 29084..29085,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 989,
        column: 0,
        span: 29085..29087,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 990,
        column: 0,
        span: 29094..29097,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 991,
        column: 0,
        span: 29102..29105,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 993,
        column: 7,
        span: 29154..29156,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 993,
        column: 11,
        span: 29157..29160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 993,
        column: 13,
        span: 29161..29162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 993,
        column: 18,
        span: 29162..29167,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 993,
        column: 21,
        span: 29168..29170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 993,
        column: 23,
        span: 29171..29172,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 993,
        column: 25,
        span: 29173..29174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 993,
        column: 29,
        span: 29174..29178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 993,
        column: 30,
        span: 29178..29179,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 993,
        column: 0,
        span: 29180..29184,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 995,
        column: 0,
        span: 29190..29193,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 997,
        column: 10,
        span: 29253..29258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 997,
        column: 15,
        span: 29259..29263,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 997,
        column: 17,
        span: 29264..29265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 997,
        column: 19,
        span: 29266..29267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 997,
        column: 21,
        span: 29267..29269,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 997,
        column: 23,
        span: 29270..29271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 997,
        column: 26,
        span: 29272..29274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 997,
        column: 27,
        span: 29274..29275,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 997,
        column: 30,
        span: 29276..29278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 997,
        column: 0,
        span: 29278..29280,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 998,
        column: 7,
        span: 29285..29287,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 998,
        column: 11,
        span: 29288..29291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 998,
        column: 13,
        span: 29292..29293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 998,
        column: 16,
        span: 29293..29296,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 998,
        column: 18,
        span: 29297..29298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 998,
        column: 21,
        span: 29299..29301,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 998,
        column: 23,
        span: 29302..29303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 998,
        column: 28,
        span: 29304..29308,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 998,
        column: 32,
        span: 29309..29312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 998,
        column: 36,
        span: 29313..29316,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 998,
        column: 38,
        span: 29317..29318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 998,
        column: 41,
        span: 29319..29321,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 998,
        column: 43,
        span: 29322..29323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 998,
        column: 48,
        span: 29324..29328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 998,
        column: 49,
        span: 29328..29329,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 998,
        column: 0,
        span: 29330..29334,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1000,
        column: 0,
        span: 29340..29343,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1001,
        column: 0,
        span: 29346..29349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1002,
        column: 6,
        span: 29352..29355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1002,
        column: 7,
        span: 29355..29356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 1002,
        column: 8,
        span: 29355..29357,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1002,
        column: 9,
        span: 29357..29358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1002,
        column: 16,
        span: 29359..29365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1002,
        column: 17,
        span: 29365..29366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1003,
        column: 6,
        span: 29369..29372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1003,
        column: 7,
        span: 29372..29373,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1003,
        column: 8,
        span: 29372..29374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1003,
        column: 9,
        span: 29374..29375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1003,
        column: 16,
        span: 29376..29382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1003,
        column: 17,
        span: 29382..29383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1004,
        column: 6,
        span: 29386..29389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1004,
        column: 7,
        span: 29389..29390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 1004,
        column: 8,
        span: 29389..29391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1004,
        column: 9,
        span: 29391..29392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1004,
        column: 16,
        span: 29393..29399,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 1004,
        column: 19,
        span: 29400..29402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 1004,
        column: 21,
        span: 29402..29404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1004,
        column: 22,
        span: 29404..29405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1005,
        column: 6,
        span: 29408..29411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1005,
        column: 7,
        span: 29411..29412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1005,
        column: 13,
        span: 29412..29418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1005,
        column: 14,
        span: 29418..29419,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 1005,
        column: 16,
        span: 29420..29421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1005,
        column: 17,
        span: 29420..29422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1005,
        column: 18,
        span: 29422..29423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1006,
        column: 6,
        span: 29426..29429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1006,
        column: 7,
        span: 29429..29430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1006,
        column: 13,
        span: 29430..29436,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 1006,
        column: 16,
        span: 29437..29439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 1006,
        column: 18,
        span: 29439..29441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1006,
        column: 19,
        span: 29441..29442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1006,
        column: 26,
        span: 29443..29449,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 1006,
        column: 29,
        span: 29450..29452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 1006,
        column: 31,
        span: 29452..29454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1006,
        column: 32,
        span: 29454..29455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1007,
        column: 6,
        span: 29458..29461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1007,
        column: 7,
        span: 29461..29462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1007,
        column: 13,
        span: 29462..29468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1007,
        column: 14,
        span: 29468..29469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1007,
        column: 21,
        span: 29470..29476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1007,
        column: 22,
        span: 29476..29477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1008,
        column: 6,
        span: 29480..29483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1008,
        column: 7,
        span: 29483..29484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1008,
        column: 13,
        span: 29484..29490,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 1008,
        column: 15,
        span: 29491..29492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1008,
        column: 17,
        span: 29492..29494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1008,
        column: 18,
        span: 29494..29495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1008,
        column: 25,
        span: 29496..29502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1008,
        column: 26,
        span: 29502..29503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1009,
        column: 6,
        span: 29506..29509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1009,
        column: 7,
        span: 29509..29510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1009,
        column: 13,
        span: 29510..29516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1009,
        column: 14,
        span: 29516..29517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1009,
        column: 21,
        span: 29518..29524,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 1009,
        column: 23,
        span: 29525..29526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1009,
        column: 25,
        span: 29526..29528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1009,
        column: 26,
        span: 29528..29529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 1010,
        column: 6,
        span: 29532..29535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1010,
        column: 7,
        span: 29535..29536,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 1010,
        column: 8,
        span: 29535..29537,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1010,
        column: 9,
        span: 29537..29538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1010,
        column: 11,
        span: 29538..29540,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 1010,
        column: 14,
        span: 29541..29543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1010,
        column: 16,
        span: 29544..29545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 1010,
        column: 23,
        span: 29545..29552,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 1010,
        column: 25,
        span: 29553..29554,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 1010,
        column: 27,
        span: 29554..29556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1010,
        column: 28,
        span: 29556..29557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1010,
        column: 29,
        span: 29557..29558,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1011,
        column: 0,
        span: 29559..29562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1014,
        column: 7,
        span: 29565..29571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1014,
        column: 8,
        span: 29571..29572,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 1014,
        column: 11,
        span: 29572..29575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 1014,
        column: 17,
        span: 29576..29581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1014,
        column: 18,
        span: 29581..29582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 1014,
        column: 24,
        span: 29582..29588,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1014,
        column: 25,
        span: 29588..29589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1014,
        column: 27,
        span: 29589..29591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1014,
        column: 28,
        span: 29591..29592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 1014,
        column: 30,
        span: 29592..29594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1014,
        column: 31,
        span: 29594..29595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 1014,
        column: 33,
        span: 29595..29597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1014,
        column: 34,
        span: 29597..29598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1014,
        column: 35,
        span: 29598..29599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1017,
        column: 7,
        span: 29641..29647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1017,
        column: 8,
        span: 29647..29648,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 1017,
        column: 11,
        span: 29648..29651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 1017,
        column: 17,
        span: 29652..29657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1017,
        column: 18,
        span: 29657..29658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 1017,
        column: 24,
        span: 29658..29664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1017,
        column: 25,
        span: 29664..29665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1017,
        column: 32,
        span: 29666..29672,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 1017,
        column: 34,
        span: 29673..29674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1017,
        column: 36,
        span: 29674..29676,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1017,
        column: 37,
        span: 29676..29677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1017,
        column: 44,
        span: 29678..29684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1017,
        column: 45,
        span: 29684..29685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1017,
        column: 46,
        span: 29685..29686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1018,
        column: 7,
        span: 29687..29693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1018,
        column: 8,
        span: 29693..29694,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 1018,
        column: 11,
        span: 29694..29697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 1018,
        column: 17,
        span: 29698..29703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1018,
        column: 18,
        span: 29703..29704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 1018,
        column: 24,
        span: 29704..29710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1018,
        column: 25,
        span: 29710..29711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1018,
        column: 32,
        span: 29712..29718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1018,
        column: 33,
        span: 29718..29719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1018,
        column: 40,
        span: 29720..29726,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 1018,
        column: 42,
        span: 29727..29728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 1018,
        column: 44,
        span: 29728..29730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1018,
        column: 45,
        span: 29730..29731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1018,
        column: 46,
        span: 29731..29732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1019,
        column: 7,
        span: 29733..29739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1019,
        column: 8,
        span: 29739..29740,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 1019,
        column: 11,
        span: 29740..29743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 1019,
        column: 17,
        span: 29744..29749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1019,
        column: 18,
        span: 29749..29750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 1019,
        column: 24,
        span: 29750..29756,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1019,
        column: 25,
        span: 29756..29757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 1019,
        column: 32,
        span: 29758..29764,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1019,
        column: 33,
        span: 29764..29765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 1019,
        column: 40,
        span: 29766..29772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1019,
        column: 41,
        span: 29772..29773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1019,
        column: 42,
        span: 29773..29774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1023,
        column: 6,
        span: 29778..29783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1023,
        column: 7,
        span: 29783..29784,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 1023,
        column: 11,
        span: 29784..29788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1023,
        column: 12,
        span: 29788..29789,
    },
]
