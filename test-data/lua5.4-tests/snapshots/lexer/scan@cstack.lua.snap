---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/cstack.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 5,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tracegc\"",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 7,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow detection\"",
        ),
        line: 7,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 15,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 16,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 17,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 17,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 17,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 18,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow in message handling\"",
        ),
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 22,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 22,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 23,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 23,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 26,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stop",
        ),
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 28,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error in error handling\"",
        ),
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 31,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing recursion inside pattern matching\"",
        ),
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 36,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?\"",
        ),
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 41,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 42,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too complex\"",
        ),
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 44,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack-overflow in recursive 'gsub'\"",
        ),
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 49,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 50,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 50,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack-overflow in recursive 'gsub' with metatables\"",
        ),
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 57,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 58,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 58,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 59,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 60,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 65,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing limits in coroutines inside deep calls\"",
        ),
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 70,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 71,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 72,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 73,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 73,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 73,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 74,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 75,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 75,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 78,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 79,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 81,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 81,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 82,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 82,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 84,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nesting of resuming yielded coroutines\"",
        ),
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 89,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 91,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "body",
        ),
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 92,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 93,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 93,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "body",
        ),
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 95,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 95,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 97,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 99,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "body",
        ),
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 103,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nesting coroutines running after recoverable errors\"",
        ),
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 108,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 109,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 110,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 113,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C stack overflow\"",
        ),
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 117,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 120,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack recovery\"",
        ),
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 122,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "LIM",
        ),
        line: 123,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack1",
        ),
        line: 127,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 128,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 130,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 131,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacknow",
        ),
        line: 132,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 132,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacknow",
        ),
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack1",
        ),
        line: 133,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 134,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 141,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 142,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack1",
        ),
        line: 142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 142,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "LIM",
        ),
        line: 143,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacknow",
        ),
        line: 145,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 145,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacknow",
        ),
        line: 146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack1",
        ),
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 147,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 149,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topB",
        ),
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeB",
        ),
        line: 153,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topA",
        ),
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeA",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topB",
        ),
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeB",
        ),
        line: 155,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 156,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stop",
        ),
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 158,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topA",
        ),
        line: 159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeA",
        ),
        line: 159,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 159,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topA",
        ),
        line: 161,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topB",
        ),
        line: 161,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeA",
        ),
        line: 161,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeB",
        ),
        line: 161,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 161,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 162,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"maximum stack size: %d\"",
        ),
        line: 162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack1",
        ),
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "LIM",
        ),
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 164,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 165,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stop",
        ),
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 167,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 168,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 168,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 171,
    },
]
