---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/cstack.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 5,
        column: 6,
        span: 70..75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 5,
        column: 14,
        span: 76..83,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 5,
        column: 16,
        span: 84..85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 5,
        column: 24,
        span: 86..93,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tracegc\"",
        ),
        line: 5,
        column: 33,
        span: 93..102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 7,
        column: 6,
        span: 104..109,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow detection\"",
        ),
        line: 7,
        column: 40,
        span: 109..143,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 15,
        column: 6,
        span: 425..430,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 15,
        column: 15,
        span: 431..439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 15,
        column: 26,
        span: 440..450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 28,
        span: 451..452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 15,
        column: 31,
        span: 452..455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 32,
        span: 455..456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 15,
        column: 34,
        span: 457..458,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 35,
        span: 458..459,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 15,
        column: 39,
        span: 460..463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 40,
        span: 463..464,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 16,
        column: 8,
        span: 467..472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 16,
        column: 10,
        span: 473..474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 11,
        span: 474..475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 16,
        column: 15,
        span: 476..479,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 17,
        span: 480..481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 16,
        column: 23,
        span: 482..487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 24,
        span: 487..488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 16,
        column: 25,
        span: 488..489,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 26,
        span: 489..490,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 16,
        column: 30,
        span: 491..494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 31,
        span: 494..495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
        column: 9,
        span: 498..504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 10,
        span: 504..505,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 17,
        column: 13,
        span: 505..508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 17,
        column: 15,
        span: 509..510,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 17,
        column: 19,
        span: 511..514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 17,
        column: 26,
        span: 515..521,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 17,
        column: 27,
        span: 521..522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 17,
        column: 31,
        span: 522..526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 32,
        span: 526..527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 17,
        column: 35,
        span: 527..530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 36,
        span: 530..531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 17,
        column: 40,
        span: 532..535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 41,
        span: 535..536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 42,
        span: 536..537,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 18,
        column: 0,
        span: 538..541,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 20,
        column: 3,
        span: 543..545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 20,
        column: 10,
        span: 547..552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 11,
        span: 552..553,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow in message handling\"",
        ),
        line: 20,
        column: 55,
        span: 553..597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 56,
        span: 597..598,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 8,
        span: 601..606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 21,
        column: 14,
        span: 607..612,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 16,
        span: 613..614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 0,
        span: 614..616,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 8,
        span: 619..624,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 22,
        column: 17,
        span: 625..633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 22,
        column: 22,
        span: 634..638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 24,
        span: 639..640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 22,
        column: 25,
        span: 640..641,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 26,
        span: 641..642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 22,
        column: 28,
        span: 643..644,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 29,
        span: 644..645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 22,
        column: 31,
        span: 646..647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 32,
        span: 647..648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 23,
        column: 10,
        span: 653..658,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
        column: 12,
        span: 659..660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 23,
        column: 18,
        span: 661..666,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 23,
        column: 20,
        span: 667..668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 0,
        span: 668..670,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 24,
        column: 11,
        span: 675..681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 13,
        span: 681..683,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 24,
        column: 15,
        span: 684..685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 24,
        column: 20,
        span: 686..690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 21,
        span: 690..691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 24,
        column: 22,
        span: 691..692,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 23,
        span: 692..693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 24,
        column: 25,
        span: 694..695,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 26,
        span: 695..696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 24,
        column: 28,
        span: 697..698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 29,
        span: 698..699,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
        column: 0,
        span: 702..705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 26,
        column: 10,
        span: 708..715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 26,
        column: 11,
        span: 715..716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stop",
        ),
        line: 26,
        column: 15,
        span: 716..720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 16,
        span: 720..721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 17,
        span: 721..722,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
        column: 8,
        span: 775..780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 27,
        column: 12,
        span: 781..784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 13,
        span: 784..785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 27,
        column: 17,
        span: 786..789,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 19,
        span: 790..791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 27,
        column: 26,
        span: 792..798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 27,
        span: 798..799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 27,
        column: 31,
        span: 799..803,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 32,
        span: 803..804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 27,
        column: 37,
        span: 805..809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 38,
        span: 809..810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 28,
        column: 10,
        span: 813..820,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 11,
        span: 820..821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 28,
        column: 16,
        span: 821..826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 17,
        span: 826..827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 18,
        span: 827..828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 9,
        span: 831..837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 10,
        span: 837..838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 29,
        column: 13,
        span: 838..841,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 16,
        span: 842..844,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error in error handling\"",
        ),
        line: 29,
        column: 42,
        span: 845..870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 43,
        span: 870..871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 30,
        column: 8,
        span: 874..879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 9,
        span: 879..880,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 30,
        column: 24,
        span: 880..895,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 25,
        span: 895..896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 30,
        column: 31,
        span: 897..902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 32,
        span: 902..903,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 31,
        column: 0,
        span: 904..907,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 35,
        column: 3,
        span: 983..985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 35,
        column: 10,
        span: 987..992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 11,
        span: 992..993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing recursion inside pattern matching\"",
        ),
        line: 35,
        column: 54,
        span: 993..1036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 55,
        span: 1036..1037,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 36,
        column: 8,
        span: 1040..1045,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 36,
        column: 17,
        span: 1046..1054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 36,
        column: 19,
        span: 1055..1056,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 21,
        span: 1057..1058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        line: 36,
        column: 25,
        span: 1058..1062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 26,
        span: 1062..1063,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 10,
        span: 1068..1073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 37,
        column: 12,
        span: 1074..1075,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 14,
        span: 1076..1077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
        column: 21,
        span: 1078..1084,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 22,
        span: 1084..1085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 37,
        column: 25,
        span: 1085..1088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 26,
        span: 1088..1089,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 37,
        column: 29,
        span: 1089..1092,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 30,
        span: 1092..1093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        line: 37,
        column: 35,
        span: 1094..1098,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 36,
        span: 1098..1099,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 38,
        column: 10,
        span: 1104..1109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 38,
        column: 12,
        span: 1110..1111,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 14,
        span: 1112..1113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 38,
        column: 21,
        span: 1114..1120,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 22,
        span: 1120..1121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 38,
        column: 25,
        span: 1121..1124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 26,
        span: 1124..1125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?\"",
        ),
        line: 38,
        column: 30,
        span: 1125..1129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 31,
        span: 1129..1130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        line: 38,
        column: 36,
        span: 1131..1135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 37,
        span: 1135..1136,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 39,
        column: 11,
        span: 1141..1147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
        column: 18,
        span: 1148..1154,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 19,
        span: 1154..1155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 39,
        column: 24,
        span: 1155..1160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 25,
        span: 1160..1161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 39,
        column: 26,
        span: 1161..1162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 27,
        span: 1162..1163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 39,
        column: 29,
        span: 1164..1165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 30,
        span: 1165..1166,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
        column: 0,
        span: 1169..1172,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 41,
        column: 8,
        span: 1175..1180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 41,
        column: 10,
        span: 1181..1182,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 41,
        column: 12,
        span: 1183..1184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 41,
        column: 14,
        span: 1185..1186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 15,
        span: 1186..1187,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 17,
        span: 1186..1189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 18,
        span: 1189..1190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 9,
        span: 1193..1199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 10,
        span: 1199..1200,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 42,
        column: 11,
        span: 1200..1201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 42,
        column: 12,
        span: 1201..1202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 15,
        span: 1203..1205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 18,
        span: 1205..1208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 19,
        span: 1208..1209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 43,
        column: 13,
        span: 1212..1222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 14,
        span: 1222..1223,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too complex\"",
        ),
        line: 43,
        column: 27,
        span: 1223..1236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 28,
        span: 1236..1237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 43,
        column: 30,
        span: 1238..1239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 31,
        span: 1239..1240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 36,
        span: 1240..1245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 37,
        span: 1245..1246,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 44,
        column: 0,
        span: 1247..1250,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 47,
        column: 3,
        span: 1253..1255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 47,
        column: 10,
        span: 1257..1262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 11,
        span: 1262..1263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack-overflow in recursive 'gsub'\"",
        ),
        line: 47,
        column: 55,
        span: 1263..1307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 56,
        span: 1307..1308,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 48,
        column: 8,
        span: 1311..1316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 48,
        column: 14,
        span: 1317..1322,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 16,
        span: 1323..1324,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 0,
        span: 1324..1326,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 49,
        column: 8,
        span: 1329..1334,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 49,
        column: 17,
        span: 1335..1343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 49,
        column: 21,
        span: 1344..1347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 23,
        span: 1348..1349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 24,
        span: 1349..1350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 50,
        column: 10,
        span: 1355..1360,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
        column: 12,
        span: 1361..1362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 50,
        column: 18,
        span: 1363..1368,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 50,
        column: 20,
        span: 1369..1370,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 0,
        span: 1370..1372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 51,
        column: 11,
        span: 1377..1383,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 12,
        span: 1383..1384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 51,
        column: 16,
        span: 1384..1388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 17,
        span: 1388..1389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 51,
        column: 20,
        span: 1389..1392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 21,
        span: 1392..1393,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 51,
        column: 25,
        span: 1394..1397,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 26,
        span: 1397..1398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 51,
        column: 30,
        span: 1399..1402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 31,
        span: 1402..1403,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 52,
        column: 0,
        span: 1406..1409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 53,
        column: 13,
        span: 1412..1422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 14,
        span: 1422..1423,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 53,
        column: 30,
        span: 1423..1439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 31,
        span: 1439..1440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 53,
        column: 35,
        span: 1441..1444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 36,
        span: 1444..1445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 54,
        column: 8,
        span: 1448..1453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 9,
        span: 1453..1454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 54,
        column: 24,
        span: 1454..1469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 25,
        span: 1469..1470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 54,
        column: 31,
        span: 1471..1476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 32,
        span: 1476..1477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 56,
        column: 8,
        span: 1481..1486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 9,
        span: 1486..1487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack-overflow in recursive 'gsub' with metatables\"",
        ),
        line: 56,
        column: 69,
        span: 1487..1547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 70,
        span: 1547..1548,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 57,
        column: 8,
        span: 1551..1556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 57,
        column: 14,
        span: 1557..1562,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 16,
        span: 1563..1564,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
        column: 0,
        span: 1564..1566,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 58,
        column: 8,
        span: 1569..1574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 58,
        column: 10,
        span: 1575..1576,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 12,
        span: 1577..1578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 58,
        column: 25,
        span: 1579..1591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 26,
        span: 1591..1592,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 58,
        column: 27,
        span: 1592..1593,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 58,
        column: 28,
        span: 1593..1594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 29,
        span: 1594..1595,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 58,
        column: 31,
        span: 1596..1597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 58,
        column: 38,
        span: 1597..1604,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 40,
        span: 1605..1606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 58,
        column: 44,
        span: 1607..1610,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 58,
        column: 45,
        span: 1610..1611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 46,
        span: 1611..1612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 59,
        column: 6,
        span: 1615..1618,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 8,
        span: 1619..1620,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 59,
        column: 17,
        span: 1621..1629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 19,
        span: 1630..1631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 20,
        span: 1631..1632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 60,
        column: 10,
        span: 1637..1642,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
        column: 12,
        span: 1643..1644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 60,
        column: 18,
        span: 1645..1650,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 60,
        column: 20,
        span: 1651..1652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 0,
        span: 1652..1654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 61,
        column: 11,
        span: 1659..1665,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 12,
        span: 1665..1666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 61,
        column: 16,
        span: 1666..1670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 17,
        span: 1670..1671,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 61,
        column: 20,
        span: 1671..1674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 21,
        span: 1674..1675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 61,
        column: 25,
        span: 1676..1679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 26,
        span: 1679..1680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 61,
        column: 28,
        span: 1681..1682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 29,
        span: 1682..1683,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 62,
        column: 0,
        span: 1686..1689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 63,
        column: 13,
        span: 1692..1702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 14,
        span: 1702..1703,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 63,
        column: 30,
        span: 1703..1719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 31,
        span: 1719..1720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 63,
        column: 35,
        span: 1721..1724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 36,
        span: 1724..1725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 64,
        column: 8,
        span: 1728..1733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 9,
        span: 1733..1734,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 64,
        column: 24,
        span: 1734..1749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 25,
        span: 1749..1750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 64,
        column: 31,
        span: 1751..1756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 32,
        span: 1756..1757,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 65,
        column: 0,
        span: 1758..1761,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 68,
        column: 3,
        span: 1764..1766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 69,
        column: 8,
        span: 1787..1792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 9,
        span: 1792..1793,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing limits in coroutines inside deep calls\"",
        ),
        line: 69,
        column: 57,
        span: 1793..1841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 58,
        span: 1841..1842,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 70,
        column: 8,
        span: 1845..1850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 70,
        column: 14,
        span: 1851..1856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 16,
        span: 1857..1858,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 0,
        span: 1858..1860,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 71,
        column: 8,
        span: 1863..1868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 71,
        column: 12,
        span: 1869..1872,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 14,
        span: 1873..1874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 0,
        span: 1874..1879,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 72,
        column: 8,
        span: 1882..1887,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 72,
        column: 17,
        span: 1888..1896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 72,
        column: 23,
        span: 1897..1902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 25,
        span: 1903..1904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 72,
        column: 26,
        span: 1904..1905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 27,
        span: 1905..1906,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 73,
        column: 7,
        span: 1911..1913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 73,
        column: 9,
        span: 1914..1915,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 73,
        column: 11,
        span: 1916..1917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 13,
        span: 1917..1919,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 73,
        column: 18,
        span: 1920..1924,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 73,
        column: 25,
        span: 1925..1931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 73,
        column: 31,
        span: 1932..1937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 32,
        span: 1937..1938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 73,
        column: 33,
        span: 1938..1939,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 73,
        column: 35,
        span: 1940..1941,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 37,
        span: 1941..1943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 38,
        span: 1943..1944,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 73,
        column: 40,
        span: 1945..1946,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 0,
        span: 1946..1948,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 74,
        column: 9,
        span: 1953..1957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 74,
        column: 19,
        span: 1958..1967,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 74,
        column: 20,
        span: 1967..1968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 74,
        column: 24,
        span: 1968..1972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 25,
        span: 1972..1973,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 74,
        column: 33,
        span: 1973..1981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 35,
        span: 1982..1983,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 36,
        span: 1983..1984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 75,
        column: 17,
        span: 1996..2001,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
        column: 19,
        span: 2002..2003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 75,
        column: 25,
        span: 2004..2009,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
        column: 27,
        span: 2010..2011,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 0,
        span: 2011..2013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 76,
        column: 17,
        span: 2025..2030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 18,
        span: 2030..2031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 76,
        column: 21,
        span: 2031..2034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 22,
        span: 2034..2035,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 77,
        column: 13,
        span: 2045..2048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 14,
        span: 2048..2049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 15,
        span: 2049..2050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 16,
        span: 2050..2051,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 78,
        column: 0,
        span: 2056..2059,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 79,
        column: 0,
        span: 2062..2065,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 81,
        column: 8,
        span: 2069..2074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 81,
        column: 11,
        span: 2075..2077,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 12,
        span: 2077..2078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 81,
        column: 16,
        span: 2079..2082,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
        column: 18,
        span: 2083..2084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 81,
        column: 25,
        span: 2085..2091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 26,
        span: 2091..2092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 81,
        column: 31,
        span: 2092..2097,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 32,
        span: 2097..2098,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 81,
        column: 41,
        span: 2099..2107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 43,
        span: 2108..2109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 44,
        span: 2109..2110,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 81,
        column: 51,
        span: 2111..2117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 81,
        column: 56,
        span: 2118..2122,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 81,
        column: 60,
        span: 2123..2126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 61,
        span: 2126..2127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 81,
        column: 65,
        span: 2128..2131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 66,
        span: 2131..2132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 9,
        span: 2135..2141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 10,
        span: 2141..2142,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 82,
        column: 13,
        span: 2142..2145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 82,
        column: 16,
        span: 2146..2148,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 82,
        column: 20,
        span: 2149..2152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 82,
        column: 24,
        span: 2153..2156,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 27,
        span: 2157..2159,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 82,
        column: 32,
        span: 2160..2164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 33,
        span: 2164..2165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 83,
        column: 8,
        span: 2168..2173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 9,
        span: 2173..2174,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 83,
        column: 24,
        span: 2174..2189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 25,
        span: 2189..2190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 83,
        column: 31,
        span: 2191..2196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 32,
        span: 2196..2197,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 84,
        column: 0,
        span: 2198..2201,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 87,
        column: 0,
        span: 2204..2206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 88,
        column: 8,
        span: 2209..2214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 9,
        span: 2214..2215,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nesting of resuming yielded coroutines\"",
        ),
        line: 88,
        column: 49,
        span: 2215..2255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 50,
        span: 2255..2256,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 89,
        column: 8,
        span: 2259..2264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 89,
        column: 14,
        span: 2265..2270,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 89,
        column: 16,
        span: 2271..2272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 0,
        span: 2272..2274,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 91,
        column: 8,
        span: 2278..2283,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 91,
        column: 17,
        span: 2284..2292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "body",
        ),
        line: 91,
        column: 22,
        span: 2293..2297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 24,
        span: 2298..2299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 25,
        span: 2299..2300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 92,
        column: 14,
        span: 2305..2314,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
        column: 15,
        span: 2314..2315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 92,
        column: 20,
        span: 2315..2320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 21,
        span: 2320..2321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 22,
        span: 2321..2322,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 93,
        column: 10,
        span: 2327..2332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 93,
        column: 12,
        span: 2333..2334,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 14,
        span: 2335..2336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 93,
        column: 24,
        span: 2337..2346,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 25,
        span: 2346..2347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 93,
        column: 29,
        span: 2347..2351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 30,
        span: 2351..2352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "body",
        ),
        line: 93,
        column: 34,
        span: 2352..2356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 35,
        span: 2356..2357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 94,
        column: 6,
        span: 2362..2363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 7,
        span: 2363..2364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 8,
        span: 2364..2365,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 94,
        column: 9,
        span: 2365..2366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 95,
        column: 10,
        span: 2425..2430,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 12,
        span: 2431..2432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 95,
        column: 18,
        span: 2433..2438,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 95,
        column: 20,
        span: 2439..2440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 0,
        span: 2440..2442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 96,
        column: 6,
        span: 2447..2448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 7,
        span: 2448..2449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 8,
        span: 2449..2450,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 97,
        column: 0,
        span: 2478..2481,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 99,
        column: 8,
        span: 2485..2490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 99,
        column: 10,
        span: 2491..2492,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 12,
        span: 2493..2494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 99,
        column: 22,
        span: 2495..2504,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 23,
        span: 2504..2505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 99,
        column: 27,
        span: 2505..2509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 28,
        span: 2509..2510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "body",
        ),
        line: 99,
        column: 32,
        span: 2510..2514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 33,
        span: 2514..2515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 100,
        column: 4,
        span: 2518..2519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 5,
        span: 2519..2520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 6,
        span: 2520..2521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
        column: 9,
        span: 2524..2530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 10,
        span: 2530..2531,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 101,
        column: 13,
        span: 2531..2534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 101,
        column: 19,
        span: 2535..2540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 20,
        span: 2540..2541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 101,
        column: 21,
        span: 2541..2542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 22,
        span: 2542..2543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 23,
        span: 2543..2544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 102,
        column: 8,
        span: 2547..2552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 9,
        span: 2552..2553,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 102,
        column: 24,
        span: 2553..2568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 25,
        span: 2568..2569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 102,
        column: 31,
        span: 2570..2575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 32,
        span: 2575..2576,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 103,
        column: 0,
        span: 2577..2580,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 106,
        column: 3,
        span: 2583..2585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 107,
        column: 8,
        span: 2607..2612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 9,
        span: 2612..2613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nesting coroutines running after recoverable errors\"",
        ),
        line: 107,
        column: 62,
        span: 2613..2666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 63,
        span: 2666..2667,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 108,
        column: 8,
        span: 2670..2675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 108,
        column: 14,
        span: 2676..2681,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 16,
        span: 2682..2683,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 0,
        span: 2683..2685,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 109,
        column: 8,
        span: 2688..2693,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 109,
        column: 17,
        span: 2694..2702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 109,
        column: 21,
        span: 2703..2706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 22,
        span: 2706..2707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 23,
        span: 2707..2708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 110,
        column: 10,
        span: 2713..2718,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 12,
        span: 2719..2720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 110,
        column: 18,
        span: 2721..2726,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 110,
        column: 20,
        span: 2727..2728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 0,
        span: 2728..2730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 111,
        column: 10,
        span: 2735..2740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 11,
        span: 2740..2741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 12,
        span: 2740..2742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 13,
        span: 2742..2743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 113,
        column: 14,
        span: 2828..2837,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 113,
        column: 15,
        span: 2837..2838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 113,
        column: 19,
        span: 2838..2842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 20,
        span: 2842..2843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 113,
        column: 23,
        span: 2843..2846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 24,
        span: 2846..2847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 25,
        span: 2847..2848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 26,
        span: 2848..2849,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 114,
        column: 0,
        span: 2880..2883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 115,
        column: 13,
        span: 2886..2896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 14,
        span: 2896..2897,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C stack overflow\"",
        ),
        line: 115,
        column: 32,
        span: 2897..2915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 33,
        span: 2915..2916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 115,
        column: 37,
        span: 2917..2920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 38,
        span: 2920..2921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 116,
        column: 8,
        span: 2924..2929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 9,
        span: 2929..2930,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final count: \"",
        ),
        line: 116,
        column: 24,
        span: 2930..2945,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 25,
        span: 2945..2946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 116,
        column: 31,
        span: 2947..2952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 32,
        span: 2952..2953,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 117,
        column: 0,
        span: 2954..2957,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 120,
        column: 3,
        span: 2960..2962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 120,
        column: 5,
        span: 2963..2964,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 120,
        column: 0,
        span: 2965..2969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 121,
        column: 8,
        span: 2972..2977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 9,
        span: 2977..2978,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack recovery\"",
        ),
        line: 121,
        column: 33,
        span: 2978..3002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 34,
        span: 3002..3003,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 122,
        column: 8,
        span: 3006..3011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 122,
        column: 10,
        span: 3012..3013,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 122,
        column: 12,
        span: 3014..3015,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 14,
        span: 3015..3017,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 123,
        column: 8,
        span: 3050..3055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "LIM",
        ),
        line: 123,
        column: 12,
        span: 3056..3059,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
        column: 14,
        span: 3060..3061,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 123,
        column: 16,
        span: 3062..3063,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 17,
        span: 3062..3064,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 127,
        column: 8,
        span: 3208..3213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack1",
        ),
        line: 127,
        column: 0,
        span: 3214..3220,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 128,
        column: 8,
        span: 3223..3228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 128,
        column: 0,
        span: 3229..3234,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 130,
        column: 8,
        span: 3238..3243,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 130,
        column: 17,
        span: 3244..3252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 130,
        column: 21,
        span: 3253..3256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 22,
        span: 3256..3257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 130,
        column: 25,
        span: 3257..3260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 26,
        span: 3260..3261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
        column: 11,
        span: 3266..3272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 12,
        span: 3272..3273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 131,
        column: 18,
        span: 3273..3279,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
        column: 19,
        span: 3279..3280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 131,
        column: 23,
        span: 3280..3284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 24,
        span: 3284..3285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 131,
        column: 27,
        span: 3285..3288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 28,
        span: 3288..3289,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 131,
        column: 45,
        span: 3290..3306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 46,
        span: 3306..3307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 47,
        span: 3307..3308,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 132,
        column: 10,
        span: 3313..3318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 132,
        column: 12,
        span: 3319..3320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 13,
        span: 3320..3321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacknow",
        ),
        line: 132,
        column: 22,
        span: 3322..3330,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 24,
        span: 3331..3332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 132,
        column: 26,
        span: 3333..3334,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 132,
        column: 27,
        span: 3334..3335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 132,
        column: 37,
        span: 3335..3345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 38,
        span: 3345..3346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 39,
        span: 3346..3347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 133,
        column: 11,
        span: 3352..3358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 12,
        span: 3358..3359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacknow",
        ),
        line: 133,
        column: 20,
        span: 3359..3367,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
        column: 23,
        span: 3368..3370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack1",
        ),
        line: 133,
        column: 30,
        span: 3371..3377,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 133,
        column: 32,
        span: 3378..3379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
        column: 36,
        span: 3379..3383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 37,
        span: 3383..3384,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 134,
        column: 0,
        span: 3387..3390,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 141,
        column: 8,
        span: 3736..3741,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 141,
        column: 17,
        span: 3742..3750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 141,
        column: 19,
        span: 3751..3752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 20,
        span: 3752..3753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 21,
        span: 3753..3754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 142,
        column: 10,
        span: 3759..3764,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 11,
        span: 3764..3765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack1",
        ),
        line: 142,
        column: 18,
        span: 3766..3772,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
        column: 20,
        span: 3773..3774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 142,
        column: 22,
        span: 3775..3776,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
        column: 23,
        span: 3776..3777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 142,
        column: 33,
        span: 3777..3787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 34,
        span: 3787..3788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 35,
        span: 3788..3789,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 143,
        column: 7,
        span: 3794..3796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 143,
        column: 9,
        span: 3797..3798,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 12,
        span: 3799..3801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "LIM",
        ),
        line: 143,
        column: 16,
        span: 3802..3805,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 143,
        column: 0,
        span: 3806..3810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 144,
        column: 13,
        span: 3817..3823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 14,
        span: 3823..3824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 144,
        column: 15,
        span: 3824..3825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 16,
        span: 3825..3826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 144,
        column: 20,
        span: 3827..3830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 21,
        span: 3830..3831,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 145,
        column: 12,
        span: 3838..3843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 145,
        column: 14,
        span: 3844..3845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 15,
        span: 3845..3846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacknow",
        ),
        line: 145,
        column: 24,
        span: 3847..3855,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 26,
        span: 3856..3857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 145,
        column: 28,
        span: 3858..3859,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 145,
        column: 29,
        span: 3859..3860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 145,
        column: 39,
        span: 3860..3870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 40,
        span: 3870..3871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 41,
        span: 3871..3872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 13,
        span: 3879..3885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 14,
        span: 3885..3886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacknow",
        ),
        line: 146,
        column: 22,
        span: 3886..3894,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 25,
        span: 3895..3897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack1",
        ),
        line: 146,
        column: 32,
        span: 3898..3904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 33,
        span: 3904..3905,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 147,
        column: 0,
        span: 3912..3918,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 148,
        column: 0,
        span: 3923..3926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 149,
        column: 6,
        span: 3931..3932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 8,
        span: 3933..3934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 149,
        column: 10,
        span: 3935..3936,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 149,
        column: 12,
        span: 3937..3938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 0,
        span: 3938..3940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 150,
        column: 6,
        span: 3945..3946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 7,
        span: 3946..3947,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 8,
        span: 3947..3948,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
        column: 0,
        span: 3951..3954,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 153,
        column: 8,
        span: 3958..3963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topB",
        ),
        line: 153,
        column: 13,
        span: 3964..3968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 14,
        span: 3968..3969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeB",
        ),
        line: 153,
        column: 20,
        span: 3970..3975,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 154,
        column: 8,
        span: 4012..4017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topA",
        ),
        line: 154,
        column: 13,
        span: 4018..4022,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 14,
        span: 4022..4023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeA",
        ),
        line: 154,
        column: 20,
        span: 4024..4029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topB",
        ),
        line: 155,
        column: 7,
        span: 4065..4069,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 8,
        span: 4069..4070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeB",
        ),
        line: 155,
        column: 14,
        span: 4071..4076,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 155,
        column: 16,
        span: 4077..4078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 155,
        column: 18,
        span: 4079..4080,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 19,
        span: 4080..4081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 155,
        column: 29,
        span: 4081..4091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 30,
        span: 4091..4092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 31,
        span: 4092..4093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 156,
        column: 10,
        span: 4096..4103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 156,
        column: 11,
        span: 4103..4104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stop",
        ),
        line: 156,
        column: 15,
        span: 4104..4108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 16,
        span: 4108..4109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 17,
        span: 4109..4110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 157,
        column: 9,
        span: 4163..4169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 10,
        span: 4169..4170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 157,
        column: 11,
        span: 4170..4171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 12,
        span: 4171..4172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 157,
        column: 16,
        span: 4173..4176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 17,
        span: 4176..4177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 158,
        column: 10,
        span: 4180..4187,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 11,
        span: 4187..4188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 158,
        column: 16,
        span: 4188..4193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 17,
        span: 4193..4194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 18,
        span: 4194..4195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topA",
        ),
        line: 159,
        column: 7,
        span: 4198..4202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 8,
        span: 4202..4203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeA",
        ),
        line: 159,
        column: 14,
        span: 4204..4209,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 159,
        column: 16,
        span: 4210..4211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 159,
        column: 18,
        span: 4212..4213,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
        column: 19,
        span: 4213..4214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 159,
        column: 29,
        span: 4214..4224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 30,
        span: 4224..4225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 31,
        span: 4225..4226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
        column: 9,
        span: 4261..4267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 10,
        span: 4267..4268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topA",
        ),
        line: 161,
        column: 14,
        span: 4268..4272,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
        column: 17,
        span: 4273..4275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "topB",
        ),
        line: 161,
        column: 22,
        span: 4276..4280,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 161,
        column: 26,
        span: 4281..4284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeA",
        ),
        line: 161,
        column: 32,
        span: 4285..4290,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 161,
        column: 34,
        span: 4291..4292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeB",
        ),
        line: 161,
        column: 40,
        span: 4293..4298,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 161,
        column: 42,
        span: 4299..4300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 44,
        span: 4300..4302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 45,
        span: 4302..4303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 162,
        column: 8,
        span: 4306..4311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 9,
        span: 4311..4312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 162,
        column: 15,
        span: 4312..4318,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
        column: 16,
        span: 4318..4319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 162,
        column: 22,
        span: 4319..4325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 23,
        span: 4325..4326,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"maximum stack size: %d\"",
        ),
        line: 162,
        column: 47,
        span: 4326..4350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 48,
        span: 4350..4351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack1",
        ),
        line: 162,
        column: 55,
        span: 4352..4358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 56,
        span: 4358..4359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 57,
        span: 4359..4360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "LIM",
        ),
        line: 163,
        column: 6,
        span: 4363..4366,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 163,
        column: 8,
        span: 4367..4368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 163,
        column: 10,
        span: 4369..4370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 164,
        column: 4,
        span: 4418..4419,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 164,
        column: 6,
        span: 4420..4421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 8,
        span: 4421..4423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 165,
        column: 10,
        span: 4451..4458,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 165,
        column: 11,
        span: 4458..4459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stop",
        ),
        line: 165,
        column: 15,
        span: 4459..4463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 16,
        span: 4463..4464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 17,
        span: 4464..4465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 166,
        column: 4,
        span: 4518..4519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 5,
        span: 4519..4520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 6,
        span: 4520..4521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        line: 167,
        column: 10,
        span: 4524..4531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 167,
        column: 11,
        span: 4531..4532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 167,
        column: 16,
        span: 4532..4537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 17,
        span: 4537..4538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 18,
        span: 4538..4539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 168,
        column: 8,
        span: 4542..4547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 168,
        column: 11,
        span: 4547..4550,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 169,
        column: 0,
        span: 4551..4554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 171,
        column: 6,
        span: 4556..4561,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 171,
        column: 10,
        span: 4561..4565,
    },
]
