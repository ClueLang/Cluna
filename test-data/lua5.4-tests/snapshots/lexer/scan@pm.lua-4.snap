---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/pm.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 65..70,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 70..71,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing pattern matching'",
        ),
        position: Position {
            line: 4,
            column: 33,
            span: 71..97,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 4,
            column: 34,
            span: 97..98,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 100..105,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 6,
            column: 15,
            span: 106..114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 6,
            column: 26,
            span: 115..125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 6,
            column: 28,
            span: 126..127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 6,
            column: 31,
            span: 127..130,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 6,
            column: 32,
            span: 130..131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 6,
            column: 34,
            span: 132..133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 6,
            column: 35,
            span: 133..134,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 6,
            column: 39,
            span: 135..138,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 6,
            column: 40,
            span: 138..139,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 7,
            column: 8,
            span: 142..147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 7,
            column: 10,
            span: 148..149,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 7,
            column: 11,
            span: 149..150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 7,
            column: 15,
            span: 151..154,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 7,
            column: 17,
            span: 155..156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 7,
            column: 23,
            span: 157..162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 7,
            column: 24,
            span: 162..163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 7,
            column: 25,
            span: 163..164,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 7,
            column: 26,
            span: 164..165,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 7,
            column: 30,
            span: 166..169,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 7,
            column: 31,
            span: 169..170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 8,
            column: 9,
            span: 173..179,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 10,
            span: 179..180,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 8,
            column: 13,
            span: 180..183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 8,
            column: 15,
            span: 184..185,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 8,
            column: 19,
            span: 186..189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 8,
            column: 26,
            span: 190..196,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 8,
            column: 27,
            span: 196..197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 8,
            column: 31,
            span: 197..201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 32,
            span: 201..202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 8,
            column: 35,
            span: 202..205,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 8,
            column: 36,
            span: 205..206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 8,
            column: 40,
            span: 207..210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 41,
            span: 210..211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 42,
            span: 211..212,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 9,
            column: 0,
            span: 213..216,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 12,
            column: 9,
            span: 219..227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 12,
            column: 11,
            span: 228..229,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 12,
            span: 229..230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 12,
            column: 13,
            span: 230..231,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 12,
            column: 14,
            span: 231..232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 12,
            column: 16,
            span: 233..234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 17,
            span: 234..235,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 13,
            column: 8,
            span: 238..243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 13,
            column: 10,
            span: 244..245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 11,
            span: 245..246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 13,
            column: 12,
            span: 246..247,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 13,
            column: 14,
            span: 248..249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 13,
            column: 21,
            span: 250..256,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 13,
            column: 22,
            span: 256..257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 13,
            column: 26,
            span: 257..261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 27,
            span: 261..262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 13,
            column: 28,
            span: 262..263,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 29,
            span: 263..264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 13,
            column: 31,
            span: 265..266,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 32,
            span: 266..267,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 14,
            column: 5,
            span: 270..272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 14,
            column: 7,
            span: 273..274,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 14,
            column: 12,
            span: 275..279,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 14,
            column: 19,
            span: 280..286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 14,
            column: 26,
            span: 287..293,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 14,
            column: 27,
            span: 293..294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 14,
            column: 30,
            span: 294..297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 31,
            span: 297..298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 14,
            column: 32,
            span: 298..299,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 14,
            column: 33,
            span: 299..300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 14,
            column: 35,
            span: 301..302,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 14,
            column: 36,
            span: 302..303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 14,
            column: 38,
            span: 304..305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 39,
            span: 305..306,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 14,
            column: 0,
            span: 307..310,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 15,
            column: 0,
            span: 311..314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 17,
            column: 2,
            span: 316..317,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 3,
            span: 317..318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 17,
            column: 4,
            span: 318..319,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 17,
            column: 6,
            span: 320..321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 17,
            column: 13,
            span: 322..328,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 17,
            column: 14,
            span: 328..329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 17,
            column: 18,
            span: 329..333,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 19,
            span: 333..334,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 17,
            column: 21,
            span: 334..336,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 22,
            span: 336..337,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 17,
            column: 25,
            span: 338..340,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 26,
            span: 340..341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 18,
            column: 7,
            span: 374..380,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 8,
            span: 380..381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 18,
            column: 9,
            span: 381..382,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 18,
            column: 12,
            span: 383..385,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 14,
            span: 385..387,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 18,
            column: 18,
            span: 388..391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 18,
            column: 20,
            span: 392..393,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 18,
            column: 23,
            span: 394..396,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 25,
            span: 396..398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 26,
            span: 398..399,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 18,
            column: 27,
            span: 399..400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 19,
            column: 2,
            span: 401..402,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 19,
            column: 3,
            span: 402..403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 19,
            column: 4,
            span: 403..404,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 405..406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 19,
            column: 13,
            span: 407..413,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 19,
            column: 14,
            span: 413..414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 19,
            column: 18,
            span: 414..418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 19,
            span: 418..419,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 19,
            column: 24,
            span: 419..424,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 19,
            column: 25,
            span: 424..425,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 19,
            column: 28,
            span: 426..428,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 29,
            span: 428..429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 20,
            column: 7,
            span: 430..436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 8,
            span: 436..437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 20,
            column: 9,
            span: 437..438,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 20,
            column: 12,
            span: 439..441,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 20,
            column: 14,
            span: 441..443,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 20,
            column: 18,
            span: 444..447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 20,
            column: 20,
            span: 448..449,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 20,
            column: 23,
            span: 450..452,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 20,
            column: 25,
            span: 452..454,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 26,
            span: 454..455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 21,
            column: 2,
            span: 456..457,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 3,
            span: 457..458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 21,
            column: 4,
            span: 458..459,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 6,
            span: 460..461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 21,
            column: 13,
            span: 462..468,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 21,
            column: 14,
            span: 468..469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 21,
            column: 18,
            span: 469..473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 19,
            span: 473..474,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        position: Position {
            line: 21,
            column: 35,
            span: 474..490,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 36,
            span: 490..491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 21,
            column: 40,
            span: 492..495,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 41,
            span: 495..496,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 43,
            span: 496..498,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 44,
            span: 498..499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 22,
            column: 7,
            span: 520..526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 8,
            span: 526..527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 22,
            column: 9,
            span: 527..528,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 22,
            column: 12,
            span: 529..531,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 14,
            span: 531..533,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 22,
            column: 18,
            span: 534..537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 22,
            column: 20,
            span: 538..539,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 22,
            column: 23,
            span: 540..542,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 25,
            span: 542..544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 26,
            span: 544..545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 23,
            column: 2,
            span: 546..547,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 3,
            span: 547..548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 23,
            column: 4,
            span: 548..549,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 23,
            column: 6,
            span: 550..551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 23,
            column: 13,
            span: 552..558,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 23,
            column: 14,
            span: 558..559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 23,
            column: 18,
            span: 559..563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 19,
            span: 563..564,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        position: Position {
            line: 23,
            column: 35,
            span: 564..580,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 36,
            span: 580..581,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o'",
        ),
        position: Position {
            line: 23,
            column: 43,
            span: 582..588,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 44,
            span: 588..589,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 46,
            span: 589..591,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 47,
            span: 591..592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 24,
            column: 7,
            span: 618..624,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 8,
            span: 624..625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 24,
            column: 9,
            span: 625..626,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 24,
            column: 12,
            span: 627..629,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 14,
            span: 629..631,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 24,
            column: 18,
            span: 632..635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 24,
            column: 20,
            span: 636..637,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 24,
            column: 23,
            span: 638..640,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 25,
            span: 640..642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 26,
            span: 642..643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 25,
            column: 2,
            span: 644..645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 3,
            span: 645..646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 25,
            column: 4,
            span: 646..647,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 25,
            column: 6,
            span: 648..649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 25,
            column: 13,
            span: 650..656,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 25,
            column: 14,
            span: 656..657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 25,
            column: 18,
            span: 657..661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 19,
            span: 661..662,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        position: Position {
            line: 25,
            column: 35,
            span: 662..678,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 36,
            span: 678..679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o'",
        ),
        position: Position {
            line: 25,
            column: 43,
            span: 680..686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 44,
            span: 686..687,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 46,
            span: 687..689,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 47,
            span: 689..690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 26,
            column: 7,
            span: 716..722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 8,
            span: 722..723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 26,
            column: 9,
            span: 723..724,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 26,
            column: 12,
            span: 725..727,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 14,
            span: 727..729,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 26,
            column: 18,
            span: 730..733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 26,
            column: 20,
            span: 734..735,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 26,
            column: 23,
            span: 736..738,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 26,
            span: 738..741,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 27,
            span: 741..742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 27,
            column: 2,
            span: 743..744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 3,
            span: 744..745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 27,
            column: 4,
            span: 745..746,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 27,
            column: 6,
            span: 747..748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 27,
            column: 13,
            span: 749..755,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 14,
            span: 755..756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 27,
            column: 18,
            span: 756..760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 19,
            span: 760..761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        position: Position {
            line: 27,
            column: 37,
            span: 761..779,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 38,
            span: 779..780,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0ab'",
        ),
        position: Position {
            line: 27,
            column: 45,
            span: 781..787,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 46,
            span: 787..788,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 27,
            column: 48,
            span: 788..790,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 49,
            span: 790..791,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 27,
            column: 50,
            span: 791..792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 28,
            column: 7,
            span: 814..820,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 8,
            span: 820..821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 28,
            column: 9,
            span: 821..822,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 28,
            column: 12,
            span: 823..825,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 825..827,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 28,
            column: 18,
            span: 828..831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 28,
            column: 20,
            span: 832..833,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 28,
            column: 23,
            span: 834..836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 28,
            column: 26,
            span: 836..839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 27,
            span: 839..840,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 28,
            column: 28,
            span: 840..841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 29,
            column: 2,
            span: 842..843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 29,
            column: 3,
            span: 843..844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 29,
            column: 4,
            span: 844..845,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 29,
            column: 6,
            span: 846..847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 29,
            column: 13,
            span: 848..854,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 29,
            column: 14,
            span: 854..855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 29,
            column: 18,
            span: 855..859,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 19,
            span: 859..860,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        position: Position {
            line: 29,
            column: 37,
            span: 860..878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 29,
            column: 38,
            span: 878..879,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 29,
            column: 42,
            span: 880..883,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 43,
            span: 883..884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 30,
            column: 7,
            span: 905..911,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 8,
            span: 911..912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 30,
            column: 9,
            span: 912..913,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 12,
            span: 914..916,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 30,
            column: 15,
            span: 916..919,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 30,
            column: 19,
            span: 920..923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 30,
            column: 21,
            span: 924..925,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 24,
            span: 926..928,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 30,
            column: 27,
            span: 928..931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 28,
            span: 931..932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 31,
            column: 7,
            span: 933..939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 8,
            span: 939..940,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 31,
            column: 11,
            span: 940..943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 31,
            column: 18,
            span: 944..950,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 19,
            span: 950..951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 31,
            column: 23,
            span: 951..955,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 24,
            span: 955..956,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        position: Position {
            line: 31,
            column: 42,
            span: 956..974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 43,
            span: 974..975,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b\\0'",
        ),
        position: Position {
            line: 31,
            column: 49,
            span: 976..981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 50,
            span: 981..982,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 51,
            span: 982..983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 32,
            column: 7,
            span: 1002..1008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 8,
            span: 1008..1009,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 32,
            column: 11,
            span: 1009..1012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 32,
            column: 18,
            span: 1013..1019,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 19,
            span: 1019..1020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 32,
            column: 23,
            span: 1020..1024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 24,
            span: 1024..1025,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 32,
            column: 26,
            span: 1025..1027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 27,
            span: 1027..1028,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        position: Position {
            line: 32,
            column: 32,
            span: 1029..1033,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 33,
            span: 1033..1034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 34,
            span: 1034..1035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 7,
            span: 1036..1042,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 8,
            span: 1042..1043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 33,
            column: 14,
            span: 1043..1049,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 15,
            span: 1049..1050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 33,
            column: 19,
            span: 1050..1054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 20,
            span: 1054..1055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo123alo'",
        ),
        position: Position {
            line: 33,
            column: 31,
            span: 1055..1066,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 32,
            span: 1066..1067,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12'",
        ),
        position: Position {
            line: 33,
            column: 37,
            span: 1068..1072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 38,
            span: 1072..1073,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 41,
            span: 1074..1076,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 43,
            span: 1076..1078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 44,
            span: 1078..1079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 34,
            column: 7,
            span: 1080..1086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 8,
            span: 1086..1087,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 34,
            column: 11,
            span: 1087..1090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 34,
            column: 18,
            span: 1091..1097,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 34,
            column: 19,
            span: 1097..1098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 34,
            column: 23,
            span: 1098..1102,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 24,
            span: 1102..1103,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo123alo'",
        ),
        position: Position {
            line: 34,
            column: 35,
            span: 1103..1114,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 34,
            column: 36,
            span: 1114..1115,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^12'",
        ),
        position: Position {
            line: 34,
            column: 42,
            span: 1116..1121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 43,
            span: 1121..1122,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 44,
            span: 1122..1123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 36,
            column: 7,
            span: 1125..1131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 1131..1132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 36,
            column: 14,
            span: 1132..1138,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 15,
            span: 1138..1139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 36,
            column: 20,
            span: 1139..1144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 21,
            span: 1144..1145,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        position: Position {
            line: 36,
            column: 27,
            span: 1145..1151,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 28,
            span: 1151..1152,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*b\"",
        ),
        position: Position {
            line: 36,
            column: 34,
            span: 1153..1158,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 35,
            span: 1158..1159,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 36,
            column: 38,
            span: 1160..1162,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        position: Position {
            line: 36,
            column: 45,
            span: 1163..1169,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 46,
            span: 1169..1170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 37,
            column: 7,
            span: 1171..1177,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 8,
            span: 1177..1178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 37,
            column: 14,
            span: 1178..1184,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 37,
            column: 15,
            span: 1184..1185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 37,
            column: 20,
            span: 1185..1190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 21,
            span: 1190..1191,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        position: Position {
            line: 37,
            column: 26,
            span: 1191..1196,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 27,
            span: 1196..1197,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*a\"",
        ),
        position: Position {
            line: 37,
            column: 33,
            span: 1198..1203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 34,
            span: 1203..1204,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 37,
            span: 1205..1207,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        position: Position {
            line: 37,
            column: 43,
            span: 1208..1213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 44,
            span: 1213..1214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 38,
            column: 7,
            span: 1215..1221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 8,
            span: 1221..1222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 38,
            column: 14,
            span: 1222..1228,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 15,
            span: 1228..1229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 38,
            column: 20,
            span: 1229..1234,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 21,
            span: 1234..1235,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 38,
            column: 24,
            span: 1235..1238,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 25,
            span: 1238..1239,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*b\"",
        ),
        position: Position {
            line: 38,
            column: 31,
            span: 1240..1245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 32,
            span: 1245..1246,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 38,
            column: 35,
            span: 1247..1249,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 38,
            column: 39,
            span: 1250..1253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 40,
            span: 1253..1254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 40,
            column: 7,
            span: 1256..1262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 1262..1263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 40,
            column: 14,
            span: 1263..1269,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 40,
            column: 15,
            span: 1269..1270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 40,
            column: 20,
            span: 1270..1275,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 21,
            span: 1275..1276,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        position: Position {
            line: 40,
            column: 27,
            span: 1276..1282,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 28,
            span: 1282..1283,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".+b\"",
        ),
        position: Position {
            line: 40,
            column: 34,
            span: 1284..1289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 35,
            span: 1289..1290,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 40,
            column: 38,
            span: 1291..1293,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        position: Position {
            line: 40,
            column: 45,
            span: 1294..1300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 46,
            span: 1300..1301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 7,
            span: 1302..1308,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 8,
            span: 1308..1309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 41,
            column: 14,
            span: 1309..1315,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 15,
            span: 1315..1316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 41,
            column: 20,
            span: 1316..1321,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 21,
            span: 1321..1322,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        position: Position {
            line: 41,
            column: 26,
            span: 1322..1327,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 27,
            span: 1327..1328,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".+a\"",
        ),
        position: Position {
            line: 41,
            column: 33,
            span: 1329..1334,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 34,
            span: 1334..1335,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 37,
            span: 1336..1338,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        position: Position {
            line: 41,
            column: 43,
            span: 1339..1344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 44,
            span: 1344..1345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 42,
            column: 7,
            span: 1346..1352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 8,
            span: 1352..1353,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 42,
            column: 11,
            span: 1353..1356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 42,
            column: 18,
            span: 1357..1363,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 42,
            column: 19,
            span: 1363..1364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 42,
            column: 24,
            span: 1364..1369,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 25,
            span: 1369..1370,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 42,
            column: 28,
            span: 1370..1373,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 29,
            span: 1373..1374,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".+b\"",
        ),
        position: Position {
            line: 42,
            column: 35,
            span: 1375..1380,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 36,
            span: 1380..1381,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 37,
            span: 1381..1382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 44,
            column: 7,
            span: 1384..1390,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 8,
            span: 1390..1391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 44,
            column: 14,
            span: 1391..1397,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 44,
            column: 15,
            span: 1397..1398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 44,
            column: 20,
            span: 1398..1403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 21,
            span: 1403..1404,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        position: Position {
            line: 44,
            column: 27,
            span: 1404..1410,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 44,
            column: 28,
            span: 1410..1411,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?b\"",
        ),
        position: Position {
            line: 44,
            column: 34,
            span: 1412..1417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 35,
            span: 1417..1418,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 38,
            span: 1419..1421,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        position: Position {
            line: 44,
            column: 43,
            span: 1422..1426,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 44,
            span: 1426..1427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 45,
            column: 7,
            span: 1428..1434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 8,
            span: 1434..1435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 45,
            column: 14,
            span: 1435..1441,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 45,
            column: 15,
            span: 1441..1442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 45,
            column: 20,
            span: 1442..1447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 21,
            span: 1447..1448,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        position: Position {
            line: 45,
            column: 26,
            span: 1448..1453,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 27,
            span: 1453..1454,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?a\"",
        ),
        position: Position {
            line: 45,
            column: 33,
            span: 1455..1460,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 34,
            span: 1460..1461,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 45,
            column: 37,
            span: 1462..1464,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aa\"",
        ),
        position: Position {
            line: 45,
            column: 42,
            span: 1465..1469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 43,
            span: 1469..1470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 46,
            column: 7,
            span: 1471..1477,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 1477..1478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 46,
            column: 14,
            span: 1478..1484,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 46,
            column: 15,
            span: 1484..1485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 46,
            column: 20,
            span: 1485..1490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 21,
            span: 1490..1491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 46,
            column: 24,
            span: 1491..1494,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 25,
            span: 1494..1495,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?b\"",
        ),
        position: Position {
            line: 46,
            column: 31,
            span: 1496..1501,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 32,
            span: 1501..1502,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 46,
            column: 35,
            span: 1503..1505,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 46,
            column: 39,
            span: 1506..1509,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 40,
            span: 1509..1510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 48,
            column: 7,
            span: 1512..1518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 8,
            span: 1518..1519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 48,
            column: 9,
            span: 1519..1520,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 1520..1521,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aloALO'",
        ),
        position: Position {
            line: 48,
            column: 18,
            span: 1521..1529,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 19,
            span: 1529..1530,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%l*'",
        ),
        position: Position {
            line: 48,
            column: 25,
            span: 1531..1536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 26,
            span: 1536..1537,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 48,
            column: 29,
            span: 1538..1540,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 48,
            column: 35,
            span: 1541..1546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 36,
            span: 1546..1547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 49,
            column: 7,
            span: 1548..1554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 8,
            span: 1554..1555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 49,
            column: 9,
            span: 1555..1556,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 10,
            span: 1556..1557,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aLo_ALO'",
        ),
        position: Position {
            line: 49,
            column: 19,
            span: 1557..1566,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 20,
            span: 1566..1567,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%a*'",
        ),
        position: Position {
            line: 49,
            column: 26,
            span: 1568..1573,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 27,
            span: 1573..1574,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 49,
            column: 30,
            span: 1575..1577,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aLo'",
        ),
        position: Position {
            line: 49,
            column: 36,
            span: 1578..1583,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 37,
            span: 1583..1584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 51,
            column: 7,
            span: 1586..1592,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1592..1593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 51,
            column: 9,
            span: 1593..1594,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 10,
            span: 1594..1595,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  \\n\\r*&\\n\\r   xuxu  \\n\\n\"",
        ),
        position: Position {
            line: 51,
            column: 37,
            span: 1595..1622,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 38,
            span: 1622..1623,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%g%g%g+\"",
        ),
        position: Position {
            line: 51,
            column: 48,
            span: 1624..1633,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 49,
            span: 1633..1634,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 51,
            column: 52,
            span: 1635..1637,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 51,
            column: 59,
            span: 1638..1644,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 60,
            span: 1644..1645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 53,
            column: 7,
            span: 1647..1653,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 8,
            span: 1653..1654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 53,
            column: 9,
            span: 1654..1655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 10,
            span: 1655..1656,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        position: Position {
            line: 53,
            column: 16,
            span: 1656..1662,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 17,
            span: 1662..1663,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a*'",
        ),
        position: Position {
            line: 53,
            column: 22,
            span: 1664..1668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 23,
            span: 1668..1669,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 53,
            column: 26,
            span: 1670..1672,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 53,
            column: 32,
            span: 1673..1678,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 33,
            span: 1678..1679,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 53,
            column: 34,
            span: 1679..1680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 54,
            column: 7,
            span: 1681..1687,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 8,
            span: 1687..1688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 54,
            column: 9,
            span: 1688..1689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 10,
            span: 1689..1690,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 54,
            column: 15,
            span: 1690..1695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 16,
            span: 1695..1696,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.*$'",
        ),
        position: Position {
            line: 54,
            column: 23,
            span: 1697..1703,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 24,
            span: 1703..1704,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 54,
            column: 27,
            span: 1705..1707,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 54,
            column: 33,
            span: 1708..1713,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 34,
            span: 1713..1714,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 54,
            column: 35,
            span: 1714..1715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 7,
            span: 1716..1722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1722..1723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 55,
            column: 9,
            span: 1723..1724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 10,
            span: 1724..1725,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 55,
            column: 15,
            span: 1725..1730,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 16,
            span: 1730..1731,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b*'",
        ),
        position: Position {
            line: 55,
            column: 21,
            span: 1732..1736,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 22,
            span: 1736..1737,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 25,
            span: 1738..1740,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 55,
            column: 28,
            span: 1741..1743,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 29,
            span: 1743..1744,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 55,
            column: 30,
            span: 1744..1745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 56,
            column: 7,
            span: 1746..1752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 8,
            span: 1752..1753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 56,
            column: 9,
            span: 1753..1754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 10,
            span: 1754..1755,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 56,
            column: 15,
            span: 1755..1760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 16,
            span: 1760..1761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab*a'",
        ),
        position: Position {
            line: 56,
            column: 23,
            span: 1762..1768,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 24,
            span: 1768..1769,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 56,
            column: 27,
            span: 1770..1772,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        position: Position {
            line: 56,
            column: 32,
            span: 1773..1777,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 33,
            span: 1777..1778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 57,
            column: 7,
            span: 1779..1785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 8,
            span: 1785..1786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 57,
            column: 9,
            span: 1786..1787,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 10,
            span: 1787..1788,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        position: Position {
            line: 57,
            column: 15,
            span: 1788..1793,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 16,
            span: 1793..1794,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab*a'",
        ),
        position: Position {
            line: 57,
            column: 23,
            span: 1795..1801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 24,
            span: 1801..1802,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 57,
            column: 27,
            span: 1803..1805,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        position: Position {
            line: 57,
            column: 33,
            span: 1806..1811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 34,
            span: 1811..1812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 58,
            column: 7,
            span: 1813..1819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1819..1820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1820..1821,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 1821..1822,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        position: Position {
            line: 58,
            column: 16,
            span: 1822..1828,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 17,
            span: 1828..1829,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a+'",
        ),
        position: Position {
            line: 58,
            column: 22,
            span: 1830..1834,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 23,
            span: 1834..1835,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 58,
            column: 26,
            span: 1836..1838,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 58,
            column: 32,
            span: 1839..1844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 33,
            span: 1844..1845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 59,
            column: 7,
            span: 1846..1852,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1852..1853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 59,
            column: 9,
            span: 1853..1854,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 10,
            span: 1854..1855,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 59,
            column: 15,
            span: 1855..1860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 59,
            column: 16,
            span: 1860..1861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.+$'",
        ),
        position: Position {
            line: 59,
            column: 23,
            span: 1862..1868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 24,
            span: 1868..1869,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 59,
            column: 27,
            span: 1870..1872,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 59,
            column: 33,
            span: 1873..1878,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 34,
            span: 1878..1879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 60,
            column: 7,
            span: 1880..1886,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 8,
            span: 1886..1887,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 60,
            column: 11,
            span: 1887..1890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 60,
            column: 13,
            span: 1891..1892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 14,
            span: 1892..1893,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 60,
            column: 19,
            span: 1893..1898,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 20,
            span: 1898..1899,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b+'",
        ),
        position: Position {
            line: 60,
            column: 25,
            span: 1900..1904,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 26,
            span: 1904..1905,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 27,
            span: 1905..1906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 61,
            column: 7,
            span: 1907..1913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1913..1914,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 61,
            column: 11,
            span: 1914..1917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 61,
            column: 13,
            span: 1918..1919,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 14,
            span: 1919..1920,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 61,
            column: 19,
            span: 1920..1925,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 20,
            span: 1925..1926,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab+a'",
        ),
        position: Position {
            line: 61,
            column: 27,
            span: 1927..1933,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 28,
            span: 1933..1934,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 29,
            span: 1934..1935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 62,
            column: 7,
            span: 1936..1942,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 1942..1943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 1943..1944,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 1944..1945,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        position: Position {
            line: 62,
            column: 15,
            span: 1945..1950,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 16,
            span: 1950..1951,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab+a'",
        ),
        position: Position {
            line: 62,
            column: 23,
            span: 1952..1958,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 24,
            span: 1958..1959,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 27,
            span: 1960..1962,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        position: Position {
            line: 62,
            column: 33,
            span: 1963..1968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 34,
            span: 1968..1969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 7,
            span: 1970..1976,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 8,
            span: 1976..1977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 1977..1978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 1978..1979,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 63,
            column: 15,
            span: 1979..1984,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 16,
            span: 1984..1985,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.$'",
        ),
        position: Position {
            line: 63,
            column: 21,
            span: 1986..1990,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 22,
            span: 1990..1991,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 63,
            column: 25,
            span: 1992..1994,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 63,
            column: 29,
            span: 1995..1998,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 30,
            span: 1998..1999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 64,
            column: 7,
            span: 2000..2006,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 8,
            span: 2006..2007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 64,
            column: 9,
            span: 2007..2008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 10,
            span: 2008..2009,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 64,
            column: 15,
            span: 2009..2014,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 16,
            span: 2014..2015,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.%$'",
        ),
        position: Position {
            line: 64,
            column: 22,
            span: 2016..2021,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 23,
            span: 2021..2022,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 64,
            column: 26,
            span: 2023..2025,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$'",
        ),
        position: Position {
            line: 64,
            column: 31,
            span: 2026..2030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 32,
            span: 2030..2031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 7,
            span: 2032..2038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 8,
            span: 2038..2039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 65,
            column: 9,
            span: 2039..2040,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 2040..2041,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 65,
            column: 15,
            span: 2041..2046,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 16,
            span: 2046..2047,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.$.'",
        ),
        position: Position {
            line: 65,
            column: 22,
            span: 2048..2053,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 23,
            span: 2053..2054,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 26,
            span: 2055..2057,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 65,
            column: 32,
            span: 2058..2063,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 33,
            span: 2063..2064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 66,
            column: 7,
            span: 2065..2071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 8,
            span: 2071..2072,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 66,
            column: 11,
            span: 2072..2075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 66,
            column: 13,
            span: 2076..2077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 14,
            span: 2077..2078,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 66,
            column: 19,
            span: 2078..2083,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 20,
            span: 2083..2084,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$$'",
        ),
        position: Position {
            line: 66,
            column: 25,
            span: 2085..2089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 26,
            span: 2089..2090,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 27,
            span: 2090..2091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 67,
            column: 7,
            span: 2092..2098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 8,
            span: 2098..2099,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 67,
            column: 11,
            span: 2099..2102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 67,
            column: 13,
            span: 2103..2104,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 14,
            span: 2104..2105,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$b'",
        ),
        position: Position {
            line: 67,
            column: 19,
            span: 2105..2110,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 20,
            span: 2110..2111,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$'",
        ),
        position: Position {
            line: 67,
            column: 25,
            span: 2112..2116,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 26,
            span: 2116..2117,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 27,
            span: 2117..2118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 7,
            span: 2119..2125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 2125..2126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 2126..2127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 2127..2128,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 2128..2133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 2133..2134,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        position: Position {
            line: 68,
            column: 20,
            span: 2135..2138,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 2138..2139,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 24,
            span: 2140..2142,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 68,
            column: 27,
            span: 2143..2145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 28,
            span: 2145..2146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 69,
            column: 7,
            span: 2147..2153,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 8,
            span: 2153..2154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 69,
            column: 9,
            span: 2154..2155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 2155..2156,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 69,
            column: 12,
            span: 2156..2158,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 13,
            span: 2158..2159,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b*'",
        ),
        position: Position {
            line: 69,
            column: 18,
            span: 2160..2164,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 19,
            span: 2164..2165,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 69,
            column: 22,
            span: 2166..2168,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 69,
            column: 25,
            span: 2169..2171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 26,
            span: 2171..2172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 70,
            column: 7,
            span: 2173..2179,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 8,
            span: 2179..2180,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 70,
            column: 11,
            span: 2180..2183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 70,
            column: 13,
            span: 2184..2185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 14,
            span: 2185..2186,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 70,
            column: 19,
            span: 2186..2191,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 20,
            span: 2191..2192,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'bb*'",
        ),
        position: Position {
            line: 70,
            column: 26,
            span: 2193..2198,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 27,
            span: 2198..2199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 28,
            span: 2199..2200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 71,
            column: 7,
            span: 2201..2207,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 8,
            span: 2207..2208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 71,
            column: 9,
            span: 2208..2209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 10,
            span: 2209..2210,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        position: Position {
            line: 71,
            column: 16,
            span: 2210..2216,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 17,
            span: 2216..2217,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a-'",
        ),
        position: Position {
            line: 71,
            column: 22,
            span: 2218..2222,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 23,
            span: 2222..2223,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 71,
            column: 26,
            span: 2224..2226,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 71,
            column: 29,
            span: 2227..2229,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 30,
            span: 2229..2230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 72,
            column: 7,
            span: 2231..2237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 8,
            span: 2237..2238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 72,
            column: 9,
            span: 2238..2239,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 10,
            span: 2239..2240,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 72,
            column: 15,
            span: 2240..2245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 72,
            column: 16,
            span: 2245..2246,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.-$'",
        ),
        position: Position {
            line: 72,
            column: 23,
            span: 2247..2253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 24,
            span: 2253..2254,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 72,
            column: 27,
            span: 2255..2257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 72,
            column: 33,
            span: 2258..2263,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 34,
            span: 2263..2264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 73,
            column: 7,
            span: 2265..2271,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 8,
            span: 2271..2272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 73,
            column: 9,
            span: 2272..2273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 2273..2274,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aabaaabaaabaaaba'",
        ),
        position: Position {
            line: 73,
            column: 28,
            span: 2274..2292,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 29,
            span: 2292..2293,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b.*b'",
        ),
        position: Position {
            line: 73,
            column: 36,
            span: 2294..2300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 37,
            span: 2300..2301,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 73,
            column: 40,
            span: 2302..2304,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'baaabaaabaaab'",
        ),
        position: Position {
            line: 73,
            column: 56,
            span: 2305..2320,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 57,
            span: 2320..2321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 74,
            column: 7,
            span: 2322..2328,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 2328..2329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 2329..2330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 2330..2331,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aabaaabaaabaaaba'",
        ),
        position: Position {
            line: 74,
            column: 28,
            span: 2331..2349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 29,
            span: 2349..2350,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b.-b'",
        ),
        position: Position {
            line: 74,
            column: 36,
            span: 2351..2357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 37,
            span: 2357..2358,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 74,
            column: 40,
            span: 2359..2361,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'baaab'",
        ),
        position: Position {
            line: 74,
            column: 48,
            span: 2362..2369,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 49,
            span: 2369..2370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 75,
            column: 7,
            span: 2371..2377,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 2377..2378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 2378..2379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 2379..2380,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo xo'",
        ),
        position: Position {
            line: 75,
            column: 18,
            span: 2380..2388,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 19,
            span: 2388..2389,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.o$'",
        ),
        position: Position {
            line: 75,
            column: 25,
            span: 2390..2395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 26,
            span: 2395..2396,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 75,
            column: 29,
            span: 2397..2399,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xo'",
        ),
        position: Position {
            line: 75,
            column: 34,
            span: 2400..2404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 35,
            span: 2404..2405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 7,
            span: 2406..2412,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 8,
            span: 2412..2413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 2413..2414,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 2414..2415,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto é assim'",
        ),
        position: Position {
            line: 76,
            column: 28,
            span: 2415..2433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 29,
            span: 2433..2434,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%S%S*'",
        ),
        position: Position {
            line: 76,
            column: 37,
            span: 2435..2442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 38,
            span: 2442..2443,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 41,
            span: 2444..2446,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'isto'",
        ),
        position: Position {
            line: 76,
            column: 48,
            span: 2447..2453,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 49,
            span: 2453..2454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 77,
            column: 7,
            span: 2455..2461,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 8,
            span: 2461..2462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 2462..2463,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 10,
            span: 2463..2464,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto é assim'",
        ),
        position: Position {
            line: 77,
            column: 28,
            span: 2464..2482,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 29,
            span: 2482..2483,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%S*$'",
        ),
        position: Position {
            line: 77,
            column: 36,
            span: 2484..2490,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 37,
            span: 2490..2491,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 77,
            column: 40,
            span: 2492..2494,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'assim'",
        ),
        position: Position {
            line: 77,
            column: 48,
            span: 2495..2502,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 49,
            span: 2502..2503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 78,
            column: 7,
            span: 2504..2510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 8,
            span: 2510..2511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 78,
            column: 9,
            span: 2511..2512,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 10,
            span: 2512..2513,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto é assim'",
        ),
        position: Position {
            line: 78,
            column: 28,
            span: 2513..2531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 29,
            span: 2531..2532,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z]*$'",
        ),
        position: Position {
            line: 78,
            column: 39,
            span: 2533..2542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 40,
            span: 2542..2543,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 78,
            column: 43,
            span: 2544..2546,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'assim'",
        ),
        position: Position {
            line: 78,
            column: 51,
            span: 2547..2554,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 52,
            span: 2554..2555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 79,
            column: 7,
            span: 2556..2562,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 8,
            span: 2562..2563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 79,
            column: 9,
            span: 2563..2564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 2564..2565,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'um caracter ? extra'",
        ),
        position: Position {
            line: 79,
            column: 31,
            span: 2565..2586,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 32,
            span: 2586..2587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^%sa-z]'",
        ),
        position: Position {
            line: 79,
            column: 43,
            span: 2588..2598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 44,
            span: 2598..2599,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 79,
            column: 47,
            span: 2600..2602,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'?'",
        ),
        position: Position {
            line: 79,
            column: 51,
            span: 2603..2606,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 52,
            span: 2606..2607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 80,
            column: 7,
            span: 2608..2614,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 2614..2615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 80,
            column: 9,
            span: 2615..2616,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 10,
            span: 2616..2617,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 80,
            column: 12,
            span: 2617..2619,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 13,
            span: 2619..2620,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a?'",
        ),
        position: Position {
            line: 80,
            column: 18,
            span: 2621..2625,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 19,
            span: 2625..2626,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 80,
            column: 22,
            span: 2627..2629,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 80,
            column: 25,
            span: 2630..2632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 26,
            span: 2632..2633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 81,
            column: 7,
            span: 2634..2640,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 8,
            span: 2640..2641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 81,
            column: 9,
            span: 2641..2642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 10,
            span: 2642..2643,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á'",
        ),
        position: Position {
            line: 81,
            column: 13,
            span: 2643..2646,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 14,
            span: 2646..2647,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á?'",
        ),
        position: Position {
            line: 81,
            column: 19,
            span: 2648..2652,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 20,
            span: 2652..2653,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 81,
            column: 23,
            span: 2654..2656,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á'",
        ),
        position: Position {
            line: 81,
            column: 27,
            span: 2657..2660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 28,
            span: 2660..2661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 82,
            column: 7,
            span: 2662..2668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 8,
            span: 2668..2669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 82,
            column: 9,
            span: 2669..2670,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 2670..2671,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ábl'",
        ),
        position: Position {
            line: 82,
            column: 15,
            span: 2671..2676,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 16,
            span: 2676..2677,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á?b?l?'",
        ),
        position: Position {
            line: 82,
            column: 25,
            span: 2678..2686,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 26,
            span: 2686..2687,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 29,
            span: 2688..2690,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ábl'",
        ),
        position: Position {
            line: 82,
            column: 35,
            span: 2691..2696,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 36,
            span: 2696..2697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 83,
            column: 7,
            span: 2698..2704,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 8,
            span: 2704..2705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 83,
            column: 9,
            span: 2705..2706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 10,
            span: 2706..2707,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  ábl'",
        ),
        position: Position {
            line: 83,
            column: 17,
            span: 2707..2714,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 18,
            span: 2714..2715,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á?b?l?'",
        ),
        position: Position {
            line: 83,
            column: 27,
            span: 2716..2724,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 28,
            span: 2724..2725,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 83,
            column: 31,
            span: 2726..2728,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 83,
            column: 34,
            span: 2729..2731,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 35,
            span: 2731..2732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 84,
            column: 7,
            span: 2733..2739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 8,
            span: 2739..2740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 84,
            column: 9,
            span: 2740..2741,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 10,
            span: 2741..2742,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        position: Position {
            line: 84,
            column: 14,
            span: 2742..2746,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 15,
            span: 2746..2747,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^aa?a?a'",
        ),
        position: Position {
            line: 84,
            column: 25,
            span: 2748..2757,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 26,
            span: 2757..2758,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 84,
            column: 29,
            span: 2759..2761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        position: Position {
            line: 84,
            column: 34,
            span: 2762..2766,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 35,
            span: 2766..2767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 85,
            column: 7,
            span: 2768..2774,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 8,
            span: 2774..2775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 2775..2776,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 10,
            span: 2776..2777,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "']]]áb'",
        ),
        position: Position {
            line: 85,
            column: 17,
            span: 2777..2784,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 18,
            span: 2784..2785,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^]]'",
        ),
        position: Position {
            line: 85,
            column: 25,
            span: 2786..2792,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 26,
            span: 2792..2793,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 85,
            column: 29,
            span: 2794..2796,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á'",
        ),
        position: Position {
            line: 85,
            column: 33,
            span: 2797..2800,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 34,
            span: 2800..2801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 86,
            column: 7,
            span: 2802..2808,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 8,
            span: 2808..2809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 86,
            column: 9,
            span: 2809..2810,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 10,
            span: 2810..2811,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0alo alo\"",
        ),
        position: Position {
            line: 86,
            column: 20,
            span: 2811..2821,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 21,
            span: 2821..2822,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x*\"",
        ),
        position: Position {
            line: 86,
            column: 27,
            span: 2823..2828,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 28,
            span: 2828..2829,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 86,
            column: 31,
            span: 2830..2832,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0a\"",
        ),
        position: Position {
            line: 86,
            column: 36,
            span: 2833..2837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 37,
            span: 2837..2838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 87,
            column: 7,
            span: 2839..2845,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 8,
            span: 2845..2846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 87,
            column: 9,
            span: 2846..2847,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 2847..2848,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 87,
            column: 19,
            span: 2848..2857,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 20,
            span: 2857..2858,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%C+\"",
        ),
        position: Position {
            line: 87,
            column: 26,
            span: 2859..2864,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 27,
            span: 2864..2865,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 87,
            column: 30,
            span: 2866..2868,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 87,
            column: 40,
            span: 2869..2878,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 41,
            span: 2878..2879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 88,
            column: 6,
            span: 2880..2885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 7,
            span: 2885..2886,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 88,
            column: 10,
            span: 2886..2889,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 2889..2890,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 91,
            column: 9,
            span: 2893..2901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 91,
            column: 12,
            span: 2902..2904,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 13,
            span: 2904..2905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 91,
            column: 14,
            span: 2905..2906,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 15,
            span: 2906..2907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 91,
            column: 17,
            span: 2908..2909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 91,
            column: 18,
            span: 2909..2910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 92,
            column: 4,
            span: 2913..2914,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 92,
            column: 6,
            span: 2915..2916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 92,
            column: 13,
            span: 2917..2923,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 92,
            column: 14,
            span: 2923..2924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 92,
            column: 18,
            span: 2924..2928,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 19,
            span: 2928..2929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 92,
            column: 20,
            span: 2929..2930,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 21,
            span: 2930..2931,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%([0-9])\"",
        ),
        position: Position {
            line: 92,
            column: 33,
            span: 2932..2943,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 34,
            span: 2943..2944,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 92,
            column: 43,
            span: 2945..2953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 45,
            span: 2954..2955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 92,
            column: 46,
            span: 2955..2956,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 47,
            span: 2956..2957,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 93,
            column: 15,
            span: 2966..2972,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        position: Position {
            line: 93,
            column: 19,
            span: 2973..2976,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 93,
            column: 22,
            span: 2977..2979,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 24,
            span: 2980..2981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 93,
            column: 32,
            span: 2981..2989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 33,
            span: 2989..2990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 93,
            column: 34,
            span: 2990..2991,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 35,
            span: 2991..2992,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 93,
            column: 36,
            span: 2992..2993,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 37,
            span: 2992..2994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 38,
            span: 2994..2995,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 94,
            column: 11,
            span: 3003..3006,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 12,
            span: 3006..3007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 95,
            column: 4,
            span: 3010..3011,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 95,
            column: 6,
            span: 3012..3013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 95,
            column: 13,
            span: 3014..3020,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 95,
            column: 14,
            span: 3020..3021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 95,
            column: 18,
            span: 3021..3025,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 19,
            span: 3025..3026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 95,
            column: 20,
            span: 3026..3027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 21,
            span: 3027..3028,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(^?)\"",
        ),
        position: Position {
            line: 95,
            column: 29,
            span: 3029..3036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 30,
            span: 3036..3037,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1()\"",
        ),
        position: Position {
            line: 95,
            column: 37,
            span: 3038..3044,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 38,
            span: 3044..3045,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 40,
            span: 3045..3047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 41,
            span: 3047..3048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 96,
            column: 4,
            span: 3051..3052,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 96,
            column: 6,
            span: 3053..3054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 96,
            column: 13,
            span: 3055..3061,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 96,
            column: 14,
            span: 3061..3062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 96,
            column: 18,
            span: 3062..3066,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 19,
            span: 3066..3067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 96,
            column: 20,
            span: 3067..3068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 21,
            span: 3068..3069,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"($?)$\"",
        ),
        position: Position {
            line: 96,
            column: 29,
            span: 3070..3077,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 30,
            span: 3077..3078,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()%1\"",
        ),
        position: Position {
            line: 96,
            column: 37,
            span: 3079..3085,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 38,
            span: 3085..3086,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 40,
            span: 3086..3088,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 41,
            span: 3088..3089,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 3092..3097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 3098..3099,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 12,
            span: 3100..3101,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 97,
            column: 14,
            span: 3102..3103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 97,
            column: 20,
            span: 3103..3109,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 21,
            span: 3109..3110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 97,
            column: 26,
            span: 3110..3115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 27,
            span: 3115..3116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 97,
            column: 28,
            span: 3116..3117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 29,
            span: 3117..3118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 97,
            column: 31,
            span: 3119..3120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 32,
            span: 3120..3121,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 97,
            column: 33,
            span: 3121..3122,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 98,
            column: 9,
            span: 3125..3131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 98,
            column: 16,
            span: 3132..3138,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 98,
            column: 17,
            span: 3138..3139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 98,
            column: 20,
            span: 3139..3142,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 21,
            span: 3142..3143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 98,
            column: 22,
            span: 3143..3144,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 23,
            span: 3144..3145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 98,
            column: 25,
            span: 3146..3147,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 98,
            column: 26,
            span: 3147..3148,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 27,
            span: 3147..3149,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 98,
            column: 28,
            span: 3149..3150,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 29,
            span: 3150..3151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 98,
            column: 31,
            span: 3152..3153,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 98,
            column: 32,
            span: 3153..3154,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 98,
            column: 33,
            span: 3154..3155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 98,
            column: 34,
            span: 3155..3156,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 98,
            column: 35,
            span: 3156..3157,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 98,
            column: 37,
            span: 3158..3159,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 39,
            span: 3159..3161,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 40,
            span: 3161..3162,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 99,
            column: 0,
            span: 3163..3166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 101,
            column: 7,
            span: 3168..3174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 3174..3175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 3175..3177,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 11,
            span: 3177..3178,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alx 123 b\\0o b\\0o'",
        ),
        position: Position {
            line: 101,
            column: 34,
            span: 3178..3201,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 35,
            span: 3201..3202,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(..*) %1'",
        ),
        position: Position {
            line: 101,
            column: 46,
            span: 3203..3213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 47,
            span: 3213..3214,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 101,
            column: 50,
            span: 3215..3217,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\0o b\\0o\"",
        ),
        position: Position {
            line: 101,
            column: 62,
            span: 3218..3229,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 63,
            span: 3229..3230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 102,
            column: 7,
            span: 3231..3237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 3237..3238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 102,
            column: 10,
            span: 3238..3240,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 11,
            span: 3240..3241,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'axz123= 4= 4 34'",
        ),
        position: Position {
            line: 102,
            column: 28,
            span: 3241..3258,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 29,
            span: 3258..3259,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.+)=(.*)=%2 %1'",
        ),
        position: Position {
            line: 102,
            column: 47,
            span: 3260..3277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 48,
            span: 3277..3278,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 102,
            column: 51,
            span: 3279..3281,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3= 4= 4 3'",
        ),
        position: Position {
            line: 102,
            column: 63,
            span: 3282..3293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 64,
            span: 3293..3294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 103,
            column: 7,
            span: 3295..3301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 8,
            span: 3301..3302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 103,
            column: 10,
            span: 3302..3304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 11,
            span: 3304..3305,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'======='",
        ),
        position: Position {
            line: 103,
            column: 20,
            span: 3305..3314,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 21,
            span: 3314..3315,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^(=*)=%1$'",
        ),
        position: Position {
            line: 103,
            column: 33,
            span: 3316..3327,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 34,
            span: 3327..3328,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 103,
            column: 37,
            span: 3329..3331,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'======='",
        ),
        position: Position {
            line: 103,
            column: 47,
            span: 3332..3341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 48,
            span: 3341..3342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 104,
            column: 7,
            span: 3343..3349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 8,
            span: 3349..3350,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 104,
            column: 11,
            span: 3350..3353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 104,
            column: 18,
            span: 3354..3360,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 104,
            column: 19,
            span: 3360..3361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 104,
            column: 24,
            span: 3361..3366,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 25,
            span: 3366..3367,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=========='",
        ),
        position: Position {
            line: 104,
            column: 37,
            span: 3367..3379,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 38,
            span: 3379..3380,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^([=]*)=%1$'",
        ),
        position: Position {
            line: 104,
            column: 52,
            span: 3381..3394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 53,
            span: 3394..3395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 54,
            span: 3395..3396,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 106,
            column: 6,
            span: 3398..3403,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 106,
            column: 15,
            span: 3404..3412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        position: Position {
            line: 106,
            column: 21,
            span: 3413..3418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 23,
            span: 3419..3420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 106,
            column: 24,
            span: 3420..3421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 25,
            span: 3421..3422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 106,
            column: 27,
            span: 3423..3424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 28,
            span: 3424..3425,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 107,
            column: 5,
            span: 3428..3430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 107,
            column: 7,
            span: 3431..3432,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 3433..3435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 107,
            column: 12,
            span: 3436..3437,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 107,
            column: 0,
            span: 3438..3442,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 108,
            column: 11,
            span: 3447..3453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 108,
            column: 13,
            span: 3454..3455,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 14,
            span: 3455..3456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        position: Position {
            line: 108,
            column: 20,
            span: 3457..3462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 21,
            span: 3462..3463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 108,
            column: 22,
            span: 3463..3464,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 108,
            column: 23,
            span: 3464..3465,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 24,
            span: 3464..3466,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 25,
            span: 3466..3467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 108,
            column: 27,
            span: 3468..3469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 28,
            span: 3469..3470,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 109,
            column: 0,
            span: 3473..3476,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 110,
            column: 0,
            span: 3477..3480,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 112,
            column: 6,
            span: 3482..3487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        position: Position {
            line: 112,
            column: 10,
            span: 3488..3491,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 112,
            column: 12,
            span: 3492..3493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 112,
            column: 19,
            span: 3494..3500,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 112,
            column: 20,
            span: 3500..3501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 112,
            column: 24,
            span: 3501..3505,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 25,
            span: 3505..3506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        position: Position {
            line: 112,
            column: 30,
            span: 3506..3511,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 31,
            span: 3511..3512,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 32,
            span: 3511..3513,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 112,
            column: 33,
            span: 3513..3514,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 37,
            span: 3514..3518,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 38,
            span: 3518..3519,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 39,
            span: 3519..3520,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 112,
            column: 42,
            span: 3521..3523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 112,
            column: 49,
            span: 3524..3530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 112,
            column: 50,
            span: 3530..3531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 112,
            column: 54,
            span: 3531..3535,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 55,
            span: 3535..3536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        position: Position {
            line: 112,
            column: 60,
            span: 3536..3541,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 61,
            span: 3541..3542,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "128",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 64,
            span: 3541..3545,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 112,
            column: 65,
            span: 3545..3546,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 69,
            span: 3546..3550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 70,
            span: 3550..3551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 71,
            span: 3551..3552,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 112,
            column: 72,
            span: 3552..3553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 114,
            column: 7,
            span: 3555..3561,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 8,
            span: 3561..3562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 114,
            column: 14,
            span: 3562..3568,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 15,
            span: 3568..3569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 114,
            column: 18,
            span: 3569..3572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 19,
            span: 3572..3573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        position: Position {
            line: 114,
            column: 22,
            span: 3573..3576,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 23,
            span: 3576..3577,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 114,
            column: 26,
            span: 3578..3580,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 30,
            span: 3580..3584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 31,
            span: 3584..3585,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 116,
            column: 9,
            span: 3587..3595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 116,
            column: 16,
            span: 3596..3602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 18,
            span: 3603..3604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 116,
            column: 19,
            span: 3604..3605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 20,
            span: 3605..3606,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 117,
            column: 8,
            span: 3609..3614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 117,
            column: 12,
            span: 3615..3618,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 117,
            column: 14,
            span: 3619..3620,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 117,
            column: 16,
            span: 3621..3622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 117,
            column: 17,
            span: 3622..3623,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 117,
            column: 18,
            span: 3623..3624,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 117,
            column: 20,
            span: 3624..3626,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 117,
            column: 21,
            span: 3626..3627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 118,
            column: 9,
            span: 3630..3636,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 3636..3637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 3637..3641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 15,
            span: 3641..3642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        position: Position {
            line: 118,
            column: 18,
            span: 3642..3645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 118,
            column: 19,
            span: 3645..3646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 118,
            column: 21,
            span: 3647..3648,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 118,
            column: 22,
            span: 3648..3649,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 118,
            column: 31,
            span: 3650..3658,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 33,
            span: 3659..3660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 118,
            column: 34,
            span: 3660..3661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 35,
            span: 3661..3662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 118,
            column: 39,
            span: 3663..3666,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 118,
            column: 40,
            span: 3666..3667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 118,
            column: 41,
            span: 3667..3668,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 118,
            column: 43,
            span: 3669..3670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 118,
            column: 47,
            span: 3671..3674,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 118,
            column: 48,
            span: 3674..3675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 118,
            column: 49,
            span: 3675..3676,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 118,
            column: 52,
            span: 3677..3679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 118,
            column: 54,
            span: 3680..3681,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 118,
            column: 58,
            span: 3682..3685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 59,
            span: 3685..3686,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 119,
            column: 9,
            span: 3689..3695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 119,
            column: 13,
            span: 3696..3699,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 119,
            column: 14,
            span: 3699..3700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 119,
            column: 0,
            span: 3700..3701,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 120,
            column: 4,
            span: 3702..3705,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 120,
            column: 5,
            span: 3705..3706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 122,
            column: 7,
            span: 3708..3714,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 8,
            span: 3714..3715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 122,
            column: 14,
            span: 3715..3721,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 122,
            column: 15,
            span: 3721..3722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 122,
            column: 18,
            span: 3722..3725,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 19,
            span: 3725..3726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 122,
            column: 25,
            span: 3726..3732,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 26,
            span: 3732..3733,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\200-\\210]'",
        ),
        position: Position {
            line: 122,
            column: 39,
            span: 3733..3746,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 40,
            span: 3746..3747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 41,
            span: 3747..3748,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 122,
            column: 44,
            span: 3749..3751,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 122,
            column: 47,
            span: 3751..3754,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 48,
            span: 3754..3755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 124,
            column: 7,
            span: 3757..3763,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 8,
            span: 3763..3764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 124,
            column: 14,
            span: 3764..3770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 15,
            span: 3770..3771,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z]'",
        ),
        position: Position {
            line: 124,
            column: 22,
            span: 3771..3778,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 23,
            span: 3778..3779,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 124,
            column: 26,
            span: 3780..3782,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdefghijklmnopqrstuvwxyz\"",
        ),
        position: Position {
            line: 124,
            column: 55,
            span: 3783..3811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 56,
            span: 3811..3812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 125,
            column: 7,
            span: 3813..3819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 8,
            span: 3819..3820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 125,
            column: 14,
            span: 3820..3826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 15,
            span: 3826..3827,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z%d]'",
        ),
        position: Position {
            line: 125,
            column: 24,
            span: 3827..3836,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 25,
            span: 3836..3837,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 125,
            column: 28,
            span: 3838..3840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 125,
            column: 35,
            span: 3841..3847,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 36,
            span: 3847..3848,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%da-uu-z]'",
        ),
        position: Position {
            line: 125,
            column: 48,
            span: 3848..3860,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 49,
            span: 3860..3861,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 50,
            span: 3861..3862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 126,
            column: 7,
            span: 3863..3869,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 8,
            span: 3869..3870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 126,
            column: 14,
            span: 3870..3876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 15,
            span: 3876..3877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-]'",
        ),
        position: Position {
            line: 126,
            column: 21,
            span: 3877..3883,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 22,
            span: 3883..3884,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 126,
            column: 25,
            span: 3885..3887,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-a\"",
        ),
        position: Position {
            line: 126,
            column: 30,
            span: 3888..3892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 31,
            span: 3892..3893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 127,
            column: 7,
            span: 3894..3900,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 3900..3901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 127,
            column: 14,
            span: 3901..3907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 15,
            span: 3907..3908,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^%W]'",
        ),
        position: Position {
            line: 127,
            column: 22,
            span: 3908..3915,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 23,
            span: 3915..3916,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 127,
            column: 26,
            span: 3917..3919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 127,
            column: 33,
            span: 3920..3926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 34,
            span: 3926..3927,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%w]'",
        ),
        position: Position {
            line: 127,
            column: 40,
            span: 3927..3933,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 41,
            span: 3933..3934,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 42,
            span: 3934..3935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 128,
            column: 7,
            span: 3936..3942,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 8,
            span: 3942..3943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 128,
            column: 14,
            span: 3943..3949,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 15,
            span: 3949..3950,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[]%%]'",
        ),
        position: Position {
            line: 128,
            column: 22,
            span: 3950..3957,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 23,
            span: 3957..3958,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 128,
            column: 26,
            span: 3959..3961,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%]'",
        ),
        position: Position {
            line: 128,
            column: 31,
            span: 3962..3966,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 32,
            span: 3966..3967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 129,
            column: 7,
            span: 3968..3974,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 8,
            span: 3974..3975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 129,
            column: 14,
            span: 3975..3981,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 15,
            span: 3981..3982,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a%-z]'",
        ),
        position: Position {
            line: 129,
            column: 23,
            span: 3982..3990,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 24,
            span: 3990..3991,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 129,
            column: 27,
            span: 3992..3994,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-az'",
        ),
        position: Position {
            line: 129,
            column: 33,
            span: 3995..4000,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 34,
            span: 4000..4001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 130,
            column: 7,
            span: 4002..4008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 8,
            span: 4008..4009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 130,
            column: 14,
            span: 4009..4015,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 15,
            span: 4015..4016,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%^%[%-a%]%-b]'",
        ),
        position: Position {
            line: 130,
            column: 31,
            span: 4016..4032,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 32,
            span: 4032..4033,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 130,
            column: 35,
            span: 4034..4036,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-[]^ab'",
        ),
        position: Position {
            line: 130,
            column: 44,
            span: 4037..4045,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 45,
            span: 4045..4046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 131,
            column: 7,
            span: 4047..4053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 8,
            span: 4053..4054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 131,
            column: 14,
            span: 4054..4060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 15,
            span: 4060..4061,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%Z'",
        ),
        position: Position {
            line: 131,
            column: 19,
            span: 4061..4065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 20,
            span: 4065..4066,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 131,
            column: 23,
            span: 4067..4069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 131,
            column: 30,
            span: 4070..4076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 31,
            span: 4076..4077,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\1-\\255]'",
        ),
        position: Position {
            line: 131,
            column: 42,
            span: 4077..4088,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 43,
            span: 4088..4089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 44,
            span: 4089..4090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 132,
            column: 7,
            span: 4091..4097,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 8,
            span: 4097..4098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 132,
            column: 14,
            span: 4098..4104,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 15,
            span: 4104..4105,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        position: Position {
            line: 132,
            column: 18,
            span: 4105..4108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 19,
            span: 4108..4109,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 132,
            column: 22,
            span: 4110..4112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 132,
            column: 29,
            span: 4113..4119,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 30,
            span: 4119..4120,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\1-\\255%z]'",
        ),
        position: Position {
            line: 132,
            column: 43,
            span: 4120..4133,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 44,
            span: 4133..4134,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 45,
            span: 4134..4135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 133,
            column: 6,
            span: 4136..4141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 7,
            span: 4141..4142,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 133,
            column: 10,
            span: 4142..4145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 11,
            span: 4145..4146,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 133,
            column: 12,
            span: 4146..4147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 135,
            column: 7,
            span: 4149..4155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 8,
            span: 4155..4156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 135,
            column: 14,
            span: 4156..4162,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 135,
            column: 15,
            span: 4162..4163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 135,
            column: 20,
            span: 4163..4168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 21,
            span: 4168..4169,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo xyzK\"",
        ),
        position: Position {
            line: 135,
            column: 31,
            span: 4169..4179,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 32,
            span: 4179..4180,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)K\"",
        ),
        position: Position {
            line: 135,
            column: 41,
            span: 4181..4189,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 42,
            span: 4189..4190,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 135,
            column: 45,
            span: 4191..4193,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyz\"",
        ),
        position: Position {
            line: 135,
            column: 51,
            span: 4194..4199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 52,
            span: 4199..4200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 136,
            column: 7,
            span: 4201..4207,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 8,
            span: 4207..4208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 136,
            column: 14,
            span: 4208..4214,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 136,
            column: 15,
            span: 4214..4215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 136,
            column: 20,
            span: 4215..4220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 21,
            span: 4220..4221,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"254 K\"",
        ),
        position: Position {
            line: 136,
            column: 28,
            span: 4221..4228,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 29,
            span: 4228..4229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%d*)K\"",
        ),
        position: Position {
            line: 136,
            column: 38,
            span: 4230..4238,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 39,
            span: 4238..4239,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 136,
            column: 42,
            span: 4240..4242,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 136,
            column: 45,
            span: 4243..4245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 46,
            span: 4245..4246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 137,
            column: 7,
            span: 4247..4253,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 8,
            span: 4253..4254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 137,
            column: 14,
            span: 4254..4260,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 137,
            column: 15,
            span: 4260..4261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 137,
            column: 20,
            span: 4261..4266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 21,
            span: 4266..4267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo \"",
        ),
        position: Position {
            line: 137,
            column: 27,
            span: 4267..4273,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 28,
            span: 4273..4274,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w*)$\"",
        ),
        position: Position {
            line: 137,
            column: 37,
            span: 4275..4283,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 38,
            span: 4283..4284,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 137,
            column: 41,
            span: 4285..4287,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 137,
            column: 44,
            span: 4288..4290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 45,
            span: 4290..4291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 138,
            column: 7,
            span: 4292..4298,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 8,
            span: 4298..4299,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 138,
            column: 11,
            span: 4299..4302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 138,
            column: 18,
            span: 4303..4309,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 138,
            column: 19,
            span: 4309..4310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 138,
            column: 24,
            span: 4310..4315,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 25,
            span: 4315..4316,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo \"",
        ),
        position: Position {
            line: 138,
            column: 31,
            span: 4316..4322,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 32,
            span: 4322..4323,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)$\"",
        ),
        position: Position {
            line: 138,
            column: 41,
            span: 4324..4332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 42,
            span: 4332..4333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 43,
            span: 4333..4334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 139,
            column: 7,
            span: 4335..4341,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 8,
            span: 4341..4342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 139,
            column: 14,
            span: 4342..4348,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 139,
            column: 15,
            span: 4348..4349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 139,
            column: 19,
            span: 4349..4353,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 20,
            span: 4353..4354,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(álo)\"",
        ),
        position: Position {
            line: 139,
            column: 27,
            span: 4354..4361,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 28,
            span: 4361..4362,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%(á\"",
        ),
        position: Position {
            line: 139,
            column: 34,
            span: 4363..4368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 35,
            span: 4368..4369,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 139,
            column: 38,
            span: 4370..4372,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 139,
            column: 40,
            span: 4372..4374,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 41,
            span: 4374..4375,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 140,
            column: 6,
            span: 4376..4381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 140,
            column: 8,
            span: 4382..4383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 9,
            span: 4383..4384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 140,
            column: 11,
            span: 4385..4386,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 12,
            span: 4386..4387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 140,
            column: 14,
            span: 4388..4389,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 15,
            span: 4389..4390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 140,
            column: 17,
            span: 4391..4392,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 18,
            span: 4392..4393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 140,
            column: 20,
            span: 4394..4395,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 22,
            span: 4396..4397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 140,
            column: 29,
            span: 4398..4404,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 140,
            column: 30,
            span: 4404..4405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 140,
            column: 35,
            span: 4405..4410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 36,
            span: 4410..4411,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"âlo alo\"",
        ),
        position: Position {
            line: 140,
            column: 45,
            span: 4411..4420,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 46,
            span: 4420..4421,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(((.).).* (%w*))$\"",
        ),
        position: Position {
            line: 140,
            column: 67,
            span: 4422..4442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 68,
            span: 4442..4443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 141,
            column: 7,
            span: 4444..4450,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 8,
            span: 4450..4451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 141,
            column: 9,
            span: 4451..4452,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 141,
            column: 12,
            span: 4453..4455,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'âlo alo'",
        ),
        position: Position {
            line: 141,
            column: 22,
            span: 4456..4465,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 141,
            column: 26,
            span: 4466..4469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 141,
            column: 28,
            span: 4470..4471,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 141,
            column: 31,
            span: 4472..4474,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'âl'",
        ),
        position: Position {
            line: 141,
            column: 36,
            span: 4475..4479,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 141,
            column: 40,
            span: 4480..4483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 141,
            column: 42,
            span: 4484..4485,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 141,
            column: 45,
            span: 4486..4488,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'â'",
        ),
        position: Position {
            line: 141,
            column: 49,
            span: 4489..4492,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 141,
            column: 53,
            span: 4493..4496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 141,
            column: 55,
            span: 4497..4498,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 141,
            column: 58,
            span: 4499..4501,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 141,
            column: 64,
            span: 4502..4507,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 141,
            column: 68,
            span: 4508..4511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 141,
            column: 70,
            span: 4512..4513,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 141,
            column: 73,
            span: 4514..4516,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 141,
            column: 77,
            span: 4517..4520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 78,
            span: 4520..4521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 142,
            column: 2,
            span: 4522..4523,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 3,
            span: 4523..4524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 142,
            column: 5,
            span: 4525..4526,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 6,
            span: 4526..4527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 142,
            column: 8,
            span: 4528..4529,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 9,
            span: 4529..4530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 142,
            column: 11,
            span: 4531..4532,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 142,
            column: 14,
            span: 4534..4535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 142,
            column: 21,
            span: 4536..4542,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 142,
            column: 22,
            span: 4542..4543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 142,
            column: 27,
            span: 4543..4548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 142,
            column: 28,
            span: 4548..4549,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        position: Position {
            line: 142,
            column: 40,
            span: 4549..4561,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 41,
            span: 4561..4562,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.+(.?)())'",
        ),
        position: Position {
            line: 142,
            column: 54,
            span: 4563..4575,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 142,
            column: 55,
            span: 4575..4576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 143,
            column: 7,
            span: 4577..4583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 8,
            span: 4583..4584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 143,
            column: 9,
            span: 4584..4585,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 143,
            column: 12,
            span: 4586..4588,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        position: Position {
            line: 143,
            column: 25,
            span: 4589..4601,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 143,
            column: 29,
            span: 4602..4605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 143,
            column: 31,
            span: 4606..4607,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 143,
            column: 34,
            span: 4608..4610,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 143,
            column: 37,
            span: 4611..4613,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 143,
            column: 41,
            span: 4614..4617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 143,
            column: 43,
            span: 4618..4619,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 143,
            column: 46,
            span: 4620..4622,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 143,
            column: 49,
            span: 4622..4625,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 143,
            column: 53,
            span: 4626..4629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 143,
            column: 55,
            span: 4630..4631,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 143,
            column: 58,
            span: 4632..4634,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 143,
            column: 62,
            span: 4635..4638,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 63,
            span: 4638..4639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 144,
            column: 6,
            span: 4640..4645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 7,
            span: 4645..4646,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 4646..4649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 11,
            span: 4649..4650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 146,
            column: 7,
            span: 4652..4658,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 4658..4659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 146,
            column: 14,
            span: 4659..4665,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 146,
            column: 15,
            span: 4665..4666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 146,
            column: 19,
            span: 4666..4670,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 20,
            span: 4670..4671,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ülo ülo'",
        ),
        position: Position {
            line: 146,
            column: 29,
            span: 4671..4680,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 30,
            span: 4680..4681,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ü'",
        ),
        position: Position {
            line: 146,
            column: 34,
            span: 4682..4685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 35,
            span: 4685..4686,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 146,
            column: 39,
            span: 4687..4690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 40,
            span: 4690..4691,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 146,
            column: 43,
            span: 4692..4694,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xlo xlo'",
        ),
        position: Position {
            line: 146,
            column: 53,
            span: 4695..4704,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 54,
            span: 4704..4705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 147,
            column: 7,
            span: 4706..4712,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 8,
            span: 4712..4713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 147,
            column: 14,
            span: 4713..4719,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 147,
            column: 15,
            span: 4719..4720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 147,
            column: 19,
            span: 4720..4724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 20,
            span: 4724..4725,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo úlo  '",
        ),
        position: Position {
            line: 147,
            column: 31,
            span: 4725..4736,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 32,
            span: 4736..4737,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' +$'",
        ),
        position: Position {
            line: 147,
            column: 38,
            span: 4738..4743,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 39,
            span: 4743..4744,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 147,
            column: 42,
            span: 4745..4747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 43,
            span: 4747..4748,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 46,
            span: 4749..4751,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo úlo'",
        ),
        position: Position {
            line: 147,
            column: 56,
            span: 4752..4761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 57,
            span: 4761..4762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 148,
            column: 7,
            span: 4772..4778,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 4778..4779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 148,
            column: 14,
            span: 4779..4785,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 148,
            column: 15,
            span: 4785..4786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 148,
            column: 19,
            span: 4786..4790,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 20,
            span: 4790..4791,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  alo alo  '",
        ),
        position: Position {
            line: 148,
            column: 33,
            span: 4791..4804,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 34,
            span: 4804..4805,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%s*(.-)%s*$'",
        ),
        position: Position {
            line: 148,
            column: 49,
            span: 4806..4820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 50,
            span: 4820..4821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1'",
        ),
        position: Position {
            line: 148,
            column: 55,
            span: 4822..4826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 56,
            span: 4826..4827,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 148,
            column: 59,
            span: 4828..4830,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo'",
        ),
        position: Position {
            line: 148,
            column: 69,
            span: 4831..4840,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 70,
            span: 4840..4841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 149,
            column: 7,
            span: 4858..4864,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 4864..4865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 149,
            column: 14,
            span: 4865..4871,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 149,
            column: 15,
            span: 4871..4872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 149,
            column: 19,
            span: 4872..4876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 20,
            span: 4876..4877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo  alo  \\n 123\\n '",
        ),
        position: Position {
            line: 149,
            column: 41,
            span: 4877..4898,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 42,
            span: 4898..4899,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%s+'",
        ),
        position: Position {
            line: 149,
            column: 48,
            span: 4900..4905,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 49,
            span: 4905..4906,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        position: Position {
            line: 149,
            column: 53,
            span: 4907..4910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 54,
            span: 4910..4911,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 149,
            column: 57,
            span: 4912..4914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo 123 '",
        ),
        position: Position {
            line: 149,
            column: 72,
            span: 4915..4929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 73,
            span: 4929..4930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 150,
            column: 2,
            span: 4931..4932,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 4,
            span: 4933..4934,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abç d\"",
        ),
        position: Position {
            line: 150,
            column: 12,
            span: 4935..4942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 151,
            column: 2,
            span: 4943..4944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 3,
            span: 4944..4945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 151,
            column: 5,
            span: 4946..4947,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 151,
            column: 7,
            span: 4948..4949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 151,
            column: 14,
            span: 4950..4956,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 151,
            column: 15,
            span: 4956..4957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 151,
            column: 19,
            span: 4957..4961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 20,
            span: 4961..4962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 151,
            column: 21,
            span: 4962..4963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 22,
            span: 4963..4964,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.)'",
        ),
        position: Position {
            line: 151,
            column: 28,
            span: 4965..4970,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 29,
            span: 4970..4971,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1@'",
        ),
        position: Position {
            line: 151,
            column: 35,
            span: 4972..4977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 36,
            span: 4977..4978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 152,
            column: 7,
            span: 4979..4985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 8,
            span: 4985..4986,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'@'",
        ),
        position: Position {
            line: 152,
            column: 11,
            span: 4986..4989,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 4989..4991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 152,
            column: 14,
            span: 4991..4992,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 152,
            column: 17,
            span: 4993..4995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 152,
            column: 24,
            span: 4996..5002,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 152,
            column: 25,
            span: 5002..5003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 152,
            column: 29,
            span: 5003..5007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 30,
            span: 5007..5008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 152,
            column: 31,
            span: 5008..5009,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 32,
            span: 5009..5010,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 152,
            column: 35,
            span: 5011..5013,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 36,
            span: 5013..5014,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'@'",
        ),
        position: Position {
            line: 152,
            column: 40,
            span: 5015..5018,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 41,
            span: 5018..5019,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 152,
            column: 45,
            span: 5020..5023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 152,
            column: 47,
            span: 5024..5025,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 152,
            column: 50,
            span: 5026..5028,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 52,
            span: 5028..5030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 53,
            span: 5030..5031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 153,
            column: 2,
            span: 5032..5033,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 3,
            span: 5033..5034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 153,
            column: 5,
            span: 5035..5036,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 153,
            column: 7,
            span: 5037..5038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 153,
            column: 14,
            span: 5039..5045,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 15,
            span: 5045..5046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 153,
            column: 19,
            span: 5046..5050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 20,
            span: 5050..5051,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abçd'",
        ),
        position: Position {
            line: 153,
            column: 26,
            span: 5051..5057,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 27,
            span: 5057..5058,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.)'",
        ),
        position: Position {
            line: 153,
            column: 33,
            span: 5059..5064,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 34,
            span: 5064..5065,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%0@'",
        ),
        position: Position {
            line: 153,
            column: 40,
            span: 5066..5071,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 41,
            span: 5071..5072,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 43,
            span: 5072..5074,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 44,
            span: 5074..5075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 154,
            column: 7,
            span: 5076..5082,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 8,
            span: 5082..5083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 154,
            column: 9,
            span: 5083..5084,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 154,
            column: 12,
            span: 5085..5087,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a@b@çd'",
        ),
        position: Position {
            line: 154,
            column: 21,
            span: 5088..5096,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 154,
            column: 25,
            span: 5097..5100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 154,
            column: 27,
            span: 5101..5102,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 154,
            column: 30,
            span: 5103..5105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 154,
            column: 32,
            span: 5105..5107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 33,
            span: 5107..5108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 155,
            column: 7,
            span: 5109..5115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 8,
            span: 5115..5116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 155,
            column: 14,
            span: 5116..5122,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 15,
            span: 5122..5123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 155,
            column: 19,
            span: 5123..5127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 20,
            span: 5127..5128,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo'",
        ),
        position: Position {
            line: 155,
            column: 29,
            span: 5128..5137,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 30,
            span: 5137..5138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()[al]'",
        ),
        position: Position {
            line: 155,
            column: 39,
            span: 5139..5147,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 40,
            span: 5147..5148,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1'",
        ),
        position: Position {
            line: 155,
            column: 45,
            span: 5149..5153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 46,
            span: 5153..5154,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 155,
            column: 49,
            span: 5155..5157,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12o 56o'",
        ),
        position: Position {
            line: 155,
            column: 59,
            span: 5158..5167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 60,
            span: 5167..5168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 156,
            column: 7,
            span: 5169..5175,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 8,
            span: 5175..5176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 156,
            column: 14,
            span: 5176..5182,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 15,
            span: 5182..5183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 156,
            column: 19,
            span: 5183..5187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 20,
            span: 5187..5188,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc=xyz\"",
        ),
        position: Position {
            line: 156,
            column: 29,
            span: 5188..5197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 30,
            span: 5197..5198,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w*)(%p)(%w+)\"",
        ),
        position: Position {
            line: 156,
            column: 47,
            span: 5199..5215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 48,
            span: 5215..5216,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%3%2%1-%0\"",
        ),
        position: Position {
            line: 156,
            column: 60,
            span: 5217..5228,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 61,
            span: 5228..5229,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 156,
            column: 64,
            span: 5230..5232,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyz=abc-abc=xyz\"",
        ),
        position: Position {
            line: 157,
            column: 32,
            span: 5247..5264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 33,
            span: 5264..5265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 158,
            column: 7,
            span: 5266..5272,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 8,
            span: 5272..5273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 158,
            column: 14,
            span: 5273..5279,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 15,
            span: 5279..5280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 158,
            column: 19,
            span: 5280..5284,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 20,
            span: 5284..5285,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 158,
            column: 25,
            span: 5285..5290,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 26,
            span: 5290..5291,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w\"",
        ),
        position: Position {
            line: 158,
            column: 31,
            span: 5292..5296,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 32,
            span: 5296..5297,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1%0\"",
        ),
        position: Position {
            line: 158,
            column: 39,
            span: 5298..5304,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 40,
            span: 5304..5305,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 158,
            column: 43,
            span: 5306..5308,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aabbcc\"",
        ),
        position: Position {
            line: 158,
            column: 52,
            span: 5309..5317,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 53,
            span: 5317..5318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 159,
            column: 7,
            span: 5319..5325,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 8,
            span: 5325..5326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 159,
            column: 14,
            span: 5326..5332,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 159,
            column: 15,
            span: 5332..5333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 159,
            column: 19,
            span: 5333..5337,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 20,
            span: 5337..5338,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 159,
            column: 25,
            span: 5338..5343,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 26,
            span: 5343..5344,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        position: Position {
            line: 159,
            column: 32,
            span: 5345..5350,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 33,
            span: 5350..5351,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%0%1\"",
        ),
        position: Position {
            line: 159,
            column: 40,
            span: 5352..5358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 41,
            span: 5358..5359,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 159,
            column: 44,
            span: 5360..5362,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcabc\"",
        ),
        position: Position {
            line: 159,
            column: 53,
            span: 5363..5371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 54,
            span: 5371..5372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 160,
            column: 7,
            span: 5373..5379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 8,
            span: 5379..5380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 160,
            column: 14,
            span: 5380..5386,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 160,
            column: 15,
            span: 5386..5387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 160,
            column: 19,
            span: 5387..5391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 20,
            span: 5391..5392,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'áéí'",
        ),
        position: Position {
            line: 160,
            column: 25,
            span: 5392..5397,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 26,
            span: 5397..5398,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        position: Position {
            line: 160,
            column: 30,
            span: 5399..5402,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 31,
            span: 5402..5403,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0óú'",
        ),
        position: Position {
            line: 160,
            column: 38,
            span: 5404..5410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 39,
            span: 5410..5411,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 160,
            column: 42,
            span: 5412..5414,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'áéí\\0óú'",
        ),
        position: Position {
            line: 160,
            column: 52,
            span: 5415..5424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 53,
            span: 5424..5425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 161,
            column: 7,
            span: 5426..5432,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 8,
            span: 5432..5433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 161,
            column: 14,
            span: 5433..5439,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 161,
            column: 15,
            span: 5439..5440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 161,
            column: 19,
            span: 5440..5444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 20,
            span: 5444..5445,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 161,
            column: 22,
            span: 5445..5447,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 161,
            column: 23,
            span: 5447..5448,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^'",
        ),
        position: Position {
            line: 161,
            column: 27,
            span: 5449..5452,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 161,
            column: 28,
            span: 5452..5453,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        position: Position {
            line: 161,
            column: 32,
            span: 5454..5457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 33,
            span: 5457..5458,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 161,
            column: 36,
            span: 5459..5461,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        position: Position {
            line: 161,
            column: 40,
            span: 5462..5465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 41,
            span: 5465..5466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 162,
            column: 7,
            span: 5467..5473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 8,
            span: 5473..5474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 162,
            column: 14,
            span: 5474..5480,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 162,
            column: 15,
            span: 5480..5481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 162,
            column: 19,
            span: 5481..5485,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 20,
            span: 5485..5486,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 162,
            column: 22,
            span: 5486..5488,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 23,
            span: 5488..5489,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        position: Position {
            line: 162,
            column: 27,
            span: 5490..5493,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 28,
            span: 5493..5494,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        position: Position {
            line: 162,
            column: 32,
            span: 5495..5498,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 33,
            span: 5498..5499,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 162,
            column: 36,
            span: 5500..5502,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        position: Position {
            line: 162,
            column: 40,
            span: 5503..5506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 41,
            span: 5506..5507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 163,
            column: 6,
            span: 5508..5513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 7,
            span: 5513..5514,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 163,
            column: 10,
            span: 5514..5517,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 11,
            span: 5517..5518,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 166,
            column: 3,
            span: 5521..5523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 167,
            column: 9,
            span: 5571..5577,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 10,
            span: 5577..5578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 167,
            column: 16,
            span: 5578..5584,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 17,
            span: 5584..5585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 167,
            column: 21,
            span: 5585..5589,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 22,
            span: 5589..5590,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a b cd\"",
        ),
        position: Position {
            line: 167,
            column: 30,
            span: 5590..5598,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 31,
            span: 5598..5599,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" *\"",
        ),
        position: Position {
            line: 167,
            column: 36,
            span: 5600..5604,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 37,
            span: 5604..5605,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        position: Position {
            line: 167,
            column: 41,
            span: 5606..5609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 42,
            span: 5609..5610,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 167,
            column: 45,
            span: 5611..5613,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-a-b-c-d-\"",
        ),
        position: Position {
            line: 167,
            column: 57,
            span: 5614..5625,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 58,
            span: 5625..5626,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 169,
            column: 8,
            span: 5630..5635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 169,
            column: 12,
            span: 5636..5639,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 169,
            column: 14,
            span: 5640..5641,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 169,
            column: 17,
            span: 5642..5644,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 170,
            column: 8,
            span: 5647..5652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 170,
            column: 12,
            span: 5653..5656,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 170,
            column: 14,
            span: 5657..5658,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a  \\nbc\\t\\td\"",
        ),
        position: Position {
            line: 170,
            column: 29,
            span: 5659..5673,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 171,
            column: 8,
            span: 5676..5681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 171,
            column: 10,
            span: 5682..5683,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 171,
            column: 12,
            span: 5684..5685,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 171,
            column: 0,
            span: 5685..5687,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 172,
            column: 6,
            span: 5690..5693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 5694..5695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 9,
            span: 5695..5696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 172,
            column: 11,
            span: 5697..5698,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 172,
            column: 14,
            span: 5699..5701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 172,
            column: 21,
            span: 5702..5708,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 172,
            column: 22,
            span: 5708..5709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 172,
            column: 28,
            span: 5709..5715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 29,
            span: 5715..5716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 172,
            column: 32,
            span: 5716..5719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 33,
            span: 5719..5720,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()%s*()\"",
        ),
        position: Position {
            line: 172,
            column: 43,
            span: 5721..5730,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 44,
            span: 5730..5731,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 172,
            column: 0,
            span: 5732..5734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 173,
            column: 8,
            span: 5739..5742,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 173,
            column: 10,
            span: 5743..5744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 173,
            column: 14,
            span: 5745..5748,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 173,
            column: 17,
            span: 5749..5751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 173,
            column: 24,
            span: 5752..5758,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 173,
            column: 25,
            span: 5758..5759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 173,
            column: 28,
            span: 5759..5762,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 29,
            span: 5762..5763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 173,
            column: 32,
            span: 5763..5766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 33,
            span: 5766..5767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 173,
            column: 35,
            span: 5768..5769,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 36,
            span: 5769..5770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 173,
            column: 38,
            span: 5771..5772,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 173,
            column: 40,
            span: 5773..5774,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 173,
            column: 42,
            span: 5774..5776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 43,
            span: 5776..5777,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 173,
            column: 46,
            span: 5778..5780,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        position: Position {
            line: 173,
            column: 50,
            span: 5781..5784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 174,
            column: 6,
            span: 5789..5790,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 174,
            column: 8,
            span: 5791..5792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 174,
            column: 0,
            span: 5793..5794,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 175,
            column: 0,
            span: 5797..5800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 176,
            column: 9,
            span: 5803..5809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 10,
            span: 5809..5810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 176,
            column: 13,
            span: 5810..5813,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 176,
            column: 16,
            span: 5814..5816,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-a-b-c-d-\"",
        ),
        position: Position {
            line: 176,
            column: 28,
            span: 5817..5828,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 29,
            span: 5828..5829,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 177,
            column: 0,
            span: 5830..5833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 180,
            column: 7,
            span: 5836..5842,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 8,
            span: 5842..5843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 180,
            column: 14,
            span: 5843..5849,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 180,
            column: 15,
            span: 5849..5850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 180,
            column: 19,
            span: 5850..5854,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 20,
            span: 5854..5855,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"um (dois) tres (quatro)\"",
        ),
        position: Position {
            line: 180,
            column: 45,
            span: 5855..5880,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 180,
            column: 46,
            span: 5880..5881,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%(%w+%))\"",
        ),
        position: Position {
            line: 180,
            column: 58,
            span: 5882..5893,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 180,
            column: 59,
            span: 5893..5894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 180,
            column: 66,
            span: 5895..5901,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 180,
            column: 67,
            span: 5901..5902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        position: Position {
            line: 180,
            column: 72,
            span: 5902..5907,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 73,
            span: 5907..5908,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 76,
            span: 5909..5911,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"um (DOIS) tres (QUATRO)\"",
        ),
        position: Position {
            line: 181,
            column: 38,
            span: 5924..5949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 39,
            span: 5949..5950,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 183,
            column: 0,
            span: 5952..5954,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 184,
            column: 8,
            span: 5957..5962,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 184,
            column: 17,
            span: 5963..5971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setglobal",
        ),
        position: Position {
            line: 184,
            column: 27,
            span: 5972..5981,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 29,
            span: 5982..5983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 184,
            column: 30,
            span: 5983..5984,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 184,
            column: 31,
            span: 5984..5985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 184,
            column: 32,
            span: 5985..5986,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 33,
            span: 5986..5987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        position: Position {
            line: 184,
            column: 40,
            span: 5988..5994,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 41,
            span: 5994..5995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 184,
            column: 43,
            span: 5995..5997,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 184,
            column: 44,
            span: 5997..5998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 184,
            column: 46,
            span: 5999..6000,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 184,
            column: 47,
            span: 6000..6001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 184,
            column: 49,
            span: 6002..6003,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 50,
            span: 6003..6004,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 184,
            column: 0,
            span: 6005..6008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 185,
            column: 9,
            span: 6011..6017,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 185,
            column: 10,
            span: 6017..6018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 185,
            column: 14,
            span: 6018..6022,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 15,
            span: 6022..6023,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=roberto,roberto=a\"",
        ),
        position: Position {
            line: 185,
            column: 36,
            span: 6023..6044,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 185,
            column: 37,
            span: 6044..6045,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)=(%w%w*)\"",
        ),
        position: Position {
            line: 185,
            column: 53,
            span: 6046..6061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 185,
            column: 54,
            span: 6061..6062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setglobal",
        ),
        position: Position {
            line: 185,
            column: 64,
            span: 6063..6072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 65,
            span: 6072..6073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 186,
            column: 9,
            span: 6076..6082,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 10,
            span: 6082..6083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 186,
            column: 12,
            span: 6083..6085,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 186,
            column: 13,
            span: 6085..6086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 186,
            column: 14,
            span: 6086..6087,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 186,
            column: 16,
            span: 6087..6089,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"roberto\"",
        ),
        position: Position {
            line: 186,
            column: 25,
            span: 6089..6098,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 186,
            column: 29,
            span: 6099..6102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 186,
            column: 32,
            span: 6103..6105,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 186,
            column: 33,
            span: 6105..6106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "roberto",
        ),
        position: Position {
            line: 186,
            column: 40,
            span: 6106..6113,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 186,
            column: 42,
            span: 6113..6115,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 186,
            column: 45,
            span: 6115..6118,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 46,
            span: 6118..6119,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 187,
            column: 0,
            span: 6120..6123,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 189,
            column: 9,
            span: 6125..6133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 189,
            column: 11,
            span: 6134..6135,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 12,
            span: 6135..6136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 189,
            column: 13,
            span: 6136..6137,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 14,
            span: 6137..6138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 189,
            column: 15,
            span: 6138..6139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 16,
            span: 6139..6140,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 189,
            column: 23,
            span: 6141..6147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 189,
            column: 30,
            span: 6148..6154,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 189,
            column: 31,
            span: 6154..6155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 189,
            column: 35,
            span: 6155..6159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 36,
            span: 6159..6160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 189,
            column: 37,
            span: 6160..6161,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 38,
            span: 6161..6162,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        position: Position {
            line: 189,
            column: 41,
            span: 6162..6165,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 42,
            span: 6165..6166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 189,
            column: 43,
            span: 6166..6167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 44,
            span: 6167..6168,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 189,
            column: 0,
            span: 6169..6172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 190,
            column: 7,
            span: 6173..6179,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 8,
            span: 6179..6180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 190,
            column: 14,
            span: 6180..6186,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 190,
            column: 15,
            span: 6186..6187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 190,
            column: 19,
            span: 6187..6191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 20,
            span: 6191..6192,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"trocar tudo em |teste|b| é |beleza|al|\"",
        ),
        position: Position {
            line: 190,
            column: 60,
            span: 6192..6232,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 61,
            span: 6232..6233,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"|([^|]*)|([^|]*)|\"",
        ),
        position: Position {
            line: 190,
            column: 81,
            span: 6234..6253,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 82,
            span: 6253..6254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 190,
            column: 84,
            span: 6255..6256,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 85,
            span: 6256..6257,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 190,
            column: 88,
            span: 6258..6260,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"trocar tudo em bbbbb é alalalalalal\"",
        ),
        position: Position {
            line: 191,
            column: 50,
            span: 6273..6310,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 51,
            span: 6310..6311,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 193,
            column: 6,
            span: 6313..6318,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 193,
            column: 15,
            span: 6319..6327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 193,
            column: 24,
            span: 6328..6336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 26,
            span: 6337..6338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 193,
            column: 27,
            span: 6338..6339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 28,
            span: 6339..6340,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 193,
            column: 35,
            span: 6341..6347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 193,
            column: 40,
            span: 6348..6352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 41,
            span: 6352..6353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 193,
            column: 42,
            span: 6353..6354,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 43,
            span: 6354..6355,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 193,
            column: 46,
            span: 6356..6358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 47,
            span: 6358..6359,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 48,
            span: 6359..6360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 49,
            span: 6360..6361,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 193,
            column: 52,
            span: 6362..6364,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 193,
            column: 55,
            span: 6365..6367,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 193,
            column: 0,
            span: 6368..6371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 194,
            column: 7,
            span: 6372..6378,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 8,
            span: 6378..6379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 194,
            column: 14,
            span: 6379..6385,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 194,
            column: 15,
            span: 6385..6386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 194,
            column: 19,
            span: 6386..6390,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 20,
            span: 6390..6391,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo $a='x'$ novamente $return a$\"",
        ),
        position: Position {
            line: 194,
            column: 54,
            span: 6391..6425,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 55,
            span: 6425..6426,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$([^$]*)%$\"",
        ),
        position: Position {
            line: 195,
            column: 32,
            span: 6446..6458,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 33,
            span: 6458..6459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 196,
            column: 28,
            span: 6479..6487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 29,
            span: 6487..6488,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 196,
            column: 32,
            span: 6489..6491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo  novamente x\"",
        ),
        position: Position {
            line: 196,
            column: 51,
            span: 6492..6510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 52,
            span: 6510..6511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 198,
            column: 2,
            span: 6513..6514,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 198,
            column: 4,
            span: 6515..6516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 198,
            column: 11,
            span: 6517..6523,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 198,
            column: 12,
            span: 6523..6524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 198,
            column: 16,
            span: 6524..6528,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 17,
            span: 6528..6529,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$x=string.gsub('alo', '.', string.upper)$ assim vai para $return x$\"",
        ),
        position: Position {
            line: 198,
            column: 86,
            span: 6529..6598,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 87,
            span: 6598..6599,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$([^$]*)%$\"",
        ),
        position: Position {
            line: 199,
            column: 22,
            span: 6609..6621,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 199,
            column: 23,
            span: 6621..6622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 199,
            column: 32,
            span: 6623..6631,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 33,
            span: 6631..6632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 200,
            column: 7,
            span: 6633..6639,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 8,
            span: 6639..6640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 200,
            column: 9,
            span: 6640..6641,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 200,
            column: 12,
            span: 6642..6644,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' assim vai para ALO'",
        ),
        position: Position {
            line: 200,
            column: 34,
            span: 6645..6666,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 35,
            span: 6666..6667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 202,
            column: 2,
            span: 6669..6670,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 202,
            column: 4,
            span: 6671..6672,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 202,
            column: 6,
            span: 6673..6674,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 202,
            column: 7,
            span: 6674..6675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 203,
            column: 2,
            span: 6676..6677,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 203,
            column: 4,
            span: 6678..6679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a alo jose  joao'",
        ),
        position: Position {
            line: 203,
            column: 23,
            span: 6680..6698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 204,
            column: 2,
            span: 6699..6700,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 204,
            column: 4,
            span: 6701..6702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 204,
            column: 11,
            span: 6703..6709,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 204,
            column: 12,
            span: 6709..6710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 204,
            column: 16,
            span: 6710..6714,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 17,
            span: 6714..6715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 204,
            column: 18,
            span: 6715..6716,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 19,
            span: 6716..6717,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()(%w+)()'",
        ),
        position: Position {
            line: 204,
            column: 31,
            span: 6718..6729,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 32,
            span: 6729..6730,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 204,
            column: 41,
            span: 6731..6739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 43,
            span: 6740..6741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 204,
            column: 44,
            span: 6741..6742,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 45,
            span: 6742..6743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 204,
            column: 46,
            span: 6743..6744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 47,
            span: 6744..6745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 204,
            column: 48,
            span: 6745..6746,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 49,
            span: 6746..6747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 205,
            column: 13,
            span: 6754..6760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 14,
            span: 6760..6761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 205,
            column: 20,
            span: 6761..6767,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 205,
            column: 21,
            span: 6767..6768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 205,
            column: 24,
            span: 6768..6771,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 25,
            span: 6771..6772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 205,
            column: 26,
            span: 6772..6773,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 27,
            span: 6773..6774,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 205,
            column: 30,
            span: 6775..6777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 205,
            column: 32,
            span: 6778..6779,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 205,
            column: 33,
            span: 6779..6780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 205,
            column: 34,
            span: 6780..6781,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 35,
            span: 6781..6782,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 205,
            column: 36,
            span: 6782..6783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 206,
            column: 8,
            span: 6790..6791,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 206,
            column: 9,
            span: 6791..6792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 206,
            column: 10,
            span: 6792..6793,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 206,
            column: 11,
            span: 6793..6794,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 206,
            column: 13,
            span: 6795..6796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 206,
            column: 15,
            span: 6797..6798,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 206,
            column: 16,
            span: 6798..6799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 206,
            column: 17,
            span: 6799..6800,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 206,
            column: 18,
            span: 6800..6801,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 207,
            column: 8,
            span: 6806..6809,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 9,
            span: 6809..6810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 208,
            column: 7,
            span: 6811..6817,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 8,
            span: 6817..6818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 208,
            column: 9,
            span: 6818..6819,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 208,
            column: 12,
            span: 6820..6822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 208,
            column: 14,
            span: 6823..6824,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 208,
            column: 18,
            span: 6825..6828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 208,
            column: 20,
            span: 6829..6830,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 208,
            column: 21,
            span: 6830..6831,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 22,
            span: 6830..6832,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 208,
            column: 23,
            span: 6832..6833,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 208,
            column: 26,
            span: 6834..6836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 28,
            span: 6836..6838,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 208,
            column: 32,
            span: 6839..6842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 208,
            column: 34,
            span: 6843..6844,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 208,
            column: 35,
            span: 6844..6845,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 36,
            span: 6844..6846,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 208,
            column: 37,
            span: 6846..6847,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 208,
            column: 40,
            span: 6848..6850,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 42,
            span: 6850..6852,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 208,
            column: 46,
            span: 6853..6856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 208,
            column: 48,
            span: 6857..6858,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 208,
            column: 49,
            span: 6858..6859,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 50,
            span: 6858..6860,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 208,
            column: 51,
            span: 6860..6861,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 208,
            column: 54,
            span: 6862..6864,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 56,
            span: 6864..6866,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 208,
            column: 60,
            span: 6867..6870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 208,
            column: 62,
            span: 6871..6872,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 208,
            column: 63,
            span: 6872..6873,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 65,
            span: 6872..6875,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 208,
            column: 66,
            span: 6875..6876,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 208,
            column: 69,
            span: 6877..6879,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 71,
            span: 6879..6881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 72,
            span: 6881..6882,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 211,
            column: 9,
            span: 6885..6893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        position: Position {
            line: 211,
            column: 20,
            span: 6894..6904,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 22,
            span: 6905..6906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 211,
            column: 23,
            span: 6906..6907,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 24,
            span: 6907..6908,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 212,
            column: 9,
            span: 6911..6917,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 212,
            column: 13,
            span: 6918..6921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 212,
            column: 20,
            span: 6922..6928,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 212,
            column: 21,
            span: 6928..6929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 212,
            column: 25,
            span: 6929..6933,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 26,
            span: 6933..6934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 212,
            column: 32,
            span: 6934..6940,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 212,
            column: 33,
            span: 6940..6941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 212,
            column: 37,
            span: 6941..6945,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 38,
            span: 6945..6946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 212,
            column: 39,
            span: 6946..6947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 40,
            span: 6947..6948,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b()\"",
        ),
        position: Position {
            line: 212,
            column: 47,
            span: 6949..6955,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 48,
            span: 6955..6956,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 212,
            column: 51,
            span: 6957..6959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 52,
            span: 6959..6960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 53,
            span: 6960..6961,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[()]\"",
        ),
        position: Position {
            line: 212,
            column: 60,
            span: 6962..6968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 61,
            span: 6968..6969,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 213,
            column: 0,
            span: 6970..6973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 215,
            column: 7,
            span: 6975..6981,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 8,
            span: 6981..6982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        position: Position {
            line: 215,
            column: 18,
            span: 6982..6992,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 19,
            span: 6992..6993,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(9 ((8))(\\0) 7) \\0\\0 a b ()(c)() a\"",
        ),
        position: Position {
            line: 215,
            column: 55,
            span: 6993..7029,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 56,
            span: 7029..7030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 57,
            span: 7030..7031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 216,
            column: 7,
            span: 7032..7038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 8,
            span: 7038..7039,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 216,
            column: 11,
            span: 7039..7042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        position: Position {
            line: 216,
            column: 22,
            span: 7043..7053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 23,
            span: 7053..7054,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(9 ((8) 7) a b (\\0 c) a\"",
        ),
        position: Position {
            line: 216,
            column: 48,
            span: 7054..7079,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 49,
            span: 7079..7080,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 50,
            span: 7080..7081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 217,
            column: 7,
            span: 7082..7088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 8,
            span: 7088..7089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 217,
            column: 14,
            span: 7089..7095,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 217,
            column: 15,
            span: 7095..7096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 217,
            column: 19,
            span: 7096..7100,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 20,
            span: 7100..7101,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo 'oi' alo\"",
        ),
        position: Position {
            line: 217,
            column: 34,
            span: 7101..7115,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 35,
            span: 7115..7116,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b''\"",
        ),
        position: Position {
            line: 217,
            column: 42,
            span: 7117..7123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 43,
            span: 7123..7124,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        position: Position {
            line: 217,
            column: 47,
            span: 7125..7128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 48,
            span: 7128..7129,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 217,
            column: 51,
            span: 7130..7132,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo \" alo'",
        ),
        position: Position {
            line: 217,
            column: 63,
            span: 7133..7144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 64,
            span: 7144..7145,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 220,
            column: 6,
            span: 7148..7153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 220,
            column: 8,
            span: 7154..7155,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 220,
            column: 10,
            span: 7156..7157,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 220,
            column: 12,
            span: 7158..7159,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"apple\"",
        ),
        position: Position {
            line: 220,
            column: 19,
            span: 7159..7166,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 20,
            span: 7166..7167,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"orange\"",
        ),
        position: Position {
            line: 220,
            column: 29,
            span: 7168..7176,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 30,
            span: 7176..7177,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lime\"",
        ),
        position: Position {
            line: 220,
            column: 37,
            span: 7178..7184,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 220,
            column: 38,
            span: 7184..7185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 220,
            column: 40,
            span: 7186..7187,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 220,
            column: 41,
            span: 7187..7188,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 220,
            column: 42,
            span: 7187..7189,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 220,
            column: 43,
            span: 7189..7190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 221,
            column: 7,
            span: 7191..7197,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 8,
            span: 7197..7198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 221,
            column: 14,
            span: 7198..7204,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 221,
            column: 15,
            span: 7204..7205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 221,
            column: 19,
            span: 7205..7209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 20,
            span: 7209..7210,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x and x and x\"",
        ),
        position: Position {
            line: 221,
            column: 35,
            span: 7210..7225,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 36,
            span: 7225..7226,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 221,
            column: 40,
            span: 7227..7230,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 41,
            span: 7230..7231,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 221,
            column: 50,
            span: 7232..7240,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 52,
            span: 7241..7242,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 53,
            span: 7242..7243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 221,
            column: 55,
            span: 7244..7245,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 221,
            column: 56,
            span: 7245..7246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 221,
            column: 57,
            span: 7246..7247,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 221,
            column: 58,
            span: 7247..7248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 221,
            column: 59,
            span: 7248..7249,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 221,
            column: 60,
            span: 7249..7250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 221,
            column: 61,
            span: 7250..7251,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 221,
            column: 62,
            span: 7251..7252,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 221,
            column: 63,
            span: 7251..7253,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 221,
            column: 64,
            span: 7253..7254,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 221,
            column: 71,
            span: 7255..7261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 221,
            column: 73,
            span: 7262..7263,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 221,
            column: 74,
            span: 7263..7264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 221,
            column: 75,
            span: 7264..7265,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 221,
            column: 76,
            span: 7265..7266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 221,
            column: 77,
            span: 7266..7267,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 221,
            column: 78,
            span: 7267..7268,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 221,
            column: 82,
            span: 7269..7272,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 83,
            span: 7272..7273,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 222,
            column: 11,
            span: 7282..7284,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"apple and orange and lime\"",
        ),
        position: Position {
            line: 222,
            column: 39,
            span: 7285..7312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 40,
            span: 7312..7313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 224,
            column: 2,
            span: 7315..7316,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 224,
            column: 4,
            span: 7317..7318,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 224,
            column: 6,
            span: 7319..7320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 224,
            column: 7,
            span: 7320..7321,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 224,
            column: 8,
            span: 7321..7322,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 9,
            span: 7321..7323,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 224,
            column: 10,
            span: 7323..7324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 225,
            column: 7,
            span: 7325..7331,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 225,
            column: 8,
            span: 7331..7332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 225,
            column: 12,
            span: 7332..7336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 13,
            span: 7336..7337,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        position: Position {
            line: 225,
            column: 32,
            span: 7337..7356,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 33,
            span: 7356..7357,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w%w*\"",
        ),
        position: Position {
            line: 225,
            column: 41,
            span: 7358..7365,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 42,
            span: 7365..7366,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 225,
            column: 51,
            span: 7367..7375,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 53,
            span: 7376..7377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 225,
            column: 54,
            span: 7377..7378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 55,
            span: 7378..7379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 225,
            column: 57,
            span: 7380..7381,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 225,
            column: 58,
            span: 7381..7382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 225,
            column: 59,
            span: 7382..7383,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 225,
            column: 60,
            span: 7383..7384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 225,
            column: 61,
            span: 7384..7385,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 225,
            column: 62,
            span: 7385..7386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 225,
            column: 63,
            span: 7386..7387,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 225,
            column: 64,
            span: 7387..7388,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 225,
            column: 65,
            span: 7387..7389,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 225,
            column: 66,
            span: 7389..7390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 225,
            column: 68,
            span: 7391..7392,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 225,
            column: 69,
            span: 7392..7393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 225,
            column: 70,
            span: 7393..7394,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 225,
            column: 71,
            span: 7394..7395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 225,
            column: 72,
            span: 7395..7396,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 225,
            column: 73,
            span: 7396..7397,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 225,
            column: 75,
            span: 7398..7399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 225,
            column: 77,
            span: 7400..7401,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 225,
            column: 81,
            span: 7402..7405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 82,
            span: 7405..7406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 226,
            column: 7,
            span: 7407..7413,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 8,
            span: 7413..7414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 226,
            column: 9,
            span: 7414..7415,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 226,
            column: 10,
            span: 7415..7416,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 226,
            column: 11,
            span: 7415..7417,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 226,
            column: 12,
            span: 7417..7418,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 226,
            column: 15,
            span: 7419..7421,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        position: Position {
            line: 226,
            column: 23,
            span: 7422..7429,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 226,
            column: 27,
            span: 7430..7433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 226,
            column: 29,
            span: 7434..7435,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 226,
            column: 30,
            span: 7435..7436,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 226,
            column: 31,
            span: 7435..7437,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 226,
            column: 32,
            span: 7437..7438,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 226,
            column: 35,
            span: 7439..7441,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        position: Position {
            line: 226,
            column: 44,
            span: 7442..7450,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 226,
            column: 48,
            span: 7451..7454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 226,
            column: 50,
            span: 7455..7456,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 226,
            column: 51,
            span: 7456..7457,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 226,
            column: 52,
            span: 7456..7458,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 226,
            column: 53,
            span: 7458..7459,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 226,
            column: 56,
            span: 7460..7462,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"word\"",
        ),
        position: Position {
            line: 226,
            column: 63,
            span: 7463..7469,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 226,
            column: 67,
            span: 7470..7473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 226,
            column: 69,
            span: 7474..7475,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 226,
            column: 70,
            span: 7475..7476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 226,
            column: 71,
            span: 7476..7477,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 226,
            column: 74,
            span: 7478..7480,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 226,
            column: 76,
            span: 7480..7482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 77,
            span: 7482..7483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 228,
            column: 2,
            span: 7485..7486,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 228,
            column: 4,
            span: 7487..7488,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 228,
            column: 6,
            span: 7489..7490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 228,
            column: 7,
            span: 7490..7491,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 228,
            column: 8,
            span: 7491..7492,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 228,
            column: 9,
            span: 7491..7493,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 228,
            column: 10,
            span: 7493..7494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 229,
            column: 7,
            span: 7495..7501,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 8,
            span: 7501..7502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 229,
            column: 14,
            span: 7502..7508,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 229,
            column: 15,
            span: 7508..7509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 229,
            column: 19,
            span: 7509..7513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 20,
            span: 7513..7514,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        position: Position {
            line: 229,
            column: 39,
            span: 7514..7533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 40,
            span: 7533..7534,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        position: Position {
            line: 229,
            column: 46,
            span: 7535..7540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 47,
            span: 7540..7541,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 230,
            column: 18,
            span: 7551..7559,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 20,
            span: 7560..7561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 230,
            column: 21,
            span: 7561..7562,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 22,
            span: 7562..7563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 230,
            column: 24,
            span: 7564..7565,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 25,
            span: 7565..7566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 230,
            column: 26,
            span: 7566..7567,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 230,
            column: 27,
            span: 7567..7568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 230,
            column: 28,
            span: 7568..7569,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 29,
            span: 7569..7570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 230,
            column: 30,
            span: 7570..7571,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 230,
            column: 31,
            span: 7571..7572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 32,
            span: 7571..7573,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 230,
            column: 33,
            span: 7573..7574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 230,
            column: 35,
            span: 7575..7576,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 230,
            column: 36,
            span: 7576..7577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 230,
            column: 37,
            span: 7577..7578,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 38,
            span: 7578..7579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 230,
            column: 39,
            span: 7579..7580,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 230,
            column: 40,
            span: 7580..7581,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 230,
            column: 42,
            span: 7582..7583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 230,
            column: 44,
            span: 7584..7585,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 230,
            column: 48,
            span: 7586..7589,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 49,
            span: 7589..7590,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 51,
            span: 7590..7592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 52,
            span: 7592..7593,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 230,
            column: 55,
            span: 7594..7596,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        position: Position {
            line: 230,
            column: 75,
            span: 7597..7616,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 76,
            span: 7616..7617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 231,
            column: 7,
            span: 7618..7624,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 8,
            span: 7624..7625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 231,
            column: 9,
            span: 7625..7626,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 231,
            column: 10,
            span: 7626..7627,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 231,
            column: 11,
            span: 7626..7628,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 231,
            column: 12,
            span: 7628..7629,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 231,
            column: 15,
            span: 7630..7632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        position: Position {
            line: 231,
            column: 23,
            span: 7633..7640,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 231,
            column: 27,
            span: 7641..7644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 231,
            column: 29,
            span: 7645..7646,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 231,
            column: 30,
            span: 7646..7647,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 231,
            column: 31,
            span: 7646..7648,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 231,
            column: 32,
            span: 7648..7649,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 231,
            column: 35,
            span: 7650..7652,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        position: Position {
            line: 231,
            column: 44,
            span: 7653..7661,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 231,
            column: 48,
            span: 7662..7665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 231,
            column: 50,
            span: 7666..7667,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 231,
            column: 51,
            span: 7667..7668,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 231,
            column: 52,
            span: 7667..7669,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 231,
            column: 53,
            span: 7669..7670,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 231,
            column: 56,
            span: 7671..7673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        position: Position {
            line: 231,
            column: 62,
            span: 7674..7679,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 63,
            span: 7679..7680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 233,
            column: 11,
            span: 7682..7692,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 12,
            span: 7692..7693,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid replacement value %(a table%)\"",
        ),
        position: Position {
            line: 233,
            column: 51,
            span: 7693..7732,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 52,
            span: 7732..7733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 234,
            column: 19,
            span: 7746..7752,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 234,
            column: 20,
            span: 7752..7753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 234,
            column: 24,
            span: 7753..7757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 25,
            span: 7757..7758,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 234,
            column: 31,
            span: 7759..7764,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 32,
            span: 7764..7765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 234,
            column: 36,
            span: 7766..7769,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 37,
            span: 7769..7770,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 234,
            column: 39,
            span: 7771..7772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 234,
            column: 40,
            span: 7772..7773,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 234,
            column: 42,
            span: 7774..7775,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 234,
            column: 44,
            span: 7776..7777,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 234,
            column: 45,
            span: 7777..7778,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 234,
            column: 46,
            span: 7778..7779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 47,
            span: 7779..7780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 235,
            column: 11,
            span: 7781..7791,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 12,
            span: 7791..7792,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid capture index %%2\"",
        ),
        position: Position {
            line: 235,
            column: 39,
            span: 7792..7819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 40,
            span: 7819..7820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 235,
            column: 47,
            span: 7821..7827,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 235,
            column: 48,
            span: 7827..7828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 235,
            column: 52,
            span: 7828..7832,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 53,
            span: 7832..7833,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 235,
            column: 59,
            span: 7834..7839,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 60,
            span: 7839..7840,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 235,
            column: 64,
            span: 7841..7844,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 65,
            span: 7844..7845,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%2\"",
        ),
        position: Position {
            line: 235,
            column: 70,
            span: 7846..7850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 71,
            span: 7850..7851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 236,
            column: 11,
            span: 7852..7862,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 12,
            span: 7862..7863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid capture index %%0\"",
        ),
        position: Position {
            line: 236,
            column: 39,
            span: 7863..7890,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 40,
            span: 7890..7891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 236,
            column: 47,
            span: 7892..7898,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 236,
            column: 48,
            span: 7898..7899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 236,
            column: 52,
            span: 7899..7903,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 53,
            span: 7903..7904,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 236,
            column: 59,
            span: 7905..7910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 60,
            span: 7910..7911,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%0)\"",
        ),
        position: Position {
            line: 236,
            column: 67,
            span: 7912..7918,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 68,
            span: 7918..7919,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 236,
            column: 72,
            span: 7920..7923,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 73,
            span: 7923..7924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 237,
            column: 11,
            span: 7925..7935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 237,
            column: 12,
            span: 7935..7936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid capture index %%1\"",
        ),
        position: Position {
            line: 237,
            column: 39,
            span: 7936..7963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 40,
            span: 7963..7964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 237,
            column: 47,
            span: 7965..7971,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 237,
            column: 48,
            span: 7971..7972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 237,
            column: 52,
            span: 7972..7976,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 53,
            span: 7976..7977,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 237,
            column: 59,
            span: 7978..7983,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 60,
            span: 7983..7984,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%1)\"",
        ),
        position: Position {
            line: 237,
            column: 67,
            span: 7985..7991,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 68,
            span: 7991..7992,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 237,
            column: 72,
            span: 7993..7996,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 73,
            span: 7996..7997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 238,
            column: 11,
            span: 7998..8008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 12,
            span: 8008..8009,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid use of '%%'\"",
        ),
        position: Position {
            line: 238,
            column: 33,
            span: 8009..8030,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 34,
            span: 8030..8031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 238,
            column: 41,
            span: 8032..8038,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 238,
            column: 42,
            span: 8038..8039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 238,
            column: 46,
            span: 8039..8043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 47,
            span: 8043..8044,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 238,
            column: 53,
            span: 8045..8050,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 54,
            span: 8050..8051,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 238,
            column: 58,
            span: 8052..8055,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 59,
            span: 8055..8056,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        position: Position {
            line: 238,
            column: 64,
            span: 8057..8061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 65,
            span: 8061..8062,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 241,
            column: 3,
            span: 8065..8067,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 241,
            column: 7,
            span: 8068..8071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 241,
            column: 13,
            span: 8072..8077,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 241,
            column: 0,
            span: 8078..8082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 242,
            column: 8,
            span: 8085..8090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 9,
            span: 8090..8091,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"big strings\"",
        ),
        position: Position {
            line: 242,
            column: 22,
            span: 8091..8104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 23,
            span: 8104..8105,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 243,
            column: 8,
            span: 8108..8113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 243,
            column: 10,
            span: 8114..8115,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 243,
            column: 12,
            span: 8116..8117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 243,
            column: 19,
            span: 8118..8124,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 243,
            column: 20,
            span: 8124..8125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 243,
            column: 23,
            span: 8125..8128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 24,
            span: 8128..8129,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 243,
            column: 27,
            span: 8129..8132,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 243,
            column: 28,
            span: 8132..8133,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 35,
            span: 8133..8140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 36,
            span: 8140..8141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 244,
            column: 9,
            span: 8144..8150,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 10,
            span: 8150..8151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 244,
            column: 16,
            span: 8151..8157,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 244,
            column: 17,
            span: 8157..8158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 244,
            column: 21,
            span: 8158..8162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 22,
            span: 8162..8163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 244,
            column: 23,
            span: 8163..8164,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 24,
            span: 8164..8165,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a*.?$'",
        ),
        position: Position {
            line: 244,
            column: 33,
            span: 8166..8174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 34,
            span: 8174..8175,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 35,
            span: 8175..8176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 245,
            column: 9,
            span: 8179..8185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 10,
            span: 8185..8186,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 245,
            column: 13,
            span: 8186..8189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 245,
            column: 20,
            span: 8190..8196,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 245,
            column: 21,
            span: 8196..8197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 245,
            column: 25,
            span: 8197..8201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 26,
            span: 8201..8202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 245,
            column: 27,
            span: 8202..8203,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 245,
            column: 28,
            span: 8203..8204,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a*.?b$'",
        ),
        position: Position {
            line: 245,
            column: 38,
            span: 8205..8214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 39,
            span: 8214..8215,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 40,
            span: 8215..8216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 246,
            column: 9,
            span: 8219..8225,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 10,
            span: 8225..8226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 246,
            column: 16,
            span: 8226..8232,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 246,
            column: 17,
            span: 8232..8233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 246,
            column: 21,
            span: 8233..8237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 22,
            span: 8237..8238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 246,
            column: 23,
            span: 8238..8239,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 24,
            span: 8239..8240,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a-.?$'",
        ),
        position: Position {
            line: 246,
            column: 33,
            span: 8241..8249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 34,
            span: 8249..8250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 35,
            span: 8250..8251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 249,
            column: 4,
            span: 8273..8274,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 249,
            column: 6,
            span: 8275..8276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 249,
            column: 13,
            span: 8277..8283,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 249,
            column: 14,
            span: 8283..8284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 249,
            column: 17,
            span: 8284..8287,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 18,
            span: 8287..8288,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 249,
            column: 21,
            span: 8288..8291,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 22,
            span: 8291..8292,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 28,
            span: 8292..8298,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 29,
            span: 8298..8299,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 249,
            column: 32,
            span: 8300..8302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 249,
            column: 39,
            span: 8303..8309,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 249,
            column: 40,
            span: 8309..8310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 249,
            column: 43,
            span: 8310..8313,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 44,
            span: 8313..8314,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 249,
            column: 47,
            span: 8314..8317,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 48,
            span: 8317..8318,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 54,
            span: 8318..8324,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 55,
            span: 8324..8325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 250,
            column: 9,
            span: 8328..8334,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 10,
            span: 8334..8335,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 250,
            column: 13,
            span: 8335..8338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 250,
            column: 19,
            span: 8339..8344,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 20,
            span: 8344..8345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 250,
            column: 26,
            span: 8345..8351,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 250,
            column: 27,
            span: 8351..8352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 250,
            column: 31,
            span: 8352..8356,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 32,
            span: 8356..8357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 250,
            column: 34,
            span: 8358..8359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 35,
            span: 8359..8360,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 250,
            column: 39,
            span: 8361..8364,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 40,
            span: 8364..8365,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 41,
            span: 8365..8366,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 251,
            column: 0,
            span: 8367..8370,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 254,
            column: 9,
            span: 8399..8407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        position: Position {
            line: 254,
            column: 13,
            span: 8408..8411,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 15,
            span: 8412..8413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 254,
            column: 16,
            span: 8413..8414,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 17,
            span: 8414..8415,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 255,
            column: 9,
            span: 8418..8424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 255,
            column: 16,
            span: 8425..8431,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 255,
            column: 17,
            span: 8431..8432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 255,
            column: 21,
            span: 8432..8436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 22,
            span: 8436..8437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 255,
            column: 23,
            span: 8437..8438,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 24,
            span: 8438..8439,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.)(.+)\"",
        ),
        position: Position {
            line: 255,
            column: 34,
            span: 8440..8449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 35,
            span: 8449..8450,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 255,
            column: 44,
            span: 8451..8459,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 46,
            span: 8460..8461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 255,
            column: 47,
            span: 8461..8462,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 48,
            span: 8462..8463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 255,
            column: 50,
            span: 8463..8465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 51,
            span: 8465..8466,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 255,
            column: 58,
            span: 8467..8473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        position: Position {
            line: 255,
            column: 62,
            span: 8474..8477,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 63,
            span: 8477..8478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 255,
            column: 65,
            span: 8478..8480,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 66,
            span: 8480..8481,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 255,
            column: 68,
            span: 8481..8483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 255,
            column: 69,
            span: 8483..8484,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 255,
            column: 73,
            span: 8485..8488,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 74,
            span: 8488..8489,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 256,
            column: 0,
            span: 8490..8493,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 258,
            column: 6,
            span: 8495..8500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 258,
            column: 8,
            span: 8501..8502,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 258,
            column: 10,
            span: 8503..8504,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdef\"",
        ),
        position: Position {
            line: 258,
            column: 19,
            span: 8505..8513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 259,
            column: 7,
            span: 8514..8520,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 8,
            span: 8520..8521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        position: Position {
            line: 259,
            column: 11,
            span: 8521..8524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 12,
            span: 8524..8525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        position: Position {
            line: 259,
            column: 15,
            span: 8525..8528,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 16,
            span: 8528..8529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 259,
            column: 17,
            span: 8529..8530,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 18,
            span: 8530..8531,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 19,
            span: 8531..8532,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 22,
            span: 8533..8535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 259,
            column: 24,
            span: 8536..8537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 25,
            span: 8537..8538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 263,
            column: 7,
            span: 8561..8567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 8,
            span: 8567..8568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 263,
            column: 14,
            span: 8568..8574,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 263,
            column: 15,
            span: 8574..8575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 263,
            column: 19,
            span: 8575..8579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 20,
            span: 8579..8580,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 263,
            column: 29,
            span: 8580..8589,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 263,
            column: 30,
            span: 8589..8590,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 263,
            column: 34,
            span: 8591..8594,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 263,
            column: 35,
            span: 8594..8595,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 263,
            column: 37,
            span: 8596..8597,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 263,
            column: 38,
            span: 8597..8598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 39,
            span: 8598..8599,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 263,
            column: 42,
            span: 8600..8602,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 263,
            column: 52,
            span: 8603..8612,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 53,
            span: 8612..8613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 264,
            column: 7,
            span: 8614..8620,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 8,
            span: 8620..8621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 264,
            column: 14,
            span: 8621..8627,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 264,
            column: 15,
            span: 8627..8628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 264,
            column: 19,
            span: 8628..8632,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 20,
            span: 8632..8633,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 264,
            column: 29,
            span: 8633..8642,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 30,
            span: 8642..8643,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.)\"",
        ),
        position: Position {
            line: 264,
            column: 36,
            span: 8644..8649,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 37,
            span: 8649..8650,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 264,
            column: 39,
            span: 8651..8652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 264,
            column: 40,
            span: 8652..8653,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 264,
            column: 41,
            span: 8653..8654,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        position: Position {
            line: 264,
            column: 45,
            span: 8654..8658,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 46,
            span: 8658..8659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 264,
            column: 48,
            span: 8660..8661,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 264,
            column: 49,
            span: 8661..8662,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 264,
            column: 51,
            span: 8662..8664,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 264,
            column: 52,
            span: 8664..8665,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 53,
            span: 8665..8666,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 264,
            column: 56,
            span: 8667..8669,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        position: Position {
            line: 264,
            column: 66,
            span: 8670..8679,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 67,
            span: 8679..8680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 265,
            column: 7,
            span: 8681..8687,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 8,
            span: 8687..8688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 265,
            column: 14,
            span: 8688..8694,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 265,
            column: 15,
            span: 8694..8695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 265,
            column: 19,
            span: 8695..8699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 20,
            span: 8699..8700,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 265,
            column: 29,
            span: 8700..8709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 30,
            span: 8709..8710,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.).\"",
        ),
        position: Position {
            line: 265,
            column: 37,
            span: 8711..8717,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 38,
            span: 8717..8718,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 265,
            column: 40,
            span: 8719..8720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 265,
            column: 41,
            span: 8720..8721,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 265,
            column: 42,
            span: 8721..8722,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        position: Position {
            line: 265,
            column: 46,
            span: 8722..8726,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 47,
            span: 8726..8727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 265,
            column: 49,
            span: 8728..8729,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 265,
            column: 50,
            span: 8729..8730,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"K\"",
        ),
        position: Position {
            line: 265,
            column: 53,
            span: 8730..8733,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 265,
            column: 54,
            span: 8733..8734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 55,
            span: 8734..8735,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 265,
            column: 58,
            span: 8736..8738,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        position: Position {
            line: 265,
            column: 68,
            span: 8739..8748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 69,
            span: 8748..8749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 266,
            column: 7,
            span: 8750..8756,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 8,
            span: 8756..8757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 266,
            column: 14,
            span: 8757..8763,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 266,
            column: 15,
            span: 8763..8764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 266,
            column: 19,
            span: 8764..8768,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 20,
            span: 8768..8769,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 266,
            column: 29,
            span: 8769..8778,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 266,
            column: 30,
            span: 8778..8779,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"((.)(.?))\"",
        ),
        position: Position {
            line: 266,
            column: 42,
            span: 8780..8791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 266,
            column: 43,
            span: 8791..8792,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 266,
            column: 45,
            span: 8793..8794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "al",
        ),
        position: Position {
            line: 266,
            column: 47,
            span: 8794..8796,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 266,
            column: 48,
            span: 8796..8797,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        position: Position {
            line: 266,
            column: 52,
            span: 8797..8801,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 266,
            column: 53,
            span: 8801..8802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        position: Position {
            line: 266,
            column: 55,
            span: 8803..8804,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 266,
            column: 56,
            span: 8804..8805,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 266,
            column: 61,
            span: 8805..8810,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 266,
            column: 62,
            span: 8810..8811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 63,
            span: 8811..8812,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 266,
            column: 66,
            span: 8813..8815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        position: Position {
            line: 266,
            column: 76,
            span: 8816..8825,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 77,
            span: 8825..8826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 268,
            column: 7,
            span: 8828..8834,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 8,
            span: 8834..8835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 268,
            column: 14,
            span: 8835..8841,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 268,
            column: 15,
            span: 8841..8842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 268,
            column: 19,
            span: 8842..8846,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 20,
            span: 8846..8847,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 268,
            column: 29,
            span: 8847..8856,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 30,
            span: 8856..8857,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"().\"",
        ),
        position: Position {
            line: 268,
            column: 36,
            span: 8858..8863,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 37,
            span: 8863..8864,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 268,
            column: 39,
            span: 8865..8866,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 268,
            column: 42,
            span: 8866..8869,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 43,
            span: 8869..8870,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'yy'",
        ),
        position: Position {
            line: 268,
            column: 47,
            span: 8870..8874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 48,
            span: 8874..8875,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'zzz'",
        ),
        position: Position {
            line: 268,
            column: 53,
            span: 8875..8880,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 268,
            column: 54,
            span: 8880..8881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 55,
            span: 8881..8882,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 268,
            column: 58,
            span: 8883..8885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyyzzz alo\"",
        ),
        position: Position {
            line: 268,
            column: 71,
            span: 8886..8898,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 72,
            span: 8898..8899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 270,
            column: 2,
            span: 8901..8902,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 270,
            column: 4,
            span: 8903..8904,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 270,
            column: 6,
            span: 8905..8906,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 270,
            column: 7,
            span: 8906..8907,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 270,
            column: 8,
            span: 8907..8908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 270,
            column: 21,
            span: 8909..8921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 22,
            span: 8921..8922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 270,
            column: 23,
            span: 8922..8923,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 24,
            span: 8923..8924,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 270,
            column: 26,
            span: 8925..8926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 270,
            column: 33,
            span: 8926..8933,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 270,
            column: 35,
            span: 8934..8935,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 270,
            column: 44,
            span: 8936..8944,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 46,
            span: 8945..8946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 270,
            column: 47,
            span: 8946..8947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 48,
            span: 8947..8948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 270,
            column: 49,
            span: 8948..8949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 50,
            span: 8949..8950,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 270,
            column: 57,
            span: 8951..8957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 270,
            column: 64,
            span: 8958..8964,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 270,
            column: 65,
            span: 8964..8965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        position: Position {
            line: 270,
            column: 70,
            span: 8965..8970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 71,
            span: 8970..8971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 270,
            column: 72,
            span: 8971..8972,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 73,
            span: 8972..8973,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 270,
            column: 77,
            span: 8974..8977,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 270,
            column: 78,
            span: 8977..8978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 79,
            span: 8978..8979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 271,
            column: 7,
            span: 8980..8986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 8,
            span: 8986..8987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 271,
            column: 14,
            span: 8987..8993,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 271,
            column: 15,
            span: 8993..8994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 271,
            column: 19,
            span: 8994..8998,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 20,
            span: 8998..8999,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a alo b hi\"",
        ),
        position: Position {
            line: 271,
            column: 32,
            span: 8999..9011,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 33,
            span: 9011..9012,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w%w+\"",
        ),
        position: Position {
            line: 271,
            column: 41,
            span: 9013..9020,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 42,
            span: 9020..9021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 271,
            column: 44,
            span: 9022..9023,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 45,
            span: 9023..9024,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 271,
            column: 48,
            span: 9025..9027,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a ALO b HI\"",
        ),
        position: Position {
            line: 271,
            column: 61,
            span: 9028..9040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 62,
            span: 9040..9041,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 275,
            column: 6,
            span: 9064..9069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 275,
            column: 8,
            span: 9070..9071,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 275,
            column: 10,
            span: 9072..9073,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 0,
            span: 9073..9075,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 276,
            column: 4,
            span: 9076..9079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 276,
            column: 6,
            span: 9080..9081,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 276,
            column: 9,
            span: 9082..9084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 276,
            column: 16,
            span: 9085..9091,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 276,
            column: 17,
            span: 9091..9092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 276,
            column: 23,
            span: 9092..9098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 24,
            span: 9098..9099,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abcde'",
        ),
        position: Position {
            line: 276,
            column: 31,
            span: 9099..9106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 276,
            column: 32,
            span: 9106..9107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()'",
        ),
        position: Position {
            line: 276,
            column: 37,
            span: 9108..9112,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 38,
            span: 9112..9113,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 276,
            column: 41,
            span: 9114..9116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 276,
            column: 48,
            span: 9117..9123,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 49,
            span: 9123..9124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 276,
            column: 50,
            span: 9124..9125,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 276,
            column: 53,
            span: 9126..9128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 276,
            column: 55,
            span: 9129..9130,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 276,
            column: 56,
            span: 9130..9131,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 57,
            span: 9130..9132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 58,
            span: 9132..9133,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 276,
            column: 59,
            span: 9133..9134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 276,
            column: 61,
            span: 9135..9136,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 276,
            column: 62,
            span: 9136..9137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 276,
            column: 63,
            span: 9137..9138,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 276,
            column: 0,
            span: 9139..9142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 277,
            column: 7,
            span: 9143..9149,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 8,
            span: 9149..9150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 277,
            column: 9,
            span: 9150..9151,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 277,
            column: 11,
            span: 9151..9153,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 12,
            span: 9152..9154,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 13,
            span: 9154..9155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 279,
            column: 2,
            span: 9157..9158,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 279,
            column: 4,
            span: 9159..9160,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 279,
            column: 6,
            span: 9161..9162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 279,
            column: 7,
            span: 9162..9163,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 279,
            column: 8,
            span: 9163..9164,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 9,
            span: 9163..9165,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 279,
            column: 10,
            span: 9165..9166,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 280,
            column: 4,
            span: 9167..9170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 280,
            column: 6,
            span: 9171..9172,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 280,
            column: 9,
            span: 9173..9175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 280,
            column: 16,
            span: 9176..9182,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 280,
            column: 17,
            span: 9182..9183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 280,
            column: 23,
            span: 9183..9189,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 24,
            span: 9189..9190,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        position: Position {
            line: 280,
            column: 43,
            span: 9190..9209,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 280,
            column: 44,
            span: 9209..9210,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        position: Position {
            line: 280,
            column: 50,
            span: 9211..9216,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 51,
            span: 9216..9217,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 280,
            column: 0,
            span: 9218..9220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 281,
            column: 8,
            span: 9227..9228,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 9228..9229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 281,
            column: 10,
            span: 9229..9230,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 281,
            column: 11,
            span: 9230..9231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 281,
            column: 12,
            span: 9231..9232,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 281,
            column: 13,
            span: 9232..9233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 281,
            column: 14,
            span: 9233..9234,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 281,
            column: 15,
            span: 9234..9235,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 16,
            span: 9234..9236,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 281,
            column: 17,
            span: 9236..9237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 281,
            column: 19,
            span: 9238..9239,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 281,
            column: 20,
            span: 9239..9240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 281,
            column: 21,
            span: 9240..9241,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 281,
            column: 22,
            span: 9241..9242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 281,
            column: 23,
            span: 9242..9243,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 281,
            column: 24,
            span: 9243..9244,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 281,
            column: 26,
            span: 9245..9246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 281,
            column: 0,
            span: 9247..9248,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 282,
            column: 0,
            span: 9249..9252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 283,
            column: 7,
            span: 9253..9259,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 283,
            column: 8,
            span: 9259..9260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 283,
            column: 9,
            span: 9260..9261,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 283,
            column: 10,
            span: 9261..9262,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 11,
            span: 9261..9263,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 283,
            column: 12,
            span: 9263..9264,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 283,
            column: 15,
            span: 9265..9267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        position: Position {
            line: 283,
            column: 23,
            span: 9268..9275,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 283,
            column: 27,
            span: 9276..9279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 283,
            column: 29,
            span: 9280..9281,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 283,
            column: 30,
            span: 9281..9282,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 31,
            span: 9281..9283,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 283,
            column: 32,
            span: 9283..9284,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 283,
            column: 35,
            span: 9285..9287,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        position: Position {
            line: 283,
            column: 44,
            span: 9288..9296,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 283,
            column: 48,
            span: 9297..9300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 283,
            column: 50,
            span: 9301..9302,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 283,
            column: 51,
            span: 9302..9303,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 52,
            span: 9302..9304,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 283,
            column: 53,
            span: 9304..9305,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 283,
            column: 56,
            span: 9306..9308,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"word\"",
        ),
        position: Position {
            line: 283,
            column: 63,
            span: 9309..9315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 283,
            column: 64,
            span: 9315..9316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 285,
            column: 2,
            span: 9318..9319,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 285,
            column: 4,
            span: 9320..9321,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 285,
            column: 6,
            span: 9322..9323,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 285,
            column: 7,
            span: 9322..9324,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 285,
            column: 8,
            span: 9324..9325,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 285,
            column: 10,
            span: 9325..9327,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 285,
            column: 11,
            span: 9327..9328,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 285,
            column: 13,
            span: 9328..9330,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 285,
            column: 14,
            span: 9330..9331,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 286,
            column: 4,
            span: 9332..9335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 286,
            column: 6,
            span: 9336..9337,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 286,
            column: 9,
            span: 9338..9340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 286,
            column: 16,
            span: 9341..9347,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 286,
            column: 17,
            span: 9347..9348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 286,
            column: 23,
            span: 9348..9354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 25,
            span: 9355..9356,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxx uu ppar r\"",
        ),
        position: Position {
            line: 286,
            column: 41,
            span: 9356..9372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 42,
            span: 9372..9373,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()(.)%2\"",
        ),
        position: Position {
            line: 286,
            column: 52,
            span: 9374..9383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 286,
            column: 53,
            span: 9383..9384,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 286,
            column: 0,
            span: 9385..9387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 287,
            column: 9,
            span: 9390..9396,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 10,
            span: 9396..9397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 287,
            column: 11,
            span: 9397..9398,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 287,
            column: 14,
            span: 9399..9401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 287,
            column: 20,
            span: 9402..9407,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 287,
            column: 21,
            span: 9407..9408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 287,
            column: 27,
            span: 9408..9414,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 28,
            span: 9414..9415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 287,
            column: 29,
            span: 9415..9416,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 287,
            column: 30,
            span: 9416..9417,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 287,
            column: 32,
            span: 9417..9419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 33,
            span: 9419..9420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 34,
            span: 9420..9421,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 288,
            column: 0,
            span: 9422..9425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 289,
            column: 7,
            span: 9426..9432,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 8,
            span: 9432..9433,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 289,
            column: 9,
            span: 9433..9434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 289,
            column: 10,
            span: 9434..9435,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 289,
            column: 13,
            span: 9436..9438,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 289,
            column: 15,
            span: 9438..9440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 16,
            span: 9440..9441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 291,
            column: 2,
            span: 9443..9444,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 291,
            column: 4,
            span: 9445..9446,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 291,
            column: 6,
            span: 9447..9448,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 291,
            column: 7,
            span: 9448..9449,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 292,
            column: 4,
            span: 9450..9453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 292,
            column: 6,
            span: 9454..9455,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 292,
            column: 7,
            span: 9455..9456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 292,
            column: 8,
            span: 9456..9457,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 292,
            column: 11,
            span: 9458..9460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 292,
            column: 18,
            span: 9461..9467,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 292,
            column: 19,
            span: 9467..9468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 292,
            column: 25,
            span: 9468..9474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 292,
            column: 26,
            span: 9474..9475,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"13 14 10 = 11, 15= 16, 22=23\"",
        ),
        position: Position {
            line: 292,
            column: 56,
            span: 9475..9505,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 292,
            column: 57,
            span: 9505..9506,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%d+)%s*=%s*(%d+)\"",
        ),
        position: Position {
            line: 292,
            column: 77,
            span: 9507..9526,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 292,
            column: 78,
            span: 9526..9527,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 292,
            column: 0,
            span: 9528..9530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 293,
            column: 4,
            span: 9533..9534,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 293,
            column: 5,
            span: 9534..9535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 293,
            column: 13,
            span: 9535..9543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 14,
            span: 9543..9544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 293,
            column: 15,
            span: 9544..9545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 16,
            span: 9545..9546,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 293,
            column: 17,
            span: 9546..9547,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 293,
            column: 19,
            span: 9548..9549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 293,
            column: 28,
            span: 9550..9558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 29,
            span: 9558..9559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 293,
            column: 30,
            span: 9559..9560,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 31,
            span: 9560..9561,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 294,
            column: 0,
            span: 9562..9565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 295,
            column: 2,
            span: 9566..9567,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 295,
            column: 4,
            span: 9568..9569,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 0,
            span: 9569..9571,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 296,
            column: 4,
            span: 9572..9575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 296,
            column: 6,
            span: 9576..9577,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 296,
            column: 7,
            span: 9577..9578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 296,
            column: 8,
            span: 9578..9579,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 296,
            column: 11,
            span: 9580..9582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 296,
            column: 17,
            span: 9583..9588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 18,
            span: 9588..9589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 296,
            column: 19,
            span: 9589..9590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 20,
            span: 9590..9591,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 296,
            column: 23,
            span: 9592..9594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 296,
            column: 30,
            span: 9595..9601,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 31,
            span: 9601..9602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 296,
            column: 32,
            span: 9602..9603,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 296,
            column: 33,
            span: 9603..9604,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 34,
            span: 9603..9605,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 296,
            column: 37,
            span: 9606..9608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 296,
            column: 39,
            span: 9609..9610,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 296,
            column: 40,
            span: 9610..9611,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 41,
            span: 9610..9612,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 42,
            span: 9612..9613,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 296,
            column: 43,
            span: 9613..9614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 296,
            column: 45,
            span: 9615..9616,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 296,
            column: 46,
            span: 9616..9617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 296,
            column: 47,
            span: 9617..9618,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 296,
            column: 48,
            span: 9618..9619,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 49,
            span: 9618..9620,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 296,
            column: 0,
            span: 9621..9624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 297,
            column: 7,
            span: 9625..9631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 8,
            span: 9631..9632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 297,
            column: 9,
            span: 9632..9633,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 297,
            column: 12,
            span: 9634..9636,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 14,
            span: 9636..9638,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 297,
            column: 15,
            span: 9638..9639,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 300,
            column: 3,
            span: 9642..9644,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 301,
            column: 8,
            span: 9677..9682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 301,
            column: 10,
            span: 9683..9684,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 301,
            column: 12,
            span: 9685..9686,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 301,
            column: 0,
            span: 9686..9688,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 302,
            column: 6,
            span: 9691..9694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 302,
            column: 8,
            span: 9695..9696,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 302,
            column: 11,
            span: 9697..9699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 302,
            column: 18,
            span: 9700..9706,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 302,
            column: 19,
            span: 9706..9707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 302,
            column: 25,
            span: 9707..9713,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 26,
            span: 9713..9714,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10 20 30\"",
        ),
        position: Position {
            line: 302,
            column: 36,
            span: 9714..9724,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 37,
            span: 9724..9725,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d+\"",
        ),
        position: Position {
            line: 302,
            column: 43,
            span: 9726..9731,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 44,
            span: 9731..9732,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 46,
            span: 9732..9734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 47,
            span: 9734..9735,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 302,
            column: 0,
            span: 9736..9738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 303,
            column: 6,
            span: 9743..9744,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 303,
            column: 8,
            span: 9745..9746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 303,
            column: 10,
            span: 9747..9748,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 303,
            column: 12,
            span: 9749..9750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 303,
            column: 21,
            span: 9751..9759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 22,
            span: 9759..9760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 303,
            column: 23,
            span: 9760..9761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 24,
            span: 9761..9762,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 304,
            column: 0,
            span: 9765..9768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 305,
            column: 9,
            span: 9771..9777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 305,
            column: 10,
            span: 9777..9778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 305,
            column: 11,
            span: 9778..9779,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 305,
            column: 14,
            span: 9780..9782,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 305,
            column: 17,
            span: 9782..9785,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 305,
            column: 18,
            span: 9785..9786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 307,
            column: 4,
            span: 9790..9791,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 307,
            column: 6,
            span: 9792..9793,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 307,
            column: 0,
            span: 9793..9795,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 308,
            column: 6,
            span: 9798..9801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 308,
            column: 8,
            span: 9802..9803,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 308,
            column: 11,
            span: 9804..9806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 308,
            column: 18,
            span: 9807..9813,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 308,
            column: 19,
            span: 9813..9814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 308,
            column: 25,
            span: 9814..9820,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 26,
            span: 9820..9821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"11 21 31\"",
        ),
        position: Position {
            line: 308,
            column: 36,
            span: 9821..9831,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 37,
            span: 9831..9832,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d+\"",
        ),
        position: Position {
            line: 308,
            column: 43,
            span: 9833..9838,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 44,
            span: 9838..9839,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 308,
            column: 46,
            span: 9840..9841,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 308,
            column: 47,
            span: 9840..9842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 48,
            span: 9842..9843,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 308,
            column: 0,
            span: 9844..9846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 309,
            column: 6,
            span: 9851..9852,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 309,
            column: 8,
            span: 9853..9854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 309,
            column: 10,
            span: 9855..9856,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 309,
            column: 12,
            span: 9857..9858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 309,
            column: 21,
            span: 9859..9867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 22,
            span: 9867..9868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 309,
            column: 23,
            span: 9868..9869,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 24,
            span: 9869..9870,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 310,
            column: 0,
            span: 9873..9876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 311,
            column: 9,
            span: 9879..9885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 311,
            column: 10,
            span: 9885..9886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 311,
            column: 11,
            span: 9886..9887,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 311,
            column: 14,
            span: 9888..9890,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 311,
            column: 17,
            span: 9890..9893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 311,
            column: 18,
            span: 9893..9894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 314,
            column: 4,
            span: 9954..9955,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 314,
            column: 6,
            span: 9956..9957,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 314,
            column: 0,
            span: 9957..9959,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 315,
            column: 6,
            span: 9962..9965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 315,
            column: 8,
            span: 9966..9967,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 315,
            column: 11,
            span: 9968..9970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 315,
            column: 18,
            span: 9971..9977,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 315,
            column: 19,
            span: 9977..9978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 315,
            column: 25,
            span: 9978..9984,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 26,
            span: 9984..9985,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"11 21 31\"",
        ),
        position: Position {
            line: 315,
            column: 36,
            span: 9985..9995,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 37,
            span: 9995..9996,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w*\"",
        ),
        position: Position {
            line: 315,
            column: 43,
            span: 9997..10002,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 44,
            span: 10002..10003,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 46,
            span: 10003..10005,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 47,
            span: 10005..10006,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 315,
            column: 0,
            span: 10007..10009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 316,
            column: 6,
            span: 10014..10015,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 316,
            column: 8,
            span: 10016..10017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 316,
            column: 10,
            span: 10018..10019,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 316,
            column: 12,
            span: 10020..10021,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 0,
            span: 10021..10023,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 317,
            column: 0,
            span: 10026..10029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 318,
            column: 9,
            span: 10032..10038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 318,
            column: 10,
            span: 10038..10039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 318,
            column: 11,
            span: 10039..10040,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 318,
            column: 14,
            span: 10041..10043,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 318,
            column: 16,
            span: 10043..10045,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 318,
            column: 17,
            span: 10045..10046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 321,
            column: 4,
            span: 10111..10112,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 321,
            column: 6,
            span: 10113..10114,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 321,
            column: 0,
            span: 10114..10116,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 322,
            column: 6,
            span: 10119..10122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 322,
            column: 8,
            span: 10123..10124,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 322,
            column: 11,
            span: 10125..10127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 322,
            column: 18,
            span: 10128..10134,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 322,
            column: 19,
            span: 10134..10135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 322,
            column: 25,
            span: 10135..10141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 26,
            span: 10141..10142,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"11 21 31\"",
        ),
        position: Position {
            line: 322,
            column: 36,
            span: 10142..10152,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 322,
            column: 37,
            span: 10152..10153,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w*\"",
        ),
        position: Position {
            line: 322,
            column: 43,
            span: 10154..10159,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 322,
            column: 44,
            span: 10159..10160,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 47,
            span: 10160..10163,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 48,
            span: 10163..10164,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 322,
            column: 0,
            span: 10165..10167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 323,
            column: 6,
            span: 10172..10173,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 323,
            column: 8,
            span: 10174..10175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 323,
            column: 10,
            span: 10176..10177,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 323,
            column: 12,
            span: 10178..10179,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 0,
            span: 10179..10181,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 324,
            column: 0,
            span: 10184..10187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 325,
            column: 9,
            span: 10190..10196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 10,
            span: 10196..10197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 325,
            column: 11,
            span: 10197..10198,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 325,
            column: 14,
            span: 10199..10201,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 325,
            column: 16,
            span: 10201..10203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 325,
            column: 17,
            span: 10203..10204,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 326,
            column: 0,
            span: 10205..10208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 331,
            column: 7,
            span: 10244..10250,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 8,
            span: 10250..10251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 331,
            column: 14,
            span: 10251..10257,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 331,
            column: 15,
            span: 10257..10258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 331,
            column: 19,
            span: 10258..10262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 20,
            span: 10262..10263,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa aa a aaa a\"",
        ),
        position: Position {
            line: 331,
            column: 36,
            span: 10263..10279,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 37,
            span: 10279..10280,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%w]a\"",
        ),
        position: Position {
            line: 331,
            column: 47,
            span: 10281..10290,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 48,
            span: 10290..10291,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 331,
            column: 52,
            span: 10292..10295,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 53,
            span: 10295..10296,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 331,
            column: 56,
            span: 10297..10299,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xaa xa x xaa x\"",
        ),
        position: Position {
            line: 331,
            column: 73,
            span: 10300..10316,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 74,
            span: 10316..10317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 332,
            column: 7,
            span: 10318..10324,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 10324..10325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 332,
            column: 14,
            span: 10325..10331,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 332,
            column: 15,
            span: 10331..10332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 332,
            column: 19,
            span: 10332..10336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 20,
            span: 10336..10337,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[]] [][] [[[[\"",
        ),
        position: Position {
            line: 332,
            column: 36,
            span: 10337..10353,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 37,
            span: 10353..10354,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[[].\"",
        ),
        position: Position {
            line: 332,
            column: 46,
            span: 10355..10363,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 47,
            span: 10363..10364,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 332,
            column: 51,
            span: 10365..10368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 52,
            span: 10368..10369,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 332,
            column: 55,
            span: 10370..10372,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x[]] x]x] x[[[\"",
        ),
        position: Position {
            line: 332,
            column: 72,
            span: 10373..10389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 73,
            span: 10389..10390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 333,
            column: 7,
            span: 10391..10397,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 8,
            span: 10397..10398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 333,
            column: 14,
            span: 10398..10404,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 333,
            column: 15,
            span: 10404..10405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 333,
            column: 19,
            span: 10405..10409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 20,
            span: 10409..10410,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01abc45de3\"",
        ),
        position: Position {
            line: 333,
            column: 32,
            span: 10410..10422,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 33,
            span: 10422..10423,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%d]\"",
        ),
        position: Position {
            line: 333,
            column: 42,
            span: 10424..10432,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 43,
            span: 10432..10433,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 333,
            column: 47,
            span: 10434..10437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 48,
            span: 10437..10438,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 333,
            column: 51,
            span: 10439..10441,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".01abc.45de.3\"",
        ),
        position: Position {
            line: 333,
            column: 67,
            span: 10442..10457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 68,
            span: 10457..10458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 334,
            column: 7,
            span: 10459..10465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 8,
            span: 10465..10466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 334,
            column: 14,
            span: 10466..10472,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 334,
            column: 15,
            span: 10472..10473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 334,
            column: 19,
            span: 10473..10477,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 20,
            span: 10477..10478,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01abc45 de3x\"",
        ),
        position: Position {
            line: 334,
            column: 34,
            span: 10478..10492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 35,
            span: 10492..10493,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%D]%w\"",
        ),
        position: Position {
            line: 334,
            column: 46,
            span: 10494..10504,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 47,
            span: 10504..10505,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 334,
            column: 51,
            span: 10506..10509,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 52,
            span: 10509..10510,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 334,
            column: 55,
            span: 10511..10513,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01.bc45 de3.\"",
        ),
        position: Position {
            line: 334,
            column: 70,
            span: 10514..10528,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 71,
            span: 10528..10529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 335,
            column: 7,
            span: 10530..10536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 8,
            span: 10536..10537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 335,
            column: 14,
            span: 10537..10543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 335,
            column: 15,
            span: 10543..10544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 335,
            column: 19,
            span: 10544..10548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 20,
            span: 10548..10549,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 335,
            column: 30,
            span: 10549..10559,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 335,
            column: 31,
            span: 10559..10560,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[\\1-\\255]%w\"",
        ),
        position: Position {
            line: 335,
            column: 47,
            span: 10561..10576,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 335,
            column: 48,
            span: 10576..10577,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 335,
            column: 52,
            span: 10578..10581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 53,
            span: 10581..10582,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 335,
            column: 56,
            span: 10583..10585,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".unction\"",
        ),
        position: Position {
            line: 335,
            column: 67,
            span: 10586..10596,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 68,
            span: 10596..10597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 336,
            column: 7,
            span: 10598..10604,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 8,
            span: 10604..10605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 336,
            column: 14,
            span: 10605..10611,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 336,
            column: 15,
            span: 10611..10612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 336,
            column: 19,
            span: 10612..10616,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 20,
            span: 10616..10617,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 336,
            column: 30,
            span: 10617..10627,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 31,
            span: 10627..10628,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^\\1-\\255]\"",
        ),
        position: Position {
            line: 336,
            column: 46,
            span: 10629..10643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 47,
            span: 10643..10644,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 336,
            column: 51,
            span: 10645..10648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 52,
            span: 10648..10649,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 336,
            column: 55,
            span: 10650..10652,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function.\"",
        ),
        position: Position {
            line: 336,
            column: 67,
            span: 10653..10664,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 68,
            span: 10664..10665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 338,
            column: 7,
            span: 10667..10673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 8,
            span: 10673..10674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 338,
            column: 14,
            span: 10674..10680,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 338,
            column: 15,
            span: 10680..10681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 338,
            column: 19,
            span: 10681..10685,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 20,
            span: 10685..10686,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 338,
            column: 23,
            span: 10686..10689,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 24,
            span: 10689..10690,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[a]\"",
        ),
        position: Position {
            line: 338,
            column: 32,
            span: 10691..10698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 33,
            span: 10698..10699,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 338,
            column: 36,
            span: 10700..10702,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 38,
            span: 10702..10704,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 39,
            span: 10704..10705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 339,
            column: 7,
            span: 10706..10712,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 8,
            span: 10712..10713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 339,
            column: 14,
            span: 10713..10719,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 339,
            column: 15,
            span: 10719..10720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 339,
            column: 19,
            span: 10720..10724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 20,
            span: 10724..10725,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 339,
            column: 23,
            span: 10725..10728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 339,
            column: 24,
            span: 10728..10729,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^%z]\"",
        ),
        position: Position {
            line: 339,
            column: 34,
            span: 10730..10739,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 35,
            span: 10739..10740,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 339,
            column: 38,
            span: 10741..10743,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 40,
            span: 10743..10745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 41,
            span: 10745..10746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 340,
            column: 7,
            span: 10747..10753,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 8,
            span: 10753..10754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 340,
            column: 14,
            span: 10754..10760,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 340,
            column: 15,
            span: 10760..10761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 340,
            column: 19,
            span: 10761..10765,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 20,
            span: 10765..10766,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 340,
            column: 23,
            span: 10766..10769,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 24,
            span: 10769..10770,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^%l]\"",
        ),
        position: Position {
            line: 340,
            column: 34,
            span: 10771..10780,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 35,
            span: 10780..10781,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 340,
            column: 38,
            span: 10782..10784,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 40,
            span: 10784..10786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 41,
            span: 10786..10787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 341,
            column: 7,
            span: 10788..10794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 8,
            span: 10794..10795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 341,
            column: 14,
            span: 10795..10801,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 341,
            column: 15,
            span: 10801..10802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 341,
            column: 19,
            span: 10802..10806,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 20,
            span: 10806..10807,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        position: Position {
            line: 341,
            column: 25,
            span: 10807..10812,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 26,
            span: 10812..10813,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[a%z]\"",
        ),
        position: Position {
            line: 341,
            column: 36,
            span: 10814..10823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 37,
            span: 10823..10824,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 341,
            column: 40,
            span: 10825..10827,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 42,
            span: 10827..10829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 43,
            span: 10829..10830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 342,
            column: 7,
            span: 10831..10837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 8,
            span: 10837..10838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 342,
            column: 14,
            span: 10838..10844,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 342,
            column: 15,
            span: 10844..10845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 342,
            column: 19,
            span: 10845..10849,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 20,
            span: 10849..10850,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        position: Position {
            line: 342,
            column: 25,
            span: 10850..10855,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 342,
            column: 26,
            span: 10855..10856,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%z]\"",
        ),
        position: Position {
            line: 342,
            column: 35,
            span: 10857..10865,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 36,
            span: 10865..10866,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 342,
            column: 39,
            span: 10867..10869,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 41,
            span: 10869..10871,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 42,
            span: 10871..10872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 343,
            column: 7,
            span: 10873..10879,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 8,
            span: 10879..10880,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 343,
            column: 11,
            span: 10880..10883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 343,
            column: 18,
            span: 10884..10890,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 343,
            column: 19,
            span: 10890..10891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 343,
            column: 23,
            span: 10891..10895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 24,
            span: 10895..10896,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        position: Position {
            line: 343,
            column: 29,
            span: 10896..10901,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 30,
            span: 10901..10902,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%l%z]\"",
        ),
        position: Position {
            line: 343,
            column: 41,
            span: 10903..10913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 42,
            span: 10913..10914,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 43,
            span: 10914..10915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 344,
            column: 7,
            span: 10916..10922,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 8,
            span: 10922..10923,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 344,
            column: 11,
            span: 10923..10926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 344,
            column: 18,
            span: 10927..10933,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 344,
            column: 19,
            span: 10933..10934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 344,
            column: 23,
            span: 10934..10938,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 24,
            span: 10938..10939,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        position: Position {
            line: 344,
            column: 29,
            span: 10939..10944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 344,
            column: 30,
            span: 10944..10945,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^%l%z]\"",
        ),
        position: Position {
            line: 344,
            column: 42,
            span: 10946..10957,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 43,
            span: 10957..10958,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 44,
            span: 10958..10959,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 346,
            column: 6,
            span: 10961..10966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 346,
            column: 8,
            span: 10967..10968,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 346,
            column: 9,
            span: 10968..10969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 346,
            column: 11,
            span: 10970..10971,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 346,
            column: 13,
            span: 10972..10973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 346,
            column: 20,
            span: 10974..10980,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 346,
            column: 21,
            span: 10980..10981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 346,
            column: 25,
            span: 10981..10985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 346,
            column: 26,
            span: 10985..10986,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" alo aalo allo\"",
        ),
        position: Position {
            line: 346,
            column: 42,
            span: 10986..11002,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 346,
            column: 43,
            span: 11002..11003,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%S].-%f[%s].-%f[%S]\"",
        ),
        position: Position {
            line: 346,
            column: 68,
            span: 11004..11028,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 346,
            column: 69,
            span: 11028..11029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 347,
            column: 7,
            span: 11030..11036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 8,
            span: 11036..11037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 347,
            column: 9,
            span: 11037..11038,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 347,
            column: 12,
            span: 11039..11041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 347,
            column: 14,
            span: 11041..11043,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 347,
            column: 18,
            span: 11044..11047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 347,
            column: 20,
            span: 11048..11049,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 347,
            column: 23,
            span: 11050..11052,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 347,
            column: 25,
            span: 11052..11054,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 26,
            span: 11054..11055,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 348,
            column: 6,
            span: 11056..11061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 348,
            column: 8,
            span: 11062..11063,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 348,
            column: 10,
            span: 11064..11065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 348,
            column: 17,
            span: 11066..11072,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 348,
            column: 18,
            span: 11072..11073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 348,
            column: 23,
            span: 11073..11078,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 348,
            column: 24,
            span: 11078..11079,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" alo aalo allo\"",
        ),
        position: Position {
            line: 348,
            column: 40,
            span: 11079..11095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 348,
            column: 41,
            span: 11095..11096,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%S](.-%f[%s].-%f[%S])\"",
        ),
        position: Position {
            line: 348,
            column: 68,
            span: 11097..11123,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 348,
            column: 69,
            span: 11123..11124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 349,
            column: 7,
            span: 11125..11131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 349,
            column: 8,
            span: 11131..11132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 349,
            column: 9,
            span: 11132..11133,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 349,
            column: 12,
            span: 11134..11136,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo '",
        ),
        position: Position {
            line: 349,
            column: 19,
            span: 11137..11143,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 349,
            column: 20,
            span: 11143..11144,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 351,
            column: 6,
            span: 11146..11151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 351,
            column: 8,
            span: 11152..11153,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 351,
            column: 10,
            span: 11154..11155,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 351,
            column: 12,
            span: 11156..11157,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 13,
            span: 11156..11158,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 14,
            span: 11158..11159,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 16,
            span: 11159..11161,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 17,
            span: 11161..11162,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 19,
            span: 11162..11164,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 20,
            span: 11164..11165,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 23,
            span: 11165..11168,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 24,
            span: 11168..11169,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 27,
            span: 11169..11172,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 28,
            span: 11172..11173,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 351,
            column: 29,
            span: 11173..11174,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 352,
            column: 4,
            span: 11175..11178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 352,
            column: 6,
            span: 11179..11180,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 352,
            column: 9,
            span: 11181..11183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 352,
            column: 16,
            span: 11184..11190,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 352,
            column: 17,
            span: 11190..11191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 352,
            column: 23,
            span: 11191..11197,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 352,
            column: 24,
            span: 11197..11198,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo th02 is 1hat\"",
        ),
        position: Position {
            line: 352,
            column: 46,
            span: 11198..11220,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 352,
            column: 47,
            span: 11220..11221,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()%f[%w%d]\"",
        ),
        position: Position {
            line: 352,
            column: 60,
            span: 11222..11234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 352,
            column: 61,
            span: 11234..11235,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 352,
            column: 0,
            span: 11236..11238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 353,
            column: 9,
            span: 11241..11247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 10,
            span: 11247..11248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 353,
            column: 15,
            span: 11248..11253,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 353,
            column: 16,
            span: 11253..11254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 353,
            column: 22,
            span: 11254..11260,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 23,
            span: 11260..11261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 353,
            column: 24,
            span: 11261..11262,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 353,
            column: 25,
            span: 11262..11263,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 27,
            span: 11263..11265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 28,
            span: 11265..11266,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 353,
            column: 31,
            span: 11267..11269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 353,
            column: 33,
            span: 11270..11271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 34,
            span: 11271..11272,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 354,
            column: 0,
            span: 11273..11276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 355,
            column: 7,
            span: 11277..11283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 355,
            column: 8,
            span: 11283..11284,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 355,
            column: 9,
            span: 11284..11285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 355,
            column: 10,
            span: 11285..11286,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 355,
            column: 13,
            span: 11287..11289,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 15,
            span: 11289..11291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 355,
            column: 16,
            span: 11291..11292,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 359,
            column: 6,
            span: 11317..11322,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 359,
            column: 15,
            span: 11323..11331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 359,
            column: 23,
            span: 11332..11339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 25,
            span: 11340..11341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 359,
            column: 26,
            span: 11341..11342,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 359,
            column: 27,
            span: 11342..11343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 359,
            column: 29,
            span: 11344..11345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 30,
            span: 11345..11346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 360,
            column: 4,
            span: 11349..11350,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 360,
            column: 6,
            span: 11351..11352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 360,
            column: 8,
            span: 11353..11354,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 360,
            column: 11,
            span: 11355..11357,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"malformed\"",
        ),
        position: Position {
            line: 360,
            column: 23,
            span: 11358..11369,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 361,
            column: 8,
            span: 11372..11377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 361,
            column: 10,
            span: 11378..11379,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 11,
            span: 11379..11380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 361,
            column: 15,
            span: 11381..11384,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 361,
            column: 17,
            span: 11385..11386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 361,
            column: 23,
            span: 11387..11392,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 24,
            span: 11392..11393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 361,
            column: 30,
            span: 11393..11399,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 361,
            column: 31,
            span: 11399..11400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 361,
            column: 35,
            span: 11400..11404,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 36,
            span: 11404..11405,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 361,
            column: 40,
            span: 11406..11409,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 41,
            span: 11409..11410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 361,
            column: 43,
            span: 11411..11412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 44,
            span: 11412..11413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 362,
            column: 9,
            span: 11416..11422,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 10,
            span: 11422..11423,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 362,
            column: 13,
            span: 11423..11426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 362,
            column: 15,
            span: 11427..11428,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 362,
            column: 19,
            span: 11429..11432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 362,
            column: 26,
            span: 11433..11439,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 362,
            column: 27,
            span: 11439..11440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 362,
            column: 31,
            span: 11440..11444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 32,
            span: 11444..11445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 362,
            column: 35,
            span: 11445..11448,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 362,
            column: 36,
            span: 11448..11449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 362,
            column: 38,
            span: 11450..11451,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 39,
            span: 11451..11452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 40,
            span: 11452..11453,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 363,
            column: 0,
            span: 11454..11457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 365,
            column: 8,
            span: 11459..11466,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 9,
            span: 11466..11467,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.\"",
        ),
        position: Position {
            line: 365,
            column: 13,
            span: 11467..11471,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 14,
            span: 11471..11472,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unfinished capture\"",
        ),
        position: Position {
            line: 365,
            column: 35,
            span: 11473..11493,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 36,
            span: 11493..11494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 366,
            column: 8,
            span: 11495..11502,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 9,
            span: 11502..11503,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".)\"",
        ),
        position: Position {
            line: 366,
            column: 13,
            span: 11503..11507,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 366,
            column: 14,
            span: 11507..11508,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid pattern capture\"",
        ),
        position: Position {
            line: 366,
            column: 40,
            span: 11509..11534,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 41,
            span: 11534..11535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 367,
            column: 8,
            span: 11536..11543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 9,
            span: 11543..11544,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a\"",
        ),
        position: Position {
            line: 367,
            column: 13,
            span: 11544..11548,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 14,
            span: 11548..11549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 368,
            column: 8,
            span: 11550..11557,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 9,
            span: 11557..11558,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[]\"",
        ),
        position: Position {
            line: 368,
            column: 13,
            span: 11558..11562,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 14,
            span: 11562..11563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 369,
            column: 8,
            span: 11564..11571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 9,
            span: 11571..11572,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^]\"",
        ),
        position: Position {
            line: 369,
            column: 14,
            span: 11572..11577,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 15,
            span: 11577..11578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 370,
            column: 8,
            span: 11579..11586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 9,
            span: 11586..11587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a%]\"",
        ),
        position: Position {
            line: 370,
            column: 15,
            span: 11587..11593,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 16,
            span: 11593..11594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 371,
            column: 8,
            span: 11595..11602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 371,
            column: 9,
            span: 11602..11603,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a%\"",
        ),
        position: Position {
            line: 371,
            column: 14,
            span: 11603..11608,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 15,
            span: 11608..11609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 372,
            column: 8,
            span: 11610..11617,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 372,
            column: 9,
            span: 11617..11618,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b\"",
        ),
        position: Position {
            line: 372,
            column: 13,
            span: 11618..11622,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 372,
            column: 14,
            span: 11622..11623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 373,
            column: 8,
            span: 11624..11631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 373,
            column: 9,
            span: 11631..11632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%ba\"",
        ),
        position: Position {
            line: 373,
            column: 14,
            span: 11632..11637,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 373,
            column: 15,
            span: 11637..11638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 374,
            column: 8,
            span: 11639..11646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 9,
            span: 11646..11647,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        position: Position {
            line: 374,
            column: 12,
            span: 11647..11650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 13,
            span: 11650..11651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 375,
            column: 8,
            span: 11652..11659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 9,
            span: 11659..11660,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f\"",
        ),
        position: Position {
            line: 375,
            column: 13,
            span: 11660..11664,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 375,
            column: 14,
            span: 11664..11665,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"missing\"",
        ),
        position: Position {
            line: 375,
            column: 24,
            span: 11666..11675,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 25,
            span: 11675..11676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 378,
            column: 7,
            span: 11696..11702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 378,
            column: 8,
            span: 11702..11703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 378,
            column: 14,
            span: 11703..11709,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 378,
            column: 15,
            span: 11709..11710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 378,
            column: 20,
            span: 11710..11715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 378,
            column: 21,
            span: 11715..11716,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\\0\\1\\2c\"",
        ),
        position: Position {
            line: 378,
            column: 32,
            span: 11716..11727,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 378,
            column: 33,
            span: 11727..11728,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\\0-\\2]+\"",
        ),
        position: Position {
            line: 378,
            column: 44,
            span: 11729..11739,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 378,
            column: 45,
            span: 11739..11740,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 378,
            column: 48,
            span: 11741..11743,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\1\\2\"",
        ),
        position: Position {
            line: 378,
            column: 57,
            span: 11744..11752,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 378,
            column: 58,
            span: 11752..11753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 379,
            column: 7,
            span: 11754..11760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 379,
            column: 8,
            span: 11760..11761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 379,
            column: 14,
            span: 11761..11767,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 379,
            column: 15,
            span: 11767..11768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 379,
            column: 20,
            span: 11768..11773,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 379,
            column: 21,
            span: 11773..11774,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\\0\\1\\2c\"",
        ),
        position: Position {
            line: 379,
            column: 32,
            span: 11774..11785,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 379,
            column: 33,
            span: 11785..11786,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\\0-\\0]+\"",
        ),
        position: Position {
            line: 379,
            column: 44,
            span: 11787..11797,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 379,
            column: 45,
            span: 11797..11798,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 379,
            column: 48,
            span: 11799..11801,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 379,
            column: 53,
            span: 11802..11806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 379,
            column: 54,
            span: 11806..11807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 380,
            column: 7,
            span: 11808..11814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 8,
            span: 11814..11815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 380,
            column: 14,
            span: 11815..11821,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 380,
            column: 15,
            span: 11821..11822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 380,
            column: 19,
            span: 11822..11826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 20,
            span: 11826..11827,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b$a\"",
        ),
        position: Position {
            line: 380,
            column: 25,
            span: 11827..11832,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 26,
            span: 11832..11833,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$\\0?\"",
        ),
        position: Position {
            line: 380,
            column: 33,
            span: 11834..11840,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 34,
            span: 11840..11841,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 380,
            column: 37,
            span: 11842..11844,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 380,
            column: 39,
            span: 11844..11846,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 40,
            span: 11846..11847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 381,
            column: 7,
            span: 11848..11854,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 8,
            span: 11854..11855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 381,
            column: 14,
            span: 11855..11861,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 381,
            column: 15,
            span: 11861..11862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 381,
            column: 19,
            span: 11862..11866,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 20,
            span: 11866..11867,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0efg\"",
        ),
        position: Position {
            line: 381,
            column: 30,
            span: 11867..11877,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 31,
            span: 11877..11878,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\\0\"",
        ),
        position: Position {
            line: 381,
            column: 37,
            span: 11879..11884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 38,
            span: 11884..11885,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 381,
            column: 41,
            span: 11886..11888,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 381,
            column: 43,
            span: 11888..11890,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 44,
            span: 11890..11891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 382,
            column: 7,
            span: 11892..11898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 8,
            span: 11898..11899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 382,
            column: 14,
            span: 11899..11905,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 382,
            column: 15,
            span: 11905..11906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 382,
            column: 20,
            span: 11906..11911,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 21,
            span: 11911..11912,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0efg\\0\\1e\\1g\"",
        ),
        position: Position {
            line: 382,
            column: 39,
            span: 11912..11930,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 382,
            column: 40,
            span: 11930..11931,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b\\0\\1\"",
        ),
        position: Position {
            line: 382,
            column: 49,
            span: 11932..11940,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 50,
            span: 11940..11941,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 382,
            column: 53,
            span: 11942..11944,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0efg\\0\\1e\\1\"",
        ),
        position: Position {
            line: 382,
            column: 68,
            span: 11945..11959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 69,
            span: 11959..11960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 383,
            column: 7,
            span: 11961..11967,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 383,
            column: 8,
            span: 11967..11968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 383,
            column: 14,
            span: 11968..11974,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 383,
            column: 15,
            span: 11974..11975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 383,
            column: 20,
            span: 11975..11980,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 383,
            column: 21,
            span: 11980..11981,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0\\0\\0\"",
        ),
        position: Position {
            line: 383,
            column: 32,
            span: 11981..11992,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 383,
            column: 33,
            span: 11992..11993,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\\0+\"",
        ),
        position: Position {
            line: 383,
            column: 40,
            span: 11994..12000,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 383,
            column: 41,
            span: 12000..12001,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 383,
            column: 44,
            span: 12002..12004,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        position: Position {
            line: 383,
            column: 53,
            span: 12005..12013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 383,
            column: 54,
            span: 12013..12014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 384,
            column: 7,
            span: 12015..12021,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 384,
            column: 8,
            span: 12021..12022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 384,
            column: 14,
            span: 12022..12028,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 384,
            column: 15,
            span: 12028..12029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 384,
            column: 20,
            span: 12029..12034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 384,
            column: 21,
            span: 12034..12035,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0\\0\\0\"",
        ),
        position: Position {
            line: 384,
            column: 32,
            span: 12035..12046,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 384,
            column: 33,
            span: 12046..12047,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\\0%\\0?\"",
        ),
        position: Position {
            line: 384,
            column: 43,
            span: 12048..12057,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 384,
            column: 44,
            span: 12057..12058,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 384,
            column: 47,
            span: 12059..12061,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\"",
        ),
        position: Position {
            line: 384,
            column: 54,
            span: 12062..12068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 384,
            column: 55,
            span: 12068..12069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 387,
            column: 7,
            span: 12094..12100,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 387,
            column: 8,
            span: 12100..12101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 387,
            column: 14,
            span: 12101..12107,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 387,
            column: 15,
            span: 12107..12108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 387,
            column: 19,
            span: 12108..12112,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 387,
            column: 20,
            span: 12112..12113,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0\\0\"",
        ),
        position: Position {
            line: 387,
            column: 29,
            span: 12113..12122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 30,
            span: 12122..12123,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0.\"",
        ),
        position: Position {
            line: 387,
            column: 35,
            span: 12123..12128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 387,
            column: 36,
            span: 12128..12129,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 387,
            column: 39,
            span: 12130..12132,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 387,
            column: 41,
            span: 12132..12134,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 387,
            column: 42,
            span: 12134..12135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 388,
            column: 7,
            span: 12136..12142,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 8,
            span: 12142..12143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 388,
            column: 14,
            span: 12143..12149,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 388,
            column: 15,
            span: 12149..12150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 388,
            column: 19,
            span: 12150..12154,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 20,
            span: 12154..12155,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcx\\0\\0abc\\0abc\"",
        ),
        position: Position {
            line: 388,
            column: 38,
            span: 12155..12173,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 388,
            column: 39,
            span: 12173..12174,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\\0\\0abc\\0a.\"",
        ),
        position: Position {
            line: 388,
            column: 53,
            span: 12174..12188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 54,
            span: 12188..12189,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 388,
            column: 57,
            span: 12190..12192,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 388,
            column: 59,
            span: 12192..12194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 60,
            span: 12194..12195,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 391,
            column: 3,
            span: 12198..12200,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 392,
            column: 8,
            span: 12246..12251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 392,
            column: 10,
            span: 12252..12253,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 392,
            column: 12,
            span: 12254..12255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 392,
            column: 19,
            span: 12256..12262,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 392,
            column: 20,
            span: 12262..12263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 392,
            column: 23,
            span: 12263..12266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 24,
            span: 12266..12267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 392,
            column: 27,
            span: 12267..12270,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 392,
            column: 28,
            span: 12270..12271,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 392,
            column: 32,
            span: 12271..12275,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 33,
            span: 12275..12276,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 393,
            column: 8,
            span: 12279..12284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 393,
            column: 10,
            span: 12285..12286,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 393,
            column: 12,
            span: 12287..12288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 393,
            column: 19,
            span: 12289..12295,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 393,
            column: 20,
            span: 12295..12296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 393,
            column: 24,
            span: 12296..12300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 393,
            column: 25,
            span: 12300..12301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 393,
            column: 26,
            span: 12301..12302,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 393,
            column: 27,
            span: 12302..12303,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 393,
            column: 31,
            span: 12304..12307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 393,
            column: 32,
            span: 12307..12308,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        position: Position {
            line: 393,
            column: 36,
            span: 12309..12312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 393,
            column: 37,
            span: 12312..12313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 394,
            column: 9,
            span: 12330..12336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 394,
            column: 10,
            span: 12336..12337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 394,
            column: 16,
            span: 12337..12343,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 394,
            column: 17,
            span: 12343..12344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 394,
            column: 23,
            span: 12344..12350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 394,
            column: 24,
            span: 12350..12351,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        position: Position {
            line: 394,
            column: 28,
            span: 12351..12355,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 394,
            column: 29,
            span: 12355..12356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 394,
            column: 31,
            span: 12357..12358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 394,
            column: 32,
            span: 12358..12359,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 394,
            column: 35,
            span: 12360..12362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 394,
            column: 42,
            span: 12363..12369,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 394,
            column: 43,
            span: 12369..12370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 394,
            column: 49,
            span: 12370..12376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 394,
            column: 50,
            span: 12376..12377,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        position: Position {
            line: 394,
            column: 54,
            span: 12377..12381,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 394,
            column: 55,
            span: 12381..12382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 394,
            column: 57,
            span: 12383..12384,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 394,
            column: 58,
            span: 12384..12385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 394,
            column: 59,
            span: 12385..12386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 396,
            column: 4,
            span: 12390..12391,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 396,
            column: 6,
            span: 12392..12393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 396,
            column: 13,
            span: 12394..12400,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 396,
            column: 14,
            span: 12400..12401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 396,
            column: 18,
            span: 12401..12405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 396,
            column: 19,
            span: 12405..12406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 396,
            column: 20,
            span: 12406..12407,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 396,
            column: 21,
            span: 12407..12408,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 396,
            column: 25,
            span: 12409..12412,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 396,
            column: 26,
            span: 12412..12413,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 396,
            column: 28,
            span: 12414..12415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 396,
            column: 29,
            span: 12415..12416,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 396,
            column: 31,
            span: 12417..12418,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 396,
            column: 35,
            span: 12419..12422,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 396,
            column: 36,
            span: 12422..12423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 396,
            column: 37,
            span: 12423..12424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 397,
            column: 9,
            span: 12449..12455,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 10,
            span: 12455..12456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 397,
            column: 16,
            span: 12456..12462,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 397,
            column: 17,
            span: 12462..12463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 397,
            column: 23,
            span: 12463..12469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 24,
            span: 12469..12470,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        position: Position {
            line: 397,
            column: 28,
            span: 12470..12474,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 397,
            column: 29,
            span: 12474..12475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 397,
            column: 31,
            span: 12476..12477,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 32,
            span: 12477..12478,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 397,
            column: 35,
            span: 12479..12481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 397,
            column: 42,
            span: 12482..12488,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 397,
            column: 43,
            span: 12488..12489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 397,
            column: 49,
            span: 12489..12495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 50,
            span: 12495..12496,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        position: Position {
            line: 397,
            column: 54,
            span: 12496..12500,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 397,
            column: 55,
            span: 12500..12501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 397,
            column: 57,
            span: 12502..12503,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 58,
            span: 12503..12504,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 59,
            span: 12504..12505,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 399,
            column: 8,
            span: 12509..12514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 399,
            column: 14,
            span: 12515..12520,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 399,
            column: 16,
            span: 12521..12522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 399,
            column: 0,
            span: 12522..12524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 400,
            column: 4,
            span: 12527..12528,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 400,
            column: 6,
            span: 12529..12530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 400,
            column: 13,
            span: 12531..12537,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 400,
            column: 14,
            span: 12537..12538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 400,
            column: 18,
            span: 12538..12542,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 400,
            column: 19,
            span: 12542..12543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 400,
            column: 20,
            span: 12543..12544,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 400,
            column: 21,
            span: 12544..12545,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 400,
            column: 25,
            span: 12546..12549,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 400,
            column: 26,
            span: 12549..12550,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 400,
            column: 35,
            span: 12551..12559,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 400,
            column: 37,
            span: 12560..12561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 400,
            column: 38,
            span: 12561..12562,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 400,
            column: 39,
            span: 12562..12563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 401,
            column: 35,
            span: 12592..12598,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 401,
            column: 36,
            span: 12598..12599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 401,
            column: 37,
            span: 12599..12600,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 401,
            column: 40,
            span: 12601..12603,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 401,
            column: 44,
            span: 12604..12607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 401,
            column: 45,
            span: 12607..12608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 402,
            column: 34,
            span: 12637..12642,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 402,
            column: 36,
            span: 12643..12644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 402,
            column: 42,
            span: 12645..12650,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 402,
            column: 44,
            span: 12651..12652,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 402,
            column: 0,
            span: 12652..12654,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 403,
            column: 35,
            span: 12683..12689,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 403,
            column: 39,
            span: 12690..12693,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 404,
            column: 30,
            span: 12742..12745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 404,
            column: 31,
            span: 12745..12746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 405,
            column: 4,
            span: 12749..12750,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 405,
            column: 6,
            span: 12751..12752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 405,
            column: 13,
            span: 12753..12759,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 405,
            column: 14,
            span: 12759..12760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 405,
            column: 18,
            span: 12760..12764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 405,
            column: 19,
            span: 12764..12765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 405,
            column: 20,
            span: 12765..12766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 405,
            column: 21,
            span: 12766..12767,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 405,
            column: 25,
            span: 12768..12771,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 405,
            column: 26,
            span: 12771..12772,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 405,
            column: 28,
            span: 12773..12774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 405,
            column: 29,
            span: 12774..12775,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 405,
            column: 31,
            span: 12776..12777,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 405,
            column: 35,
            span: 12778..12781,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 405,
            column: 36,
            span: 12781..12782,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 405,
            column: 37,
            span: 12782..12783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 406,
            column: 9,
            span: 12819..12825,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 406,
            column: 10,
            span: 12825..12826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 406,
            column: 15,
            span: 12826..12831,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 406,
            column: 18,
            span: 12832..12834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 406,
            column: 22,
            span: 12834..12838,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 406,
            column: 23,
            span: 12838..12839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 407,
            column: 9,
            span: 12842..12848,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 407,
            column: 10,
            span: 12848..12849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 407,
            column: 16,
            span: 12849..12855,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 407,
            column: 17,
            span: 12855..12856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 407,
            column: 23,
            span: 12856..12862,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 407,
            column: 24,
            span: 12862..12863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        position: Position {
            line: 407,
            column: 28,
            span: 12863..12867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 407,
            column: 29,
            span: 12867..12868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 407,
            column: 31,
            span: 12869..12870,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 407,
            column: 32,
            span: 12870..12871,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 407,
            column: 35,
            span: 12872..12874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 407,
            column: 42,
            span: 12875..12881,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 407,
            column: 43,
            span: 12881..12882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 407,
            column: 49,
            span: 12882..12888,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 407,
            column: 50,
            span: 12888..12889,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        position: Position {
            line: 407,
            column: 54,
            span: 12889..12893,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 407,
            column: 55,
            span: 12893..12894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 407,
            column: 57,
            span: 12895..12896,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 407,
            column: 58,
            span: 12896..12897,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 407,
            column: 59,
            span: 12897..12898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 409,
            column: 8,
            span: 12902..12907,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 409,
            column: 10,
            span: 12908..12909,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 409,
            column: 0,
            span: 12909..12911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 410,
            column: 4,
            span: 12914..12915,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 410,
            column: 6,
            span: 12916..12917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 410,
            column: 13,
            span: 12918..12924,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 410,
            column: 14,
            span: 12924..12925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 410,
            column: 18,
            span: 12925..12929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 410,
            column: 19,
            span: 12929..12930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 410,
            column: 20,
            span: 12930..12931,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 410,
            column: 21,
            span: 12931..12932,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 410,
            column: 25,
            span: 12933..12936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 410,
            column: 26,
            span: 12936..12937,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 410,
            column: 35,
            span: 12938..12946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 410,
            column: 37,
            span: 12947..12948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 410,
            column: 38,
            span: 12948..12949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 410,
            column: 39,
            span: 12949..12950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 411,
            column: 35,
            span: 12979..12985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 411,
            column: 36,
            span: 12985..12986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 411,
            column: 37,
            span: 12986..12987,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 411,
            column: 40,
            span: 12988..12990,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 411,
            column: 44,
            span: 12991..12994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 411,
            column: 45,
            span: 12994..12995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 412,
            column: 34,
            span: 13024..13029,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 412,
            column: 36,
            span: 13030..13031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 412,
            column: 42,
            span: 13032..13037,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 412,
            column: 44,
            span: 13038..13039,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 412,
            column: 0,
            span: 13039..13041,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 413,
            column: 35,
            span: 13070..13076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 413,
            column: 37,
            span: 13077..13078,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 414,
            column: 30,
            span: 13127..13130,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 31,
            span: 13130..13131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 415,
            column: 9,
            span: 13134..13140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 10,
            span: 13140..13141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 415,
            column: 15,
            span: 13141..13146,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 415,
            column: 18,
            span: 13147..13149,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 415,
            column: 22,
            span: 13149..13153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 23,
            span: 13153..13154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 417,
            column: 9,
            span: 13184..13190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 417,
            column: 10,
            span: 13190..13191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 417,
            column: 11,
            span: 13191..13192,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 417,
            column: 14,
            span: 13193..13195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 417,
            column: 16,
            span: 13196..13197,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 417,
            column: 20,
            span: 13198..13201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 417,
            column: 27,
            span: 13202..13208,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 417,
            column: 28,
            span: 13208..13209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 417,
            column: 34,
            span: 13209..13215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 417,
            column: 35,
            span: 13215..13216,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        position: Position {
            line: 417,
            column: 39,
            span: 13216..13220,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 417,
            column: 40,
            span: 13220..13221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 417,
            column: 42,
            span: 13222..13223,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 43,
            span: 13223..13224,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 417,
            column: 46,
            span: 13225..13227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 417,
            column: 53,
            span: 13228..13234,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 417,
            column: 54,
            span: 13234..13235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 417,
            column: 60,
            span: 13235..13241,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 417,
            column: 61,
            span: 13241..13242,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        position: Position {
            line: 417,
            column: 65,
            span: 13242..13246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 417,
            column: 66,
            span: 13246..13247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 417,
            column: 68,
            span: 13248..13249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 69,
            span: 13249..13250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 70,
            span: 13250..13251,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 418,
            column: 0,
            span: 13252..13255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 420,
            column: 6,
            span: 13257..13262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 420,
            column: 7,
            span: 13262..13263,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 420,
            column: 11,
            span: 13263..13267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 420,
            column: 12,
            span: 13267..13268,
        },
    },
]
