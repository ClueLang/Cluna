---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/goto.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 4,
        column: 15,
        span: 67..81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 16,
        span: 81..82,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 17,
        span: 82..83,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 85..90,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 6,
        column: 15,
        span: 91..99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 6,
        column: 22,
        span: 100..106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 23,
        span: 106..107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 6,
        column: 27,
        span: 107..111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 28,
        span: 111..112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 6,
        column: 30,
        span: 113..114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 31,
        span: 114..115,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 8,
        span: 118..123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 7,
        column: 11,
        span: 124..126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 12,
        span: 126..127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 7,
        column: 16,
        span: 128..131,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 18,
        span: 132..133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 7,
        column: 23,
        span: 134..138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 24,
        span: 138..139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 7,
        column: 28,
        span: 139..143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 29,
        span: 143..144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 9,
        span: 147..153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 10,
        span: 153..154,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 8,
        column: 13,
        span: 154..157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 8,
        column: 16,
        span: 158..160,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 8,
        column: 20,
        span: 161..164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 8,
        column: 27,
        span: 165..171,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 28,
        span: 171..172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 8,
        column: 32,
        span: 172..176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 33,
        span: 176..177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 8,
        column: 36,
        span: 177..180,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 37,
        span: 180..181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 8,
        column: 39,
        span: 182..183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 40,
        span: 183..184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 41,
        span: 184..185,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 9,
        column: 0,
        span: 186..189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 12,
        column: 7,
        span: 224..230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 230..231,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ goto l1; do ::l1:: end ]]",
        ),
        line: 12,
        column: 36,
        span: 231..259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 12,
        column: 37,
        span: 259..260,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 12,
        column: 50,
        span: 261..273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 51,
        span: 273..274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 13,
        column: 7,
        span: 275..281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 8,
        span: 281..282,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do ::l1:: end goto l1; ]]",
        ),
        line: 13,
        column: 36,
        span: 282..310,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
        column: 37,
        span: 310..311,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 13,
        column: 50,
        span: 312..324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 51,
        span: 324..325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 16,
        column: 7,
        span: 345..351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 351..352,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ ::l1:: ::l1:: ]]",
        ),
        line: 16,
        column: 27,
        span: 352..371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 28,
        span: 371..372,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 16,
        column: 41,
        span: 373..385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 42,
        span: 385..386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 17,
        column: 7,
        span: 387..393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 8,
        span: 393..394,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ ::l1:: do ::l1:: end]]",
        ),
        line: 17,
        column: 33,
        span: 394..419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 34,
        span: 419..420,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 17,
        column: 47,
        span: 421..433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 48,
        span: 433..434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 21,
        column: 7,
        span: 456..462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 8,
        span: 462..463,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ goto l1; local aa ::l1:: ::l2:: print(3) ]]",
        ),
        line: 21,
        column: 54,
        span: 463..509,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 55,
        span: 509..510,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aa'\"",
        ),
        line: 21,
        column: 68,
        span: 511..523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 69,
        span: 523..524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 24,
        column: 7,
        span: 562..568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 8,
        span: 568..569,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ndo local bb, cc;  end\nlocal aa\n print(3)\n]]",
        ),
        line: 28,
        column: 3,
        span: 569..615,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 4,
        span: 615..616,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aa'\"",
        ),
        line: 28,
        column: 17,
        span: 617..629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 18,
        span: 629..630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 31,
        column: 7,
        span: 656..662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 662..663,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do ::l1:: end goto l1 ]]",
        ),
        line: 31,
        column: 35,
        span: 663..690,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 36,
        span: 690..691,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 31,
        column: 49,
        span: 692..704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 50,
        span: 704..705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 32,
        column: 7,
        span: 706..712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 712..713,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ goto l1 do ::l1:: end ]]",
        ),
        line: 32,
        column: 35,
        span: 713..740,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 36,
        span: 740..741,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 32,
        column: 49,
        span: 742..754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 50,
        span: 754..755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 35,
        column: 7,
        span: 806..812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 812..813,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  repeat\n    if x then  end\n    local xuxu = 10\n\n  until xuxu < x\n]]",
        ),
        line: 41,
        column: 3,
        span: 813..884,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 4,
        span: 884..885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'xuxu'\"",
        ),
        line: 41,
        column: 19,
        span: 886..900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 20,
        span: 900..901,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 44,
        column: 6,
        span: 919..924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 44,
        column: 0,
        span: 925..926,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 45,
        column: 0,
        span: 927..929,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 46,
        column: 8,
        span: 932..937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 46,
        column: 10,
        span: 938..939,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 12,
        span: 940..941,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 0,
        span: 941..944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 48,
        column: 4,
        span: 948..949,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 6,
        span: 950..951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 48,
        column: 8,
        span: 952..953,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 48,
        column: 10,
        span: 954..955,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 12,
        span: 955..957,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 48,
        column: 13,
        span: 957..958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 49,
        column: 4,
        span: 961..962,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 6,
        span: 963..964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 49,
        column: 8,
        span: 965..966,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 49,
        column: 9,
        span: 966..967,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 50,
        column: 0,
        span: 968..971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
        column: 7,
        span: 972..978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 8,
        span: 978..979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 51,
        column: 9,
        span: 979..980,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
        column: 12,
        span: 981..983,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 15,
        span: 983..986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 16,
        span: 986..987,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 55,
        column: 0,
        span: 1005..1007,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 56,
        column: 8,
        span: 1010..1015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 56,
        column: 13,
        span: 1016..1020,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 15,
        span: 1021..1022,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  do\n    local a = 1\n     a = a + 1\n    a = a + 10\n     a = a + 2\n    a = a + 20\n    return a\n  end\n  ]]",
        ),
        line: 65,
        column: 5,
        span: 1023..1130,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 66,
        column: 8,
        span: 1133..1138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 66,
        column: 14,
        span: 1139..1144,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 16,
        span: 1145..1146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 66,
        column: 23,
        span: 1147..1153,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
        column: 24,
        span: 1153..1154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 66,
        column: 27,
        span: 1154..1157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 28,
        span: 1157..1158,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789\"",
        ),
        line: 66,
        column: 40,
        span: 1158..1170,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 41,
        span: 1170..1171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 44,
        span: 1171..1174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 45,
        span: 1174..1175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 67,
        column: 7,
        span: 1178..1182,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 9,
        span: 1183..1184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 67,
        column: 16,
        span: 1185..1191,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 17,
        span: 1191..1192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 67,
        column: 23,
        span: 1192..1198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 24,
        span: 1198..1199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 67,
        column: 28,
        span: 1199..1203,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 29,
        span: 1203..1204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 67,
        column: 35,
        span: 1205..1210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 36,
        span: 1210..1211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 67,
        column: 42,
        span: 1212..1217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 43,
        span: 1217..1218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 67,
        column: 49,
        span: 1219..1224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 50,
        span: 1224..1225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 67,
        column: 56,
        span: 1226..1231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 57,
        span: 1231..1232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 9,
        span: 1235..1241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 10,
        span: 1241..1242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 16,
        span: 1242..1248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 17,
        span: 1248..1249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 68,
        column: 21,
        span: 1249..1253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 22,
        span: 1253..1254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 68,
        column: 26,
        span: 1254..1258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 27,
        span: 1258..1259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 28,
        span: 1259..1260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 29,
        span: 1260..1261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 30,
        span: 1261..1262,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 68,
        column: 33,
        span: 1263..1265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 36,
        span: 1265..1268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 37,
        span: 1268..1269,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 69,
        column: 0,
        span: 1270..1273,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 73,
        column: 0,
        span: 1322..1324,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 74,
        column: 8,
        span: 1327..1332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 74,
        column: 10,
        span: 1333..1334,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 12,
        span: 1335..1336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 0,
        span: 1336..1339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 75,
        column: 4,
        span: 1342..1343,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
        column: 6,
        span: 1344..1345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 75,
        column: 0,
        span: 1346..1347,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 76,
        column: 4,
        span: 1350..1351,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 77,
        column: 0,
        span: 1352..1355,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 79,
        column: 6,
        span: 1357..1362,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 79,
        column: 11,
        span: 1363..1367,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 79,
        column: 0,
        span: 1368..1370,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 82,
        column: 8,
        span: 1454..1459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 82,
        column: 10,
        span: 1460..1461,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 12,
        span: 1462..1463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 0,
        span: 1463..1466,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 83,
        column: 4,
        span: 1469..1470,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 83,
        column: 5,
        span: 1470..1471,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 83,
        column: 6,
        span: 1471..1472,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 84,
        column: 0,
        span: 1473..1476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
        column: 7,
        span: 1477..1483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 8,
        span: 1483..1484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 85,
        column: 9,
        span: 1484..1485,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 12,
        span: 1486..1488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 15,
        span: 1488..1491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 16,
        span: 1491..1492,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 87,
        column: 3,
        span: 1494..1496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 87,
        column: 9,
        span: 1497..1502,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 87,
        column: 0,
        span: 1503..1507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 89,
        column: 8,
        span: 1558..1563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 9,
        span: 1563..1564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should not be here\"",
        ),
        line: 89,
        column: 29,
        span: 1564..1584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 30,
        span: 1584..1585,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 91,
        column: 8,
        span: 1636..1641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 91,
        column: 0,
        span: 1642..1643,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 92,
        column: 4,
        span: 1646..1647,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 92,
        column: 5,
        span: 1647..1648,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 92,
        column: 6,
        span: 1648..1649,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 93,
        column: 0,
        span: 1650..1654,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 94,
        column: 0,
        span: 1655..1658,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 97,
        column: 6,
        span: 1711..1716,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 97,
        column: 15,
        span: 1717..1725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 97,
        column: 19,
        span: 1726..1729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 20,
        span: 1729..1730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 21,
        span: 1730..1731,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 98,
        column: 8,
        span: 1734..1739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 98,
        column: 10,
        span: 1740..1741,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
        column: 12,
        span: 1742..1743,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 98,
        column: 14,
        span: 1744..1745,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 98,
        column: 15,
        span: 1745..1746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
        column: 4,
        span: 1750..1751,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 100,
        column: 5,
        span: 1751..1752,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 100,
        column: 6,
        span: 1752..1753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
        column: 7,
        span: 1753..1754,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 100,
        column: 9,
        span: 1755..1756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 11,
        span: 1756..1758,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 100,
        column: 12,
        span: 1758..1759,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 14,
        span: 1760..1761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 16,
        span: 1761..1763,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 100,
        column: 17,
        span: 1763..1764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 101,
        column: 4,
        span: 1767..1768,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 101,
        column: 5,
        span: 1768..1769,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 101,
        column: 6,
        span: 1769..1770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 101,
        column: 7,
        span: 1770..1771,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 101,
        column: 9,
        span: 1772..1773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 11,
        span: 1773..1775,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 101,
        column: 12,
        span: 1775..1776,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 14,
        span: 1777..1778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 16,
        span: 1778..1780,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 101,
        column: 17,
        span: 1780..1781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 103,
        column: 4,
        span: 1785..1786,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 103,
        column: 5,
        span: 1786..1787,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 103,
        column: 6,
        span: 1787..1788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 103,
        column: 7,
        span: 1788..1789,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 103,
        column: 9,
        span: 1790..1791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 11,
        span: 1791..1793,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 103,
        column: 12,
        span: 1793..1794,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
        column: 14,
        span: 1795..1796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 16,
        span: 1796..1798,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 103,
        column: 17,
        span: 1798..1799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
        column: 4,
        span: 1802..1803,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 104,
        column: 5,
        span: 1803..1804,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 104,
        column: 6,
        span: 1804..1805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
        column: 7,
        span: 1805..1806,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 104,
        column: 9,
        span: 1807..1808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 11,
        span: 1808..1810,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 104,
        column: 12,
        span: 1810..1811,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 14,
        span: 1812..1813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 16,
        span: 1813..1815,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 104,
        column: 17,
        span: 1815..1816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 4,
        span: 1819..1820,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 105,
        column: 5,
        span: 1820..1821,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 105,
        column: 6,
        span: 1821..1822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 7,
        span: 1822..1823,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 105,
        column: 9,
        span: 1824..1825,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 11,
        span: 1825..1827,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 105,
        column: 12,
        span: 1827..1828,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 14,
        span: 1829..1830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 16,
        span: 1830..1832,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 105,
        column: 17,
        span: 1832..1833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 106,
        column: 9,
        span: 1836..1842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 10,
        span: 1842..1843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 106,
        column: 11,
        span: 1843..1844,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 106,
        column: 12,
        span: 1844..1845,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 13,
        span: 1844..1846,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 106,
        column: 14,
        span: 1846..1847,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 106,
        column: 17,
        span: 1848..1850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 19,
        span: 1850..1852,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 106,
        column: 23,
        span: 1853..1856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 106,
        column: 25,
        span: 1857..1858,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 106,
        column: 26,
        span: 1858..1859,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 27,
        span: 1858..1860,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 106,
        column: 28,
        span: 1860..1861,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 106,
        column: 31,
        span: 1862..1864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 33,
        span: 1864..1866,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 106,
        column: 37,
        span: 1867..1870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 106,
        column: 39,
        span: 1871..1872,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 106,
        column: 40,
        span: 1872..1873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 41,
        span: 1872..1874,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 106,
        column: 42,
        span: 1874..1875,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 106,
        column: 45,
        span: 1876..1878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 47,
        span: 1878..1880,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 106,
        column: 0,
        span: 1881..1884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 107,
        column: 6,
        span: 1889..1890,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 107,
        column: 7,
        span: 1890..1891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 8,
        span: 1890..1892,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 107,
        column: 9,
        span: 1892..1893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 107,
        column: 12,
        span: 1894..1896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 14,
        span: 1896..1898,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 107,
        column: 18,
        span: 1899..1902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 107,
        column: 20,
        span: 1903..1904,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 107,
        column: 21,
        span: 1904..1905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 22,
        span: 1904..1906,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 107,
        column: 23,
        span: 1906..1907,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 107,
        column: 26,
        span: 1908..1910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 28,
        span: 1910..1912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 29,
        span: 1912..1913,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 108,
        column: 5,
        span: 1916..1918,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 108,
        column: 9,
        span: 1919..1922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 11,
        span: 1923..1924,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 108,
        column: 12,
        span: 1924..1925,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 13,
        span: 1924..1926,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 108,
        column: 14,
        span: 1926..1927,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 108,
        column: 19,
        span: 1928..1932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 21,
        span: 1933..1934,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 108,
        column: 22,
        span: 1934..1935,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 23,
        span: 1934..1936,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 108,
        column: 24,
        span: 1936..1937,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 26,
        span: 1938..1939,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 108,
        column: 31,
        span: 1940..1944,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 108,
        column: 32,
        span: 1944..1945,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 108,
        column: 36,
        span: 1946..1949,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
        column: 0,
        span: 1966..1969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 111,
        column: 4,
        span: 1971..1974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 5,
        span: 1974..1975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 6,
        span: 1975..1976,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 114,
        column: 3,
        span: 1979..1981,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 115,
        column: 8,
        span: 2007..2012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 115,
        column: 0,
        span: 2013..2014,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 117,
        column: 8,
        span: 2018..2023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 117,
        column: 10,
        span: 2024..2025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
        column: 9,
        span: 2073..2079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 10,
        span: 2079..2080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 118,
        column: 11,
        span: 2080..2081,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 14,
        span: 2082..2084,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 118,
        column: 18,
        span: 2085..2088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 19,
        span: 2088..2089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 119,
        column: 4,
        span: 2092..2093,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 6,
        span: 2094..2095,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 119,
        column: 0,
        span: 2096..2100,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 120,
        column: 5,
        span: 2103..2105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 120,
        column: 7,
        span: 2106..2107,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 10,
        span: 2108..2110,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 120,
        column: 14,
        span: 2111..2114,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 120,
        column: 0,
        span: 2115..2119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 121,
        column: 6,
        span: 2124..2125,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 121,
        column: 8,
        span: 2126..2127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 0,
        span: 2127..2129,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 122,
        column: 0,
        span: 2132..2136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 123,
        column: 6,
        span: 2141..2142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
        column: 8,
        span: 2143..2144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 123,
        column: 10,
        span: 2145..2146,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 123,
        column: 12,
        span: 2147..2148,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 0,
        span: 2148..2150,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 124,
        column: 0,
        span: 2153..2156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 9,
        span: 2159..2165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 10,
        span: 2165..2166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 125,
        column: 11,
        span: 2166..2167,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 14,
        span: 2168..2170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 16,
        span: 2170..2172,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 125,
        column: 20,
        span: 2173..2176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 125,
        column: 22,
        span: 2177..2178,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 25,
        span: 2179..2181,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 125,
        column: 30,
        span: 2182..2186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 31,
        span: 2186..2187,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 126,
        column: 0,
        span: 2188..2191,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 129,
        column: 0,
        span: 2207..2209,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 130,
        column: 8,
        span: 2212..2217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 130,
        column: 14,
        span: 2218..2223,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 16,
        span: 2224..2225,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 130,
        column: 0,
        span: 2226..2230,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 131,
        column: 8,
        span: 2233..2238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
        column: 10,
        span: 2239..2240,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 131,
        column: 12,
        span: 2241..2242,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 131,
        column: 0,
        span: 2243..2248,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 132,
        column: 5,
        span: 2251..2253,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 132,
        column: 10,
        span: 2254..2258,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 132,
        column: 0,
        span: 2259..2263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 133,
        column: 6,
        span: 2268..2269,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 133,
        column: 8,
        span: 2270..2271,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 133,
        column: 0,
        span: 2272..2276,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 135,
        column: 7,
        span: 2282..2284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 135,
        column: 13,
        span: 2285..2290,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 135,
        column: 0,
        span: 2291..2295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 136,
        column: 12,
        span: 2302..2307,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
        column: 14,
        span: 2308..2309,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 136,
        column: 0,
        span: 2310..2315,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 137,
        column: 0,
        span: 2320..2323,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 138,
        column: 0,
        span: 2326..2329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 9,
        span: 2332..2338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 10,
        span: 2338..2339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 139,
        column: 11,
        span: 2339..2340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 12,
        span: 2340..2341,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 140,
        column: 0,
        span: 2342..2345,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 142,
        column: 3,
        span: 2347..2349,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 144,
        column: 0,
        span: 2413..2416,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 149,
        column: 6,
        span: 2531..2536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 149,
        column: 12,
        span: 2537..2542,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 14,
        span: 2543..2544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 149,
        column: 22,
        span: 2545..2552,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'debug'",
        ),
        line: 149,
        column: 30,
        span: 2553..2560,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 151,
        column: 6,
        span: 2562..2567,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 151,
        column: 15,
        span: 2568..2576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 151,
        column: 19,
        span: 2577..2580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 20,
        span: 2580..2581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 21,
        span: 2581..2582,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 152,
        column: 8,
        span: 2585..2590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 152,
        column: 10,
        span: 2591..2592,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 152,
        column: 12,
        span: 2593..2594,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 152,
        column: 14,
        span: 2595..2596,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 152,
        column: 15,
        span: 2596..2597,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 153,
        column: 0,
        span: 2600..2602,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 154,
        column: 10,
        span: 2607..2612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 154,
        column: 12,
        span: 2613..2614,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 154,
        column: 14,
        span: 2615..2616,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 0,
        span: 2616..2618,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 155,
        column: 10,
        span: 2623..2628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 155,
        column: 12,
        span: 2629..2630,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 13,
        span: 2630..2631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 155,
        column: 15,
        span: 2632..2633,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 16,
        span: 2633..2634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 155,
        column: 18,
        span: 2635..2636,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 19,
        span: 2636..2637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 155,
        column: 0,
        span: 2638..2639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 156,
        column: 6,
        span: 2644..2645,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 156,
        column: 7,
        span: 2645..2646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 8,
        span: 2645..2647,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 156,
        column: 9,
        span: 2647..2648,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 156,
        column: 11,
        span: 2649..2650,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 156,
        column: 20,
        span: 2651..2659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 21,
        span: 2659..2660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 22,
        span: 2660..2661,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 156,
        column: 29,
        span: 2662..2668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 156,
        column: 31,
        span: 2669..2670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 32,
        span: 2670..2671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 156,
        column: 34,
        span: 2672..2673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 35,
        span: 2673..2674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 156,
        column: 37,
        span: 2675..2676,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 38,
        span: 2676..2677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 156,
        column: 40,
        span: 2678..2679,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 156,
        column: 0,
        span: 2680..2683,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 158,
        column: 10,
        span: 2689..2694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 158,
        column: 0,
        span: 2695..2696,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 159,
        column: 0,
        span: 2701..2703,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 160,
        column: 12,
        span: 2710..2715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 160,
        column: 0,
        span: 2716..2717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 161,
        column: 8,
        span: 2724..2725,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 161,
        column: 9,
        span: 2725..2726,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 161,
        column: 10,
        span: 2726..2727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 161,
        column: 11,
        span: 2727..2728,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 161,
        column: 13,
        span: 2729..2730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 15,
        span: 2730..2732,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 161,
        column: 16,
        span: 2732..2733,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 18,
        span: 2734..2735,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 161,
        column: 27,
        span: 2736..2744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 28,
        span: 2744..2745,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 29,
        span: 2745..2746,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 161,
        column: 36,
        span: 2747..2753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 161,
        column: 38,
        span: 2754..2755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 39,
        span: 2755..2756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 161,
        column: 41,
        span: 2757..2758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 42,
        span: 2758..2759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 161,
        column: 44,
        span: 2760..2761,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 45,
        span: 2761..2762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 161,
        column: 47,
        span: 2763..2764,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 161,
        column: 51,
        span: 2765..2768,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 162,
        column: 9,
        span: 2795..2797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 162,
        column: 11,
        span: 2798..2799,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 162,
        column: 13,
        span: 2800..2801,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 15,
        span: 2801..2803,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 162,
        column: 20,
        span: 2804..2808,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 162,
        column: 0,
        span: 2809..2812,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 163,
        column: 0,
        span: 2819..2821,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 164,
        column: 14,
        span: 2830..2835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 164,
        column: 0,
        span: 2836..2837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 165,
        column: 10,
        span: 2846..2847,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 165,
        column: 11,
        span: 2847..2848,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 165,
        column: 12,
        span: 2848..2849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 165,
        column: 13,
        span: 2849..2850,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 165,
        column: 15,
        span: 2851..2852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 17,
        span: 2852..2854,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 165,
        column: 18,
        span: 2854..2855,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 20,
        span: 2856..2857,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 165,
        column: 29,
        span: 2858..2866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 30,
        span: 2866..2867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 31,
        span: 2867..2868,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 165,
        column: 38,
        span: 2869..2875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 165,
        column: 40,
        span: 2876..2877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 41,
        span: 2877..2878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 165,
        column: 43,
        span: 2879..2880,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 44,
        span: 2880..2881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 165,
        column: 46,
        span: 2882..2883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 47,
        span: 2883..2884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 165,
        column: 49,
        span: 2885..2886,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 165,
        column: 53,
        span: 2887..2890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 166,
        column: 10,
        span: 2913..2914,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 166,
        column: 12,
        span: 2915..2916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 166,
        column: 14,
        span: 2917..2918,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 166,
        column: 16,
        span: 2919..2920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 0,
        span: 2920..2922,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 167,
        column: 14,
        span: 2931..2936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
        column: 0,
        span: 2937..2938,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 168,
        column: 0,
        span: 2945..2948,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 169,
        column: 0,
        span: 2953..2956,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 170,
        column: 0,
        span: 2959..2962,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 171,
        column: 9,
        span: 2965..2971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 171,
        column: 0,
        span: 2972..2973,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 172,
        column: 0,
        span: 2974..2977,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 174,
        column: 6,
        span: 2979..2984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 174,
        column: 8,
        span: 2985..2986,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 10,
        span: 2987..2988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 174,
        column: 14,
        span: 2989..2992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 15,
        span: 2992..2993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 16,
        span: 2993..2994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 7,
        span: 2995..3001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 8,
        span: 3001..3002,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 175,
        column: 9,
        span: 3002..3003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 175,
        column: 10,
        span: 3003..3004,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 13,
        span: 3005..3007,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 15,
        span: 3007..3009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 16,
        span: 3009..3010,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 178,
        column: 4,
        span: 3044..3047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 178,
        column: 6,
        span: 3048..3049,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 8,
        span: 3050..3051,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 10,
        span: 3051..3053,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 11,
        span: 3053..3054,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 13,
        span: 3054..3056,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 178,
        column: 0,
        span: 3057..3059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 179,
        column: 9,
        span: 3062..3068,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 10,
        span: 3068..3069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 179,
        column: 15,
        span: 3069..3074,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 179,
        column: 16,
        span: 3074..3075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 179,
        column: 25,
        span: 3075..3084,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 26,
        span: 3084..3085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 179,
        column: 27,
        span: 3085..3086,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 179,
        column: 28,
        span: 3086..3087,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 29,
        span: 3086..3088,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 179,
        column: 30,
        span: 3088..3089,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 31,
        span: 3089..3090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 33,
        span: 3090..3092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 34,
        span: 3092..3093,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 179,
        column: 37,
        span: 3094..3096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 179,
        column: 43,
        span: 3097..3102,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 179,
        column: 44,
        span: 3102..3103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 179,
        column: 53,
        span: 3103..3112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 54,
        span: 3112..3113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 179,
        column: 55,
        span: 3113..3114,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 179,
        column: 56,
        span: 3114..3115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 179,
        column: 57,
        span: 3115..3116,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 179,
        column: 58,
        span: 3116..3117,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 59,
        span: 3117..3118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 61,
        span: 3118..3120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 62,
        span: 3120..3121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 63,
        span: 3121..3122,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
        column: 0,
        span: 3123..3126,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 183,
        column: 4,
        span: 3173..3176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 183,
        column: 6,
        span: 3177..3178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 183,
        column: 8,
        span: 3179..3180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 10,
        span: 3180..3182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 11,
        span: 3182..3183,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 13,
        span: 3183..3185,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 183,
        column: 0,
        span: 3186..3188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 9,
        span: 3228..3234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 10,
        span: 3234..3235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 185,
        column: 15,
        span: 3235..3240,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 16,
        span: 3240..3241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 185,
        column: 25,
        span: 3241..3250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 26,
        span: 3250..3251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 185,
        column: 27,
        span: 3251..3252,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 185,
        column: 28,
        span: 3252..3253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 29,
        span: 3252..3254,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 185,
        column: 30,
        span: 3254..3255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 31,
        span: 3255..3256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 33,
        span: 3256..3258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 34,
        span: 3258..3259,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 185,
        column: 37,
        span: 3260..3262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 185,
        column: 43,
        span: 3263..3268,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 44,
        span: 3268..3269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 185,
        column: 53,
        span: 3269..3278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 54,
        span: 3278..3279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 185,
        column: 55,
        span: 3279..3280,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 185,
        column: 56,
        span: 3280..3281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 185,
        column: 57,
        span: 3281..3282,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 185,
        column: 58,
        span: 3282..3283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 59,
        span: 3283..3284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 61,
        span: 3284..3286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 62,
        span: 3286..3287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 63,
        span: 3287..3288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 9,
        span: 3291..3297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 10,
        span: 3297..3298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 186,
        column: 15,
        span: 3298..3303,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 16,
        span: 3303..3304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 186,
        column: 25,
        span: 3304..3313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 26,
        span: 3313..3314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 186,
        column: 27,
        span: 3314..3315,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 186,
        column: 28,
        span: 3315..3316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 29,
        span: 3315..3317,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 186,
        column: 30,
        span: 3317..3318,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 31,
        span: 3318..3319,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 33,
        span: 3319..3321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 34,
        span: 3321..3322,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 186,
        column: 37,
        span: 3323..3325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 186,
        column: 43,
        span: 3326..3331,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 44,
        span: 3331..3332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 186,
        column: 53,
        span: 3332..3341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 54,
        span: 3341..3342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 186,
        column: 55,
        span: 3342..3343,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 186,
        column: 56,
        span: 3343..3344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 186,
        column: 57,
        span: 3344..3345,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 186,
        column: 58,
        span: 3345..3346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 59,
        span: 3346..3347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 61,
        span: 3347..3349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 62,
        span: 3349..3350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 63,
        span: 3350..3351,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 187,
        column: 0,
        span: 3352..3355,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 189,
        column: 4,
        span: 3357..3360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 189,
        column: 6,
        span: 3361..3362,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 8,
        span: 3363..3364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 10,
        span: 3364..3366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 11,
        span: 3366..3367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 13,
        span: 3367..3369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 14,
        span: 3369..3370,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 16,
        span: 3370..3372,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 189,
        column: 0,
        span: 3373..3375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 9,
        span: 3432..3438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 10,
        span: 3438..3439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 191,
        column: 15,
        span: 3439..3444,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 16,
        span: 3444..3445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 191,
        column: 25,
        span: 3445..3454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 26,
        span: 3454..3455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 191,
        column: 27,
        span: 3455..3456,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 191,
        column: 28,
        span: 3456..3457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 191,
        column: 29,
        span: 3457..3458,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 191,
        column: 30,
        span: 3458..3459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 31,
        span: 3459..3460,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 33,
        span: 3460..3462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 34,
        span: 3462..3463,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 37,
        span: 3464..3466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 191,
        column: 43,
        span: 3467..3472,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 44,
        span: 3472..3473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 191,
        column: 53,
        span: 3473..3482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 54,
        span: 3482..3483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 191,
        column: 55,
        span: 3483..3484,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 191,
        column: 56,
        span: 3484..3485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 191,
        column: 57,
        span: 3485..3486,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 191,
        column: 59,
        span: 3487..3488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 61,
        span: 3488..3490,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 191,
        column: 62,
        span: 3490..3491,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 63,
        span: 3491..3492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 65,
        span: 3492..3494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 66,
        span: 3494..3495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 67,
        span: 3495..3496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 9,
        span: 3499..3505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 10,
        span: 3505..3506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 192,
        column: 15,
        span: 3506..3511,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 16,
        span: 3511..3512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 192,
        column: 25,
        span: 3512..3521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 26,
        span: 3521..3522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 192,
        column: 27,
        span: 3522..3523,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 192,
        column: 28,
        span: 3523..3524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 192,
        column: 29,
        span: 3524..3525,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 192,
        column: 30,
        span: 3525..3526,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 31,
        span: 3526..3527,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 33,
        span: 3527..3529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 34,
        span: 3529..3530,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 192,
        column: 37,
        span: 3531..3533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 192,
        column: 43,
        span: 3534..3539,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 44,
        span: 3539..3540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 192,
        column: 53,
        span: 3540..3549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 54,
        span: 3549..3550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 192,
        column: 55,
        span: 3550..3551,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 192,
        column: 56,
        span: 3551..3552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 192,
        column: 57,
        span: 3552..3553,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 192,
        column: 59,
        span: 3554..3555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 61,
        span: 3555..3557,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 192,
        column: 62,
        span: 3557..3558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 63,
        span: 3558..3559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 65,
        span: 3559..3561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 66,
        span: 3561..3562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 67,
        span: 3562..3563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 9,
        span: 3594..3600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 10,
        span: 3600..3601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 194,
        column: 15,
        span: 3601..3606,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 16,
        span: 3606..3607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 194,
        column: 25,
        span: 3607..3616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 26,
        span: 3616..3617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 194,
        column: 27,
        span: 3617..3618,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 194,
        column: 28,
        span: 3618..3619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 194,
        column: 29,
        span: 3619..3620,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 194,
        column: 30,
        span: 3620..3621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 31,
        span: 3621..3622,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 33,
        span: 3622..3624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 34,
        span: 3624..3625,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 194,
        column: 37,
        span: 3626..3628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 194,
        column: 43,
        span: 3629..3634,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 44,
        span: 3634..3635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 194,
        column: 53,
        span: 3635..3644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 54,
        span: 3644..3645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 194,
        column: 55,
        span: 3645..3646,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 194,
        column: 56,
        span: 3646..3647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 194,
        column: 57,
        span: 3647..3648,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 194,
        column: 59,
        span: 3649..3650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 61,
        span: 3650..3652,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 194,
        column: 62,
        span: 3652..3653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 63,
        span: 3653..3654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 65,
        span: 3654..3656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 66,
        span: 3656..3657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 67,
        span: 3657..3658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 9,
        span: 3661..3667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 10,
        span: 3667..3668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 195,
        column: 15,
        span: 3668..3673,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 16,
        span: 3673..3674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 195,
        column: 25,
        span: 3674..3683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 26,
        span: 3683..3684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 195,
        column: 27,
        span: 3684..3685,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 195,
        column: 28,
        span: 3685..3686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 195,
        column: 29,
        span: 3686..3687,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 195,
        column: 30,
        span: 3687..3688,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 31,
        span: 3688..3689,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 33,
        span: 3689..3691,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 34,
        span: 3691..3692,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 195,
        column: 37,
        span: 3693..3695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 195,
        column: 43,
        span: 3696..3701,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 44,
        span: 3701..3702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 195,
        column: 53,
        span: 3702..3711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 54,
        span: 3711..3712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 195,
        column: 55,
        span: 3712..3713,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 195,
        column: 56,
        span: 3713..3714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 195,
        column: 57,
        span: 3714..3715,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 195,
        column: 59,
        span: 3716..3717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 61,
        span: 3717..3719,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 195,
        column: 62,
        span: 3719..3720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 63,
        span: 3720..3721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 65,
        span: 3721..3723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 66,
        span: 3723..3724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 67,
        span: 3724..3725,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 196,
        column: 0,
        span: 3726..3729,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 199,
        column: 4,
        span: 3762..3765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 199,
        column: 6,
        span: 3766..3767,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 199,
        column: 8,
        span: 3768..3769,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 10,
        span: 3769..3771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 11,
        span: 3771..3772,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 13,
        span: 3772..3774,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 14,
        span: 3774..3775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 16,
        span: 3775..3777,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 199,
        column: 0,
        span: 3778..3780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 200,
        column: 9,
        span: 3783..3789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 10,
        span: 3789..3790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 200,
        column: 15,
        span: 3790..3795,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 16,
        span: 3795..3796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 200,
        column: 25,
        span: 3796..3805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 26,
        span: 3805..3806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 200,
        column: 27,
        span: 3806..3807,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 200,
        column: 28,
        span: 3807..3808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 29,
        span: 3807..3809,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 200,
        column: 30,
        span: 3809..3810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 31,
        span: 3810..3811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 33,
        span: 3811..3813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 34,
        span: 3813..3814,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 200,
        column: 37,
        span: 3815..3817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 200,
        column: 43,
        span: 3818..3823,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 44,
        span: 3823..3824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 200,
        column: 53,
        span: 3824..3833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 54,
        span: 3833..3834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 200,
        column: 55,
        span: 3834..3835,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 200,
        column: 56,
        span: 3835..3836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 200,
        column: 57,
        span: 3836..3837,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 200,
        column: 58,
        span: 3837..3838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 59,
        span: 3838..3839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 61,
        span: 3839..3841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 62,
        span: 3841..3842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 63,
        span: 3842..3843,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 201,
        column: 0,
        span: 3844..3847,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 204,
        column: 4,
        span: 3884..3887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 204,
        column: 6,
        span: 3888..3889,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
        column: 8,
        span: 3890..3891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 10,
        span: 3891..3893,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 11,
        span: 3893..3894,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 13,
        span: 3894..3896,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 14,
        span: 3896..3897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 16,
        span: 3897..3899,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 204,
        column: 0,
        span: 3900..3902,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 205,
        column: 6,
        span: 3905..3908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 205,
        column: 8,
        span: 3909..3910,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 205,
        column: 10,
        span: 3911..3912,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 12,
        span: 3912..3914,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 13,
        span: 3914..3915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 15,
        span: 3915..3917,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 205,
        column: 0,
        span: 3918..3920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
        column: 11,
        span: 3925..3931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 12,
        span: 3931..3932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 13,
        span: 3932..3933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 206,
        column: 18,
        span: 3933..3938,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 206,
        column: 19,
        span: 3938..3939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 206,
        column: 28,
        span: 3939..3948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 29,
        span: 3948..3949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 30,
        span: 3949..3950,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 206,
        column: 31,
        span: 3950..3951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 206,
        column: 32,
        span: 3951..3952,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 206,
        column: 33,
        span: 3952..3953,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 34,
        span: 3953..3954,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
        column: 36,
        span: 3954..3956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 37,
        span: 3956..3957,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 206,
        column: 40,
        span: 3958..3960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 206,
        column: 46,
        span: 3961..3966,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 206,
        column: 47,
        span: 3966..3967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 206,
        column: 56,
        span: 3967..3976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 57,
        span: 3976..3977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 58,
        span: 3977..3978,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 206,
        column: 59,
        span: 3978..3979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 206,
        column: 60,
        span: 3979..3980,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 206,
        column: 61,
        span: 3980..3981,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 62,
        span: 3981..3982,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
        column: 64,
        span: 3982..3984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 65,
        span: 3984..3985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 66,
        span: 3985..3986,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 207,
        column: 9,
        span: 3993..3995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 11,
        span: 3996..3997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 207,
        column: 12,
        span: 3997..3998,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 207,
        column: 15,
        span: 3999..4001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 207,
        column: 17,
        span: 4002..4003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 18,
        span: 4003..4004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 19,
        span: 4004..4005,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 208,
        column: 0,
        span: 4008..4011,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 209,
        column: 0,
        span: 4012..4015,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
        column: 6,
        span: 4115..4120,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 214,
        column: 15,
        span: 4121..4129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 214,
        column: 21,
        span: 4130..4135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 22,
        span: 4135..4136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 214,
        column: 23,
        span: 4136..4137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 24,
        span: 4137..4138,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 215,
        column: 5,
        span: 4141..4143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 215,
        column: 7,
        span: 4144..4145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 215,
        column: 10,
        span: 4146..4148,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 12,
        span: 4148..4150,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 215,
        column: 0,
        span: 4151..4155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 216,
        column: 10,
        span: 4160..4165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 11,
        span: 4165..4166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 216,
        column: 34,
        span: 4166..4189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 35,
        span: 4189..4190,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 217,
        column: 9,
        span: 4193..4199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 217,
        column: 11,
        span: 4200..4201,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 14,
        span: 4202..4204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 16,
        span: 4204..4206,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 217,
        column: 0,
        span: 4207..4211,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 218,
        column: 9,
        span: 4214..4220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 218,
        column: 11,
        span: 4221..4222,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 218,
        column: 14,
        span: 4223..4225,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 16,
        span: 4225..4227,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 218,
        column: 0,
        span: 4228..4232,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 219,
        column: 9,
        span: 4235..4241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 219,
        column: 11,
        span: 4242..4243,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 219,
        column: 14,
        span: 4244..4246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
        column: 16,
        span: 4246..4248,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 219,
        column: 0,
        span: 4249..4253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 221,
        column: 10,
        span: 4288..4293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 11,
        span: 4293..4294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 221,
        column: 34,
        span: 4294..4317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 35,
        span: 4317..4318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 222,
        column: 6,
        span: 4323..4324,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 8,
        span: 4325..4326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 222,
        column: 10,
        span: 4327..4328,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 222,
        column: 12,
        span: 4329..4330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 14,
        span: 4330..4332,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 223,
        column: 0,
        span: 4359..4363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 224,
        column: 6,
        span: 4368..4369,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 8,
        span: 4370..4371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 224,
        column: 10,
        span: 4372..4373,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 224,
        column: 12,
        span: 4374..4375,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 14,
        span: 4375..4377,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 224,
        column: 15,
        span: 4377..4378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 225,
        column: 10,
        span: 4383..4388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 11,
        span: 4388..4389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 225,
        column: 34,
        span: 4389..4412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 35,
        span: 4412..4413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 227,
        column: 10,
        span: 4419..4424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 11,
        span: 4424..4425,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 227,
        column: 34,
        span: 4425..4448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 35,
        span: 4448..4449,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 228,
        column: 0,
        span: 4452..4455,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 229,
        column: 5,
        span: 4458..4460,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 229,
        column: 12,
        span: 4461..4467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 229,
        column: 14,
        span: 4468..4469,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 229,
        column: 0,
        span: 4470..4473,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 230,
        column: 5,
        span: 4476..4478,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 230,
        column: 12,
        span: 4479..4485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 230,
        column: 16,
        span: 4486..4489,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 230,
        column: 0,
        span: 4490..4493,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 231,
        column: 5,
        span: 4496..4498,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 231,
        column: 12,
        span: 4499..4505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 231,
        column: 16,
        span: 4506..4509,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 231,
        column: 0,
        span: 4510..4513,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 232,
        column: 9,
        span: 4516..4522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 232,
        column: 13,
        span: 4523..4526,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 233,
        column: 0,
        span: 4527..4530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 7,
        span: 4532..4538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 8,
        span: 4538..4539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 235,
        column: 13,
        span: 4539..4544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 14,
        span: 4544..4545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 235,
        column: 15,
        span: 4544..4546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 16,
        span: 4546..4547,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 235,
        column: 19,
        span: 4548..4550,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 235,
        column: 23,
        span: 4551..4554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 24,
        span: 4554..4555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 7,
        span: 4556..4562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 8,
        span: 4562..4563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 236,
        column: 13,
        span: 4563..4568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 14,
        span: 4568..4569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 236,
        column: 15,
        span: 4568..4570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 16,
        span: 4570..4571,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 236,
        column: 19,
        span: 4572..4574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 236,
        column: 23,
        span: 4575..4578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 24,
        span: 4578..4579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 7,
        span: 4580..4586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 8,
        span: 4586..4587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 237,
        column: 13,
        span: 4587..4592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 14,
        span: 4592..4593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
        column: 15,
        span: 4592..4594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 16,
        span: 4594..4595,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 237,
        column: 19,
        span: 4596..4598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 237,
        column: 23,
        span: 4599..4602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 24,
        span: 4602..4603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
        column: 7,
        span: 4604..4610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 8,
        span: 4610..4611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 238,
        column: 13,
        span: 4611..4616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 14,
        span: 4616..4617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 15,
        span: 4616..4618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 16,
        span: 4618..4619,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 238,
        column: 19,
        span: 4620..4622,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 21,
        span: 4622..4624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 22,
        span: 4624..4625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 7,
        span: 4626..4632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 8,
        span: 4632..4633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 239,
        column: 13,
        span: 4633..4638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 14,
        span: 4638..4639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 15,
        span: 4638..4640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 16,
        span: 4640..4641,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
        column: 19,
        span: 4642..4644,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 22,
        span: 4644..4647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 23,
        span: 4647..4648,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 241,
        column: 0,
        span: 4650..4652,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 243,
        column: 8,
        span: 4699..4704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 243,
        column: 0,
        span: 4705..4706,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 248,
        column: 0,
        span: 4713..4715,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
        column: 10,
        span: 4720..4725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 249,
        column: 12,
        span: 4726..4727,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 249,
        column: 14,
        span: 4728..4729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 249,
        column: 19,
        span: 4729..4734,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 249,
        column: 20,
        span: 4734..4735,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 22,
        span: 4736..4737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 249,
        column: 35,
        span: 4738..4750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 36,
        span: 4750..4751,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 249,
        column: 37,
        span: 4751..4752,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 249,
        column: 38,
        span: 4752..4753,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 39,
        span: 4753..4754,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 249,
        column: 41,
        span: 4755..4756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        line: 249,
        column: 49,
        span: 4757..4764,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 51,
        span: 4765..4766,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 249,
        column: 60,
        span: 4767..4775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 61,
        span: 4775..4776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 62,
        span: 4776..4777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 249,
        column: 64,
        span: 4778..4779,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 66,
        span: 4780..4781,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 249,
        column: 71,
        span: 4782..4786,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
        column: 75,
        span: 4787..4790,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 249,
        column: 77,
        span: 4791..4792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 78,
        span: 4792..4793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 11,
        span: 4798..4804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 12,
        span: 4804..4805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 250,
        column: 13,
        span: 4805..4806,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
        column: 16,
        span: 4807..4809,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 250,
        column: 20,
        span: 4810..4813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 21,
        span: 4813..4814,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 251,
        column: 7,
        span: 4819..4821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 251,
        column: 9,
        span: 4822..4823,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 251,
        column: 14,
        span: 4824..4828,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 251,
        column: 18,
        span: 4829..4832,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
        column: 0,
        span: 4872..4875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 9,
        span: 4879..4885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 10,
        span: 4885..4886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 254,
        column: 11,
        span: 4886..4887,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 254,
        column: 14,
        span: 4888..4890,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 254,
        column: 19,
        span: 4891..4895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 20,
        span: 4895..4896,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
        column: 0,
        span: 4938..4941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 259,
        column: 6,
        span: 5025..5030,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 259,
        column: 11,
        span: 5031..5035,
    },
]
