---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/strings.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 70..75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 75..76,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing strings and string library'",
        ),
        line: 4,
        column: 43,
        span: 76..112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 44,
        span: 112..113,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 115..120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 6,
        column: 11,
        span: 121..125,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 6,
        column: 13,
        span: 126..127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 6,
        column: 18,
        span: 127..132,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 6,
        column: 19,
        span: 132..133,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 21,
        span: 134..135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 6,
        column: 26,
        span: 136..140,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 6,
        column: 27,
        span: 140..141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 6,
        column: 0,
        span: 141..151,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 6,
        span: 152..157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 7,
        column: 11,
        span: 158..162,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 7,
        column: 13,
        span: 163..164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 7,
        column: 18,
        span: 164..169,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 7,
        column: 19,
        span: 169..170,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 21,
        span: 171..172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 7,
        column: 26,
        span: 173..177,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 7,
        column: 27,
        span: 177..178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        line: 7,
        column: 0,
        span: 178..188,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 10,
        column: 6,
        span: 191..196,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 10,
        column: 15,
        span: 197..205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 10,
        column: 26,
        span: 206..216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 28,
        span: 217..218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 10,
        column: 31,
        span: 218..221,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 10,
        column: 32,
        span: 221..222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 10,
        column: 34,
        span: 223..224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 10,
        column: 35,
        span: 224..225,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 10,
        column: 39,
        span: 226..229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 40,
        span: 229..230,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 11,
        column: 8,
        span: 233..238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 11,
        column: 10,
        span: 239..240,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 11,
        span: 240..241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 11,
        column: 15,
        span: 242..245,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
        column: 17,
        span: 246..247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 11,
        column: 23,
        span: 248..253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 24,
        span: 253..254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 11,
        column: 25,
        span: 254..255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 26,
        span: 255..256,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 11,
        column: 30,
        span: 257..260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 31,
        span: 260..261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 9,
        span: 264..270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 10,
        span: 270..271,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 12,
        column: 13,
        span: 271..274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 12,
        column: 15,
        span: 275..276,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 12,
        column: 19,
        span: 277..280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 12,
        column: 26,
        span: 281..287,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 12,
        column: 27,
        span: 287..288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 12,
        column: 31,
        span: 288..292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 32,
        span: 292..293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 12,
        column: 35,
        span: 293..296,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 12,
        column: 36,
        span: 296..297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 12,
        column: 40,
        span: 298..301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 41,
        span: 301..302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 42,
        span: 302..303,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 13,
        column: 0,
        span: 304..307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
        column: 7,
        span: 340..346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 8,
        span: 346..347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 17,
        column: 13,
        span: 347..352,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 17,
        column: 15,
        span: 353..354,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo1'",
        ),
        line: 17,
        column: 22,
        span: 355..361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 23,
        span: 361..362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 7,
        span: 363..369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 8,
        span: 369..370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 18,
        column: 10,
        span: 370..372,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 18,
        column: 12,
        span: 373..374,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 18,
        column: 16,
        span: 375..378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 17,
        span: 378..379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 19,
        column: 7,
        span: 380..386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 8,
        span: 386..387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0alo'",
        ),
        line: 19,
        column: 18,
        span: 387..397,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 19,
        column: 20,
        span: 398..399,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0b'",
        ),
        line: 19,
        column: 29,
        span: 400..408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 30,
        span: 408..409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 7,
        span: 410..416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 8,
        span: 416..417,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0alo\\0\\0'",
        ),
        line: 20,
        column: 22,
        span: 417..431,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 20,
        column: 24,
        span: 432..433,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0alo\\0'",
        ),
        line: 20,
        column: 37,
        span: 434..446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 38,
        span: 446..447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 7,
        span: 448..454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 8,
        span: 454..455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 21,
        column: 13,
        span: 455..460,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 21,
        column: 15,
        span: 461..462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0'",
        ),
        line: 21,
        column: 23,
        span: 463..470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 24,
        span: 470..471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 7,
        span: 472..478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 8,
        span: 478..479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0'",
        ),
        line: 22,
        column: 15,
        span: 479..486,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 22,
        column: 17,
        span: 487..488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 22,
        column: 23,
        span: 489..494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 24,
        span: 494..495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 23,
        column: 7,
        span: 496..502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 8,
        span: 502..503,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        line: 23,
        column: 12,
        span: 503..507,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 23,
        column: 14,
        span: 508..509,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1'",
        ),
        line: 23,
        column: 19,
        span: 510..514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 20,
        span: 514..515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 24,
        column: 7,
        span: 516..522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 8,
        span: 522..523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0'",
        ),
        line: 24,
        column: 14,
        span: 523..529,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 24,
        column: 16,
        span: 530..531,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\1'",
        ),
        line: 24,
        column: 23,
        span: 532..538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 24,
        span: 538..539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 540..546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 546..547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0a\\0a'",
        ),
        line: 25,
        column: 18,
        span: 547..557,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 25,
        column: 21,
        span: 558..560,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0a\\0a'",
        ),
        line: 25,
        column: 32,
        span: 561..571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 33,
        span: 571..572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 573..579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 579..580,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 26,
        column: 11,
        span: 580..583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 13,
        span: 584..585,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0a\\0b'",
        ),
        line: 26,
        column: 23,
        span: 585..595,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 26,
        column: 26,
        span: 596..598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0a\\0a'",
        ),
        line: 26,
        column: 37,
        span: 599..609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 38,
        span: 609..610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 39,
        span: 610..611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 27,
        column: 7,
        span: 612..618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 8,
        span: 618..619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 27,
        column: 16,
        span: 619..627,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 27,
        column: 18,
        span: 628..629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0\\0'",
        ),
        line: 27,
        column: 29,
        span: 630..640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 30,
        span: 640..641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 7,
        span: 642..648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 8,
        span: 648..649,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 28,
        column: 11,
        span: 649..652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 12,
        span: 652..653,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0\\0'",
        ),
        line: 28,
        column: 22,
        span: 653..663,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 28,
        column: 24,
        span: 664..665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 28,
        column: 33,
        span: 666..674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 34,
        span: 674..675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 35,
        span: 675..676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 7,
        span: 677..683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 683..684,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 29,
        column: 16,
        span: 684..692,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 29,
        column: 19,
        span: 693..695,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0\\0'",
        ),
        line: 29,
        column: 30,
        span: 696..706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 31,
        span: 706..707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 7,
        span: 708..714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 714..715,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 30,
        column: 11,
        span: 715..718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 12,
        span: 718..719,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0\\0'",
        ),
        line: 30,
        column: 22,
        span: 719..729,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 30,
        column: 25,
        span: 730..732,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 30,
        column: 34,
        span: 733..741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 35,
        span: 741..742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 36,
        span: 742..743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 744..750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 750..751,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 31,
        column: 16,
        span: 751..759,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 31,
        column: 19,
        span: 760..762,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 31,
        column: 28,
        span: 763..771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 29,
        span: 771..772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 7,
        span: 773..779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 779..780,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 32,
        column: 16,
        span: 780..788,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 32,
        column: 19,
        span: 789..791,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 32,
        column: 28,
        span: 792..800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 29,
        span: 800..801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 7,
        span: 802..808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 8,
        span: 808..809,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 33,
        column: 11,
        span: 809..812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 13,
        span: 813..814,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0b'",
        ),
        line: 33,
        column: 20,
        span: 814..821,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 33,
        column: 22,
        span: 822..823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0a\\0'",
        ),
        line: 33,
        column: 32,
        span: 824..833,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 33,
        span: 833..834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 34,
        span: 834..835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 859..865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 865..866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 36,
        column: 14,
        span: 866..872,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 15,
        span: 872..873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 36,
        column: 18,
        span: 873..876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 19,
        span: 876..877,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 36,
        column: 30,
        span: 877..888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 31,
        span: 888..889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 32,
        span: 888..890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 33,
        span: 890..891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 34,
        span: 890..892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 35,
        span: 892..893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 38,
        span: 894..896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"234\"",
        ),
        line: 36,
        column: 44,
        span: 897..902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 45,
        span: 902..903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 904..910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 910..911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
        column: 14,
        span: 911..917,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 15,
        span: 917..918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 37,
        column: 18,
        span: 918..921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 19,
        span: 921..922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 37,
        column: 30,
        span: 922..933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 31,
        span: 933..934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 32,
        span: 933..935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 33,
        span: 935..936,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 36,
        span: 937..939,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"789\"",
        ),
        line: 37,
        column: 42,
        span: 940..945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 43,
        span: 945..946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 947..953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 953..954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 38,
        column: 14,
        span: 954..960,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 15,
        span: 960..961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 38,
        column: 18,
        span: 961..964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 19,
        span: 964..965,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 38,
        column: 30,
        span: 965..976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 31,
        span: 976..977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 32,
        span: 976..978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 33,
        span: 978..979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 34,
        span: 978..980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 35,
        span: 980..981,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 38,
        span: 982..984,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 38,
        column: 41,
        span: 985..987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 42,
        span: 987..988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 989..995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 995..996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
        column: 14,
        span: 996..1002,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 15,
        span: 1002..1003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 39,
        column: 18,
        span: 1003..1006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 19,
        span: 1006..1007,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 39,
        column: 30,
        span: 1007..1018,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 31,
        span: 1018..1019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 32,
        span: 1018..1020,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 33,
        span: 1020..1021,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 34,
        span: 1020..1022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 35,
        span: 1022..1023,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 38,
        span: 1024..1026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"7\"",
        ),
        line: 39,
        column: 42,
        span: 1027..1030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 43,
        span: 1030..1031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 1032..1038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 1038..1039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 40,
        column: 14,
        span: 1039..1045,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 15,
        span: 1045..1046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 40,
        column: 18,
        span: 1046..1049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 19,
        span: 1049..1050,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 40,
        column: 30,
        span: 1050..1061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 31,
        span: 1061..1062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 32,
        span: 1061..1063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 33,
        span: 1063..1064,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 34,
        span: 1063..1065,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 35,
        span: 1065..1066,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 38,
        span: 1067..1069,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 40,
        column: 41,
        span: 1070..1072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 42,
        span: 1072..1073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 1074..1080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 1080..1081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 41,
        column: 14,
        span: 1081..1087,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 15,
        span: 1087..1088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 41,
        column: 18,
        span: 1088..1091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 19,
        span: 1091..1092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 41,
        column: 30,
        span: 1092..1103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 31,
        span: 1103..1104,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 41,
        column: 32,
        span: 1104..1105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 34,
        span: 1104..1107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 35,
        span: 1107..1108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 37,
        span: 1107..1110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 38,
        span: 1110..1111,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 41,
        span: 1112..1114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 41,
        column: 53,
        span: 1115..1126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 54,
        span: 1126..1127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 7,
        span: 1128..1134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 8,
        span: 1134..1135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 42,
        column: 14,
        span: 1135..1141,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 15,
        span: 1141..1142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 42,
        column: 18,
        span: 1142..1145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 19,
        span: 1145..1146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 42,
        column: 30,
        span: 1146..1157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 31,
        span: 1157..1158,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 32,
        span: 1157..1159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 33,
        span: 1159..1160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 34,
        span: 1159..1161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 35,
        span: 1161..1162,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 38,
        span: 1163..1165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 42,
        column: 50,
        span: 1166..1177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 51,
        span: 1177..1178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
        column: 7,
        span: 1179..1185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 8,
        span: 1185..1186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 43,
        column: 14,
        span: 1186..1192,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 15,
        span: 1192..1193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 43,
        column: 18,
        span: 1193..1196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 19,
        span: 1196..1197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 43,
        column: 30,
        span: 1197..1208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 31,
        span: 1208..1209,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 43,
        column: 32,
        span: 1209..1210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 34,
        span: 1209..1212,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 35,
        span: 1212..1213,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 43,
        column: 36,
        span: 1213..1214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 38,
        span: 1213..1216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 39,
        span: 1216..1217,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 42,
        span: 1218..1220,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 43,
        column: 45,
        span: 1221..1223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 46,
        span: 1223..1224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 7,
        span: 1225..1231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 8,
        span: 1231..1232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 44,
        column: 14,
        span: 1232..1238,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 15,
        span: 1238..1239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 44,
        column: 18,
        span: 1239..1242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 19,
        span: 1242..1243,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 44,
        column: 30,
        span: 1243..1254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 31,
        span: 1254..1255,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 44,
        column: 32,
        span: 1255..1256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 33,
        span: 1255..1257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 34,
        span: 1257..1258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 37,
        span: 1259..1261,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"9\"",
        ),
        line: 44,
        column: 41,
        span: 1262..1265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 42,
        span: 1265..1266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 7,
        span: 1267..1273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 8,
        span: 1273..1274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 45,
        column: 14,
        span: 1274..1280,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 15,
        span: 1280..1281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 45,
        column: 18,
        span: 1281..1284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 19,
        span: 1284..1285,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 45,
        column: 30,
        span: 1285..1296,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 31,
        span: 1296..1297,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 45,
        column: 32,
        span: 1297..1298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 33,
        span: 1297..1299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 34,
        span: 1299..1300,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
        column: 37,
        span: 1301..1303,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"6789\"",
        ),
        line: 45,
        column: 44,
        span: 1304..1310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 45,
        span: 1310..1311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 7,
        span: 1312..1318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 8,
        span: 1318..1319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 46,
        column: 14,
        span: 1319..1325,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 15,
        span: 1325..1326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 46,
        column: 18,
        span: 1326..1329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 19,
        span: 1329..1330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 46,
        column: 30,
        span: 1330..1341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 31,
        span: 1341..1342,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 46,
        column: 32,
        span: 1342..1343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 33,
        span: 1342..1344,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 34,
        span: 1344..1345,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 46,
        column: 36,
        span: 1346..1347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 37,
        span: 1346..1348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 38,
        span: 1348..1349,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 41,
        span: 1350..1352,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"456\"",
        ),
        line: 46,
        column: 47,
        span: 1353..1358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 48,
        span: 1358..1359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1360..1366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1366..1367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 47,
        column: 14,
        span: 1367..1373,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 15,
        span: 1373..1374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 47,
        column: 18,
        span: 1374..1377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 19,
        span: 1377..1378,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 47,
        column: 30,
        span: 1378..1389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 31,
        span: 1389..1390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 47,
        column: 36,
        span: 1391..1395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 37,
        span: 1395..1396,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 47,
        column: 39,
        span: 1397..1398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 40,
        span: 1397..1399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 41,
        span: 1399..1400,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 44,
        span: 1401..1403,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456\"",
        ),
        line: 47,
        column: 53,
        span: 1404..1412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 54,
        span: 1412..1413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 7,
        span: 1414..1420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 8,
        span: 1420..1421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 48,
        column: 14,
        span: 1421..1427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 15,
        span: 1427..1428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 48,
        column: 18,
        span: 1428..1431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 19,
        span: 1431..1432,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 48,
        column: 30,
        span: 1432..1443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 31,
        span: 1443..1444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 48,
        column: 36,
        span: 1445..1449,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 37,
        span: 1449..1450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 48,
        column: 42,
        span: 1451..1455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 43,
        span: 1455..1456,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
        column: 46,
        span: 1457..1459,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 48,
        column: 58,
        span: 1460..1471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 59,
        span: 1471..1472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1473..1479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1479..1480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 49,
        column: 14,
        span: 1480..1486,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 49,
        column: 15,
        span: 1486..1487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 49,
        column: 18,
        span: 1487..1490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 19,
        span: 1490..1491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 49,
        column: 30,
        span: 1491..1502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 31,
        span: 1502..1503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 49,
        column: 36,
        span: 1504..1508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 37,
        span: 1508..1509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 49,
        column: 42,
        span: 1510..1514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 43,
        span: 1514..1515,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 46,
        span: 1516..1518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 49,
        column: 49,
        span: 1519..1521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 50,
        span: 1521..1522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 50,
        column: 7,
        span: 1523..1529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 8,
        span: 1529..1530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 50,
        column: 14,
        span: 1530..1536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 15,
        span: 1536..1537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 50,
        column: 18,
        span: 1537..1540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 19,
        span: 1540..1541,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\000123456789\"",
        ),
        line: 50,
        column: 34,
        span: 1541..1556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 35,
        span: 1556..1557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 36,
        span: 1556..1558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 37,
        span: 1558..1559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 38,
        span: 1558..1560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 39,
        span: 1560..1561,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 42,
        span: 1562..1564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"234\"",
        ),
        line: 50,
        column: 48,
        span: 1565..1570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 49,
        span: 1570..1571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
        column: 7,
        span: 1572..1578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 8,
        span: 1578..1579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 9,
        span: 1579..1580,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\000123456789\"",
        ),
        line: 51,
        column: 24,
        span: 1580..1595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 25,
        span: 1595..1596,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 51,
        column: 26,
        span: 1596..1597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 51,
        column: 29,
        span: 1597..1600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 30,
        span: 1600..1601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 31,
        span: 1600..1602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 32,
        span: 1602..1603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
        column: 35,
        span: 1604..1606,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"789\"",
        ),
        line: 51,
        column: 41,
        span: 1607..1612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 42,
        span: 1612..1613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 7,
        span: 1638..1644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 8,
        span: 1644..1645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 54,
        column: 14,
        span: 1645..1651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 54,
        column: 15,
        span: 1651..1652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 54,
        column: 19,
        span: 1652..1656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 20,
        span: 1656..1657,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 54,
        column: 31,
        span: 1657..1668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 32,
        span: 1668..1669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"345\"",
        ),
        line: 54,
        column: 38,
        span: 1670..1675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 39,
        span: 1675..1676,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
        column: 42,
        span: 1677..1679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 44,
        span: 1679..1681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 45,
        span: 1681..1682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 55,
        column: 2,
        span: 1683..1684,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 3,
        span: 1684..1685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 55,
        column: 4,
        span: 1685..1686,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 55,
        column: 6,
        span: 1687..1688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 55,
        column: 13,
        span: 1689..1695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 55,
        column: 14,
        span: 1695..1696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 55,
        column: 18,
        span: 1696..1700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 19,
        span: 1700..1701,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 55,
        column: 30,
        span: 1701..1712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 31,
        span: 1712..1713,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"345\"",
        ),
        line: 55,
        column: 37,
        span: 1714..1719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 38,
        span: 1719..1720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
        column: 7,
        span: 1721..1727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 8,
        span: 1727..1728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 56,
        column: 14,
        span: 1728..1734,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 15,
        span: 1734..1735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 56,
        column: 18,
        span: 1735..1738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 19,
        span: 1738..1739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 56,
        column: 30,
        span: 1739..1750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 31,
        span: 1750..1751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
        column: 33,
        span: 1752..1753,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 34,
        span: 1753..1754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 56,
        column: 36,
        span: 1755..1756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 37,
        span: 1756..1757,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
        column: 40,
        span: 1758..1760,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"345\"",
        ),
        line: 56,
        column: 46,
        span: 1761..1766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 47,
        span: 1766..1767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
        column: 7,
        span: 1768..1774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 8,
        span: 1774..1775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 57,
        column: 14,
        span: 1775..1781,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 15,
        span: 1781..1782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 57,
        column: 19,
        span: 1782..1786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 20,
        span: 1786..1787,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890123456789\"",
        ),
        line: 57,
        column: 41,
        span: 1787..1808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 42,
        span: 1808..1809,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"345\"",
        ),
        line: 57,
        column: 48,
        span: 1810..1815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 49,
        span: 1815..1816,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
        column: 51,
        span: 1816..1818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 52,
        span: 1818..1819,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 57,
        column: 55,
        span: 1820..1822,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
        column: 57,
        span: 1822..1824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 58,
        span: 1824..1825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 7,
        span: 1826..1832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 8,
        span: 1832..1833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 58,
        column: 14,
        span: 1833..1839,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 15,
        span: 1839..1840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 58,
        column: 19,
        span: 1840..1844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 20,
        span: 1844..1845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890123456789\"",
        ),
        line: 58,
        column: 41,
        span: 1845..1866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 42,
        span: 1866..1867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"345\"",
        ),
        line: 58,
        column: 48,
        span: 1868..1873,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 49,
        span: 1873..1874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 51,
        span: 1874..1876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 52,
        span: 1876..1877,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 55,
        span: 1878..1880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 58,
        span: 1880..1883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 59,
        span: 1883..1884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 1885..1891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 1891..1892,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 59,
        column: 11,
        span: 1892..1895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 59,
        column: 18,
        span: 1896..1902,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 19,
        span: 1902..1903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 59,
        column: 23,
        span: 1903..1907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 24,
        span: 1907..1908,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890123456789\"",
        ),
        line: 59,
        column: 45,
        span: 1908..1929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 46,
        span: 1929..1930,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"346\"",
        ),
        line: 59,
        column: 52,
        span: 1931..1936,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 53,
        span: 1936..1937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 55,
        span: 1937..1939,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 56,
        span: 1939..1940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 57,
        span: 1940..1941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 7,
        span: 1942..1948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 8,
        span: 1948..1949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 60,
        column: 14,
        span: 1949..1955,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 15,
        span: 1955..1956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 60,
        column: 19,
        span: 1956..1960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 20,
        span: 1960..1961,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890123456789\"",
        ),
        line: 60,
        column: 41,
        span: 1961..1982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 42,
        span: 1982..1983,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".45\"",
        ),
        line: 60,
        column: 48,
        span: 1984..1989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 49,
        span: 1989..1990,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 60,
        column: 51,
        span: 1991..1992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 52,
        span: 1991..1993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 53,
        span: 1993..1994,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 56,
        span: 1995..1997,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 59,
        span: 1997..2000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 60,
        span: 2000..2001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 7,
        span: 2002..2008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 8,
        span: 2008..2009,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 61,
        column: 11,
        span: 2009..2012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 61,
        column: 18,
        span: 2013..2019,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 19,
        span: 2019..2020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 61,
        column: 23,
        span: 2020..2024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 24,
        span: 2024..2025,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdefg\"",
        ),
        line: 61,
        column: 33,
        span: 2025..2034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 34,
        span: 2034..2035,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 61,
        column: 39,
        span: 2036..2040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 40,
        span: 2040..2041,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 42,
        span: 2041..2043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 43,
        span: 2043..2044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 45,
        span: 2044..2046,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 46,
        span: 2046..2047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 47,
        span: 2047..2048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 2049..2055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 2055..2056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 62,
        column: 14,
        span: 2056..2062,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 15,
        span: 2062..2063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 62,
        column: 19,
        span: 2063..2067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 20,
        span: 2067..2068,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 62,
        column: 22,
        span: 2068..2070,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 23,
        span: 2070..2071,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 62,
        column: 26,
        span: 2072..2074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 27,
        span: 2074..2075,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 30,
        span: 2076..2078,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 32,
        span: 2078..2080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 33,
        span: 2080..2081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 63,
        column: 7,
        span: 2082..2088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 8,
        span: 2088..2089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 63,
        column: 14,
        span: 2089..2095,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 15,
        span: 2095..2096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 63,
        column: 19,
        span: 2096..2100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 20,
        span: 2100..2101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 63,
        column: 22,
        span: 2101..2103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 23,
        span: 2103..2104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 63,
        column: 26,
        span: 2105..2107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 27,
        span: 2107..2108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 29,
        span: 2108..2110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 30,
        span: 2110..2111,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 63,
        column: 33,
        span: 2112..2114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 35,
        span: 2114..2116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 36,
        span: 2116..2117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 7,
        span: 2118..2124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 8,
        span: 2124..2125,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 64,
        column: 11,
        span: 2125..2128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 64,
        column: 18,
        span: 2129..2135,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
        column: 19,
        span: 2135..2136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 64,
        column: 23,
        span: 2136..2140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 24,
        span: 2140..2141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 64,
        column: 26,
        span: 2141..2143,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 27,
        span: 2143..2144,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 64,
        column: 30,
        span: 2145..2147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 31,
        span: 2147..2148,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 33,
        span: 2148..2150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 34,
        span: 2150..2151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 35,
        span: 2151..2152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 7,
        span: 2153..2159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 8,
        span: 2159..2160,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 65,
        column: 11,
        span: 2160..2163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 65,
        column: 18,
        span: 2164..2170,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 19,
        span: 2170..2171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 65,
        column: 23,
        span: 2171..2175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 24,
        span: 2175..2176,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 65,
        column: 26,
        span: 2176..2178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 27,
        span: 2178..2179,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 65,
        column: 33,
        span: 2180..2185,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 34,
        span: 2185..2186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 36,
        span: 2186..2188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 37,
        span: 2188..2189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 38,
        span: 2189..2190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 7,
        span: 2191..2197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 8,
        span: 2197..2198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 9,
        span: 2198..2199,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo(.)alo'",
        ),
        line: 66,
        column: 20,
        span: 2199..2210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 21,
        span: 2210..2211,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 66,
        column: 22,
        span: 2211..2212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 66,
        column: 26,
        span: 2212..2216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 27,
        span: 2216..2217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.)'",
        ),
        line: 66,
        column: 32,
        span: 2217..2222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 33,
        span: 2222..2223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 35,
        span: 2223..2225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 36,
        span: 2225..2226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 38,
        span: 2226..2228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 39,
        span: 2228..2229,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
        column: 42,
        span: 2230..2232,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 44,
        span: 2232..2234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 45,
        span: 2234..2235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 7,
        span: 2237..2243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 2243..2244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 68,
        column: 14,
        span: 2244..2250,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 15,
        span: 2250..2251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 68,
        column: 18,
        span: 2251..2254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 19,
        span: 2254..2255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 68,
        column: 21,
        span: 2255..2257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 22,
        span: 2257..2258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 68,
        column: 25,
        span: 2259..2261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 27,
        span: 2261..2263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 28,
        span: 2263..2264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 2265..2271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 2271..2272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 69,
        column: 14,
        span: 2272..2278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 15,
        span: 2278..2279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 69,
        column: 18,
        span: 2279..2282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 19,
        span: 2282..2283,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        line: 69,
        column: 27,
        span: 2283..2291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 28,
        span: 2291..2292,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 31,
        span: 2293..2295,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 33,
        span: 2295..2297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 34,
        span: 2297..2298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 7,
        span: 2299..2305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 8,
        span: 2305..2306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 70,
        column: 14,
        span: 2306..2312,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 15,
        span: 2312..2313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 70,
        column: 18,
        span: 2313..2316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 19,
        span: 2316..2317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890\"",
        ),
        line: 70,
        column: 31,
        span: 2317..2329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 32,
        span: 2329..2330,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 35,
        span: 2331..2333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 38,
        span: 2333..2336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 39,
        span: 2336..2337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
        column: 7,
        span: 2339..2345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 8,
        span: 2345..2346,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 72,
        column: 9,
        span: 2346..2347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 72,
        column: 11,
        span: 2347..2349,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 72,
        column: 14,
        span: 2350..2352,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 16,
        span: 2352..2354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 17,
        span: 2354..2355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 73,
        column: 7,
        span: 2356..2362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 8,
        span: 2362..2363,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 73,
        column: 9,
        span: 2363..2364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        line: 73,
        column: 17,
        span: 2364..2372,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
        column: 20,
        span: 2373..2375,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 22,
        span: 2375..2377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 23,
        span: 2377..2378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
        column: 7,
        span: 2379..2385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 8,
        span: 2385..2386,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 74,
        column: 9,
        span: 2386..2387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890\"",
        ),
        line: 74,
        column: 21,
        span: 2387..2399,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 24,
        span: 2400..2402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 27,
        span: 2402..2405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 28,
        span: 2405..2406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 77,
        column: 7,
        span: 2443..2449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 8,
        span: 2449..2450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 77,
        column: 14,
        span: 2450..2456,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 77,
        column: 15,
        span: 2456..2457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 77,
        column: 19,
        span: 2457..2461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 20,
        span: 2461..2462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 77,
        column: 23,
        span: 2462..2465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 24,
        span: 2465..2466,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 27,
        span: 2467..2469,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 30,
        span: 2469..2472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 31,
        span: 2472..2473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 78,
        column: 7,
        span: 2474..2480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 8,
        span: 2480..2481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 78,
        column: 14,
        span: 2481..2487,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 78,
        column: 15,
        span: 2487..2488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 78,
        column: 19,
        span: 2488..2492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 20,
        span: 2492..2493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4\"",
        ),
        line: 78,
        column: 26,
        span: 2493..2499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 27,
        span: 2499..2500,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 78,
        column: 29,
        span: 2501..2502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 33,
        span: 2502..2506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 34,
        span: 2506..2507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 79,
        column: 7,
        span: 2508..2514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 8,
        span: 2514..2515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 79,
        column: 14,
        span: 2515..2521,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 79,
        column: 15,
        span: 2521..2522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 79,
        column: 19,
        span: 2522..2526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 20,
        span: 2526..2527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 79,
        column: 26,
        span: 2527..2533,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 79,
        column: 27,
        span: 2533..2534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 79,
        column: 31,
        span: 2534..2538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 32,
        span: 2538..2539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
        column: 35,
        span: 2538..2542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 36,
        span: 2542..2543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 37,
        span: 2543..2544,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 79,
        column: 40,
        span: 2545..2547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
        column: 44,
        span: 2547..2551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 45,
        span: 2551..2552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
        column: 7,
        span: 2553..2559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 8,
        span: 2559..2560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 80,
        column: 14,
        span: 2560..2566,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 15,
        span: 2566..2567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 80,
        column: 19,
        span: 2567..2571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 20,
        span: 2571..2572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 80,
        column: 26,
        span: 2572..2578,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 27,
        span: 2578..2579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 80,
        column: 31,
        span: 2579..2583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 32,
        span: 2583..2584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 33,
        span: 2583..2585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 34,
        span: 2585..2586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 35,
        span: 2586..2587,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 38,
        span: 2588..2590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 40,
        span: 2590..2592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 41,
        span: 2592..2593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
        column: 7,
        span: 2594..2600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 8,
        span: 2600..2601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 81,
        column: 14,
        span: 2601..2607,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 15,
        span: 2607..2608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 81,
        column: 19,
        span: 2608..2612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 20,
        span: 2612..2613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 81,
        column: 24,
        span: 2613..2617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 25,
        span: 2617..2618,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
        column: 28,
        span: 2619..2621,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 30,
        span: 2621..2623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 31,
        span: 2623..2624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 7,
        span: 2625..2631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 8,
        span: 2631..2632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 82,
        column: 14,
        span: 2632..2638,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 15,
        span: 2638..2639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 82,
        column: 19,
        span: 2639..2643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 20,
        span: 2643..2644,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0alo\\0x\"",
        ),
        line: 82,
        column: 32,
        span: 2644..2656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 33,
        span: 2656..2657,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 82,
        column: 35,
        span: 2658..2659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 36,
        span: 2658..2660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 37,
        span: 2660..2661,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 40,
        span: 2662..2664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 82,
        column: 47,
        span: 2665..2671,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 48,
        span: 2671..2672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 82,
        column: 52,
        span: 2672..2676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 53,
        span: 2676..2677,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 82,
        column: 56,
        span: 2677..2680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 57,
        span: 2680..2681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 58,
        span: 2681..2682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 83,
        column: 7,
        span: 2683..2689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 8,
        span: 2689..2690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 83,
        column: 14,
        span: 2690..2696,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
        column: 15,
        span: 2696..2697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 83,
        column: 19,
        span: 2697..2701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 20,
        span: 2701..2702,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ba\"",
        ),
        line: 83,
        column: 24,
        span: 2702..2706,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 25,
        span: 2706..2707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 27,
        span: 2707..2709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 28,
        span: 2709..2710,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 83,
        column: 31,
        span: 2711..2713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 34,
        span: 2713..2716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 35,
        span: 2716..2717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
        column: 7,
        span: 2718..2724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 8,
        span: 2724..2725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 84,
        column: 14,
        span: 2725..2731,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 84,
        column: 15,
        span: 2731..2732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 84,
        column: 19,
        span: 2732..2736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 20,
        span: 2736..2737,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n\"",
        ),
        line: 84,
        column: 26,
        span: 2737..2743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 27,
        span: 2743..2744,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 29,
        span: 2744..2746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 30,
        span: 2746..2747,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 84,
        column: 32,
        span: 2748..2749,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 33,
        span: 2748..2750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 34,
        span: 2750..2751,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 37,
        span: 2752..2754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 40,
        span: 2754..2757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 41,
        span: 2757..2758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
        column: 7,
        span: 2759..2765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 8,
        span: 2765..2766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 85,
        column: 14,
        span: 2766..2772,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
        column: 15,
        span: 2772..2773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 85,
        column: 19,
        span: 2773..2777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 20,
        span: 2777..2778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n\"",
        ),
        line: 85,
        column: 26,
        span: 2778..2784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 27,
        span: 2784..2785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 29,
        span: 2785..2787,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 30,
        span: 2787..2788,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 32,
        span: 2788..2790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 33,
        span: 2790..2791,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 36,
        span: 2792..2794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 39,
        span: 2794..2797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 40,
        span: 2797..2798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 86,
        column: 7,
        span: 2799..2805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 8,
        span: 2805..2806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 86,
        column: 14,
        span: 2806..2812,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
        column: 15,
        span: 2812..2813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 86,
        column: 19,
        span: 2813..2817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 20,
        span: 2817..2818,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 86,
        column: 22,
        span: 2818..2820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 23,
        span: 2820..2821,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 86,
        column: 26,
        span: 2822..2824,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 86,
        column: 30,
        span: 2825..2828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 31,
        span: 2828..2829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 7,
        span: 2830..2836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 8,
        span: 2836..2837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 87,
        column: 14,
        span: 2837..2843,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 87,
        column: 15,
        span: 2843..2844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 87,
        column: 19,
        span: 2844..2848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 20,
        span: 2848..2849,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 87,
        column: 24,
        span: 2849..2853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 25,
        span: 2853..2854,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 87,
        column: 27,
        span: 2855..2856,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 28,
        span: 2855..2857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 29,
        span: 2857..2858,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 32,
        span: 2859..2861,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 87,
        column: 36,
        span: 2862..2865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 37,
        span: 2865..2866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 7,
        span: 2867..2873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 8,
        span: 2873..2874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 88,
        column: 14,
        span: 2874..2880,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 15,
        span: 2880..2881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 88,
        column: 19,
        span: 2881..2885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 20,
        span: 2885..2886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 88,
        column: 24,
        span: 2886..2890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 25,
        span: 2890..2891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 27,
        span: 2891..2893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 28,
        span: 2893..2894,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 31,
        span: 2895..2897,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 88,
        column: 35,
        span: 2898..2901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 36,
        span: 2901..2902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 89,
        column: 7,
        span: 2903..2909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 8,
        span: 2909..2910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 89,
        column: 14,
        span: 2910..2916,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 15,
        span: 2916..2917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 89,
        column: 19,
        span: 2917..2921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 20,
        span: 2921..2922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 89,
        column: 24,
        span: 2922..2926,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 25,
        span: 2926..2927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 27,
        span: 2927..2929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 28,
        span: 2929..2930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 31,
        span: 2930..2933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 32,
        span: 2933..2934,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
        column: 35,
        span: 2935..2937,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 89,
        column: 39,
        span: 2938..2941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 40,
        span: 2941..2942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 90,
        column: 7,
        span: 2943..2949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 8,
        span: 2949..2950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 90,
        column: 14,
        span: 2950..2956,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 90,
        column: 15,
        span: 2956..2957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 90,
        column: 19,
        span: 2957..2961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 20,
        span: 2961..2962,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 90,
        column: 24,
        span: 2962..2966,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 25,
        span: 2966..2967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 27,
        span: 2967..2969,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 28,
        span: 2969..2970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 30,
        span: 2970..2972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 31,
        span: 2972..2973,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 90,
        column: 34,
        span: 2974..2976,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 90,
        column: 38,
        span: 2977..2980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 39,
        span: 2980..2981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 91,
        column: 7,
        span: 2982..2988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 8,
        span: 2988..2989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 91,
        column: 14,
        span: 2989..2995,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 15,
        span: 2995..2996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 91,
        column: 19,
        span: 2996..3000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 20,
        span: 3000..3001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 21,
        span: 3001..3002,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 91,
        column: 24,
        span: 3003..3005,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 91,
        column: 27,
        span: 3006..3008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 28,
        span: 3008..3009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
        column: 7,
        span: 3010..3016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 8,
        span: 3016..3017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 92,
        column: 14,
        span: 3017..3023,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
        column: 15,
        span: 3023..3024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 92,
        column: 19,
        span: 3024..3028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 20,
        span: 3028..3029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 21,
        span: 3028..3030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 22,
        span: 3030..3031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 26,
        span: 3031..3035,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 27,
        span: 3035..3036,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 29,
        span: 3036..3038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 30,
        span: 3038..3039,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 33,
        span: 3040..3042,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\255\\0\"",
        ),
        line: 92,
        column: 44,
        span: 3043..3053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 45,
        span: 3053..3054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 93,
        column: 7,
        span: 3055..3061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 8,
        span: 3061..3062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 93,
        column: 14,
        span: 3062..3068,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 15,
        span: 3068..3069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 93,
        column: 19,
        span: 3069..3073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 20,
        span: 3073..3074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
        column: 21,
        span: 3073..3075,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 22,
        span: 3075..3076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 93,
        column: 29,
        span: 3077..3083,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 30,
        span: 3083..3084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 93,
        column: 34,
        span: 3084..3088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 35,
        span: 3088..3089,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4\"",
        ),
        line: 93,
        column: 41,
        span: 3089..3095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 42,
        span: 3095..3096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 43,
        span: 3096..3097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
        column: 45,
        span: 3097..3099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 46,
        span: 3099..3100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 93,
        column: 49,
        span: 3101..3103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\xe4\\0\"",
        ),
        line: 93,
        column: 60,
        span: 3104..3114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 61,
        span: 3114..3115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 94,
        column: 7,
        span: 3116..3122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 8,
        span: 3122..3123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 94,
        column: 14,
        span: 3123..3129,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
        column: 15,
        span: 3129..3130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 94,
        column: 19,
        span: 3130..3134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 20,
        span: 3134..3135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 94,
        column: 26,
        span: 3135..3141,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
        column: 27,
        span: 3141..3142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 94,
        column: 31,
        span: 3142..3146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 32,
        span: 3146..3147,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4l\\0óu\"",
        ),
        line: 94,
        column: 43,
        span: 3147..3158,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 44,
        span: 3158..3159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 46,
        span: 3159..3161,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 47,
        span: 3161..3162,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 94,
        column: 49,
        span: 3163..3164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 50,
        span: 3163..3165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 51,
        span: 3165..3166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 52,
        span: 3166..3167,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
        column: 55,
        span: 3168..3170,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4l\\0óu\"",
        ),
        line: 94,
        column: 67,
        span: 3171..3182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 68,
        span: 3182..3183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 95,
        column: 7,
        span: 3184..3190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 8,
        span: 3190..3191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 95,
        column: 14,
        span: 3191..3197,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
        column: 15,
        span: 3197..3198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 95,
        column: 19,
        span: 3198..3202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 20,
        span: 3202..3203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 95,
        column: 26,
        span: 3203..3209,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
        column: 27,
        span: 3209..3210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 95,
        column: 31,
        span: 3210..3214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 32,
        span: 3214..3215,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4l\\0óu\"",
        ),
        line: 95,
        column: 43,
        span: 3215..3226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 44,
        span: 3226..3227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 46,
        span: 3227..3229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 47,
        span: 3229..3230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 49,
        span: 3230..3232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 50,
        span: 3232..3233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 51,
        span: 3233..3234,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 54,
        span: 3235..3237,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 95,
        column: 57,
        span: 3238..3240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 58,
        span: 3240..3241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 7,
        span: 3242..3248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 8,
        span: 3248..3249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 96,
        column: 14,
        span: 3249..3255,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
        column: 15,
        span: 3255..3256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 96,
        column: 19,
        span: 3256..3260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 20,
        span: 3260..3261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 96,
        column: 26,
        span: 3261..3267,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
        column: 27,
        span: 3267..3268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 96,
        column: 31,
        span: 3268..3272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 32,
        span: 3272..3273,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4l\\0óu\"",
        ),
        line: 96,
        column: 43,
        span: 3273..3284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 44,
        span: 3284..3285,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 96,
        column: 46,
        span: 3286..3287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
        column: 48,
        span: 3286..3289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 49,
        span: 3289..3290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
        column: 53,
        span: 3290..3294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 54,
        span: 3294..3295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 55,
        span: 3295..3296,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
        column: 58,
        span: 3297..3299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4l\\0óu\"",
        ),
        line: 96,
        column: 70,
        span: 3300..3311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 71,
        span: 3311..3312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 98,
        column: 11,
        span: 3314..3324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 12,
        span: 3324..3325,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of range\"",
        ),
        line: 98,
        column: 26,
        span: 3325..3339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 27,
        span: 3339..3340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 98,
        column: 34,
        span: 3341..3347,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 98,
        column: 35,
        span: 3347..3348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 98,
        column: 39,
        span: 3348..3352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 40,
        span: 3352..3353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 44,
        span: 3353..3357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 45,
        span: 3357..3358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 99,
        column: 11,
        span: 3359..3369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 12,
        span: 3369..3370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of range\"",
        ),
        line: 99,
        column: 26,
        span: 3370..3384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 27,
        span: 3384..3385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 99,
        column: 34,
        span: 3386..3392,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 35,
        span: 3392..3393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 99,
        column: 39,
        span: 3393..3397,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 40,
        span: 3397..3398,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 99,
        column: 42,
        span: 3399..3400,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 43,
        span: 3399..3401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 44,
        span: 3401..3402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 100,
        column: 11,
        span: 3403..3413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 12,
        span: 3413..3414,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of range\"",
        ),
        line: 100,
        column: 26,
        span: 3414..3428,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 27,
        span: 3428..3429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 100,
        column: 34,
        span: 3430..3436,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 100,
        column: 35,
        span: 3436..3437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 100,
        column: 39,
        span: 3437..3441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 40,
        span: 3441..3442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 100,
        column: 45,
        span: 3443..3447,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 100,
        column: 46,
        span: 3447..3448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 100,
        column: 56,
        span: 3448..3458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 57,
        span: 3458..3459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 101,
        column: 11,
        span: 3460..3470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 12,
        span: 3470..3471,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of range\"",
        ),
        line: 101,
        column: 26,
        span: 3471..3485,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 27,
        span: 3485..3486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 101,
        column: 34,
        span: 3487..3493,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
        column: 35,
        span: 3493..3494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 101,
        column: 39,
        span: 3494..3498,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 40,
        span: 3498..3499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 101,
        column: 45,
        span: 3500..3504,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
        column: 46,
        span: 3504..3505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        line: 101,
        column: 56,
        span: 3505..3515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 57,
        span: 3515..3516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 103,
        column: 7,
        span: 3518..3524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 8,
        span: 3524..3525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 103,
        column: 14,
        span: 3525..3531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
        column: 15,
        span: 3531..3532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        line: 103,
        column: 20,
        span: 3532..3537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 21,
        span: 3537..3538,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\\0c\"",
        ),
        line: 103,
        column: 28,
        span: 3538..3545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 29,
        span: 3545..3546,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 103,
        column: 32,
        span: 3547..3549,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AB\\0C\"",
        ),
        line: 103,
        column: 40,
        span: 3550..3557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 41,
        span: 3557..3558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
        column: 7,
        span: 3559..3565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 8,
        span: 3565..3566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 104,
        column: 14,
        span: 3566..3572,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 104,
        column: 15,
        span: 3572..3573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lower",
        ),
        line: 104,
        column: 20,
        span: 3573..3578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 21,
        span: 3578..3579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0ABCc%$\"",
        ),
        line: 104,
        column: 31,
        span: 3579..3589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 32,
        span: 3589..3590,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 104,
        column: 35,
        span: 3591..3593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0abcc%$\"",
        ),
        line: 104,
        column: 46,
        span: 3594..3604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 47,
        span: 3604..3605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 105,
        column: 7,
        span: 3606..3612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 8,
        span: 3612..3613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 105,
        column: 14,
        span: 3613..3619,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 15,
        span: 3619..3620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 105,
        column: 18,
        span: 3620..3623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 19,
        span: 3623..3624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'teste'",
        ),
        line: 105,
        column: 26,
        span: 3624..3631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 27,
        span: 3631..3632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 29,
        span: 3632..3634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 30,
        span: 3634..3635,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 105,
        column: 33,
        span: 3636..3638,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 105,
        column: 36,
        span: 3639..3641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 37,
        span: 3641..3642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 106,
        column: 7,
        span: 3643..3649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 8,
        span: 3649..3650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 106,
        column: 14,
        span: 3650..3656,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 106,
        column: 15,
        span: 3656..3657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 106,
        column: 18,
        span: 3657..3660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 19,
        span: 3660..3661,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'tés\\00tê'",
        ),
        line: 106,
        column: 29,
        span: 3661..3671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 30,
        span: 3671..3672,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 32,
        span: 3672..3674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 33,
        span: 3674..3675,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 106,
        column: 36,
        span: 3676..3678,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'tés\\0têtés\\000tê'",
        ),
        line: 106,
        column: 55,
        span: 3679..3697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 56,
        span: 3697..3698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 107,
        column: 7,
        span: 3699..3705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 8,
        span: 3705..3706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 107,
        column: 14,
        span: 3706..3712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
        column: 15,
        span: 3712..3713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 107,
        column: 18,
        span: 3713..3716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 19,
        span: 3716..3717,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 107,
        column: 21,
        span: 3717..3719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 22,
        span: 3719..3720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 25,
        span: 3720..3723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 26,
        span: 3723..3724,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 107,
        column: 29,
        span: 3725..3727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 107,
        column: 32,
        span: 3728..3730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 33,
        span: 3730..3731,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 109,
        column: 3,
        span: 3733..3735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 109,
        column: 10,
        span: 3736..3742,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 109,
        column: 11,
        span: 3742..3743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 109,
        column: 19,
        span: 3743..3751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 20,
        span: 3751..3752,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        line: 109,
        column: 23,
        span: 3752..3755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 24,
        span: 3755..3756,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 27,
        span: 3757..3759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 29,
        span: 3759..3761,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 109,
        column: 0,
        span: 3762..3766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 111,
        column: 13,
        span: 3817..3827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 14,
        span: 3827..3828,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too large\"",
        ),
        line: 111,
        column: 25,
        span: 3828..3839,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 26,
        span: 3839..3840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 111,
        column: 33,
        span: 3841..3847,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
        column: 34,
        span: 3847..3848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 111,
        column: 37,
        span: 3848..3851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 38,
        span: 3851..3852,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        line: 111,
        column: 43,
        span: 3853..3857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 44,
        span: 3857..3858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 46,
        span: 3859..3860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 47,
        span: 3859..3861,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 111,
        column: 50,
        span: 3862..3864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 53,
        span: 3864..3867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 54,
        span: 3867..3868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 55,
        span: 3868..3869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 112,
        column: 13,
        span: 3872..3882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 14,
        span: 3882..3883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too large\"",
        ),
        line: 112,
        column: 25,
        span: 3883..3894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 26,
        span: 3894..3895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 112,
        column: 33,
        span: 3896..3902,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 34,
        span: 3902..3903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 112,
        column: 37,
        span: 3903..3906,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 38,
        span: 3906..3907,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 112,
        column: 42,
        span: 3908..3911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 43,
        span: 3911..3912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 45,
        span: 3913..3914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 46,
        span: 3913..3915,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 112,
        column: 49,
        span: 3916..3918,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 52,
        span: 3918..3921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 53,
        span: 3921..3922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 54,
        span: 3922..3923,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "','",
        ),
        line: 112,
        column: 58,
        span: 3924..3927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 59,
        span: 3927..3928,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
        column: 0,
        span: 3929..3932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 116,
        column: 7,
        span: 3964..3970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 8,
        span: 3970..3971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 116,
        column: 14,
        span: 3971..3977,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 116,
        column: 15,
        span: 3977..3978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 116,
        column: 18,
        span: 3978..3981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 19,
        span: 3981..3982,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'teste'",
        ),
        line: 116,
        column: 26,
        span: 3982..3989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 27,
        span: 3989..3990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 29,
        span: 3990..3992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 30,
        span: 3992..3993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 116,
        column: 37,
        span: 3994..4000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 38,
        span: 4000..4001,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 116,
        column: 41,
        span: 4002..4004,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 116,
        column: 44,
        span: 4005..4007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 45,
        span: 4007..4008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 7,
        span: 4009..4015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 8,
        span: 4015..4016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 117,
        column: 14,
        span: 4016..4022,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 117,
        column: 15,
        span: 4022..4023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 117,
        column: 18,
        span: 4023..4026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 19,
        span: 4026..4027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'teste'",
        ),
        line: 117,
        column: 26,
        span: 4027..4034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 27,
        span: 4034..4035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 29,
        span: 4035..4037,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 30,
        span: 4037..4038,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 117,
        column: 37,
        span: 4039..4045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 38,
        span: 4045..4046,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 41,
        span: 4047..4049,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'teste'",
        ),
        line: 117,
        column: 49,
        span: 4050..4057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 50,
        span: 4057..4058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
        column: 7,
        span: 4059..4065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 8,
        span: 4065..4066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 118,
        column: 14,
        span: 4066..4072,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
        column: 15,
        span: 4072..4073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 118,
        column: 18,
        span: 4073..4076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 19,
        span: 4076..4077,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0\\1'",
        ),
        line: 118,
        column: 27,
        span: 4077..4085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 28,
        span: 4085..4086,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 30,
        span: 4086..4088,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 31,
        span: 4088..4089,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0'",
        ),
        line: 118,
        column: 38,
        span: 4090..4096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 39,
        span: 4096..4097,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 42,
        span: 4098..4100,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0\\1\\0\\0\\1\\0\\1'",
        ),
        line: 118,
        column: 61,
        span: 4101..4119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 62,
        span: 4119..4120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
        column: 7,
        span: 4121..4127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 8,
        span: 4127..4128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 119,
        column: 14,
        span: 4128..4134,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 119,
        column: 15,
        span: 4134..4135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 119,
        column: 18,
        span: 4135..4138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 19,
        span: 4138..4139,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 119,
        column: 21,
        span: 4139..4141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 22,
        span: 4141..4142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 25,
        span: 4142..4145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 26,
        span: 4145..4146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 119,
        column: 30,
        span: 4147..4150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 31,
        span: 4150..4151,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 34,
        span: 4152..4154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 119,
        column: 41,
        span: 4155..4161,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 119,
        column: 42,
        span: 4161..4162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 119,
        column: 45,
        span: 4162..4165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 46,
        span: 4165..4166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 119,
        column: 49,
        span: 4166..4169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 50,
        span: 4169..4170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 52,
        span: 4170..4172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 53,
        span: 4172..4173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 54,
        span: 4173..4174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
        column: 7,
        span: 4175..4181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 8,
        span: 4181..4182,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 120,
        column: 11,
        span: 4182..4185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 120,
        column: 17,
        span: 4186..4191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 18,
        span: 4191..4192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 120,
        column: 24,
        span: 4192..4198,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 120,
        column: 25,
        span: 4198..4199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 120,
        column: 28,
        span: 4199..4202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 29,
        span: 4202..4203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aa\"",
        ),
        line: 120,
        column: 34,
        span: 4204..4208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 35,
        span: 4208..4209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 120,
        column: 40,
        span: 4210..4214,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 120,
        column: 43,
        span: 4215..4217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 45,
        span: 4217..4219,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 120,
        column: 47,
        span: 4220..4221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 50,
        span: 4221..4224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 51,
        span: 4224..4225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 52,
        span: 4225..4226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
        column: 7,
        span: 4227..4233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 8,
        span: 4233..4234,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 121,
        column: 11,
        span: 4234..4237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 121,
        column: 17,
        span: 4238..4243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 18,
        span: 4243..4244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 121,
        column: 24,
        span: 4244..4250,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
        column: 25,
        span: 4250..4251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 121,
        column: 28,
        span: 4251..4254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 29,
        span: 4254..4255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 121,
        column: 32,
        span: 4256..4258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 33,
        span: 4258..4259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 121,
        column: 38,
        span: 4260..4264,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 121,
        column: 41,
        span: 4265..4267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 43,
        span: 4267..4269,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 121,
        column: 45,
        span: 4270..4271,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 48,
        span: 4271..4274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 49,
        span: 4274..4275,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aa\"",
        ),
        line: 121,
        column: 54,
        span: 4276..4280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 55,
        span: 4280..4281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 56,
        span: 4281..4282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 123,
        column: 7,
        span: 4284..4290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 8,
        span: 4290..4291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 123,
        column: 14,
        span: 4291..4297,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 15,
        span: 4297..4298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        line: 123,
        column: 22,
        span: 4298..4305,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 123,
        column: 24,
        span: 4305..4307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 123,
        column: 27,
        span: 4308..4310,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 123,
        column: 30,
        span: 4311..4313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 31,
        span: 4313..4314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 124,
        column: 7,
        span: 4315..4321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 8,
        span: 4321..4322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 124,
        column: 14,
        span: 4322..4328,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 124,
        column: 15,
        span: 4328..4329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        line: 124,
        column: 22,
        span: 4329..4336,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\1\\2\\3\"",
        ),
        line: 124,
        column: 32,
        span: 4336..4346,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 35,
        span: 4347..4349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\3\\2\\1\\0\"",
        ),
        line: 124,
        column: 46,
        span: 4350..4360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 47,
        span: 4360..4361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 7,
        span: 4362..4368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 8,
        span: 4368..4369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 125,
        column: 14,
        span: 4369..4375,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 15,
        span: 4375..4376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        line: 125,
        column: 22,
        span: 4376..4383,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0001234\"",
        ),
        line: 125,
        column: 32,
        span: 4383..4393,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 35,
        span: 4394..4396,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4321\\0\"",
        ),
        line: 125,
        column: 44,
        span: 4397..4405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 45,
        span: 4405..4406,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 127,
        column: 4,
        span: 4408..4411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 127,
        column: 6,
        span: 4412..4413,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 127,
        column: 7,
        span: 4413..4414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 8,
        span: 4413..4415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 9,
        span: 4415..4416,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 11,
        span: 4415..4418,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 127,
        column: 14,
        span: 4419..4421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 127,
        column: 21,
        span: 4422..4428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 22,
        span: 4428..4429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 127,
        column: 28,
        span: 4429..4435,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 127,
        column: 29,
        span: 4435..4436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 127,
        column: 32,
        span: 4436..4439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 33,
        span: 4439..4440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 127,
        column: 39,
        span: 4440..4446,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 127,
        column: 40,
        span: 4446..4447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 127,
        column: 43,
        span: 4447..4450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 44,
        span: 4450..4451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 127,
        column: 47,
        span: 4451..4454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 48,
        span: 4454..4455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 127,
        column: 50,
        span: 4456..4457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 51,
        span: 4457..4458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 52,
        span: 4458..4459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 127,
        column: 55,
        span: 4460..4462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 127,
        column: 57,
        span: 4463..4464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 58,
        span: 4464..4465,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 127,
        column: 0,
        span: 4466..4469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 129,
        column: 7,
        span: 4471..4477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 8,
        span: 4477..4478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 129,
        column: 12,
        span: 4478..4482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 13,
        span: 4482..4483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 129,
        column: 21,
        span: 4483..4491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 22,
        span: 4491..4492,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 129,
        column: 25,
        span: 4492..4495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 26,
        span: 4495..4496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 27,
        span: 4496..4497,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
        column: 30,
        span: 4498..4500,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 129,
        column: 39,
        span: 4501..4509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 40,
        span: 4509..4510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 130,
        column: 7,
        span: 4511..4517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 8,
        span: 4517..4518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 130,
        column: 12,
        span: 4518..4522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 13,
        span: 4522..4523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 130,
        column: 21,
        span: 4523..4531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 22,
        span: 4531..4532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 24,
        span: 4531..4534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 25,
        span: 4534..4535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 26,
        span: 4535..4536,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
        column: 29,
        span: 4537..4539,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 130,
        column: 38,
        span: 4540..4548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 39,
        span: 4548..4549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
        column: 7,
        span: 4550..4556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 8,
        span: 4556..4557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 131,
        column: 14,
        span: 4557..4563,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
        column: 15,
        span: 4563..4564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 131,
        column: 19,
        span: 4564..4568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 20,
        span: 4568..4569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 131,
        column: 28,
        span: 4569..4577,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 131,
        column: 29,
        span: 4577..4578,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 131,
        column: 30,
        span: 4578..4579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 31,
        span: 4579..4580,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table:'",
        ),
        line: 131,
        column: 40,
        span: 4581..4589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 41,
        span: 4589..4590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 42,
        span: 4590..4591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 132,
        column: 7,
        span: 4592..4598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 8,
        span: 4598..4599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 132,
        column: 14,
        span: 4599..4605,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 132,
        column: 15,
        span: 4605..4606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 132,
        column: 19,
        span: 4606..4610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 20,
        span: 4610..4611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 132,
        column: 28,
        span: 4611..4619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 29,
        span: 4619..4620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 132,
        column: 34,
        span: 4620..4625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 35,
        span: 4625..4626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 36,
        span: 4626..4627,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function:'",
        ),
        line: 132,
        column: 48,
        span: 4628..4639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 49,
        span: 4639..4640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 50,
        span: 4640..4641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 133,
        column: 7,
        span: 4642..4648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 8,
        span: 4648..4649,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 133,
        column: 9,
        span: 4649..4650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 133,
        column: 17,
        span: 4650..4658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 18,
        span: 4658..4659,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        line: 133,
        column: 22,
        span: 4659..4663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 23,
        span: 4663..4664,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
        column: 26,
        span: 4665..4667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
        column: 28,
        span: 4667..4669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 29,
        span: 4669..4670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
        column: 7,
        span: 4671..4677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 8,
        span: 4677..4678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 134,
        column: 16,
        span: 4678..4686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 17,
        span: 4686..4687,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 134,
        column: 21,
        span: 4687..4691,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 22,
        span: 4691..4692,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 25,
        span: 4693..4695,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"true\"",
        ),
        line: 134,
        column: 32,
        span: 4696..4702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 33,
        span: 4702..4703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 135,
        column: 7,
        span: 4704..4710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 8,
        span: 4710..4711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 135,
        column: 16,
        span: 4711..4719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 17,
        span: 4719..4720,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 135,
        column: 22,
        span: 4720..4725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 23,
        span: 4725..4726,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
        column: 26,
        span: 4727..4729,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"false\"",
        ),
        line: 135,
        column: 34,
        span: 4730..4737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 35,
        span: 4737..4738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 136,
        column: 7,
        span: 4739..4745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 8,
        span: 4745..4746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 136,
        column: 16,
        span: 4746..4754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 17,
        span: 4754..4755,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 136,
        column: 18,
        span: 4755..4756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1203",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 22,
        span: 4755..4760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 23,
        span: 4760..4761,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 136,
        column: 26,
        span: 4762..4764,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-1203\"",
        ),
        line: 136,
        column: 34,
        span: 4765..4772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 35,
        span: 4772..4773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 7,
        span: 4774..4780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 8,
        span: 4780..4781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 137,
        column: 16,
        span: 4781..4789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 17,
        span: 4789..4790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1203",
                    after_decimal: ".125",
                },
            ),
        ),
        line: 137,
        column: 25,
        span: 4789..4798,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 26,
        span: 4798..4799,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 29,
        span: 4800..4802,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1203.125\"",
        ),
        line: 137,
        column: 40,
        span: 4803..4813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 41,
        span: 4813..4814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 4815..4821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 4821..4822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 138,
        column: 16,
        span: 4822..4830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 17,
        span: 4830..4831,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 138,
        column: 18,
        span: 4831..4832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 138,
        column: 21,
        span: 4831..4835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 22,
        span: 4835..4836,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 25,
        span: 4837..4839,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-0.5\"",
        ),
        line: 138,
        column: 32,
        span: 4840..4846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 33,
        span: 4846..4847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 7,
        span: 4848..4854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 8,
        span: 4854..4855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 139,
        column: 16,
        span: 4855..4863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 17,
        span: 4863..4864,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 139,
        column: 18,
        span: 4864..4865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32767",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 23,
        span: 4864..4870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 24,
        span: 4870..4871,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
        column: 27,
        span: 4872..4874,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-32767\"",
        ),
        line: 139,
        column: 36,
        span: 4875..4883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 37,
        span: 4883..4884,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 140,
        column: 3,
        span: 4885..4887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 140,
        column: 8,
        span: 4888..4892,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 9,
        span: 4892..4893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 140,
        column: 18,
        span: 4893..4902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 19,
        span: 4902..4903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2147483647",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 29,
        span: 4902..4913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 30,
        span: 4913..4914,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 140,
        column: 35,
        span: 4915..4919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 9,
        span: 4950..4956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 10,
        span: 4956..4957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 141,
        column: 18,
        span: 4957..4965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 19,
        span: 4965..4966,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 141,
        column: 20,
        span: 4966..4967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2147483647",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 30,
        span: 4966..4977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 31,
        span: 4977..4978,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 34,
        span: 4979..4981,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-2147483647\"",
        ),
        line: 141,
        column: 48,
        span: 4982..4995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 49,
        span: 4995..4996,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 142,
        column: 0,
        span: 4997..5000,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 143,
        column: 3,
        span: 5001..5003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 143,
        column: 8,
        span: 5004..5008,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 143,
        column: 9,
        span: 5008..5009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 143,
        column: 18,
        span: 5009..5018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 19,
        span: 5018..5019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4611686018427387904",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 38,
        span: 5018..5038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 39,
        span: 5038..5039,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 143,
        column: 44,
        span: 5040..5044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
        column: 9,
        span: 5075..5081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 10,
        span: 5081..5082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 144,
        column: 18,
        span: 5082..5090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 19,
        span: 5090..5091,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4611686018427387904",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 38,
        span: 5090..5110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 39,
        span: 5110..5111,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 42,
        span: 5112..5114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4611686018427387904\"",
        ),
        line: 144,
        column: 64,
        span: 5115..5136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 65,
        span: 5136..5137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
        column: 9,
        span: 5140..5146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 10,
        span: 5146..5147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 145,
        column: 18,
        span: 5147..5155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 19,
        span: 5155..5156,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 145,
        column: 20,
        span: 5156..5157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4611686018427387904",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 39,
        span: 5156..5176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 40,
        span: 5176..5177,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
        column: 43,
        span: 5178..5180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-4611686018427387904\"",
        ),
        line: 145,
        column: 66,
        span: 5181..5203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 67,
        span: 5203..5204,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 146,
        column: 0,
        span: 5205..5208,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 148,
        column: 3,
        span: 5210..5212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 148,
        column: 12,
        span: 5213..5221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 13,
        span: 5221..5222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 148,
        column: 16,
        span: 5221..5225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 17,
        span: 5225..5226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 20,
        span: 5227..5229,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0.0\"",
        ),
        line: 148,
        column: 26,
        span: 5230..5235,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 148,
        column: 31,
        span: 5236..5240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 9,
        span: 5282..5288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 10,
        span: 5288..5289,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 149,
        column: 12,
        span: 5289..5291,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 149,
        column: 15,
        span: 5292..5294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 18,
        span: 5294..5297,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 21,
        span: 5298..5300,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12'",
        ),
        line: 149,
        column: 26,
        span: 5301..5305,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 149,
        column: 30,
        span: 5306..5309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 149,
        column: 35,
        span: 5309..5314,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 149,
        column: 38,
        span: 5315..5317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 149,
        column: 41,
        span: 5318..5320,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 44,
        span: 5321..5323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12.0'",
        ),
        line: 149,
        column: 51,
        span: 5324..5330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 52,
        span: 5330..5331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
        column: 9,
        span: 5334..5340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 10,
        span: 5340..5341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 150,
        column: 18,
        span: 5341..5349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 19,
        span: 5349..5350,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 150,
        column: 20,
        span: 5350..5351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1203",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 24,
        span: 5350..5355,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 150,
        column: 26,
        span: 5356..5357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 150,
        column: 30,
        span: 5357..5361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 31,
        span: 5361..5362,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 34,
        span: 5363..5365,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-1203.0\"",
        ),
        line: 150,
        column: 44,
        span: 5366..5375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 45,
        span: 5375..5376,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 151,
        column: 5,
        span: 5377..5381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
        column: 9,
        span: 5409..5415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 10,
        span: 5415..5416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 152,
        column: 18,
        span: 5416..5424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 19,
        span: 5424..5425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 152,
        column: 22,
        span: 5424..5428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 23,
        span: 5428..5429,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
        column: 26,
        span: 5430..5432,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 152,
        column: 30,
        span: 5433..5436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 31,
        span: 5436..5437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
        column: 9,
        span: 5440..5446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 10,
        span: 5446..5447,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 153,
        column: 12,
        span: 5447..5449,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 153,
        column: 15,
        span: 5450..5452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 18,
        span: 5452..5455,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 21,
        span: 5456..5458,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12'",
        ),
        line: 153,
        column: 26,
        span: 5459..5463,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 153,
        column: 30,
        span: 5464..5467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 153,
        column: 35,
        span: 5467..5472,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 153,
        column: 38,
        span: 5473..5475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 153,
        column: 41,
        span: 5476..5478,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 44,
        span: 5479..5481,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12'",
        ),
        line: 153,
        column: 49,
        span: 5482..5486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 50,
        span: 5486..5487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 9,
        span: 5490..5496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 10,
        span: 5496..5497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 154,
        column: 18,
        span: 5497..5505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 19,
        span: 5505..5506,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 154,
        column: 20,
        span: 5506..5507,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1203",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 24,
        span: 5506..5511,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 154,
        column: 26,
        span: 5512..5513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 154,
        column: 30,
        span: 5513..5517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 31,
        span: 5517..5518,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 34,
        span: 5519..5521,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-1203\"",
        ),
        line: 154,
        column: 42,
        span: 5522..5529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 43,
        span: 5529..5530,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 155,
        column: 0,
        span: 5531..5534,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 157,
        column: 3,
        span: 5536..5538,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 161,
        column: 8,
        span: 5755..5760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 161,
        column: 13,
        span: 5761..5765,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 15,
        span: 5766..5767,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(null)\"",
        ),
        line: 161,
        column: 24,
        span: 5768..5776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 162,
        column: 9,
        span: 5812..5818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 10,
        span: 5818..5819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 162,
        column: 16,
        span: 5819..5825,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
        column: 17,
        span: 5825..5826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 162,
        column: 23,
        span: 5826..5832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 24,
        span: 5832..5833,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 162,
        column: 28,
        span: 5833..5837,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 29,
        span: 5837..5838,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 31,
        span: 5838..5840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 32,
        span: 5840..5841,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 162,
        column: 35,
        span: 5842..5844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 162,
        column: 40,
        span: 5845..5849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 41,
        span: 5849..5850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 163,
        column: 9,
        span: 5853..5859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 10,
        span: 5859..5860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 163,
        column: 16,
        span: 5860..5866,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 163,
        column: 17,
        span: 5866..5867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 163,
        column: 23,
        span: 5867..5873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 24,
        span: 5873..5874,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 163,
        column: 28,
        span: 5874..5878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 29,
        span: 5878..5879,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 163,
        column: 34,
        span: 5880..5884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 35,
        span: 5884..5885,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 38,
        span: 5886..5888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 163,
        column: 43,
        span: 5889..5893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 44,
        span: 5893..5894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 164,
        column: 9,
        span: 5897..5903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 10,
        span: 5903..5904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 164,
        column: 16,
        span: 5904..5910,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 164,
        column: 17,
        span: 5910..5911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 164,
        column: 23,
        span: 5911..5917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 24,
        span: 5917..5918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 164,
        column: 28,
        span: 5918..5922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 29,
        span: 5922..5923,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 164,
        column: 33,
        span: 5924..5927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 34,
        span: 5927..5928,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 164,
        column: 37,
        span: 5929..5931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 164,
        column: 42,
        span: 5932..5936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 43,
        span: 5936..5937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 165,
        column: 9,
        span: 5940..5946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 10,
        span: 5946..5947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 165,
        column: 16,
        span: 5947..5953,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 165,
        column: 17,
        span: 5953..5954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 165,
        column: 23,
        span: 5954..5960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 24,
        span: 5960..5961,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 165,
        column: 28,
        span: 5961..5965,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 29,
        span: 5965..5966,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 165,
        column: 31,
        span: 5967..5968,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 165,
        column: 32,
        span: 5968..5969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 33,
        span: 5969..5970,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 165,
        column: 36,
        span: 5971..5973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 165,
        column: 41,
        span: 5974..5978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 42,
        span: 5978..5979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 166,
        column: 9,
        span: 5982..5988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 10,
        span: 5988..5989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 166,
        column: 16,
        span: 5989..5995,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 166,
        column: 17,
        span: 5995..5996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 166,
        column: 23,
        span: 5996..6002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 24,
        span: 6002..6003,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 166,
        column: 28,
        span: 6003..6007,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 29,
        span: 6007..6008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 166,
        column: 35,
        span: 6009..6014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 36,
        span: 6014..6015,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 166,
        column: 39,
        span: 6016..6018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 166,
        column: 44,
        span: 6019..6023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 45,
        span: 6023..6024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 9,
        span: 6027..6033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 10,
        span: 6033..6034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 167,
        column: 16,
        span: 6034..6040,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 167,
        column: 17,
        span: 6040..6041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 167,
        column: 23,
        span: 6041..6047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 24,
        span: 6047..6048,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 167,
        column: 28,
        span: 6048..6052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
        column: 29,
        span: 6052..6053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 167,
        column: 39,
        span: 6054..6063,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 167,
        column: 40,
        span: 6063..6064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        line: 167,
        column: 47,
        span: 6064..6071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 48,
        span: 6071..6072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 49,
        span: 6072..6073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 50,
        span: 6073..6074,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 167,
        column: 53,
        span: 6075..6077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 167,
        column: 58,
        span: 6078..6082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 59,
        span: 6082..6083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
        column: 9,
        span: 6086..6092,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 10,
        span: 6092..6093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 168,
        column: 16,
        span: 6093..6099,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 168,
        column: 17,
        span: 6099..6100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 168,
        column: 23,
        span: 6100..6106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 24,
        span: 6106..6107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 168,
        column: 28,
        span: 6107..6111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 29,
        span: 6111..6112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 168,
        column: 32,
        span: 6113..6115,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 168,
        column: 33,
        span: 6115..6116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 168,
        column: 38,
        span: 6116..6121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 39,
        span: 6121..6122,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 168,
        column: 42,
        span: 6123..6125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 168,
        column: 47,
        span: 6126..6130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 48,
        span: 6130..6131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 9,
        span: 6134..6140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 10,
        span: 6140..6141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 169,
        column: 16,
        span: 6141..6147,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 169,
        column: 17,
        span: 6147..6148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 169,
        column: 23,
        span: 6148..6154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 24,
        span: 6154..6155,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 169,
        column: 28,
        span: 6155..6159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 29,
        span: 6159..6160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 169,
        column: 32,
        span: 6161..6163,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 169,
        column: 33,
        span: 6163..6164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 169,
        column: 38,
        span: 6164..6169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 39,
        span: 6169..6170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 42,
        span: 6171..6173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 169,
        column: 49,
        span: 6174..6180,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 169,
        column: 50,
        span: 6180..6181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 169,
        column: 56,
        span: 6181..6187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 57,
        span: 6187..6188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 169,
        column: 61,
        span: 6188..6192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 62,
        span: 6192..6193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 169,
        column: 65,
        span: 6194..6196,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 169,
        column: 66,
        span: 6196..6197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 169,
        column: 71,
        span: 6197..6202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 72,
        span: 6202..6203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 73,
        span: 6203..6204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
        column: 9,
        span: 6207..6213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 10,
        span: 6213..6214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 170,
        column: 16,
        span: 6214..6220,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 170,
        column: 17,
        span: 6220..6221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 170,
        column: 23,
        span: 6221..6227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 24,
        span: 6227..6228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 170,
        column: 28,
        span: 6228..6232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 29,
        span: 6232..6233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 170,
        column: 35,
        span: 6234..6239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 36,
        span: 6239..6240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
        column: 39,
        span: 6241..6243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 170,
        column: 46,
        span: 6244..6250,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 170,
        column: 47,
        span: 6250..6251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 170,
        column: 53,
        span: 6251..6257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 54,
        span: 6257..6258,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 170,
        column: 58,
        span: 6258..6262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 59,
        span: 6262..6263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 170,
        column: 65,
        span: 6264..6269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 66,
        span: 6269..6270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 67,
        span: 6270..6271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 9,
        span: 6274..6280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 10,
        span: 6280..6281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 171,
        column: 16,
        span: 6281..6287,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 171,
        column: 17,
        span: 6287..6288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 171,
        column: 23,
        span: 6288..6294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 24,
        span: 6294..6295,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 171,
        column: 28,
        span: 6295..6299,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 29,
        span: 6299..6300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 171,
        column: 35,
        span: 6301..6306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 36,
        span: 6306..6307,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 171,
        column: 39,
        span: 6308..6310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 171,
        column: 46,
        span: 6311..6317,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 171,
        column: 47,
        span: 6317..6318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 171,
        column: 53,
        span: 6318..6324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 54,
        span: 6324..6325,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 171,
        column: 58,
        span: 6325..6329,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 59,
        span: 6329..6330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 66,
        span: 6331..6337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 67,
        span: 6337..6338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 68,
        span: 6338..6339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
        column: 9,
        span: 6343..6349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 10,
        span: 6349..6350,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 173,
        column: 11,
        span: 6350..6351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 173,
        column: 17,
        span: 6351..6357,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 18,
        span: 6357..6358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 173,
        column: 24,
        span: 6358..6364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 25,
        span: 6364..6365,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%90p\"",
        ),
        line: 173,
        column: 31,
        span: 6365..6371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 32,
        span: 6371..6372,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 173,
        column: 34,
        span: 6373..6374,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 173,
        column: 35,
        span: 6374..6375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 36,
        span: 6375..6376,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 39,
        span: 6377..6379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 42,
        span: 6379..6382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 43,
        span: 6382..6383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 174,
        column: 9,
        span: 6386..6392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 10,
        span: 6392..6393,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 174,
        column: 11,
        span: 6393..6394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 174,
        column: 17,
        span: 6394..6400,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 174,
        column: 18,
        span: 6400..6401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 174,
        column: 24,
        span: 6401..6407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 25,
        span: 6407..6408,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%-60p\"",
        ),
        line: 174,
        column: 32,
        span: 6408..6415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 33,
        span: 6415..6416,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 174,
        column: 35,
        span: 6417..6418,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 174,
        column: 36,
        span: 6418..6419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 37,
        span: 6419..6420,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 174,
        column: 40,
        span: 6421..6423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 43,
        span: 6423..6426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 44,
        span: 6426..6427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 9,
        span: 6430..6436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 10,
        span: 6436..6437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 175,
        column: 16,
        span: 6437..6443,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 175,
        column: 17,
        span: 6443..6444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 175,
        column: 23,
        span: 6444..6450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 24,
        span: 6450..6451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%10p\"",
        ),
        line: 175,
        column: 30,
        span: 6451..6457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 31,
        span: 6457..6458,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 175,
        column: 37,
        span: 6459..6464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 38,
        span: 6464..6465,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 41,
        span: 6466..6468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 175,
        column: 48,
        span: 6469..6475,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 175,
        column: 49,
        span: 6475..6476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 175,
        column: 52,
        span: 6476..6479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 53,
        span: 6479..6480,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        line: 175,
        column: 56,
        span: 6480..6483,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 57,
        span: 6483..6484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 60,
        span: 6484..6487,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 175,
        column: 62,
        span: 6488..6489,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 175,
        column: 64,
        span: 6490..6491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 175,
        column: 68,
        span: 6491..6495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 69,
        span: 6495..6496,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 175,
        column: 72,
        span: 6497..6499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 175,
        column: 77,
        span: 6500..6504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 78,
        span: 6504..6505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
        column: 9,
        span: 6508..6514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 10,
        span: 6514..6515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 176,
        column: 16,
        span: 6515..6521,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 17,
        span: 6521..6522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 176,
        column: 23,
        span: 6522..6528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 24,
        span: 6528..6529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%-12p\"",
        ),
        line: 176,
        column: 31,
        span: 6529..6536,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 32,
        span: 6536..6537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 176,
        column: 36,
        span: 6537..6541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 37,
        span: 6541..6542,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 40,
        span: 6543..6545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 176,
        column: 45,
        span: 6546..6550,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 176,
        column: 48,
        span: 6551..6553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 176,
        column: 55,
        span: 6554..6560,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 56,
        span: 6560..6561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 176,
        column: 59,
        span: 6561..6564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 60,
        span: 6564..6565,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        line: 176,
        column: 63,
        span: 6565..6568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 64,
        span: 6568..6569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 67,
        span: 6569..6572,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 176,
        column: 69,
        span: 6573..6574,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 176,
        column: 71,
        span: 6575..6576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        line: 176,
        column: 75,
        span: 6576..6580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 76,
        span: 6580..6581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 77,
        span: 6581..6582,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 178,
        column: 0,
        span: 6586..6588,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 179,
        column: 10,
        span: 6593..6598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 179,
        column: 13,
        span: 6599..6601,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 179,
        column: 15,
        span: 6602..6603,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 179,
        column: 17,
        span: 6604..6605,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 179,
        column: 18,
        span: 6605..6606,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 179,
        column: 19,
        span: 6606..6607,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 179,
        column: 25,
        span: 6608..6613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 179,
        column: 28,
        span: 6614..6616,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 179,
        column: 30,
        span: 6617..6618,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 179,
        column: 32,
        span: 6619..6620,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 179,
        column: 33,
        span: 6620..6621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
        column: 11,
        span: 6626..6632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 12,
        span: 6632..6633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 180,
        column: 18,
        span: 6633..6639,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 19,
        span: 6639..6640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 180,
        column: 25,
        span: 6640..6646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 26,
        span: 6646..6647,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 180,
        column: 30,
        span: 6647..6651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 31,
        span: 6651..6652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 180,
        column: 34,
        span: 6653..6655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 35,
        span: 6655..6656,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 180,
        column: 38,
        span: 6657..6659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 180,
        column: 45,
        span: 6660..6666,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 46,
        span: 6666..6667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 180,
        column: 52,
        span: 6667..6673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 53,
        span: 6673..6674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 180,
        column: 57,
        span: 6674..6678,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 58,
        span: 6678..6679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 180,
        column: 61,
        span: 6680..6682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 62,
        span: 6682..6683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 63,
        span: 6683..6684,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 181,
        column: 0,
        span: 6687..6690,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 183,
        column: 5,
        span: 6694..6696,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 184,
        column: 10,
        span: 6739..6744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 184,
        column: 13,
        span: 6745..6747,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 15,
        span: 6748..6749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 184,
        column: 22,
        span: 6750..6756,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 184,
        column: 23,
        span: 6756..6757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 184,
        column: 26,
        span: 6757..6760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 27,
        span: 6760..6761,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 184,
        column: 30,
        span: 6761..6764,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 31,
        span: 6764..6765,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 34,
        span: 6765..6768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 35,
        span: 6768..6769,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 185,
        column: 10,
        span: 6774..6779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2",
        ),
        line: 185,
        column: 13,
        span: 6780..6782,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 15,
        span: 6783..6784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 185,
        column: 22,
        span: 6785..6791,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 23,
        span: 6791..6792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 185,
        column: 26,
        span: 6792..6795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 27,
        span: 6795..6796,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aa\"",
        ),
        line: 185,
        column: 31,
        span: 6796..6800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 32,
        span: 6800..6801,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 34,
        span: 6801..6803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 35,
        span: 6803..6804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 9,
        span: 6807..6813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 10,
        span: 6813..6814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 186,
        column: 16,
        span: 6814..6820,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 17,
        span: 6820..6821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 186,
        column: 23,
        span: 6821..6827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 24,
        span: 6827..6828,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 186,
        column: 28,
        span: 6828..6832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 29,
        span: 6832..6833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 186,
        column: 32,
        span: 6834..6836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 33,
        span: 6836..6837,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 186,
        column: 36,
        span: 6838..6840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 186,
        column: 43,
        span: 6841..6847,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 44,
        span: 6847..6848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 186,
        column: 50,
        span: 6848..6854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 51,
        span: 6854..6855,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 186,
        column: 55,
        span: 6855..6859,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 56,
        span: 6859..6860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2",
        ),
        line: 186,
        column: 59,
        span: 6861..6863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 60,
        span: 6863..6864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 61,
        span: 6864..6865,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 187,
        column: 0,
        span: 6868..6871,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 189,
        column: 5,
        span: 6875..6877,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 190,
        column: 10,
        span: 6922..6927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 190,
        column: 13,
        span: 6928..6930,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 190,
        column: 15,
        span: 6931..6932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 190,
        column: 22,
        span: 6933..6939,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 190,
        column: 23,
        span: 6939..6940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 190,
        column: 26,
        span: 6940..6943,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 27,
        span: 6943..6944,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 190,
        column: 30,
        span: 6944..6947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 31,
        span: 6947..6948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 35,
        span: 6948..6952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 36,
        span: 6952..6953,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 190,
        column: 37,
        span: 6953..6954,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 190,
        column: 43,
        span: 6955..6960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2",
        ),
        line: 190,
        column: 46,
        span: 6961..6963,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 190,
        column: 48,
        span: 6964..6965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 190,
        column: 55,
        span: 6966..6972,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 190,
        column: 56,
        span: 6972..6973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 190,
        column: 59,
        span: 6973..6976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 60,
        span: 6976..6977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 190,
        column: 63,
        span: 6977..6980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 64,
        span: 6980..6981,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 68,
        span: 6981..6985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 69,
        span: 6985..6986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 11,
        span: 6991..6997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 12,
        span: 6997..6998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 191,
        column: 18,
        span: 6998..7004,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 19,
        span: 7004..7005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 191,
        column: 25,
        span: 7005..7011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 26,
        span: 7011..7012,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 191,
        column: 30,
        span: 7012..7016,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 31,
        span: 7016..7017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 191,
        column: 34,
        span: 7018..7020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 35,
        span: 7020..7021,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 191,
        column: 38,
        span: 7022..7024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 191,
        column: 45,
        span: 7025..7031,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 46,
        span: 7031..7032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 191,
        column: 52,
        span: 7032..7038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 53,
        span: 7038..7039,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 191,
        column: 57,
        span: 7039..7043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 58,
        span: 7043..7044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2",
        ),
        line: 191,
        column: 61,
        span: 7045..7047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 62,
        span: 7047..7048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 63,
        span: 7048..7049,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 192,
        column: 0,
        span: 7052..7055,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 193,
        column: 0,
        span: 7056..7059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 195,
        column: 2,
        span: 7061..7062,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 4,
        span: 7063..7064,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"ílo\"\\n\\\\'",
        ),
        line: 195,
        column: 16,
        span: 7065..7076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 7,
        span: 7077..7083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 8,
        span: 7083..7084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 196,
        column: 14,
        span: 7084..7090,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 196,
        column: 15,
        span: 7090..7091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 196,
        column: 21,
        span: 7091..7097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 22,
        span: 7097..7098,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%q%s'",
        ),
        line: 196,
        column: 28,
        span: 7098..7104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 29,
        span: 7104..7105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 196,
        column: 31,
        span: 7106..7107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 32,
        span: 7107..7108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 196,
        column: 34,
        span: 7109..7110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 35,
        span: 7110..7111,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 38,
        span: 7112..7114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"\\\\\"ílo\\\\\"\\\\\\n\\\\\\\\\"\"ílo\"\\n\\\\'",
        ),
        line: 196,
        column: 69,
        span: 7115..7145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 70,
        span: 7145..7146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 197,
        column: 7,
        span: 7147..7153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 8,
        span: 7153..7154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 197,
        column: 14,
        span: 7154..7160,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 197,
        column: 15,
        span: 7160..7161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 197,
        column: 21,
        span: 7161..7167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 22,
        span: 7167..7168,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%q'",
        ),
        line: 197,
        column: 26,
        span: 7168..7172,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 197,
        column: 27,
        span: 7172..7173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 197,
        column: 32,
        span: 7174..7178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 33,
        span: 7178..7179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 197,
        column: 36,
        span: 7180..7182,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\0\"]]",
        ),
        line: 197,
        column: 45,
        span: 7183..7191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 46,
        span: 7191..7192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 198,
        column: 7,
        span: 7193..7199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 8,
        span: 7199..7200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 198,
        column: 12,
        span: 7200..7204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 13,
        span: 7204..7205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 198,
        column: 19,
        span: 7205..7211,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
        column: 20,
        span: 7211..7212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 198,
        column: 26,
        span: 7212..7218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 27,
        span: 7218..7219,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return %q'",
        ),
        line: 198,
        column: 38,
        span: 7219..7230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 39,
        span: 7230..7231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 198,
        column: 41,
        span: 7232..7233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 42,
        span: 7233..7234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 43,
        span: 7234..7235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 44,
        span: 7235..7236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 45,
        span: 7236..7237,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 198,
        column: 48,
        span: 7238..7240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 198,
        column: 50,
        span: 7241..7242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 51,
        span: 7242..7243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 199,
        column: 2,
        span: 7244..7245,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 199,
        column: 4,
        span: 7246..7247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\1\\0023\\5\\0009\"",
        ),
        line: 199,
        column: 23,
        span: 7248..7266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 200,
        column: 7,
        span: 7267..7273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 8,
        span: 7273..7274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 200,
        column: 12,
        span: 7274..7278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 13,
        span: 7278..7279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 200,
        column: 19,
        span: 7279..7285,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 20,
        span: 7285..7286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 200,
        column: 26,
        span: 7286..7292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 27,
        span: 7292..7293,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return %q'",
        ),
        line: 200,
        column: 38,
        span: 7293..7304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 39,
        span: 7304..7305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 200,
        column: 41,
        span: 7306..7307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 42,
        span: 7307..7308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 43,
        span: 7308..7309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 44,
        span: 7309..7310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 45,
        span: 7310..7311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 200,
        column: 48,
        span: 7312..7314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 200,
        column: 50,
        span: 7315..7316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 51,
        span: 7316..7317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
        column: 7,
        span: 7318..7324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 8,
        span: 7324..7325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 201,
        column: 14,
        span: 7325..7331,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 15,
        span: 7331..7332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 201,
        column: 21,
        span: 7332..7338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 22,
        span: 7338..7339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0%c\\0%c%x\\0\"",
        ),
        line: 201,
        column: 36,
        span: 7339..7353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 37,
        span: 7353..7354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 201,
        column: 44,
        span: 7355..7361,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 45,
        span: 7361..7362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 201,
        column: 49,
        span: 7362..7366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 50,
        span: 7366..7367,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4\"",
        ),
        line: 201,
        column: 56,
        span: 7367..7373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 57,
        span: 7373..7374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 58,
        span: 7374..7375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 201,
        column: 65,
        span: 7376..7382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 66,
        span: 7382..7383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 201,
        column: 70,
        span: 7383..7387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 71,
        span: 7387..7388,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 201,
        column: 74,
        span: 7388..7391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 75,
        span: 7391..7392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 76,
        span: 7392..7393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "140",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
        column: 80,
        span: 7393..7397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 81,
        span: 7397..7398,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 201,
        column: 84,
        span: 7399..7401,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\xe4\\0b8c\\0\"",
        ),
        line: 202,
        column: 30,
        span: 7416..7431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 31,
        span: 7431..7432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 7,
        span: 7433..7439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 8,
        span: 7439..7440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 203,
        column: 14,
        span: 7440..7446,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 203,
        column: 15,
        span: 7446..7447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 203,
        column: 21,
        span: 7447..7453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 22,
        span: 7453..7454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 203,
        column: 24,
        span: 7454..7456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 25,
        span: 7456..7457,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 203,
        column: 28,
        span: 7458..7460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 203,
        column: 31,
        span: 7461..7463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 32,
        span: 7463..7464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 7,
        span: 7465..7471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 8,
        span: 7471..7472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 204,
        column: 14,
        span: 7472..7478,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 15,
        span: 7478..7479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 204,
        column: 21,
        span: 7479..7485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 22,
        span: 7485..7486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%c\"",
        ),
        line: 204,
        column: 26,
        span: 7486..7490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 27,
        span: 7490..7491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 29,
        span: 7490..7493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 30,
        span: 7493..7494,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 204,
        column: 32,
        span: 7494..7496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 204,
        column: 38,
        span: 7496..7502,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 39,
        span: 7502..7503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 204,
        column: 45,
        span: 7503..7509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 46,
        span: 7509..7510,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%c\"",
        ),
        line: 204,
        column: 50,
        span: 7510..7514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 51,
        span: 7514..7515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "48",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 53,
        span: 7514..7517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 54,
        span: 7517..7518,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 204,
        column: 56,
        span: 7518..7520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 204,
        column: 62,
        span: 7520..7526,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 63,
        span: 7526..7527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 204,
        column: 69,
        span: 7527..7533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 70,
        span: 7533..7534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%c\"",
        ),
        line: 204,
        column: 74,
        span: 7534..7538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 75,
        span: 7538..7539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 77,
        span: 7538..7541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 78,
        span: 7541..7542,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 204,
        column: 80,
        span: 7542..7544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 204,
        column: 86,
        span: 7544..7550,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 87,
        span: 7550..7551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 204,
        column: 93,
        span: 7551..7557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 94,
        span: 7557..7558,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%c\"",
        ),
        line: 204,
        column: 98,
        span: 7558..7562,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 99,
        span: 7562..7563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 102,
        span: 7562..7566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 103,
        span: 7566..7567,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 106,
        span: 7568..7570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 205,
        column: 14,
        span: 7578..7584,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 205,
        column: 15,
        span: 7584..7585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 205,
        column: 21,
        span: 7585..7591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 22,
        span: 7591..7592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1c%-c%-1c%c\"",
        ),
        line: 205,
        column: 36,
        span: 7592..7606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 37,
        span: 7606..7607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 40,
        span: 7607..7610,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 41,
        span: 7610..7611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "48",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 44,
        span: 7611..7614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 45,
        span: 7614..7615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 48,
        span: 7615..7618,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 49,
        span: 7618..7619,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 53,
        span: 7619..7623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 54,
        span: 7623..7624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 55,
        span: 7624..7625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
        column: 7,
        span: 7626..7632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 8,
        span: 7632..7633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 206,
        column: 14,
        span: 7633..7639,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 206,
        column: 15,
        span: 7639..7640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 206,
        column: 21,
        span: 7640..7646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 22,
        span: 7646..7647,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s\\0 is not \\0%s\"",
        ),
        line: 206,
        column: 40,
        span: 7647..7665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 41,
        span: 7665..7666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not be'",
        ),
        line: 206,
        column: 50,
        span: 7667..7675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 51,
        span: 7675..7676,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'be'",
        ),
        line: 206,
        column: 56,
        span: 7677..7681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 57,
        span: 7681..7682,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 206,
        column: 60,
        span: 7683..7685,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not be\\0 is not \\0be'",
        ),
        line: 206,
        column: 83,
        span: 7686..7708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 84,
        span: 7708..7709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 207,
        column: 7,
        span: 7710..7716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 8,
        span: 7716..7717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 207,
        column: 14,
        span: 7717..7723,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 207,
        column: 15,
        span: 7723..7724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 207,
        column: 21,
        span: 7724..7730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 22,
        span: 7730..7731,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%%d %010d\"",
        ),
        line: 207,
        column: 34,
        span: 7731..7743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 35,
        span: 7743..7744,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 38,
        span: 7744..7747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 39,
        span: 7747..7748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 42,
        span: 7748..7751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 43,
        span: 7751..7752,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 207,
        column: 46,
        span: 7753..7755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%10 0000000023\"",
        ),
        line: 207,
        column: 63,
        span: 7756..7772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 64,
        span: 7772..7773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 7,
        span: 7774..7780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 8,
        span: 7780..7781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 208,
        column: 16,
        span: 7781..7789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 17,
        span: 7789..7790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 208,
        column: 23,
        span: 7790..7796,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 208,
        column: 24,
        span: 7796..7797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 208,
        column: 30,
        span: 7797..7803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 31,
        span: 7803..7804,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f\"",
        ),
        line: 208,
        column: 35,
        span: 7804..7808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 36,
        span: 7808..7809,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 208,
        column: 41,
        span: 7809..7814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 42,
        span: 7814..7815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 43,
        span: 7815..7816,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 46,
        span: 7817..7819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 208,
        column: 51,
        span: 7819..7824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 52,
        span: 7824..7825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 209,
        column: 7,
        span: 7826..7832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 8,
        span: 7832..7833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 209,
        column: 14,
        span: 7833..7839,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 209,
        column: 15,
        span: 7839..7840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 209,
        column: 21,
        span: 7840..7846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 22,
        span: 7846..7847,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"%-50s\"'",
        ),
        line: 209,
        column: 31,
        span: 7847..7856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 32,
        span: 7856..7857,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 209,
        column: 36,
        span: 7858..7861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 37,
        span: 7861..7862,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 209,
        column: 40,
        span: 7863..7865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"a'",
        ),
        line: 209,
        column: 45,
        span: 7866..7870,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 209,
        column: 48,
        span: 7871..7873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 209,
        column: 55,
        span: 7874..7880,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 209,
        column: 56,
        span: 7880..7881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 209,
        column: 59,
        span: 7881..7884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 60,
        span: 7884..7885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 209,
        column: 63,
        span: 7885..7888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 64,
        span: 7888..7889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "49",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 67,
        span: 7889..7892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 68,
        span: 7892..7893,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 209,
        column: 71,
        span: 7894..7896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 209,
        column: 75,
        span: 7897..7900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 76,
        span: 7900..7901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
        column: 7,
        span: 7903..7909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 8,
        span: 7909..7910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 211,
        column: 14,
        span: 7910..7916,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 211,
        column: 15,
        span: 7916..7917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 211,
        column: 21,
        span: 7917..7923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 22,
        span: 7923..7924,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-%.20s.20s\"",
        ),
        line: 211,
        column: 34,
        span: 7924..7936,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 211,
        column: 35,
        span: 7936..7937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 211,
        column: 42,
        span: 7938..7944,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 211,
        column: 43,
        span: 7944..7945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 211,
        column: 46,
        span: 7945..7948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 47,
        span: 7948..7949,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 211,
        column: 50,
        span: 7949..7952,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 211,
        column: 51,
        span: 7952..7953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 56,
        span: 7953..7958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 57,
        span: 7958..7959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 58,
        span: 7959..7960,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 61,
        span: 7961..7963,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 212,
        column: 25,
        span: 7985..7988,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 212,
        column: 27,
        span: 7988..7990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 212,
        column: 33,
        span: 7990..7996,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 34,
        span: 7996..7997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 212,
        column: 37,
        span: 7997..8000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 38,
        span: 8000..8001,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 212,
        column: 41,
        span: 8001..8004,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 42,
        span: 8004..8005,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 45,
        span: 8005..8008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 46,
        span: 8008..8009,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 212,
        column: 48,
        span: 8009..8011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".20s\"",
        ),
        line: 212,
        column: 54,
        span: 8011..8017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 55,
        span: 8017..8018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 213,
        column: 7,
        span: 8019..8025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 8,
        span: 8025..8026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 213,
        column: 14,
        span: 8026..8032,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
        column: 15,
        span: 8032..8033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 213,
        column: 21,
        span: 8033..8039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 22,
        span: 8039..8040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"-%20s.20s\"'",
        ),
        line: 213,
        column: 35,
        span: 8040..8053,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 36,
        span: 8053..8054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 213,
        column: 43,
        span: 8055..8061,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
        column: 44,
        span: 8061..8062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 213,
        column: 47,
        span: 8062..8065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 48,
        span: 8065..8066,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 213,
        column: 51,
        span: 8066..8069,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 52,
        span: 8069..8070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 213,
        column: 57,
        span: 8070..8075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 58,
        span: 8075..8076,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 59,
        span: 8076..8077,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 213,
        column: 62,
        span: 8078..8080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 214,
        column: 14,
        span: 8088..8094,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 214,
        column: 15,
        span: 8094..8095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 214,
        column: 21,
        span: 8095..8101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 22,
        span: 8101..8102,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%q\"",
        ),
        line: 214,
        column: 26,
        span: 8102..8106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 27,
        span: 8106..8107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 214,
        column: 31,
        span: 8108..8111,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 214,
        column: 33,
        span: 8111..8113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 214,
        column: 39,
        span: 8113..8119,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 214,
        column: 40,
        span: 8119..8120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 214,
        column: 43,
        span: 8120..8123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 44,
        span: 8123..8124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 214,
        column: 47,
        span: 8124..8127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 48,
        span: 8127..8128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 53,
        span: 8128..8133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 54,
        span: 8133..8134,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 214,
        column: 56,
        span: 8134..8136,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".20s\"",
        ),
        line: 214,
        column: 62,
        span: 8136..8142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 63,
        span: 8142..8143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 64,
        span: 8143..8144,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 216,
        column: 0,
        span: 8146..8148,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 217,
        column: 8,
        span: 8151..8156,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 217,
        column: 17,
        span: 8157..8165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 217,
        column: 24,
        span: 8166..8172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 26,
        span: 8173..8174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 217,
        column: 27,
        span: 8174..8175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 28,
        span: 8175..8176,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 218,
        column: 10,
        span: 8181..8186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 218,
        column: 12,
        span: 8187..8188,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 218,
        column: 14,
        span: 8189..8190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 218,
        column: 21,
        span: 8191..8197,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 218,
        column: 22,
        span: 8197..8198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 218,
        column: 28,
        span: 8198..8204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 29,
        span: 8204..8205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%q\"",
        ),
        line: 218,
        column: 33,
        span: 8205..8209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 34,
        span: 8209..8210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 218,
        column: 36,
        span: 8211..8212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 37,
        span: 8212..8213,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 219,
        column: 10,
        span: 8218..8223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nv",
        ),
        line: 219,
        column: 13,
        span: 8224..8226,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 219,
        column: 15,
        span: 8227..8228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 219,
        column: 20,
        span: 8229..8233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 21,
        span: 8233..8234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 219,
        column: 30,
        span: 8234..8243,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 219,
        column: 33,
        span: 8244..8246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 219,
        column: 35,
        span: 8247..8248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 36,
        span: 8248..8249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 37,
        span: 8249..8250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 38,
        span: 8250..8251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 220,
        column: 11,
        span: 8256..8262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 12,
        span: 8262..8263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 220,
        column: 13,
        span: 8263..8264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 220,
        column: 16,
        span: 8265..8267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nv",
        ),
        line: 220,
        column: 19,
        span: 8268..8270,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 220,
        column: 23,
        span: 8271..8274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 220,
        column: 28,
        span: 8275..8279,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 220,
        column: 29,
        span: 8279..8280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 220,
        column: 33,
        span: 8280..8284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 34,
        span: 8284..8285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 220,
        column: 35,
        span: 8285..8286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 36,
        span: 8286..8287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 220,
        column: 39,
        span: 8288..8290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 220,
        column: 44,
        span: 8291..8295,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 220,
        column: 45,
        span: 8295..8296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 220,
        column: 49,
        span: 8296..8300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 50,
        span: 8300..8301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nv",
        ),
        line: 220,
        column: 52,
        span: 8301..8303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 53,
        span: 8303..8304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 54,
        span: 8304..8305,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 221,
        column: 0,
        span: 8308..8311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 222,
        column: 9,
        span: 8314..8320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 10,
        span: 8320..8321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\1\\255\\u{234}\"",
        ),
        line: 222,
        column: 29,
        span: 8321..8340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 30,
        span: 8340..8341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 223,
        column: 9,
        span: 8344..8350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 10,
        span: 8350..8351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 223,
        column: 14,
        span: 8351..8355,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 223,
        column: 15,
        span: 8355..8356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 223,
        column: 25,
        span: 8356..8366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 26,
        span: 8366..8367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 224,
        column: 9,
        span: 8370..8376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 10,
        span: 8376..8377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 224,
        column: 14,
        span: 8377..8381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 224,
        column: 15,
        span: 8381..8382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        line: 224,
        column: 25,
        span: 8382..8392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 26,
        span: 8392..8393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 225,
        column: 9,
        span: 8396..8402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 10,
        span: 8402..8403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 225,
        column: 14,
        span: 8403..8407,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 225,
        column: 15,
        span: 8407..8408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 225,
        column: 17,
        span: 8408..8410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 18,
        span: 8410..8411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 226,
        column: 9,
        span: 8414..8420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 10,
        span: 8420..8421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 226,
        column: 13,
        span: 8420..8424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 14,
        span: 8424..8425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 227,
        column: 9,
        span: 8428..8434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 10,
        span: 8434..8435,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 227,
        column: 14,
        span: 8435..8439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 15,
        span: 8439..8440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 228,
        column: 9,
        span: 8443..8449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 10,
        span: 8449..8450,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 228,
        column: 13,
        span: 8450..8453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 14,
        span: 8453..8454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 229,
        column: 9,
        span: 8457..8463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 10,
        span: 8463..8464,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 229,
        column: 15,
        span: 8464..8469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 16,
        span: 8469..8470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 230,
        column: 9,
        span: 8473..8479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 10,
        span: 8479..8480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 230,
        column: 14,
        span: 8480..8484,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 15,
        span: 8484..8485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 230,
        column: 19,
        span: 8485..8489,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 20,
        span: 8489..8490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkQ",
        ),
        line: 231,
        column: 9,
        span: 8493..8499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 10,
        span: 8499..8500,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 231,
        column: 11,
        span: 8500..8501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 231,
        column: 15,
        span: 8501..8505,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 231,
        column: 16,
        span: 8505..8506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 231,
        column: 20,
        span: 8506..8510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 21,
        span: 8510..8511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 232,
        column: 9,
        span: 8514..8520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 10,
        span: 8520..8521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 232,
        column: 16,
        span: 8521..8527,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
        column: 17,
        span: 8527..8528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 232,
        column: 23,
        span: 8528..8534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 24,
        span: 8534..8535,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%q\"",
        ),
        line: 232,
        column: 28,
        span: 8535..8539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 29,
        span: 8539..8540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
        column: 31,
        span: 8540..8542,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 232,
        column: 32,
        span: 8542..8543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
        column: 33,
        span: 8542..8544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 34,
        span: 8544..8545,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 232,
        column: 37,
        span: 8546..8548,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(0/0)\"",
        ),
        line: 232,
        column: 45,
        span: 8549..8556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 46,
        span: 8556..8557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 233,
        column: 13,
        span: 8569..8579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 14,
        span: 8579..8580,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no literal\"",
        ),
        line: 233,
        column: 26,
        span: 8580..8592,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 27,
        span: 8592..8593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 233,
        column: 34,
        span: 8594..8600,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 233,
        column: 35,
        span: 8600..8601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 233,
        column: 41,
        span: 8601..8607,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 42,
        span: 8607..8608,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%q\"",
        ),
        line: 233,
        column: 47,
        span: 8609..8613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 48,
        span: 8613..8614,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 233,
        column: 50,
        span: 8615..8616,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 233,
        column: 51,
        span: 8616..8617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 52,
        span: 8617..8618,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 234,
        column: 0,
        span: 8619..8622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 7,
        span: 8624..8630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 8,
        span: 8630..8631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 236,
        column: 14,
        span: 8631..8637,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 236,
        column: 15,
        span: 8637..8638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 236,
        column: 21,
        span: 8638..8644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 22,
        span: 8644..8645,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0%s\\0\"",
        ),
        line: 236,
        column: 30,
        span: 8645..8653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 31,
        span: 8653..8654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\1\"",
        ),
        line: 236,
        column: 40,
        span: 8655..8663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 41,
        span: 8663..8664,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 236,
        column: 44,
        span: 8665..8667,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\1\\0\"",
        ),
        line: 236,
        column: 57,
        span: 8668..8680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 58,
        span: 8680..8681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 237,
        column: 11,
        span: 8682..8692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 12,
        span: 8692..8693,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"contains zeros\"",
        ),
        line: 237,
        column: 28,
        span: 8693..8709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 29,
        span: 8709..8710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 237,
        column: 36,
        span: 8711..8717,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 237,
        column: 37,
        span: 8717..8718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 237,
        column: 43,
        span: 8718..8724,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 44,
        span: 8724..8725,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%10s\"",
        ),
        line: 237,
        column: 51,
        span: 8726..8732,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 52,
        span: 8732..8733,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 237,
        column: 57,
        span: 8734..8738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 58,
        span: 8738..8739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 7,
        span: 8762..8768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 8,
        span: 8768..8769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 240,
        column: 14,
        span: 8769..8775,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 15,
        span: 8775..8776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 240,
        column: 21,
        span: 8776..8782,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 22,
        span: 8782..8783,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s %s\"",
        ),
        line: 240,
        column: 29,
        span: 8783..8790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 30,
        span: 8790..8791,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 240,
        column: 34,
        span: 8792..8795,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 35,
        span: 8795..8796,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 240,
        column: 40,
        span: 8797..8801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 41,
        span: 8801..8802,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
        column: 44,
        span: 8803..8805,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nil true\"",
        ),
        line: 240,
        column: 55,
        span: 8806..8816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 56,
        span: 8816..8817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
        column: 7,
        span: 8818..8824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 8,
        span: 8824..8825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 241,
        column: 14,
        span: 8825..8831,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 241,
        column: 15,
        span: 8831..8832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 241,
        column: 21,
        span: 8832..8838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 22,
        span: 8838..8839,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s %.4s\"",
        ),
        line: 241,
        column: 31,
        span: 8839..8848,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
        column: 32,
        span: 8848..8849,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 241,
        column: 38,
        span: 8850..8855,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
        column: 39,
        span: 8855..8856,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 241,
        column: 44,
        span: 8857..8861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 45,
        span: 8861..8862,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 241,
        column: 48,
        span: 8863..8865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"false true\"",
        ),
        line: 241,
        column: 61,
        span: 8866..8878,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 62,
        span: 8878..8879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 242,
        column: 7,
        span: 8880..8886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 8,
        span: 8886..8887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 242,
        column: 14,
        span: 8887..8893,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 242,
        column: 15,
        span: 8893..8894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 242,
        column: 21,
        span: 8894..8900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 22,
        span: 8900..8901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.3s %.3s\"",
        ),
        line: 242,
        column: 33,
        span: 8901..8912,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 34,
        span: 8912..8913,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 242,
        column: 40,
        span: 8914..8919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 41,
        span: 8919..8920,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 242,
        column: 46,
        span: 8921..8925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 47,
        span: 8925..8926,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 242,
        column: 50,
        span: 8927..8929,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fal tru\"",
        ),
        line: 242,
        column: 60,
        span: 8930..8939,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 61,
        span: 8939..8940,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 243,
        column: 6,
        span: 8941..8946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 243,
        column: 8,
        span: 8947..8948,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 10,
        span: 8949..8950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 243,
        column: 23,
        span: 8951..8963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 24,
        span: 8963..8964,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 243,
        column: 25,
        span: 8964..8965,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 243,
        column: 26,
        span: 8965..8966,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 27,
        span: 8966..8967,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 243,
        column: 29,
        span: 8968..8969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__tostring",
        ),
        line: 243,
        column: 39,
        span: 8969..8979,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 41,
        span: 8980..8981,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 243,
        column: 50,
        span: 8982..8990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 52,
        span: 8991..8992,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 53,
        span: 8992..8993,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 243,
        column: 60,
        span: 8994..9000,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello\"",
        ),
        line: 243,
        column: 68,
        span: 9001..9008,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 243,
        column: 72,
        span: 9009..9012,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 73,
        span: 9012..9013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__name",
        ),
        line: 244,
        column: 35,
        span: 9042..9048,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 244,
        column: 37,
        span: 9049..9050,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 244,
        column: 42,
        span: 9051..9055,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 244,
        column: 43,
        span: 9055..9056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 44,
        span: 9056..9057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 245,
        column: 7,
        span: 9058..9064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 8,
        span: 9064..9065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 245,
        column: 14,
        span: 9065..9071,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 15,
        span: 9071..9072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 245,
        column: 21,
        span: 9072..9078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 22,
        span: 9078..9079,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s %.10s\"",
        ),
        line: 245,
        column: 32,
        span: 9079..9089,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 33,
        span: 9089..9090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 245,
        column: 35,
        span: 9091..9092,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 36,
        span: 9092..9093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 245,
        column: 38,
        span: 9094..9095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 39,
        span: 9095..9096,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 245,
        column: 42,
        span: 9097..9099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello hello\"",
        ),
        line: 245,
        column: 56,
        span: 9100..9113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 57,
        span: 9113..9114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 246,
        column: 13,
        span: 9115..9127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 14,
        span: 9127..9128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 246,
        column: 15,
        span: 9128..9129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 16,
        span: 9129..9130,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 246,
        column: 17,
        span: 9130..9131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__tostring",
        ),
        line: 246,
        column: 27,
        span: 9131..9141,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 29,
        span: 9142..9143,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 246,
        column: 33,
        span: 9144..9147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 7,
        span: 9183..9189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 8,
        span: 9189..9190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 247,
        column: 14,
        span: 9190..9196,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 247,
        column: 15,
        span: 9196..9197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 247,
        column: 21,
        span: 9197..9203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 22,
        span: 9203..9204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.4s\"",
        ),
        line: 247,
        column: 28,
        span: 9204..9210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 29,
        span: 9210..9211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 247,
        column: 31,
        span: 9212..9213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 32,
        span: 9213..9214,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 247,
        column: 35,
        span: 9215..9217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi: \"",
        ),
        line: 247,
        column: 42,
        span: 9218..9224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 43,
        span: 9224..9225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 249,
        column: 13,
        span: 9227..9239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 14,
        span: 9239..9240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 249,
        column: 15,
        span: 9240..9241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 16,
        span: 9241..9242,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 249,
        column: 17,
        span: 9242..9243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__tostring",
        ),
        line: 249,
        column: 27,
        span: 9243..9253,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 29,
        span: 9254..9255,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 249,
        column: 38,
        span: 9256..9264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 40,
        span: 9265..9266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 41,
        span: 9266..9267,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 249,
        column: 48,
        span: 9268..9274,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 249,
        column: 50,
        span: 9275..9276,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 249,
        column: 51,
        span: 9276..9277,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
        column: 0,
        span: 9278..9281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 250,
        column: 11,
        span: 9282..9292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 12,
        span: 9292..9293,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'__tostring' must return a string\"",
        ),
        line: 250,
        column: 47,
        span: 9293..9328,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 48,
        span: 9328..9329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 250,
        column: 57,
        span: 9330..9338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 58,
        span: 9338..9339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 250,
        column: 60,
        span: 9340..9341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 61,
        span: 9341..9342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 7,
        span: 9345..9351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 8,
        span: 9351..9352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 253,
        column: 14,
        span: 9352..9358,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 15,
        span: 9358..9359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 253,
        column: 21,
        span: 9359..9365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 22,
        span: 9365..9366,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 253,
        column: 26,
        span: 9366..9370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 27,
        span: 9370..9371,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 253,
        column: 31,
        span: 9371..9375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 32,
        span: 9375..9376,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 35,
        span: 9377..9379,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 253,
        column: 39,
        span: 9380..9383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 40,
        span: 9383..9384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 7,
        span: 9385..9391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 8,
        span: 9391..9392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 254,
        column: 14,
        span: 9392..9398,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
        column: 15,
        span: 9398..9399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 254,
        column: 21,
        span: 9399..9405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 22,
        span: 9405..9406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%02x\"",
        ),
        line: 254,
        column: 28,
        span: 9406..9412,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 29,
        span: 9412..9413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 254,
        column: 33,
        span: 9413..9417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 34,
        span: 9417..9418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 254,
        column: 37,
        span: 9419..9421,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"00\"",
        ),
        line: 254,
        column: 42,
        span: 9422..9426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 43,
        span: 9426..9427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
        column: 7,
        span: 9428..9434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 8,
        span: 9434..9435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 255,
        column: 14,
        span: 9435..9441,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 255,
        column: 15,
        span: 9441..9442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 255,
        column: 21,
        span: 9442..9448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 22,
        span: 9448..9449,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%08X\"",
        ),
        line: 255,
        column: 28,
        span: 9449..9455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 29,
        span: 9455..9456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 255,
        column: 40,
        span: 9456..9467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 41,
        span: 9467..9468,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 255,
        column: 44,
        span: 9469..9471,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FFFFFFFF\"",
        ),
        line: 255,
        column: 55,
        span: 9472..9482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 56,
        span: 9482..9483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 7,
        span: 9484..9490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 8,
        span: 9490..9491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 256,
        column: 14,
        span: 9491..9497,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 256,
        column: 15,
        span: 9497..9498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 256,
        column: 21,
        span: 9498..9504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 22,
        span: 9504..9505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%+08d\"",
        ),
        line: 256,
        column: 29,
        span: 9505..9512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 30,
        span: 9512..9513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31501",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 36,
        span: 9513..9519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 37,
        span: 9519..9520,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 256,
        column: 40,
        span: 9521..9523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+0031501\"",
        ),
        line: 256,
        column: 51,
        span: 9524..9534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 52,
        span: 9534..9535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 7,
        span: 9536..9542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 8,
        span: 9542..9543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 257,
        column: 14,
        span: 9543..9549,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
        column: 15,
        span: 9549..9550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 257,
        column: 21,
        span: 9550..9556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 22,
        span: 9556..9557,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%+08d\"",
        ),
        line: 257,
        column: 29,
        span: 9557..9564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 30,
        span: 9564..9565,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 257,
        column: 32,
        span: 9566..9567,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30927",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 37,
        span: 9566..9572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 38,
        span: 9572..9573,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 257,
        column: 41,
        span: 9574..9576,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-0030927\"",
        ),
        line: 257,
        column: 52,
        span: 9577..9587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 53,
        span: 9587..9588,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 260,
        column: 3,
        span: 9591..9593,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 261,
        column: 8,
        span: 9639..9644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 261,
        column: 10,
        span: 9645..9646,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 12,
        span: 9647..9648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 0,
        span: 9648..9650,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 262,
        column: 8,
        span: 9653..9658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 262,
        column: 10,
        span: 9659..9660,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 12,
        span: 9661..9662,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 0,
        span: 9662..9668,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 263,
        column: 8,
        span: 9671..9676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 263,
        column: 10,
        span: 9677..9678,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 263,
        column: 12,
        span: 9679..9680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 14,
        span: 9680..9682,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 263,
        column: 16,
        span: 9683..9684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 263,
        column: 18,
        span: 9685..9686,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 263,
        column: 21,
        span: 9687..9689,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 264,
        column: 10,
        span: 9738..9743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 264,
        column: 12,
        span: 9744..9745,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 14,
        span: 9746..9747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 16,
        span: 9748..9749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 264,
        column: 17,
        span: 9749..9750,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 264,
        column: 19,
        span: 9751..9752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 264,
        column: 21,
        span: 9753..9754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 22,
        span: 9754..9755,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 264,
        column: 25,
        span: 9756..9758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 0,
        span: 9758..9760,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 265,
        column: 7,
        span: 9765..9767,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 10,
        span: 9767..9770,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 265,
        column: 11,
        span: 9770..9771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 265,
        column: 12,
        span: 9771..9772,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 265,
        column: 14,
        span: 9773..9774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 265,
        column: 19,
        span: 9775..9779,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 20,
        span: 9779..9780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 265,
        column: 24,
        span: 9780..9784,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 265,
        column: 29,
        span: 9785..9789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 265,
        column: 31,
        span: 9790..9791,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 33,
        span: 9792..9793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 265,
        column: 35,
        span: 9794..9795,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 265,
        column: 40,
        span: 9796..9800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 265,
        column: 42,
        span: 9801..9802,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 44,
        span: 9803..9804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 265,
        column: 46,
        span: 9805..9806,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 265,
        column: 0,
        span: 9807..9810,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 266,
        column: 0,
        span: 9813..9816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
        column: 9,
        span: 9819..9825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 10,
        span: 9825..9826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 12,
        span: 9825..9828,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 267,
        column: 13,
        span: 9828..9829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 267,
        column: 14,
        span: 9829..9830,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 267,
        column: 16,
        span: 9831..9832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 267,
        column: 21,
        span: 9833..9837,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 22,
        span: 9837..9838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 267,
        column: 26,
        span: 9838..9842,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 267,
        column: 30,
        span: 9843..9846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 33,
        span: 9846..9849,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 267,
        column: 34,
        span: 9849..9850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 267,
        column: 35,
        span: 9850..9851,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 38,
        span: 9852..9854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 267,
        column: 43,
        span: 9855..9859,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 44,
        span: 9859..9860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 267,
        column: 48,
        span: 9860..9864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 49,
        span: 9864..9865,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 268,
        column: 8,
        span: 9868..9873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 268,
        column: 10,
        span: 9874..9875,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
        column: 12,
        span: 9876..9877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 268,
        column: 19,
        span: 9878..9884,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 20,
        span: 9884..9885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 268,
        column: 26,
        span: 9885..9891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 27,
        span: 9891..9892,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%.99f'",
        ),
        line: 268,
        column: 34,
        span: 9892..9899,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 35,
        span: 9899..9900,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 268,
        column: 37,
        span: 9901..9902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 38,
        span: 9902..9903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 40,
        span: 9902..9905,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 268,
        column: 41,
        span: 9905..9906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 268,
        column: 42,
        span: 9906..9907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 43,
        span: 9907..9908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 44,
        span: 9908..9909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
        column: 9,
        span: 9912..9918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 10,
        span: 9918..9919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 269,
        column: 16,
        span: 9919..9925,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 17,
        span: 9925..9926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 269,
        column: 20,
        span: 9926..9929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 21,
        span: 9929..9930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 269,
        column: 22,
        span: 9930..9931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 23,
        span: 9931..9932,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 269,
        column: 26,
        span: 9933..9935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 269,
        column: 28,
        span: 9936..9937,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 269,
        column: 30,
        span: 9938..9939,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 34,
        span: 9939..9943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 35,
        span: 9943..9944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 270,
        column: 9,
        span: 9947..9953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 10,
        span: 9953..9954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 270,
        column: 18,
        span: 9954..9962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 19,
        span: 9962..9963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 270,
        column: 20,
        span: 9963..9964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 21,
        span: 9964..9965,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 24,
        span: 9966..9968,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 270,
        column: 26,
        span: 9969..9970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 27,
        span: 9970..9971,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 29,
        span: 9970..9973,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 270,
        column: 30,
        span: 9973..9974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 270,
        column: 31,
        span: 9974..9975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 32,
        span: 9975..9976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 33,
        span: 9976..9977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 273,
        column: 9,
        span: 10003..10009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 10,
        span: 10009..10010,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 12,
        span: 10009..10012,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 273,
        column: 13,
        span: 10012..10013,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "38",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 15,
        span: 10012..10015,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 273,
        column: 17,
        span: 10016..10017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 273,
        column: 22,
        span: 10018..10022,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 23,
        span: 10022..10023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 273,
        column: 27,
        span: 10023..10027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 28,
        span: 10027..10028,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 274,
        column: 8,
        span: 10031..10036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 274,
        column: 10,
        span: 10037..10038,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 274,
        column: 12,
        span: 10039..10040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 274,
        column: 19,
        span: 10041..10047,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
        column: 20,
        span: 10047..10048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 274,
        column: 26,
        span: 10048..10054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 27,
        span: 10054..10055,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%.99f'",
        ),
        line: 274,
        column: 34,
        span: 10055..10062,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 35,
        span: 10062..10063,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 274,
        column: 37,
        span: 10064..10065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 38,
        span: 10065..10066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 40,
        span: 10065..10068,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 274,
        column: 41,
        span: 10068..10069,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "38",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 43,
        span: 10068..10071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 44,
        span: 10071..10072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 45,
        span: 10072..10073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
        column: 9,
        span: 10076..10082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 10,
        span: 10082..10083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 275,
        column: 16,
        span: 10083..10089,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 275,
        column: 17,
        span: 10089..10090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 275,
        column: 20,
        span: 10090..10093,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 21,
        span: 10093..10094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 275,
        column: 22,
        span: 10094..10095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 23,
        span: 10095..10096,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 275,
        column: 26,
        span: 10097..10099,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "38",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 29,
        span: 10099..10102,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 275,
        column: 31,
        span: 10103..10104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 35,
        span: 10104..10108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 36,
        span: 10108..10109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 276,
        column: 9,
        span: 10112..10118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 10,
        span: 10118..10119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 276,
        column: 18,
        span: 10119..10127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 19,
        span: 10127..10128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 276,
        column: 20,
        span: 10128..10129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 21,
        span: 10129..10130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 276,
        column: 24,
        span: 10131..10133,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 276,
        column: 26,
        span: 10134..10135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 27,
        span: 10135..10136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 29,
        span: 10135..10138,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 276,
        column: 30,
        span: 10138..10139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "38",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 32,
        span: 10138..10141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 33,
        span: 10141..10142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 34,
        span: 10142..10143,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 277,
        column: 0,
        span: 10144..10147,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 281,
        column: 3,
        span: 10186..10188,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 282,
        column: 8,
        span: 10220..10225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 282,
        column: 12,
        span: 10226..10229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 13,
        span: 10229..10230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 282,
        column: 17,
        span: 10231..10234,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 282,
        column: 19,
        span: 10235..10236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        line: 282,
        column: 30,
        span: 10236..10247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 31,
        span: 10247..10248,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 282,
        column: 33,
        span: 10249..10250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80000000",
            ),
        ),
        line: 282,
        column: 43,
        span: 10249..10260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 283,
        column: 9,
        span: 10289..10295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 10,
        span: 10295..10296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 283,
        column: 16,
        span: 10296..10302,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 283,
        column: 17,
        span: 10302..10303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 283,
        column: 20,
        span: 10303..10306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 21,
        span: 10306..10307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 283,
        column: 27,
        span: 10307..10313,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 283,
        column: 28,
        span: 10313..10314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 283,
        column: 34,
        span: 10314..10320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 35,
        span: 10320..10321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%8x\"",
        ),
        line: 283,
        column: 40,
        span: 10321..10326,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 41,
        span: 10326..10327,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 283,
        column: 43,
        span: 10328..10329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 283,
        column: 44,
        span: 10328..10330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 45,
        span: 10330..10331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 46,
        span: 10331..10332,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 283,
        column: 48,
        span: 10333..10334,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 283,
        column: 49,
        span: 10333..10335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 50,
        span: 10335..10336,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 283,
        column: 53,
        span: 10337..10339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ffffffff\"",
        ),
        line: 283,
        column: 64,
        span: 10340..10350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 65,
        span: 10350..10351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 284,
        column: 9,
        span: 10354..10360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 10,
        span: 10360..10361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 284,
        column: 16,
        span: 10361..10367,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 284,
        column: 17,
        span: 10367..10368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 284,
        column: 23,
        span: 10368..10374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 24,
        span: 10374..10375,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 284,
        column: 28,
        span: 10375..10379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
        column: 29,
        span: 10379..10380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 284,
        column: 33,
        span: 10381..10384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 34,
        span: 10384..10385,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 284,
        column: 37,
        span: 10386..10388,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"7fffffff\"",
        ),
        line: 284,
        column: 48,
        span: 10389..10399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 49,
        span: 10399..10400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 285,
        column: 9,
        span: 10403..10409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 10,
        span: 10409..10410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 285,
        column: 16,
        span: 10410..10416,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 285,
        column: 17,
        span: 10416..10417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 285,
        column: 20,
        span: 10417..10420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 21,
        span: 10420..10421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 285,
        column: 27,
        span: 10421..10427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 285,
        column: 28,
        span: 10427..10428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 285,
        column: 34,
        span: 10428..10434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 35,
        span: 10434..10435,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 285,
        column: 39,
        span: 10435..10439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 40,
        span: 10439..10440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 285,
        column: 44,
        span: 10441..10444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 45,
        span: 10444..10445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 46,
        span: 10445..10446,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 285,
        column: 48,
        span: 10447..10448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 49,
        span: 10447..10449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 50,
        span: 10449..10450,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 285,
        column: 53,
        span: 10451..10453,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"80000000\"",
        ),
        line: 285,
        column: 64,
        span: 10454..10464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 65,
        span: 10464..10465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 286,
        column: 9,
        span: 10468..10474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 10,
        span: 10474..10475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 286,
        column: 16,
        span: 10475..10481,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 286,
        column: 17,
        span: 10481..10482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 286,
        column: 23,
        span: 10482..10488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 24,
        span: 10488..10489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 286,
        column: 28,
        span: 10489..10493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 29,
        span: 10493..10494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 286,
        column: 33,
        span: 10495..10498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 34,
        span: 10498..10499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 286,
        column: 37,
        span: 10500..10502,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2147483647\"",
        ),
        line: 286,
        column: 51,
        span: 10504..10516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 52,
        span: 10516..10517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 287,
        column: 9,
        span: 10520..10526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 10,
        span: 10526..10527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 287,
        column: 16,
        span: 10527..10533,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 287,
        column: 17,
        span: 10533..10534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 287,
        column: 23,
        span: 10534..10540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 24,
        span: 10540..10541,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 287,
        column: 28,
        span: 10541..10545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 29,
        span: 10545..10546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 287,
        column: 33,
        span: 10547..10550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 34,
        span: 10550..10551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 287,
        column: 37,
        span: 10552..10554,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-2147483648\"",
        ),
        line: 287,
        column: 51,
        span: 10555..10568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 52,
        span: 10568..10569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 288,
        column: 9,
        span: 10572..10578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 10,
        span: 10578..10579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 288,
        column: 16,
        span: 10579..10585,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 288,
        column: 17,
        span: 10585..10586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 288,
        column: 23,
        span: 10586..10592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 24,
        span: 10592..10593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%u\"",
        ),
        line: 288,
        column: 28,
        span: 10593..10597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 29,
        span: 10597..10598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 288,
        column: 40,
        span: 10598..10609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 41,
        span: 10609..10610,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 288,
        column: 44,
        span: 10611..10613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4294967295\"",
        ),
        line: 288,
        column: 57,
        span: 10614..10626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 58,
        span: 10626..10627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 289,
        column: 9,
        span: 10630..10636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 10,
        span: 10636..10637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 289,
        column: 16,
        span: 10637..10643,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 289,
        column: 17,
        span: 10643..10644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 289,
        column: 23,
        span: 10644..10650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 24,
        span: 10650..10651,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%o\"",
        ),
        line: 289,
        column: 28,
        span: 10651..10655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
        column: 29,
        span: 10655..10656,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xABCD",
            ),
        ),
        line: 289,
        column: 36,
        span: 10656..10663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 37,
        span: 10663..10664,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 289,
        column: 40,
        span: 10665..10667,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"125715\"",
        ),
        line: 289,
        column: 49,
        span: 10668..10676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 50,
        span: 10676..10677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 291,
        column: 6,
        span: 10681..10684,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 7,
        span: 10684..10685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 291,
        column: 11,
        span: 10686..10689,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 291,
        column: 13,
        span: 10690..10691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffffffffffff",
            ),
        ),
        line: 291,
        column: 32,
        span: 10691..10710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 33,
        span: 10710..10711,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 291,
        column: 35,
        span: 10712..10713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x8000000000000000",
            ),
        ),
        line: 291,
        column: 0,
        span: 10712..10731,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 292,
        column: 5,
        span: 10734..10736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 292,
        column: 9,
        span: 10737..10740,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 292,
        column: 11,
        span: 10741..10742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 292,
        column: 15,
        span: 10742..10746,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 292,
        column: 16,
        span: 10746..10747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "53",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 18,
        span: 10746..10749,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 292,
        column: 23,
        span: 10750..10754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 293,
        column: 11,
        span: 10780..10786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 12,
        span: 10786..10787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 293,
        column: 18,
        span: 10787..10793,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 293,
        column: 19,
        span: 10793..10794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 293,
        column: 25,
        span: 10794..10800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 26,
        span: 10800..10801,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 293,
        column: 30,
        span: 10801..10805,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 31,
        span: 10805..10806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 33,
        span: 10807..10808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 34,
        span: 10807..10809,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 293,
        column: 35,
        span: 10809..10810,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "52",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 37,
        span: 10809..10812,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 293,
        column: 39,
        span: 10813..10814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 41,
        span: 10814..10816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 42,
        span: 10816..10817,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 293,
        column: 44,
        span: 10818..10819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 46,
        span: 10819..10821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 47,
        span: 10821..10822,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 293,
        column: 50,
        span: 10823..10825,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fffffffffffff\"",
        ),
        line: 293,
        column: 66,
        span: 10826..10841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 67,
        span: 10841..10842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 294,
        column: 11,
        span: 10847..10853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 12,
        span: 10853..10854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 294,
        column: 18,
        span: 10854..10860,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
        column: 19,
        span: 10860..10861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 294,
        column: 25,
        span: 10861..10867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 26,
        span: 10867..10868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x%8X\"",
        ),
        line: 294,
        column: 33,
        span: 10868..10875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 34,
        span: 10875..10876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x8f000003",
            ),
        ),
        line: 294,
        column: 45,
        span: 10876..10887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 46,
        span: 10887..10888,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 294,
        column: 49,
        span: 10889..10891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x8F000003\"",
        ),
        line: 294,
        column: 62,
        span: 10892..10904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 63,
        span: 10904..10905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 295,
        column: 11,
        span: 10910..10916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 12,
        span: 10916..10917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 295,
        column: 18,
        span: 10917..10923,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 295,
        column: 19,
        span: 10923..10924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 295,
        column: 25,
        span: 10924..10930,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 26,
        span: 10930..10931,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 295,
        column: 30,
        span: 10931..10935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 31,
        span: 10935..10936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 33,
        span: 10936..10938,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 295,
        column: 34,
        span: 10938..10939,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "53",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 36,
        span: 10938..10941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 37,
        span: 10941..10942,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 40,
        span: 10943..10945,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"9007199254740992\"",
        ),
        line: 295,
        column: 59,
        span: 10946..10964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 60,
        span: 10964..10965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 296,
        column: 11,
        span: 10970..10976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 12,
        span: 10976..10977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 296,
        column: 18,
        span: 10977..10983,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 296,
        column: 19,
        span: 10983..10984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 296,
        column: 25,
        span: 10984..10990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 26,
        span: 10990..10991,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%i\"",
        ),
        line: 296,
        column: 30,
        span: 10991..10995,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
        column: 31,
        span: 10995..10996,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 296,
        column: 33,
        span: 10997..10998,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 34,
        span: 10997..10999,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 296,
        column: 35,
        span: 10999..11000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "53",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 37,
        span: 10999..11002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 38,
        span: 11002..11003,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 296,
        column: 41,
        span: 11004..11006,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-9007199254740992\"",
        ),
        line: 296,
        column: 61,
        span: 11007..11026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 62,
        span: 11026..11027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 297,
        column: 11,
        span: 11032..11038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 12,
        span: 11038..11039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 297,
        column: 18,
        span: 11039..11045,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 297,
        column: 19,
        span: 11045..11046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 297,
        column: 25,
        span: 11046..11052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 26,
        span: 11052..11053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 297,
        column: 30,
        span: 11053..11057,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 31,
        span: 11057..11058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 297,
        column: 35,
        span: 11059..11062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 36,
        span: 11062..11063,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 297,
        column: 39,
        span: 11064..11066,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"7fffffffffffffff\"",
        ),
        line: 297,
        column: 58,
        span: 11067..11085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 59,
        span: 11085..11086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 11,
        span: 11091..11097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 12,
        span: 11097..11098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 298,
        column: 18,
        span: 11098..11104,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 19,
        span: 11104..11105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 298,
        column: 25,
        span: 11105..11111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 26,
        span: 11111..11112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 298,
        column: 30,
        span: 11112..11116,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 31,
        span: 11116..11117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 298,
        column: 35,
        span: 11118..11121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 36,
        span: 11121..11122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 39,
        span: 11123..11125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"8000000000000000\"",
        ),
        line: 298,
        column: 58,
        span: 11126..11144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 59,
        span: 11144..11145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 11,
        span: 11150..11156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 12,
        span: 11156..11157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 299,
        column: 18,
        span: 11157..11163,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 19,
        span: 11163..11164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 299,
        column: 25,
        span: 11164..11170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 26,
        span: 11170..11171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 299,
        column: 30,
        span: 11171..11175,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 299,
        column: 31,
        span: 11175..11176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 299,
        column: 35,
        span: 11177..11180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 36,
        span: 11180..11181,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 39,
        span: 11182..11184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"9223372036854775807\"",
        ),
        line: 299,
        column: 62,
        span: 11186..11207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 63,
        span: 11207..11208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 300,
        column: 11,
        span: 11213..11219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 12,
        span: 11219..11220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 300,
        column: 18,
        span: 11220..11226,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 300,
        column: 19,
        span: 11226..11227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 300,
        column: 25,
        span: 11227..11233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 26,
        span: 11233..11234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 300,
        column: 30,
        span: 11234..11238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
        column: 31,
        span: 11238..11239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 300,
        column: 35,
        span: 11240..11243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 36,
        span: 11243..11244,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 300,
        column: 39,
        span: 11245..11247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-9223372036854775808\"",
        ),
        line: 300,
        column: 62,
        span: 11248..11270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 63,
        span: 11270..11271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 301,
        column: 11,
        span: 11276..11282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 12,
        span: 11282..11283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 301,
        column: 18,
        span: 11283..11289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 301,
        column: 19,
        span: 11289..11290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 301,
        column: 25,
        span: 11290..11296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 26,
        span: 11296..11297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%u\"",
        ),
        line: 301,
        column: 30,
        span: 11297..11301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 31,
        span: 11301..11302,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 301,
        column: 33,
        span: 11303..11304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 34,
        span: 11304..11305,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 301,
        column: 35,
        span: 11305..11306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 301,
        column: 36,
        span: 11305..11307,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 301,
        column: 39,
        span: 11308..11310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 301,
        column: 42,
        span: 11310..11313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 43,
        span: 11313..11314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 44,
        span: 11314..11315,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 301,
        column: 47,
        span: 11316..11318,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"18446744073709551615\"",
        ),
        line: 301,
        column: 70,
        span: 11319..11341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 71,
        span: 11341..11342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 302,
        column: 11,
        span: 11347..11353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 12,
        span: 11353..11354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 302,
        column: 20,
        span: 11354..11362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 21,
        span: 11362..11363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1234567890123",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 34,
        span: 11362..11376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 35,
        span: 11376..11377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 302,
        column: 38,
        span: 11378..11380,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1234567890123'",
        ),
        line: 302,
        column: 54,
        span: 11381..11396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 55,
        span: 11396..11397,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 303,
        column: 0,
        span: 11400..11403,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 304,
        column: 0,
        span: 11404..11407,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 307,
        column: 3,
        span: 11410..11412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 307,
        column: 9,
        span: 11413..11418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 10,
        span: 11418..11419,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'format %a %A'\"",
        ),
        line: 307,
        column: 34,
        span: 11419..11443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 35,
        span: 11443..11444,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 308,
        column: 8,
        span: 11447..11452,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 308,
        column: 17,
        span: 11453..11461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "matchhexa",
        ),
        line: 308,
        column: 27,
        span: 11462..11471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 29,
        span: 11472..11473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 308,
        column: 30,
        span: 11473..11474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 31,
        span: 11474..11475,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 309,
        column: 10,
        span: 11480..11485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 309,
        column: 12,
        span: 11486..11487,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 309,
        column: 14,
        span: 11488..11489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 309,
        column: 21,
        span: 11490..11496,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 309,
        column: 22,
        span: 11496..11497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 309,
        column: 28,
        span: 11497..11503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 29,
        span: 11503..11504,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%a\"",
        ),
        line: 309,
        column: 33,
        span: 11504..11508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 34,
        span: 11508..11509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 309,
        column: 36,
        span: 11510..11511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 37,
        span: 11511..11512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 311,
        column: 11,
        span: 11558..11564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 12,
        span: 11564..11565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 311,
        column: 18,
        span: 11565..11571,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 311,
        column: 19,
        span: 11571..11572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 311,
        column: 23,
        span: 11572..11576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 24,
        span: 11576..11577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 311,
        column: 25,
        span: 11577..11578,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 26,
        span: 11578..11579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%-?0x[1-9a-f]%.?[0-9a-f]*p[-+]?%d+$\"",
        ),
        line: 311,
        column: 65,
        span: 11580..11618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 66,
        span: 11618..11619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 67,
        span: 11619..11620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 312,
        column: 11,
        span: 11625..11631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 12,
        span: 11631..11632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 312,
        column: 20,
        span: 11632..11640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 21,
        span: 11640..11641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 312,
        column: 22,
        span: 11641..11642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 23,
        span: 11642..11643,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 312,
        column: 26,
        span: 11644..11646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 312,
        column: 28,
        span: 11647..11648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 29,
        span: 11648..11649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 313,
        column: 6,
        span: 11681..11682,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
        column: 8,
        span: 11683..11684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 313,
        column: 15,
        span: 11685..11691,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
        column: 16,
        span: 11691..11692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 313,
        column: 22,
        span: 11692..11698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 23,
        span: 11698..11699,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%A\"",
        ),
        line: 313,
        column: 27,
        span: 11699..11703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 28,
        span: 11703..11704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 313,
        column: 30,
        span: 11705..11706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 31,
        span: 11706..11707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 314,
        column: 11,
        span: 11712..11718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 12,
        span: 11718..11719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 314,
        column: 18,
        span: 11719..11725,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 314,
        column: 19,
        span: 11725..11726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 314,
        column: 23,
        span: 11726..11730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 24,
        span: 11730..11731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 314,
        column: 25,
        span: 11731..11732,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 314,
        column: 26,
        span: 11732..11733,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%-?0X[1-9A-F]%.?[0-9A-F]*P[-+]?%d+$\"",
        ),
        line: 314,
        column: 65,
        span: 11734..11772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 66,
        span: 11772..11773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 67,
        span: 11773..11774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 315,
        column: 11,
        span: 11779..11785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 12,
        span: 11785..11786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 315,
        column: 20,
        span: 11786..11794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 21,
        span: 11794..11795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 315,
        column: 22,
        span: 11795..11796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 23,
        span: 11796..11797,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 315,
        column: 26,
        span: 11798..11800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 315,
        column: 28,
        span: 11801..11802,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 29,
        span: 11802..11803,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 316,
        column: 0,
        span: 11806..11809,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 317,
        column: 6,
        span: 11812..11815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 317,
        column: 8,
        span: 11816..11817,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 9,
        span: 11817..11818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 317,
        column: 11,
        span: 11819..11820,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 317,
        column: 14,
        span: 11821..11823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 317,
        column: 21,
        span: 11824..11830,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 317,
        column: 22,
        span: 11830..11831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 317,
        column: 25,
        span: 11830..11834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 26,
        span: 11834..11835,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 317,
        column: 28,
        span: 11836..11837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 317,
        column: 31,
        span: 11836..11840,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 32,
        span: 11840..11841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 34,
        span: 11841..11843,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 317,
        column: 35,
        span: 11843..11844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 36,
        span: 11843..11845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 37,
        span: 11845..11846,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 317,
        column: 39,
        span: 11847..11848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 40,
        span: 11847..11849,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 317,
        column: 41,
        span: 11849..11850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 42,
        span: 11849..11851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 43,
        span: 11851..11852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 317,
        column: 48,
        span: 11852..11857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 49,
        span: 11857..11858,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 317,
        column: 51,
        span: 11859..11860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 317,
        column: 55,
        span: 11859..11864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 56,
        span: 11864..11865,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 318,
        column: 23,
        span: 11887..11888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 25,
        span: 11887..11890,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 318,
        column: 26,
        span: 11890..11891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "247",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 29,
        span: 11890..11894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 30,
        span: 11894..11895,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 32,
        span: 11895..11897,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 33,
        span: 11897..11898,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 318,
        column: 35,
        span: 11899..11900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 36,
        span: 11899..11901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 37,
        span: 11901..11902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 39,
        span: 11902..11904,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 40,
        span: 11904..11905,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 318,
        column: 42,
        span: 11906..11907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 43,
        span: 11906..11908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 44,
        span: 11908..11909,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "-20",
            },
        ),
        line: 318,
        column: 50,
        span: 11909..11915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 51,
        span: 11915..11916,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 318,
        column: 53,
        span: 11917..11918,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "-20",
            },
        ),
        line: 318,
        column: 58,
        span: 11917..11923,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 318,
        column: 59,
        span: 11923..11924,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 318,
        column: 0,
        span: 11925..11927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "matchhexa",
        ),
        line: 319,
        column: 14,
        span: 11932..11941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 15,
        span: 11941..11942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 319,
        column: 16,
        span: 11942..11943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 17,
        span: 11943..11944,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 320,
        column: 0,
        span: 11947..11950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 322,
        column: 9,
        span: 11954..11960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 10,
        span: 11960..11961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 322,
        column: 16,
        span: 11961..11967,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 322,
        column: 17,
        span: 11967..11968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 322,
        column: 21,
        span: 11968..11972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 22,
        span: 11972..11973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 322,
        column: 28,
        span: 11973..11979,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 322,
        column: 29,
        span: 11979..11980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 322,
        column: 35,
        span: 11980..11986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 36,
        span: 11986..11987,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%A\"",
        ),
        line: 322,
        column: 40,
        span: 11987..11991,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
        column: 41,
        span: 11991..11992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 322,
        column: 45,
        span: 11992..11996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 46,
        span: 11996..11997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
        column: 47,
        span: 11997..11998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^0X0%.?0*P%+?0$\"",
        ),
        line: 322,
        column: 65,
        span: 11999..12016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 66,
        span: 12016..12017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 67,
        span: 12017..12018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 323,
        column: 9,
        span: 12021..12027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 10,
        span: 12027..12028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 323,
        column: 16,
        span: 12028..12034,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 323,
        column: 17,
        span: 12034..12035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 323,
        column: 21,
        span: 12035..12039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 22,
        span: 12039..12040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 323,
        column: 28,
        span: 12040..12046,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 323,
        column: 29,
        span: 12046..12047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 323,
        column: 35,
        span: 12047..12053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 36,
        span: 12053..12054,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%a\"",
        ),
        line: 323,
        column: 40,
        span: 12054..12058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 41,
        span: 12058..12059,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 323,
        column: 43,
        span: 12060..12061,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 323,
        column: 46,
        span: 12060..12064,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 47,
        span: 12064..12065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 48,
        span: 12065..12066,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%-0x0%.?0*p%+?0$\"",
        ),
        line: 323,
        column: 68,
        span: 12067..12086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 69,
        span: 12086..12087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 70,
        span: 12087..12088,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 325,
        column: 5,
        span: 12092..12094,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 325,
        column: 9,
        span: 12095..12098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 325,
        column: 15,
        span: 12099..12104,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 325,
        column: 20,
        span: 12105..12109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 326,
        column: 11,
        span: 12149..12155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 12,
        span: 12155..12156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 326,
        column: 18,
        span: 12156..12162,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 326,
        column: 19,
        span: 12162..12163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 326,
        column: 23,
        span: 12163..12167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 24,
        span: 12167..12168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 326,
        column: 30,
        span: 12168..12174,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 326,
        column: 31,
        span: 12174..12175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 326,
        column: 37,
        span: 12175..12181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 38,
        span: 12181..12182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%a\"",
        ),
        line: 326,
        column: 42,
        span: 12182..12186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
        column: 43,
        span: 12186..12187,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 326,
        column: 45,
        span: 12187..12189,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 326,
        column: 46,
        span: 12189..12190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 326,
        column: 47,
        span: 12189..12191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 48,
        span: 12191..12192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
        column: 49,
        span: 12192..12193,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^inf\"",
        ),
        line: 326,
        column: 56,
        span: 12194..12200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 57,
        span: 12200..12201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 58,
        span: 12201..12202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 327,
        column: 11,
        span: 12207..12213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 12,
        span: 12213..12214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 327,
        column: 18,
        span: 12214..12220,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 327,
        column: 19,
        span: 12220..12221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 327,
        column: 23,
        span: 12221..12225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 24,
        span: 12225..12226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 327,
        column: 30,
        span: 12226..12232,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 327,
        column: 31,
        span: 12232..12233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 327,
        column: 37,
        span: 12233..12239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 38,
        span: 12239..12240,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%A\"",
        ),
        line: 327,
        column: 42,
        span: 12240..12244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 43,
        span: 12244..12245,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 327,
        column: 45,
        span: 12246..12247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 46,
        span: 12246..12248,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 327,
        column: 47,
        span: 12248..12249,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 48,
        span: 12248..12250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 49,
        span: 12250..12251,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 50,
        span: 12251..12252,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%-INF\"",
        ),
        line: 327,
        column: 59,
        span: 12253..12261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 60,
        span: 12261..12262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 61,
        span: 12262..12263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 328,
        column: 11,
        span: 12268..12274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 12,
        span: 12274..12275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 328,
        column: 18,
        span: 12275..12281,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 328,
        column: 19,
        span: 12281..12282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 328,
        column: 23,
        span: 12282..12286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 24,
        span: 12286..12287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 328,
        column: 30,
        span: 12287..12293,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 328,
        column: 31,
        span: 12293..12294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 328,
        column: 37,
        span: 12294..12300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 38,
        span: 12300..12301,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%a\"",
        ),
        line: 328,
        column: 42,
        span: 12301..12305,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 328,
        column: 43,
        span: 12305..12306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 328,
        column: 45,
        span: 12306..12308,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 328,
        column: 46,
        span: 12308..12309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 328,
        column: 47,
        span: 12308..12310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 48,
        span: 12310..12311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 328,
        column: 49,
        span: 12311..12312,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%-?nan\"",
        ),
        line: 328,
        column: 59,
        span: 12313..12322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 60,
        span: 12322..12323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 61,
        span: 12323..12324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 329,
        column: 11,
        span: 12329..12335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 12,
        span: 12335..12336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 329,
        column: 18,
        span: 12336..12342,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
        column: 19,
        span: 12342..12343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 329,
        column: 23,
        span: 12343..12347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 24,
        span: 12347..12348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 329,
        column: 30,
        span: 12348..12354,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
        column: 31,
        span: 12354..12355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 329,
        column: 37,
        span: 12355..12361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 38,
        span: 12361..12362,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%a\"",
        ),
        line: 329,
        column: 42,
        span: 12362..12366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
        column: 43,
        span: 12366..12367,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 329,
        column: 45,
        span: 12368..12369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 329,
        column: 48,
        span: 12368..12372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 49,
        span: 12372..12373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
        column: 50,
        span: 12373..12374,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%-0x0\"",
        ),
        line: 329,
        column: 59,
        span: 12375..12383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 60,
        span: 12383..12384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 61,
        span: 12384..12385,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 330,
        column: 0,
        span: 12388..12391,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 332,
        column: 5,
        span: 12397..12399,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 332,
        column: 9,
        span: 12400..12403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 332,
        column: 15,
        span: 12404..12409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 16,
        span: 12409..12410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 332,
        column: 22,
        span: 12410..12416,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 332,
        column: 23,
        span: 12416..12417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 332,
        column: 29,
        span: 12417..12423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 332,
        column: 30,
        span: 12423..12424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.3a\"",
        ),
        line: 332,
        column: 37,
        span: 12425..12431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 332,
        column: 38,
        span: 12431..12432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 40,
        span: 12432..12434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 41,
        span: 12434..12435,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 332,
        column: 0,
        span: 12436..12440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 6,
        span: 12445..12446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 333,
        column: 13,
        span: 12446..12453,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 333,
        column: 16,
        span: 12454..12456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 333,
        column: 22,
        span: 12457..12462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 23,
        span: 12462..12463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 24,
        span: 12463..12464,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n >>> modifiers for format '%a' not available <<<\\n\"",
        ),
        line: 333,
        column: 78,
        span: 12464..12518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 79,
        span: 12518..12519,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 334,
        column: 0,
        span: 12522..12526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 335,
        column: 11,
        span: 12531..12537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 12,
        span: 12537..12538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 335,
        column: 18,
        span: 12538..12544,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 335,
        column: 19,
        span: 12544..12545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 335,
        column: 23,
        span: 12545..12549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 24,
        span: 12549..12550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 335,
        column: 30,
        span: 12550..12556,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 335,
        column: 31,
        span: 12556..12557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 335,
        column: 37,
        span: 12557..12563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 38,
        span: 12563..12564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%+.2A\"",
        ),
        line: 335,
        column: 45,
        span: 12564..12571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 335,
        column: 46,
        span: 12571..12572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
        column: 49,
        span: 12572..12575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 50,
        span: 12575..12576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 335,
        column: 51,
        span: 12576..12577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%+0X%x%.%x0P%+?%d$\"",
        ),
        line: 335,
        column: 73,
        span: 12578..12599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 74,
        span: 12599..12600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 75,
        span: 12600..12601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 336,
        column: 11,
        span: 12606..12612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 12,
        span: 12612..12613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 336,
        column: 18,
        span: 12613..12619,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
        column: 19,
        span: 12619..12620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 336,
        column: 23,
        span: 12620..12624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 24,
        span: 12624..12625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 336,
        column: 30,
        span: 12625..12631,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
        column: 31,
        span: 12631..12632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 336,
        column: 37,
        span: 12632..12638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 38,
        span: 12638..12639,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.4A\"",
        ),
        line: 336,
        column: 44,
        span: 12639..12645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 45,
        span: 12645..12646,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 336,
        column: 47,
        span: 12647..12648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 49,
        span: 12647..12650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 50,
        span: 12650..12651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 51,
        span: 12651..12652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%-0X%x%.%x000P%+?%d$\"",
        ),
        line: 336,
        column: 75,
        span: 12653..12676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 76,
        span: 12676..12677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 77,
        span: 12677..12678,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 337,
        column: 0,
        span: 12681..12684,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 338,
        column: 0,
        span: 12685..12688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
        column: 7,
        span: 12756..12762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 8,
        span: 12762..12763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 342,
        column: 14,
        span: 12763..12769,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 15,
        span: 12769..12770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 342,
        column: 21,
        span: 12770..12776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 22,
        span: 12776..12777,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%#12o\"",
        ),
        line: 342,
        column: 29,
        span: 12777..12784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 30,
        span: 12784..12785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 33,
        span: 12785..12788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 34,
        span: 12788..12789,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 342,
        column: 37,
        span: 12790..12792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"         012\"",
        ),
        line: 342,
        column: 52,
        span: 12793..12807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 53,
        span: 12807..12808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 343,
        column: 7,
        span: 12809..12815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 8,
        span: 12815..12816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 343,
        column: 14,
        span: 12816..12822,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
        column: 15,
        span: 12822..12823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 343,
        column: 21,
        span: 12823..12829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 22,
        span: 12829..12830,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%#10x\"",
        ),
        line: 343,
        column: 29,
        span: 12830..12837,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
        column: 30,
        span: 12837..12838,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
        column: 34,
        span: 12838..12842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 35,
        span: 12842..12843,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 343,
        column: 38,
        span: 12844..12846,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"      0x64\"",
        ),
        line: 343,
        column: 51,
        span: 12847..12859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 52,
        span: 12859..12860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 344,
        column: 7,
        span: 12861..12867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 8,
        span: 12867..12868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 344,
        column: 14,
        span: 12868..12874,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
        column: 15,
        span: 12874..12875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 344,
        column: 21,
        span: 12875..12881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 22,
        span: 12881..12882,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%#-17X\"",
        ),
        line: 344,
        column: 30,
        span: 12882..12890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
        column: 31,
        span: 12890..12891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 344,
        column: 35,
        span: 12891..12895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 36,
        span: 12895..12896,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 344,
        column: 39,
        span: 12897..12899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0X64             \"",
        ),
        line: 344,
        column: 59,
        span: 12900..12919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 60,
        span: 12919..12920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 345,
        column: 7,
        span: 12921..12927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 8,
        span: 12927..12928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 345,
        column: 14,
        span: 12928..12934,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
        column: 15,
        span: 12934..12935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 345,
        column: 21,
        span: 12935..12941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 22,
        span: 12941..12942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%013i\"",
        ),
        line: 345,
        column: 29,
        span: 12942..12949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 30,
        span: 12949..12950,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 345,
        column: 32,
        span: 12951..12952,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 345,
        column: 35,
        span: 12951..12955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 36,
        span: 12955..12956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 345,
        column: 39,
        span: 12957..12959,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-000000000100\"",
        ),
        line: 345,
        column: 55,
        span: 12960..12975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 56,
        span: 12975..12976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 346,
        column: 7,
        span: 12977..12983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 8,
        span: 12983..12984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 346,
        column: 14,
        span: 12984..12990,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 346,
        column: 15,
        span: 12990..12991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 346,
        column: 21,
        span: 12991..12997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 22,
        span: 12997..12998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%2.5d\"",
        ),
        line: 346,
        column: 29,
        span: 12998..13005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 30,
        span: 13005..13006,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 346,
        column: 32,
        span: 13007..13008,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 35,
        span: 13007..13011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 36,
        span: 13011..13012,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 39,
        span: 13013..13015,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-00100\"",
        ),
        line: 346,
        column: 48,
        span: 13016..13024,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 49,
        span: 13024..13025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 347,
        column: 7,
        span: 13026..13032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 8,
        span: 13032..13033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 347,
        column: 14,
        span: 13033..13039,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
        column: 15,
        span: 13039..13040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 347,
        column: 21,
        span: 13040..13046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 22,
        span: 13046..13047,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.u\"",
        ),
        line: 347,
        column: 27,
        span: 13047..13052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 28,
        span: 13052..13053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 30,
        span: 13053..13055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 31,
        span: 13055..13056,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 347,
        column: 34,
        span: 13057..13059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 347,
        column: 37,
        span: 13060..13062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 38,
        span: 13062..13063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
        column: 7,
        span: 13064..13070,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 8,
        span: 13070..13071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 348,
        column: 14,
        span: 13071..13077,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 348,
        column: 15,
        span: 13077..13078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 348,
        column: 21,
        span: 13078..13084,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 22,
        span: 13084..13085,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%+#014.0f\"",
        ),
        line: 348,
        column: 33,
        span: 13085..13096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
        column: 34,
        span: 13096..13097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 38,
        span: 13097..13101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 39,
        span: 13101..13102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 348,
        column: 42,
        span: 13103..13105,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+000000000100.\"",
        ),
        line: 348,
        column: 59,
        span: 13106..13122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 60,
        span: 13122..13123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 349,
        column: 7,
        span: 13124..13130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 8,
        span: 13130..13131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 349,
        column: 14,
        span: 13131..13137,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 349,
        column: 15,
        span: 13137..13138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 349,
        column: 21,
        span: 13138..13144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 22,
        span: 13144..13145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"% 1.0E\"",
        ),
        line: 349,
        column: 30,
        span: 13145..13153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
        column: 31,
        span: 13153..13154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 349,
        column: 35,
        span: 13154..13158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 36,
        span: 13158..13159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 349,
        column: 39,
        span: 13160..13162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 1E+02\"",
        ),
        line: 349,
        column: 48,
        span: 13163..13171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 49,
        span: 13171..13172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 350,
        column: 7,
        span: 13173..13179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 8,
        span: 13179..13180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 350,
        column: 14,
        span: 13180..13186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 350,
        column: 15,
        span: 13186..13187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 350,
        column: 21,
        span: 13187..13193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 22,
        span: 13193..13194,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%-16c\"",
        ),
        line: 350,
        column: 29,
        span: 13194..13201,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 350,
        column: 30,
        span: 13201..13202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        line: 350,
        column: 33,
        span: 13202..13205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 34,
        span: 13205..13206,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 350,
        column: 37,
        span: 13207..13209,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a               \"",
        ),
        line: 350,
        column: 56,
        span: 13210..13228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 57,
        span: 13228..13229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 351,
        column: 7,
        span: 13230..13236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 8,
        span: 13236..13237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 351,
        column: 14,
        span: 13237..13243,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 351,
        column: 15,
        span: 13243..13244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 351,
        column: 21,
        span: 13244..13250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 22,
        span: 13250..13251,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%+.3G\"",
        ),
        line: 351,
        column: 29,
        span: 13251..13258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
        column: 30,
        span: 13258..13259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 351,
        column: 34,
        span: 13259..13263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 35,
        span: 13263..13264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 351,
        column: 38,
        span: 13265..13267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+1.5\"",
        ),
        line: 351,
        column: 45,
        span: 13268..13274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 46,
        span: 13274..13275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 352,
        column: 7,
        span: 13276..13282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 8,
        span: 13282..13283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 352,
        column: 14,
        span: 13283..13289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
        column: 15,
        span: 13289..13290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 352,
        column: 21,
        span: 13290..13296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 22,
        span: 13296..13297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"% .1g\"",
        ),
        line: 352,
        column: 29,
        span: 13297..13304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 352,
        column: 30,
        span: 13304..13305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
        column: 32,
        span: 13305..13307,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 352,
        column: 33,
        span: 13307..13308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
        column: 35,
        span: 13307..13310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 36,
        span: 13310..13311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 352,
        column: 39,
        span: 13312..13314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 1e+03\"",
        ),
        line: 352,
        column: 48,
        span: 13315..13323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 49,
        span: 13323..13324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 353,
        column: 7,
        span: 13325..13331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 8,
        span: 13331..13332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 353,
        column: 14,
        span: 13332..13338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 353,
        column: 15,
        span: 13338..13339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 353,
        column: 21,
        span: 13339..13345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 22,
        span: 13345..13346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.0s\"",
        ),
        line: 353,
        column: 28,
        span: 13346..13352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 353,
        column: 29,
        span: 13352..13353,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 353,
        column: 35,
        span: 13354..13359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 36,
        span: 13359..13360,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
        column: 40,
        span: 13362..13364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 353,
        column: 43,
        span: 13365..13367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 44,
        span: 13367..13368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 354,
        column: 7,
        span: 13369..13375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 8,
        span: 13375..13376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 354,
        column: 14,
        span: 13376..13382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 354,
        column: 15,
        span: 13382..13383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 354,
        column: 21,
        span: 13383..13389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 22,
        span: 13389..13390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.s\"",
        ),
        line: 354,
        column: 27,
        span: 13390..13395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 28,
        span: 13395..13396,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 354,
        column: 34,
        span: 13397..13402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 35,
        span: 13402..13403,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 354,
        column: 39,
        span: 13405..13407,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 354,
        column: 42,
        span: 13408..13410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 43,
        span: 13410..13411,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 358,
        column: 6,
        span: 13434..13439,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 358,
        column: 15,
        span: 13440..13448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 358,
        column: 21,
        span: 13449..13454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 23,
        span: 13455..13456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmt",
        ),
        line: 358,
        column: 26,
        span: 13456..13459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 27,
        span: 13459..13460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 358,
        column: 31,
        span: 13461..13464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 32,
        span: 13464..13465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 359,
        column: 13,
        span: 13468..13478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 14,
        span: 13478..13479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 359,
        column: 17,
        span: 13479..13482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 18,
        span: 13482..13483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 359,
        column: 25,
        span: 13484..13490,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 359,
        column: 26,
        span: 13490..13491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 359,
        column: 32,
        span: 13491..13497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 33,
        span: 13497..13498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmt",
        ),
        line: 359,
        column: 37,
        span: 13499..13502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 38,
        span: 13502..13503,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
        column: 41,
        span: 13503..13506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 42,
        span: 13506..13507,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 360,
        column: 0,
        span: 13508..13511,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 362,
        column: 6,
        span: 13513..13518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 362,
        column: 10,
        span: 13519..13522,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
        column: 12,
        span: 13523..13524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 362,
        column: 19,
        span: 13525..13531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 362,
        column: 20,
        span: 13531..13532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 362,
        column: 23,
        span: 13532..13535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 24,
        span: 13535..13536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 362,
        column: 27,
        span: 13536..13539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 362,
        column: 28,
        span: 13539..13540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "600",
                    after_decimal: "",
                },
            ),
        ),
        line: 362,
        column: 32,
        span: 13540..13544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 33,
        span: 13544..13545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 363,
        column: 6,
        span: 13546..13551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 7,
        span: 13551..13552,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%100.3d\"",
        ),
        line: 363,
        column: 16,
        span: 13552..13561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 17,
        span: 13561..13562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion\"",
        ),
        line: 363,
        column: 38,
        span: 13563..13583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 39,
        span: 13583..13584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 364,
        column: 6,
        span: 13585..13590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 7,
        span: 13590..13591,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1\"",
        ),
        line: 364,
        column: 11,
        span: 13591..13595,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 364,
        column: 13,
        span: 13595..13597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 364,
        column: 16,
        span: 13597..13600,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 364,
        column: 18,
        span: 13600..13602,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".3d\"",
        ),
        line: 364,
        column: 23,
        span: 13602..13607,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 24,
        span: 13607..13608,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too long\"",
        ),
        line: 364,
        column: 35,
        span: 13609..13619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 36,
        span: 13619..13620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 365,
        column: 6,
        span: 13621..13626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 7,
        span: 13626..13627,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1.100d\"",
        ),
        line: 365,
        column: 16,
        span: 13627..13636,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 17,
        span: 13636..13637,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion\"",
        ),
        line: 365,
        column: 38,
        span: 13638..13658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 39,
        span: 13658..13659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 366,
        column: 6,
        span: 13660..13665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 7,
        span: 13665..13666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%10.1\"",
        ),
        line: 366,
        column: 14,
        span: 13666..13673,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 366,
        column: 16,
        span: 13673..13675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 366,
        column: 19,
        span: 13675..13678,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 366,
        column: 21,
        span: 13678..13680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"004d\"",
        ),
        line: 366,
        column: 27,
        span: 13680..13686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 28,
        span: 13686..13687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too long\"",
        ),
        line: 366,
        column: 39,
        span: 13688..13698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 40,
        span: 13698..13699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 367,
        column: 6,
        span: 13700..13705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 7,
        span: 13705..13706,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%t\"",
        ),
        line: 367,
        column: 11,
        span: 13706..13710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
        column: 12,
        span: 13710..13711,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion\"",
        ),
        line: 367,
        column: 33,
        span: 13712..13732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 34,
        span: 13732..13733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 368,
        column: 6,
        span: 13734..13739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 7,
        span: 13739..13740,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 368,
        column: 10,
        span: 13740..13743,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 368,
        column: 12,
        span: 13743..13745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 368,
        column: 15,
        span: 13745..13748,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 368,
        column: 17,
        span: 13748..13750,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"d\"",
        ),
        line: 368,
        column: 20,
        span: 13750..13753,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 21,
        span: 13753..13754,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too long\"",
        ),
        line: 368,
        column: 32,
        span: 13755..13765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 33,
        span: 13765..13766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 369,
        column: 6,
        span: 13767..13772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 7,
        span: 13772..13773,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d %d\"",
        ),
        line: 369,
        column: 14,
        span: 13773..13780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
        column: 15,
        span: 13780..13781,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no value\"",
        ),
        line: 369,
        column: 26,
        span: 13782..13792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 27,
        span: 13792..13793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 370,
        column: 6,
        span: 13794..13799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 7,
        span: 13799..13800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%010c\"",
        ),
        line: 370,
        column: 14,
        span: 13800..13807,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 15,
        span: 13807..13808,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion\"",
        ),
        line: 370,
        column: 36,
        span: 13809..13829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 37,
        span: 13829..13830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 371,
        column: 6,
        span: 13831..13836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 7,
        span: 13836..13837,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.10c\"",
        ),
        line: 371,
        column: 14,
        span: 13837..13844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 15,
        span: 13844..13845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion\"",
        ),
        line: 371,
        column: 36,
        span: 13846..13866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 37,
        span: 13866..13867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 372,
        column: 6,
        span: 13868..13873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 7,
        span: 13873..13874,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%0.34s\"",
        ),
        line: 372,
        column: 15,
        span: 13874..13882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 372,
        column: 16,
        span: 13882..13883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion\"",
        ),
        line: 372,
        column: 37,
        span: 13884..13904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 38,
        span: 13904..13905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 373,
        column: 6,
        span: 13906..13911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 7,
        span: 13911..13912,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%#i\"",
        ),
        line: 373,
        column: 12,
        span: 13912..13917,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 373,
        column: 13,
        span: 13917..13918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion\"",
        ),
        line: 373,
        column: 34,
        span: 13919..13939,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 35,
        span: 13939..13940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 374,
        column: 6,
        span: 13941..13946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 7,
        span: 13946..13947,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%3.1p\"",
        ),
        line: 374,
        column: 14,
        span: 13947..13954,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 374,
        column: 15,
        span: 13954..13955,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion\"",
        ),
        line: 374,
        column: 36,
        span: 13956..13976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 37,
        span: 13976..13977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 375,
        column: 6,
        span: 13978..13983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 7,
        span: 13983..13984,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%0.s\"",
        ),
        line: 375,
        column: 13,
        span: 13984..13990,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
        column: 14,
        span: 13990..13991,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion\"",
        ),
        line: 375,
        column: 35,
        span: 13992..14012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 36,
        span: 14012..14013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 376,
        column: 6,
        span: 14014..14019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 7,
        span: 14019..14020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%10q\"",
        ),
        line: 376,
        column: 13,
        span: 14020..14026,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 14,
        span: 14026..14027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot have modifiers\"",
        ),
        line: 376,
        column: 38,
        span: 14028..14051,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 39,
        span: 14051..14052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 377,
        column: 6,
        span: 14053..14058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 7,
        span: 14058..14059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%F\"",
        ),
        line: 377,
        column: 11,
        span: 14059..14063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 377,
        column: 12,
        span: 14063..14064,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion\"",
        ),
        line: 377,
        column: 33,
        span: 14065..14085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 34,
        span: 14085..14086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 380,
        column: 7,
        span: 14117..14123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 8,
        span: 14123..14124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 380,
        column: 12,
        span: 14124..14128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 13,
        span: 14128..14129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 1\\n--comment without ending EOL\"",
        ),
        line: 380,
        column: 53,
        span: 14129..14169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 54,
        span: 14169..14170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 55,
        span: 14170..14171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 56,
        span: 14171..14172,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 380,
        column: 59,
        span: 14173..14175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 61,
        span: 14175..14177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 62,
        span: 14177..14178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 383,
        column: 11,
        span: 14181..14191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 12,
        span: 14191..14192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table expected\"",
        ),
        line: 383,
        column: 28,
        span: 14192..14208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 29,
        span: 14208..14209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 383,
        column: 35,
        span: 14210..14215,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 383,
        column: 36,
        span: 14215..14216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 383,
        column: 42,
        span: 14216..14222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 43,
        span: 14222..14223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 45,
        span: 14223..14225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 46,
        span: 14225..14226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 384,
        column: 11,
        span: 14227..14237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 12,
        span: 14237..14238,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"at index \"",
        ),
        line: 384,
        column: 23,
        span: 14238..14249,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 384,
        column: 26,
        span: 14250..14252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 384,
        column: 31,
        span: 14253..14257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 32,
        span: 14257..14258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 384,
        column: 38,
        span: 14259..14264,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 384,
        column: 39,
        span: 14264..14265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 384,
        column: 45,
        span: 14265..14271,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 46,
        span: 14271..14272,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 384,
        column: 48,
        span: 14273..14274,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 384,
        column: 49,
        span: 14274..14275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 50,
        span: 14275..14276,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        line: 384,
        column: 54,
        span: 14277..14280,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 55,
        span: 14280..14281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 384,
        column: 60,
        span: 14282..14286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 61,
        span: 14286..14287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 384,
        column: 66,
        span: 14288..14292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 67,
        span: 14292..14293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 386,
        column: 11,
        span: 14332..14342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 12,
        span: 14342..14343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"at index %\"",
        ),
        line: 386,
        column: 24,
        span: 14343..14355,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 386,
        column: 27,
        span: 14356..14358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 386,
        column: 32,
        span: 14359..14363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 33,
        span: 14363..14364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 386,
        column: 39,
        span: 14365..14370,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 386,
        column: 40,
        span: 14370..14371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 386,
        column: 46,
        span: 14371..14377,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 47,
        span: 14377..14378,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 386,
        column: 49,
        span: 14379..14380,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 386,
        column: 50,
        span: 14380..14381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 51,
        span: 14381..14382,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        line: 386,
        column: 55,
        span: 14383..14386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 56,
        span: 14386..14387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 386,
        column: 61,
        span: 14388..14392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 62,
        span: 14392..14393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 386,
        column: 67,
        span: 14394..14398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 68,
        span: 14398..14399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 7,
        span: 14400..14406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 8,
        span: 14406..14407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 387,
        column: 13,
        span: 14407..14412,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 387,
        column: 14,
        span: 14412..14413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 387,
        column: 20,
        span: 14413..14419,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 387,
        column: 21,
        span: 14419..14420,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 387,
        column: 22,
        span: 14420..14421,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 387,
        column: 25,
        span: 14422..14424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 387,
        column: 28,
        span: 14425..14427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 29,
        span: 14427..14428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 388,
        column: 7,
        span: 14429..14435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 8,
        span: 14435..14436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 388,
        column: 13,
        span: 14436..14441,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 388,
        column: 14,
        span: 14441..14442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 388,
        column: 20,
        span: 14442..14448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 21,
        span: 14448..14449,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 388,
        column: 22,
        span: 14449..14450,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 388,
        column: 23,
        span: 14450..14451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
        column: 24,
        span: 14451..14452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 388,
        column: 28,
        span: 14453..14456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 29,
        span: 14456..14457,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 388,
        column: 32,
        span: 14458..14460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 388,
        column: 35,
        span: 14461..14463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 36,
        span: 14463..14464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
        column: 7,
        span: 14465..14471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 8,
        span: 14471..14472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 389,
        column: 13,
        span: 14472..14477,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 389,
        column: 14,
        span: 14477..14478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 389,
        column: 20,
        span: 14478..14484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 21,
        span: 14484..14485,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 389,
        column: 22,
        span: 14485..14486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        line: 389,
        column: 26,
        span: 14486..14490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 389,
        column: 27,
        span: 14490..14491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\1'",
        ),
        line: 389,
        column: 34,
        span: 14492..14498,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 389,
        column: 35,
        span: 14498..14499,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\1\\2'",
        ),
        line: 389,
        column: 44,
        span: 14500..14508,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 389,
        column: 45,
        span: 14508..14509,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 389,
        column: 46,
        span: 14509..14510,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.\\0.'",
        ),
        line: 389,
        column: 53,
        span: 14511..14517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 54,
        span: 14517..14518,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
        column: 57,
        span: 14519..14521,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0.\\0.\\0\\1.\\0.\\0\\1\\2\"",
        ),
        line: 389,
        column: 80,
        span: 14522..14544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 81,
        span: 14544..14545,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 390,
        column: 6,
        span: 14546..14551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 390,
        column: 8,
        span: 14552..14553,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 390,
        column: 10,
        span: 14554..14555,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 390,
        column: 12,
        span: 14556..14557,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 390,
        column: 13,
        span: 14557..14558,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 390,
        column: 14,
        span: 14558..14559,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 390,
        column: 18,
        span: 14560..14563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 390,
        column: 20,
        span: 14564..14565,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 390,
        column: 21,
        span: 14565..14566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 22,
        span: 14565..14567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 23,
        span: 14567..14568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 26,
        span: 14567..14571,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 390,
        column: 29,
        span: 14572..14574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 390,
        column: 31,
        span: 14575..14576,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 390,
        column: 32,
        span: 14576..14577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 390,
        column: 33,
        span: 14577..14578,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 390,
        column: 34,
        span: 14578..14579,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 390,
        column: 36,
        span: 14580..14581,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 390,
        column: 43,
        span: 14582..14588,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 390,
        column: 0,
        span: 14589..14592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 391,
        column: 7,
        span: 14593..14599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 8,
        span: 14599..14600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 391,
        column: 13,
        span: 14600..14605,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 391,
        column: 14,
        span: 14605..14606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 391,
        column: 20,
        span: 14606..14612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 21,
        span: 14612..14613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 391,
        column: 22,
        span: 14613..14614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 391,
        column: 23,
        span: 14614..14615,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123\"",
        ),
        line: 391,
        column: 29,
        span: 14616..14621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 30,
        span: 14621..14622,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 391,
        column: 32,
        span: 14622..14624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123\"",
        ),
        line: 391,
        column: 37,
        span: 14624..14629,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
        column: 40,
        span: 14630..14632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 391,
        column: 47,
        span: 14633..14639,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 391,
        column: 48,
        span: 14639..14640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 391,
        column: 51,
        span: 14640..14643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 52,
        span: 14643..14644,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu123\"",
        ),
        line: 391,
        column: 61,
        span: 14644..14653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 391,
        column: 62,
        span: 14653..14654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
        column: 66,
        span: 14654..14658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 67,
        span: 14658..14659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 68,
        span: 14659..14660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 392,
        column: 7,
        span: 14661..14667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 8,
        span: 14667..14668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 392,
        column: 13,
        span: 14668..14673,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 392,
        column: 14,
        span: 14673..14674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 392,
        column: 20,
        span: 14674..14680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 21,
        span: 14680..14681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 392,
        column: 22,
        span: 14681..14682,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 23,
        span: 14682..14683,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 392,
        column: 27,
        span: 14684..14687,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 28,
        span: 14687..14688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 31,
        span: 14688..14691,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 32,
        span: 14691..14692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 35,
        span: 14692..14695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 36,
        span: 14695..14696,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 392,
        column: 39,
        span: 14697..14699,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 392,
        column: 46,
        span: 14700..14706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 47,
        span: 14706..14707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
        column: 7,
        span: 14708..14714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 8,
        span: 14714..14715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 393,
        column: 13,
        span: 14715..14720,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 393,
        column: 14,
        span: 14720..14721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 393,
        column: 20,
        span: 14721..14727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 21,
        span: 14727..14728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 393,
        column: 22,
        span: 14728..14729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 23,
        span: 14729..14730,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 393,
        column: 26,
        span: 14731..14733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 27,
        span: 14733..14734,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 30,
        span: 14734..14737,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 31,
        span: 14737..14738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "21",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 34,
        span: 14738..14741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 35,
        span: 14741..14742,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 393,
        column: 38,
        span: 14743..14745,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxuxuxu\"",
        ),
        line: 393,
        column: 49,
        span: 14746..14756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 50,
        span: 14756..14757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 394,
        column: 7,
        span: 14758..14764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 8,
        span: 14764..14765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 394,
        column: 13,
        span: 14765..14770,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 394,
        column: 14,
        span: 14770..14771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 394,
        column: 20,
        span: 14771..14777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 21,
        span: 14777..14778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 394,
        column: 22,
        span: 14778..14779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 23,
        span: 14779..14780,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 394,
        column: 27,
        span: 14781..14784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 28,
        span: 14784..14785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "22",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 31,
        span: 14785..14788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 32,
        span: 14788..14789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "21",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 35,
        span: 14789..14792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 36,
        span: 14792..14793,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 394,
        column: 39,
        span: 14794..14796,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 394,
        column: 42,
        span: 14797..14799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 43,
        span: 14799..14800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
        column: 7,
        span: 14801..14807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 8,
        span: 14807..14808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 395,
        column: 13,
        span: 14808..14813,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 395,
        column: 14,
        span: 14813..14814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 395,
        column: 20,
        span: 14814..14820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 21,
        span: 14820..14821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 22,
        span: 14821..14822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 23,
        span: 14822..14823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 395,
        column: 27,
        span: 14824..14827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 28,
        span: 14827..14828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "299",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 32,
        span: 14828..14832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 33,
        span: 14832..14833,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
        column: 36,
        span: 14834..14836,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu3xuxu\"",
        ),
        line: 395,
        column: 48,
        span: 14837..14848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 49,
        span: 14848..14849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 396,
        column: 7,
        span: 14850..14856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 8,
        span: 14856..14857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 396,
        column: 13,
        span: 14857..14862,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 396,
        column: 14,
        span: 14862..14863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 396,
        column: 20,
        span: 14863..14869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 21,
        span: 14869..14870,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 396,
        column: 22,
        span: 14870..14871,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 396,
        column: 23,
        span: 14871..14872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 24,
        span: 14872..14873,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 396,
        column: 28,
        span: 14874..14877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 29,
        span: 14877..14878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 396,
        column: 34,
        span: 14879..14883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 35,
        span: 14883..14884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 396,
        column: 40,
        span: 14885..14889,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 396,
        column: 42,
        span: 14890..14891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 44,
        span: 14891..14893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 45,
        span: 14893..14894,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 396,
        column: 48,
        span: 14895..14897,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 396,
        column: 51,
        span: 14898..14900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 52,
        span: 14900..14901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 397,
        column: 7,
        span: 14902..14908,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 8,
        span: 14908..14909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 397,
        column: 13,
        span: 14909..14914,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 397,
        column: 14,
        span: 14914..14915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 397,
        column: 20,
        span: 14915..14921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 21,
        span: 14921..14922,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 397,
        column: 22,
        span: 14922..14923,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 397,
        column: 23,
        span: 14923..14924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 24,
        span: 14924..14925,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 397,
        column: 28,
        span: 14926..14929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 29,
        span: 14929..14930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 397,
        column: 34,
        span: 14931..14935,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 397,
        column: 36,
        span: 14936..14937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 38,
        span: 14937..14939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 39,
        span: 14939..14940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 397,
        column: 44,
        span: 14941..14945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 45,
        span: 14945..14946,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 397,
        column: 48,
        span: 14947..14949,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 397,
        column: 51,
        span: 14950..14952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 52,
        span: 14952..14953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 398,
        column: 7,
        span: 14954..14960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 8,
        span: 14960..14961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 398,
        column: 13,
        span: 14961..14966,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 398,
        column: 14,
        span: 14966..14967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 398,
        column: 20,
        span: 14967..14973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 21,
        span: 14973..14974,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 398,
        column: 22,
        span: 14974..14975,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 398,
        column: 23,
        span: 14975..14976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 24,
        span: 14976..14977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 398,
        column: 28,
        span: 14978..14981,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 29,
        span: 14981..14982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 398,
        column: 34,
        span: 14983..14987,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 35,
        span: 14987..14988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 398,
        column: 40,
        span: 14989..14993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 41,
        span: 14993..14994,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 44,
        span: 14995..14997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 398,
        column: 47,
        span: 14998..15000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 48,
        span: 15000..15001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 399,
        column: 7,
        span: 15002..15008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 8,
        span: 15008..15009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 399,
        column: 13,
        span: 15009..15014,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 399,
        column: 14,
        span: 15014..15015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 399,
        column: 20,
        span: 15015..15021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 21,
        span: 15021..15022,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 399,
        column: 22,
        span: 15022..15023,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 399,
        column: 23,
        span: 15023..15024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 399,
        column: 27,
        span: 15024..15028,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 399,
        column: 28,
        span: 15028..15029,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 399,
        column: 30,
        span: 15030..15031,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 399,
        column: 36,
        span: 15032..15037,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 399,
        column: 37,
        span: 15037..15038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 399,
        column: 38,
        span: 15038..15039,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 399,
        column: 42,
        span: 15040..15043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 399,
        column: 43,
        span: 15043..15044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 399,
        column: 48,
        span: 15045..15049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 399,
        column: 49,
        span: 15049..15050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 399,
        column: 54,
        span: 15051..15055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 55,
        span: 15055..15056,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 399,
        column: 58,
        span: 15057..15059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 399,
        column: 64,
        span: 15060..15065,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 65,
        span: 15065..15066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 400,
        column: 7,
        span: 15067..15073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 8,
        span: 15073..15074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 400,
        column: 13,
        span: 15074..15079,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 400,
        column: 14,
        span: 15079..15080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 400,
        column: 20,
        span: 15080..15086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 21,
        span: 15086..15087,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 400,
        column: 22,
        span: 15087..15088,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 400,
        column: 23,
        span: 15088..15089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 400,
        column: 27,
        span: 15089..15093,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 400,
        column: 28,
        span: 15093..15094,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 30,
        span: 15095..15096,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 400,
        column: 36,
        span: 15097..15102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 400,
        column: 37,
        span: 15102..15103,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 400,
        column: 39,
        span: 15104..15105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 400,
        column: 43,
        span: 15105..15109,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 400,
        column: 45,
        span: 15110..15111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
        column: 47,
        span: 15111..15113,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 400,
        column: 48,
        span: 15113..15114,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 50,
        span: 15115..15116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        line: 400,
        column: 54,
        span: 15117..15120,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 400,
        column: 55,
        span: 15120..15121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 400,
        column: 56,
        span: 15121..15122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 400,
        column: 60,
        span: 15123..15126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 400,
        column: 61,
        span: 15126..15127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 400,
        column: 66,
        span: 15128..15132,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 400,
        column: 68,
        span: 15133..15134,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
        column: 70,
        span: 15134..15136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 400,
        column: 71,
        span: 15136..15137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 400,
        column: 76,
        span: 15138..15142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 77,
        span: 15142..15143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 401,
        column: 10,
        span: 15151..15153,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y-alo\"",
        ),
        line: 401,
        column: 18,
        span: 15154..15161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 19,
        span: 15161..15162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 403,
        column: 7,
        span: 15164..15170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 8,
        span: 15170..15171,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 403,
        column: 11,
        span: 15171..15174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 403,
        column: 17,
        span: 15175..15180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 18,
        span: 15180..15181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 403,
        column: 23,
        span: 15181..15186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 403,
        column: 24,
        span: 15186..15187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 403,
        column: 30,
        span: 15187..15193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
        column: 31,
        span: 15193..15194,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 403,
        column: 33,
        span: 15195..15196,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 403,
        column: 36,
        span: 15196..15199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
        column: 37,
        span: 15199..15200,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 403,
        column: 41,
        span: 15201..15204,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
        column: 42,
        span: 15204..15205,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 403,
        column: 44,
        span: 15206..15207,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 403,
        column: 45,
        span: 15207..15208,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 403,
        column: 46,
        span: 15208..15209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 47,
        span: 15209..15210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 48,
        span: 15210..15211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 405,
        column: 2,
        span: 15213..15214,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 405,
        column: 4,
        span: 15215..15216,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 405,
        column: 6,
        span: 15217..15218,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 405,
        column: 9,
        span: 15218..15221,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 405,
        column: 10,
        span: 15221..15222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 405,
        column: 13,
        span: 15222..15225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 405,
        column: 14,
        span: 15225..15226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 405,
        column: 17,
        span: 15226..15229,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 405,
        column: 18,
        span: 15229..15230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 406,
        column: 7,
        span: 15231..15237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
        column: 8,
        span: 15237..15238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 406,
        column: 13,
        span: 15238..15243,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 406,
        column: 14,
        span: 15243..15244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 406,
        column: 20,
        span: 15244..15250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
        column: 21,
        span: 15250..15251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 406,
        column: 22,
        span: 15251..15252,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
        column: 23,
        span: 15252..15253,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 406,
        column: 27,
        span: 15254..15257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
        column: 28,
        span: 15257..15258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
        column: 30,
        span: 15258..15260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
        column: 31,
        span: 15260..15261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
        column: 33,
        span: 15261..15263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
        column: 34,
        span: 15263..15264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 406,
        column: 37,
        span: 15265..15267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 406,
        column: 40,
        span: 15268..15270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
        column: 41,
        span: 15270..15271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 407,
        column: 7,
        span: 15272..15278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 8,
        span: 15278..15279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 407,
        column: 13,
        span: 15279..15284,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 407,
        column: 14,
        span: 15284..15285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 407,
        column: 20,
        span: 15285..15291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 21,
        span: 15291..15292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 407,
        column: 22,
        span: 15292..15293,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 407,
        column: 23,
        span: 15293..15294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 407,
        column: 27,
        span: 15295..15298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 407,
        column: 28,
        span: 15298..15299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 30,
        span: 15299..15301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 407,
        column: 31,
        span: 15301..15302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 33,
        span: 15302..15304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 34,
        span: 15304..15305,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 407,
        column: 37,
        span: 15306..15308,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 407,
        column: 41,
        span: 15309..15312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 42,
        span: 15312..15313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 408,
        column: 7,
        span: 15314..15320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 8,
        span: 15320..15321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 408,
        column: 13,
        span: 15321..15326,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 408,
        column: 14,
        span: 15326..15327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 408,
        column: 20,
        span: 15327..15333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 21,
        span: 15333..15334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 408,
        column: 22,
        span: 15334..15335,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 23,
        span: 15335..15336,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 408,
        column: 27,
        span: 15337..15340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 28,
        span: 15340..15341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 30,
        span: 15341..15343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 31,
        span: 15343..15344,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 33,
        span: 15344..15346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 34,
        span: 15346..15347,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 408,
        column: 37,
        span: 15348..15350,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a,b\"",
        ),
        line: 408,
        column: 43,
        span: 15351..15356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 44,
        span: 15356..15357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 409,
        column: 7,
        span: 15358..15364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 8,
        span: 15364..15365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 409,
        column: 13,
        span: 15365..15370,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 409,
        column: 14,
        span: 15370..15371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 409,
        column: 20,
        span: 15371..15377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 21,
        span: 15377..15378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 409,
        column: 22,
        span: 15378..15379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 409,
        column: 23,
        span: 15379..15380,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 409,
        column: 27,
        span: 15381..15384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 409,
        column: 28,
        span: 15384..15385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
        column: 30,
        span: 15385..15387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 31,
        span: 15387..15388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 409,
        column: 34,
        span: 15389..15391,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b,c\"",
        ),
        line: 409,
        column: 40,
        span: 15392..15397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 41,
        span: 15397..15398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 410,
        column: 7,
        span: 15399..15405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 8,
        span: 15405..15406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 410,
        column: 13,
        span: 15406..15411,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 410,
        column: 14,
        span: 15411..15412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 410,
        column: 20,
        span: 15412..15418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 21,
        span: 15418..15419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 410,
        column: 22,
        span: 15419..15420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 410,
        column: 23,
        span: 15420..15421,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 410,
        column: 27,
        span: 15422..15425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 410,
        column: 28,
        span: 15425..15426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 30,
        span: 15426..15428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 31,
        span: 15428..15429,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
        column: 34,
        span: 15430..15432,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 410,
        column: 38,
        span: 15433..15436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 39,
        span: 15436..15437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 411,
        column: 7,
        span: 15438..15444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 8,
        span: 15444..15445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 411,
        column: 13,
        span: 15445..15450,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 411,
        column: 14,
        span: 15450..15451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 411,
        column: 20,
        span: 15451..15457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 21,
        span: 15457..15458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 411,
        column: 22,
        span: 15458..15459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 23,
        span: 15459..15460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 411,
        column: 27,
        span: 15461..15464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 28,
        span: 15464..15465,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 30,
        span: 15465..15467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 31,
        span: 15467..15468,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 411,
        column: 34,
        span: 15469..15471,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 411,
        column: 37,
        span: 15472..15474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 38,
        span: 15474..15475,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 413,
        column: 3,
        span: 15477..15479,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 413,
        column: 7,
        span: 15480..15483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 413,
        column: 13,
        span: 15484..15489,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 413,
        column: 0,
        span: 15490..15494,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 415,
        column: 8,
        span: 15498..15503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "locales",
        ),
        line: 415,
        column: 16,
        span: 15504..15511,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
        column: 18,
        span: 15512..15513,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 415,
        column: 20,
        span: 15514..15515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ptb\"",
        ),
        line: 415,
        column: 26,
        span: 15516..15521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
        column: 27,
        span: 15521..15522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pt_BR.iso88591\"",
        ),
        line: 415,
        column: 44,
        span: 15523..15539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
        column: 45,
        span: 15539..15540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ISO-8859-1\"",
        ),
        line: 415,
        column: 58,
        span: 15541..15553,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 415,
        column: 60,
        span: 15554..15555,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 416,
        column: 8,
        span: 15558..15563,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 416,
        column: 17,
        span: 15564..15572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trylocale",
        ),
        line: 416,
        column: 27,
        span: 15573..15582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 29,
        span: 15583..15584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 416,
        column: 30,
        span: 15584..15585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 31,
        span: 15585..15586,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 417,
        column: 8,
        span: 15591..15594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 417,
        column: 10,
        span: 15595..15596,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 417,
        column: 12,
        span: 15597..15598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 417,
        column: 14,
        span: 15598..15600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 417,
        column: 15,
        span: 15600..15601,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 417,
        column: 17,
        span: 15602..15603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "locales",
        ),
        line: 417,
        column: 24,
        span: 15603..15610,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 417,
        column: 0,
        span: 15611..15613,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 418,
        column: 9,
        span: 15620..15622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 418,
        column: 12,
        span: 15623..15625,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 418,
        column: 13,
        span: 15625..15626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 418,
        column: 22,
        span: 15626..15635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 23,
        span: 15635..15636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "locales",
        ),
        line: 418,
        column: 30,
        span: 15636..15643,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 418,
        column: 31,
        span: 15643..15644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 418,
        column: 32,
        span: 15644..15645,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 418,
        column: 33,
        span: 15645..15646,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 418,
        column: 34,
        span: 15646..15647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 418,
        column: 36,
        span: 15648..15649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 37,
        span: 15649..15650,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 418,
        column: 0,
        span: 15651..15655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 419,
        column: 14,
        span: 15664..15669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 15,
        span: 15669..15670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 419,
        column: 21,
        span: 15670..15676,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 22,
        span: 15676..15677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 419,
        column: 28,
        span: 15677..15683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 29,
        span: 15683..15684,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'%s' locale set to '%s'\"",
        ),
        line: 419,
        column: 54,
        span: 15684..15709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 419,
        column: 55,
        span: 15709..15710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 419,
        column: 57,
        span: 15711..15712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 419,
        column: 58,
        span: 15712..15713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "locales",
        ),
        line: 419,
        column: 66,
        span: 15714..15721,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 419,
        column: 67,
        span: 15721..15722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 419,
        column: 68,
        span: 15722..15723,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 419,
        column: 69,
        span: 15723..15724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 70,
        span: 15724..15725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 71,
        span: 15725..15726,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 420,
        column: 15,
        span: 15735..15741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "locales",
        ),
        line: 420,
        column: 23,
        span: 15742..15749,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 420,
        column: 24,
        span: 15749..15750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 420,
        column: 25,
        span: 15750..15751,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 420,
        column: 26,
        span: 15751..15752,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 421,
        column: 0,
        span: 15759..15762,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 422,
        column: 0,
        span: 15767..15770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 423,
        column: 10,
        span: 15775..15780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 11,
        span: 15780..15781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 423,
        column: 17,
        span: 15781..15787,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 423,
        column: 18,
        span: 15787..15788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 423,
        column: 24,
        span: 15788..15794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 25,
        span: 15794..15795,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'%s' locale not found\"",
        ),
        line: 423,
        column: 48,
        span: 15795..15818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
        column: 49,
        span: 15818..15819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 423,
        column: 51,
        span: 15820..15821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 52,
        span: 15821..15822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 53,
        span: 15822..15823,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 424,
        column: 11,
        span: 15828..15834,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 424,
        column: 0,
        span: 15835..15840,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 425,
        column: 0,
        span: 15843..15846,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 427,
        column: 5,
        span: 15850..15852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trylocale",
        ),
        line: 427,
        column: 15,
        span: 15853..15862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 16,
        span: 15862..15863,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"collate\"",
        ),
        line: 427,
        column: 25,
        span: 15863..15872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 26,
        span: 15872..15873,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 427,
        column: 0,
        span: 15875..15879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 428,
        column: 11,
        span: 15884..15890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 12,
        span: 15890..15891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 428,
        column: 17,
        span: 15891..15896,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 428,
        column: 19,
        span: 15897..15898,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"álo\"",
        ),
        line: 428,
        column: 25,
        span: 15899..15904,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 428,
        column: 29,
        span: 15905..15908,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"álo\"",
        ),
        line: 428,
        column: 35,
        span: 15909..15914,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 428,
        column: 37,
        span: 15915..15916,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"amo\"",
        ),
        line: 428,
        column: 43,
        span: 15917..15922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 44,
        span: 15922..15923,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 429,
        column: 0,
        span: 15926..15929,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 431,
        column: 5,
        span: 15933..15935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trylocale",
        ),
        line: 431,
        column: 15,
        span: 15936..15945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
        column: 16,
        span: 15945..15946,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ctype\"",
        ),
        line: 431,
        column: 23,
        span: 15946..15953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
        column: 24,
        span: 15953..15954,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 431,
        column: 0,
        span: 15955..15959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 432,
        column: 11,
        span: 15964..15970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 12,
        span: 15970..15971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 432,
        column: 18,
        span: 15971..15977,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 432,
        column: 19,
        span: 15977..15978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 432,
        column: 23,
        span: 15978..15982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 24,
        span: 15982..15983,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áéíóú\"",
        ),
        line: 432,
        column: 31,
        span: 15983..15990,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 32,
        span: 15990..15991,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%a\"",
        ),
        line: 432,
        column: 37,
        span: 15992..15996,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 38,
        span: 15996..15997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 432,
        column: 42,
        span: 15998..16001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 43,
        span: 16001..16002,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 432,
        column: 46,
        span: 16003..16005,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxxxx\"",
        ),
        line: 432,
        column: 54,
        span: 16006..16013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 55,
        span: 16013..16014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 433,
        column: 11,
        span: 16019..16025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
        column: 12,
        span: 16025..16026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 433,
        column: 18,
        span: 16026..16032,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 433,
        column: 19,
        span: 16032..16033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 433,
        column: 23,
        span: 16033..16037,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
        column: 24,
        span: 16037..16038,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áÁéÉ\"",
        ),
        line: 433,
        column: 30,
        span: 16038..16044,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 433,
        column: 31,
        span: 16044..16045,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%l\"",
        ),
        line: 433,
        column: 36,
        span: 16046..16050,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 433,
        column: 37,
        span: 16050..16051,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 433,
        column: 41,
        span: 16052..16055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
        column: 42,
        span: 16055..16056,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 433,
        column: 45,
        span: 16057..16059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xÁxÉ\"",
        ),
        line: 433,
        column: 52,
        span: 16060..16066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
        column: 53,
        span: 16066..16067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 434,
        column: 11,
        span: 16072..16078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 12,
        span: 16078..16079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 434,
        column: 18,
        span: 16079..16085,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 434,
        column: 19,
        span: 16085..16086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 434,
        column: 23,
        span: 16086..16090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 24,
        span: 16090..16091,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áÁéÉ\"",
        ),
        line: 434,
        column: 30,
        span: 16091..16097,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 31,
        span: 16097..16098,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%u\"",
        ),
        line: 434,
        column: 36,
        span: 16099..16103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 37,
        span: 16103..16104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 434,
        column: 41,
        span: 16105..16108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 42,
        span: 16108..16109,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 434,
        column: 45,
        span: 16110..16112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áxéx\"",
        ),
        line: 434,
        column: 52,
        span: 16113..16119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 53,
        span: 16119..16120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 435,
        column: 11,
        span: 16125..16131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 12,
        span: 16131..16132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 435,
        column: 18,
        span: 16132..16138,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 435,
        column: 19,
        span: 16138..16139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        line: 435,
        column: 24,
        span: 16139..16144,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áÁé{xuxu}ção\"",
        ),
        line: 435,
        column: 38,
        span: 16144..16158,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 41,
        span: 16159..16161,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ÁÁÉ{XUXU}ÇÃO\"",
        ),
        line: 435,
        column: 56,
        span: 16162..16176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 57,
        span: 16176..16177,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 436,
        column: 0,
        span: 16180..16183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 438,
        column: 5,
        span: 16187..16189,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 438,
        column: 6,
        span: 16189..16190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 438,
        column: 15,
        span: 16190..16199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 16,
        span: 16199..16200,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 438,
        column: 19,
        span: 16200..16203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 20,
        span: 16203..16204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 439,
        column: 9,
        span: 16207..16213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
        column: 10,
        span: 16213..16214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 439,
        column: 12,
        span: 16214..16216,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 439,
        column: 13,
        span: 16216..16217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 439,
        column: 22,
        span: 16217..16226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
        column: 23,
        span: 16226..16227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
        column: 24,
        span: 16227..16228,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 439,
        column: 27,
        span: 16229..16231,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'C'",
        ),
        line: 439,
        column: 31,
        span: 16232..16235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
        column: 32,
        span: 16235..16236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 440,
        column: 9,
        span: 16239..16245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 10,
        span: 16245..16246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 440,
        column: 12,
        span: 16246..16248,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 440,
        column: 13,
        span: 16248..16249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 440,
        column: 22,
        span: 16249..16258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 23,
        span: 16258..16259,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 440,
        column: 26,
        span: 16259..16262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
        column: 27,
        span: 16262..16263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"numeric\"",
        ),
        line: 440,
        column: 37,
        span: 16264..16273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 38,
        span: 16273..16274,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 440,
        column: 41,
        span: 16275..16277,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'C'",
        ),
        line: 440,
        column: 45,
        span: 16278..16281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 46,
        span: 16281..16282,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 442,
        column: 0,
        span: 16284..16287,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 447,
        column: 0,
        span: 16363..16365,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 448,
        column: 8,
        span: 16368..16373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 448,
        column: 10,
        span: 16374..16375,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 448,
        column: 12,
        span: 16376..16377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 448,
        column: 19,
        span: 16378..16384,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 448,
        column: 20,
        span: 16384..16385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 448,
        column: 26,
        span: 16385..16391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 27,
        span: 16391..16392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1 2 3 4 5\"",
        ),
        line: 448,
        column: 38,
        span: 16392..16403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 448,
        column: 39,
        span: 16403..16404,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d+\"",
        ),
        line: 448,
        column: 45,
        span: 16405..16410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 46,
        span: 16410..16411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 449,
        column: 9,
        span: 16414..16420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 10,
        span: 16420..16421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 449,
        column: 11,
        span: 16421..16422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 12,
        span: 16422..16423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 13,
        span: 16423..16424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 449,
        column: 16,
        span: 16425..16427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 449,
        column: 20,
        span: 16428..16431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 21,
        span: 16431..16432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 450,
        column: 5,
        span: 16435..16437,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 450,
        column: 7,
        span: 16438..16439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 450,
        column: 17,
        span: 16440..16449,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 450,
        column: 18,
        span: 16449..16450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 450,
        column: 22,
        span: 16450..16454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 23,
        span: 16454..16455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 450,
        column: 24,
        span: 16455..16456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 25,
        span: 16456..16457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 451,
        column: 9,
        span: 16460..16466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 10,
        span: 16466..16467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 451,
        column: 12,
        span: 16467..16469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 13,
        span: 16469..16470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 14,
        span: 16470..16471,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 451,
        column: 17,
        span: 16472..16474,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 451,
        column: 21,
        span: 16475..16478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 22,
        span: 16478..16479,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 452,
        column: 0,
        span: 16480..16483,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 455,
        column: 3,
        span: 16486..16488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 455,
        column: 5,
        span: 16489..16490,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 455,
        column: 7,
        span: 16490..16492,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 455,
        column: 10,
        span: 16492..16495,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 455,
        column: 0,
        span: 16496..16500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 4,
        span: 16503..16504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 456,
        column: 11,
        span: 16504..16511,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 456,
        column: 14,
        span: 16512..16514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 456,
        column: 20,
        span: 16515..16520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 21,
        span: 16520..16521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 7,
        span: 16527..16528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n >>> testC not active: skipping 'pushfstring' tests <<<\\n\"",
        ),
        line: 457,
        column: 68,
        span: 16528..16589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 69,
        span: 16589..16590,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 458,
        column: 0,
        span: 16591..16595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 460,
        column: 8,
        span: 16599..16604,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'pushfstring'\"",
        ),
        line: 460,
        column: 31,
        span: 16604..16627,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 464,
        column: 8,
        span: 16681..16686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 464,
        column: 13,
        span: 16687..16691,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 464,
        column: 15,
        span: 16692..16693,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
        column: 19,
        span: 16693..16697,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 466,
        column: 8,
        span: 16752..16757,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 466,
        column: 17,
        span: 16758..16766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "callpfs",
        ),
        line: 466,
        column: 25,
        span: 16767..16774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 27,
        span: 16775..16776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 466,
        column: 29,
        span: 16776..16778,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 466,
        column: 30,
        span: 16778..16779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmt",
        ),
        line: 466,
        column: 34,
        span: 16780..16783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 466,
        column: 35,
        span: 16783..16784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 466,
        column: 37,
        span: 16785..16786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 38,
        span: 16786..16787,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 467,
        column: 10,
        span: 16792..16797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 467,
        column: 12,
        span: 16798..16799,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 467,
        column: 14,
        span: 16800..16801,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 467,
        column: 16,
        span: 16802..16803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 467,
        column: 17,
        span: 16803..16804,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 467,
        column: 18,
        span: 16804..16805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 467,
        column: 23,
        span: 16805..16810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 24,
        span: 16810..16811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushfstring\"",
        ),
        line: 467,
        column: 37,
        span: 16811..16824,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 467,
        column: 40,
        span: 16825..16827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 467,
        column: 43,
        span: 16828..16830,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 467,
        column: 46,
        span: 16831..16833,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; return *\"",
        ),
        line: 467,
        column: 59,
        span: 16834..16846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 467,
        column: 60,
        span: 16846..16847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmt",
        ),
        line: 467,
        column: 64,
        span: 16848..16851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 467,
        column: 65,
        span: 16851..16852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 467,
        column: 67,
        span: 16853..16854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 68,
        span: 16854..16855,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 467,
        column: 69,
        span: 16855..16856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 469,
        column: 11,
        span: 16922..16928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 12,
        span: 16928..16929,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 469,
        column: 13,
        span: 16929..16930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 469,
        column: 14,
        span: 16930..16931,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
        column: 17,
        span: 16932..16934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 469,
        column: 19,
        span: 16934..16936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 20,
        span: 16936..16937,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 470,
        column: 11,
        span: 16991..16997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 470,
        column: 13,
        span: 16998..16999,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 470,
        column: 14,
        span: 16999..17000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 470,
        column: 15,
        span: 16999..17001,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 470,
        column: 16,
        span: 17001..17002,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 471,
        column: 0,
        span: 17005..17008,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 473,
        column: 8,
        span: 17012..17017,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 473,
        column: 17,
        span: 17018..17026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 473,
        column: 25,
        span: 17027..17034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 473,
        column: 27,
        span: 17035..17036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 473,
        column: 29,
        span: 17036..17038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 30,
        span: 17038..17039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmt",
        ),
        line: 473,
        column: 34,
        span: 17040..17043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 35,
        span: 17043..17044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 473,
        column: 37,
        span: 17045..17046,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 473,
        column: 38,
        span: 17046..17047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 474,
        column: 11,
        span: 17052..17058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 474,
        column: 12,
        span: 17058..17059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "callpfs",
        ),
        line: 474,
        column: 19,
        span: 17059..17066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 474,
        column: 20,
        span: 17066..17067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 474,
        column: 22,
        span: 17067..17069,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 23,
        span: 17069..17070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmt",
        ),
        line: 474,
        column: 27,
        span: 17071..17074,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 28,
        span: 17074..17075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 474,
        column: 30,
        span: 17076..17077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 474,
        column: 31,
        span: 17077..17078,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 474,
        column: 34,
        span: 17079..17081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 474,
        column: 41,
        span: 17082..17088,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 474,
        column: 42,
        span: 17088..17089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 474,
        column: 48,
        span: 17089..17095,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 474,
        column: 49,
        span: 17095..17096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmt",
        ),
        line: 474,
        column: 52,
        span: 17096..17099,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 53,
        span: 17099..17100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 474,
        column: 55,
        span: 17101..17102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 474,
        column: 56,
        span: 17102..17103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 474,
        column: 57,
        span: 17103..17104,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 475,
        column: 0,
        span: 17107..17110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 477,
        column: 10,
        span: 17114..17121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
        column: 11,
        span: 17121..17122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 477,
        column: 14,
        span: 17122..17125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 477,
        column: 15,
        span: 17125..17126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 477,
        column: 18,
        span: 17127..17129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 477,
        column: 19,
        span: 17129..17130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 477,
        column: 21,
        span: 17130..17132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
        column: 22,
        span: 17132..17133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 478,
        column: 10,
        span: 17136..17143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 11,
        span: 17143..17144,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 478,
        column: 14,
        span: 17144..17147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
        column: 15,
        span: 17147..17148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 478,
        column: 22,
        span: 17149..17155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 478,
        column: 23,
        span: 17155..17156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 478,
        column: 26,
        span: 17156..17159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 27,
        span: 17159..17160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 478,
        column: 30,
        span: 17160..17163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
        column: 31,
        span: 17163..17164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 478,
        column: 36,
        span: 17165..17169,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 478,
        column: 38,
        span: 17170..17171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 40,
        span: 17171..17173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 41,
        span: 17173..17174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
        column: 42,
        span: 17174..17175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 44,
        span: 17175..17177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 45,
        span: 17177..17178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 479,
        column: 10,
        span: 17181..17188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
        column: 11,
        span: 17188..17189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 479,
        column: 14,
        span: 17189..17192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
        column: 15,
        span: 17192..17193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 479,
        column: 22,
        span: 17194..17200,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 479,
        column: 23,
        span: 17200..17201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 479,
        column: 26,
        span: 17201..17204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
        column: 27,
        span: 17204..17205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 479,
        column: 30,
        span: 17205..17208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
        column: 31,
        span: 17208..17209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 479,
        column: 36,
        span: 17210..17214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
        column: 37,
        span: 17214..17215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
        column: 38,
        span: 17215..17216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 479,
        column: 40,
        span: 17216..17218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
        column: 41,
        span: 17218..17219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 480,
        column: 10,
        span: 17222..17229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 11,
        span: 17229..17230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 480,
        column: 14,
        span: 17230..17233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 480,
        column: 15,
        span: 17233..17234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 480,
        column: 22,
        span: 17235..17241,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 480,
        column: 23,
        span: 17241..17242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 480,
        column: 26,
        span: 17242..17245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 27,
        span: 17245..17246,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 480,
        column: 30,
        span: 17246..17249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 480,
        column: 31,
        span: 17249..17250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 480,
        column: 36,
        span: 17251..17255,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 480,
        column: 38,
        span: 17256..17257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
        column: 40,
        span: 17257..17259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 41,
        span: 17259..17260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 480,
        column: 42,
        span: 17260..17261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
        column: 44,
        span: 17261..17263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 45,
        span: 17263..17264,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 482,
        column: 8,
        span: 17268..17273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 482,
        column: 12,
        span: 17274..17277,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 482,
        column: 14,
        span: 17278..17279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 482,
        column: 21,
        span: 17280..17286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 482,
        column: 22,
        span: 17286..17287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 482,
        column: 25,
        span: 17287..17290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 26,
        span: 17290..17291,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        line: 482,
        column: 30,
        span: 17291..17295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 482,
        column: 31,
        span: 17295..17296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 482,
        column: 36,
        span: 17297..17301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 37,
        span: 17301..17302,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 482,
        column: 40,
        span: 17303..17305,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 482,
        column: 45,
        span: 17306..17310,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 482,
        column: 48,
        span: 17311..17313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 482,
        column: 55,
        span: 17314..17320,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 482,
        column: 56,
        span: 17320..17321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 482,
        column: 59,
        span: 17321..17324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 60,
        span: 17324..17325,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"d\"",
        ),
        line: 482,
        column: 63,
        span: 17325..17328,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 482,
        column: 64,
        span: 17328..17329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 482,
        column: 69,
        span: 17330..17334,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 482,
        column: 71,
        span: 17335..17336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 482,
        column: 73,
        span: 17336..17338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 74,
        span: 17338..17339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 483,
        column: 10,
        span: 17342..17349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 11,
        span: 17349..17350,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 483,
        column: 14,
        span: 17350..17353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 483,
        column: 15,
        span: 17353..17354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 483,
        column: 19,
        span: 17355..17358,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 483,
        column: 20,
        span: 17358..17359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 483,
        column: 22,
        span: 17359..17361,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 483,
        column: 23,
        span: 17361..17362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 483,
        column: 25,
        span: 17361..17364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 26,
        span: 17364..17365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 484,
        column: 10,
        span: 17368..17375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
        column: 11,
        span: 17375..17376,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 484,
        column: 14,
        span: 17376..17379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 484,
        column: 15,
        span: 17379..17380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 484,
        column: 19,
        span: 17381..17384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 484,
        column: 20,
        span: 17384..17385,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 484,
        column: 22,
        span: 17386..17387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 484,
        column: 23,
        span: 17386..17388,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 484,
        column: 24,
        span: 17388..17389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 484,
        column: 26,
        span: 17388..17391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
        column: 27,
        span: 17391..17392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 486,
        column: 6,
        span: 17396..17399,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 486,
        column: 8,
        span: 17400..17401,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 486,
        column: 13,
        span: 17402..17406,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 486,
        column: 16,
        span: 17407..17409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 486,
        column: 23,
        span: 17410..17416,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 486,
        column: 24,
        span: 17416..17417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 486,
        column: 27,
        span: 17417..17420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
        column: 28,
        span: 17420..17421,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cd\"",
        ),
        line: 486,
        column: 32,
        span: 17421..17425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 486,
        column: 33,
        span: 17425..17426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 486,
        column: 38,
        span: 17427..17431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
        column: 39,
        span: 17431..17432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 487,
        column: 10,
        span: 17435..17442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 487,
        column: 11,
        span: 17442..17443,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 487,
        column: 14,
        span: 17443..17446,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 15,
        span: 17446..17447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 487,
        column: 19,
        span: 17448..17451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 20,
        span: 17451..17452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
        column: 22,
        span: 17452..17454,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 487,
        column: 23,
        span: 17454..17455,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
        column: 25,
        span: 17454..17457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 487,
        column: 26,
        span: 17457..17458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 488,
        column: 10,
        span: 17461..17468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
        column: 11,
        span: 17468..17469,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 488,
        column: 14,
        span: 17469..17472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
        column: 15,
        span: 17472..17473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 488,
        column: 19,
        span: 17474..17477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
        column: 20,
        span: 17477..17478,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 488,
        column: 22,
        span: 17479..17480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 488,
        column: 23,
        span: 17479..17481,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 488,
        column: 24,
        span: 17481..17482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 488,
        column: 26,
        span: 17481..17484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
        column: 27,
        span: 17484..17485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 490,
        column: 6,
        span: 17489..17492,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 490,
        column: 8,
        span: 17493..17494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 490,
        column: 15,
        span: 17495..17501,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 490,
        column: 16,
        span: 17501..17502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 490,
        column: 19,
        span: 17502..17505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 20,
        span: 17505..17506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 490,
        column: 23,
        span: 17506..17509,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 490,
        column: 24,
        span: 17509..17510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 490,
        column: 29,
        span: 17511..17515,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 490,
        column: 31,
        span: 17516..17517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 490,
        column: 33,
        span: 17517..17519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 34,
        span: 17519..17520,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 490,
        column: 37,
        span: 17521..17523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 490,
        column: 42,
        span: 17524..17528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 491,
        column: 10,
        span: 17531..17538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
        column: 11,
        span: 17538..17539,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 491,
        column: 14,
        span: 17539..17542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
        column: 15,
        span: 17542..17543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 491,
        column: 19,
        span: 17544..17547,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
        column: 20,
        span: 17547..17548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
        column: 22,
        span: 17548..17550,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 491,
        column: 23,
        span: 17550..17551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
        column: 25,
        span: 17550..17553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
        column: 26,
        span: 17553..17554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 492,
        column: 10,
        span: 17557..17564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 11,
        span: 17564..17565,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 492,
        column: 14,
        span: 17565..17568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
        column: 15,
        span: 17568..17569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 492,
        column: 19,
        span: 17570..17573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
        column: 20,
        span: 17573..17574,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 492,
        column: 22,
        span: 17575..17576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 23,
        span: 17575..17577,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 492,
        column: 24,
        span: 17577..17578,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 26,
        span: 17577..17580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 27,
        span: 17580..17581,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 494,
        column: 6,
        span: 17585..17588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 494,
        column: 8,
        span: 17589..17590,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 494,
        column: 10,
        span: 17591..17592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 494,
        column: 13,
        span: 17592..17595,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 494,
        column: 14,
        span: 17595..17596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 494,
        column: 17,
        span: 17596..17599,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 494,
        column: 0,
        span: 17600..17602,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 495,
        column: 10,
        span: 17607..17612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str1",
        ),
        line: 495,
        column: 15,
        span: 17613..17617,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 495,
        column: 17,
        span: 17618..17619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 495,
        column: 24,
        span: 17620..17626,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 495,
        column: 25,
        span: 17626..17627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 495,
        column: 28,
        span: 17627..17630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 29,
        span: 17630..17631,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 495,
        column: 32,
        span: 17631..17634,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
        column: 33,
        span: 17634..17635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 495,
        column: 35,
        span: 17636..17637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 36,
        span: 17637..17638,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 496,
        column: 8,
        span: 17643..17646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 496,
        column: 10,
        span: 17647..17648,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 496,
        column: 12,
        span: 17649..17650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 14,
        span: 17650..17652,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
        column: 15,
        span: 17652..17653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 19,
        span: 17653..17657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
        column: 20,
        span: 17657..17658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 23,
        span: 17658..17661,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 496,
        column: 0,
        span: 17662..17664,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 497,
        column: 10,
        span: 17671..17674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 497,
        column: 12,
        span: 17675..17676,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 497,
        column: 14,
        span: 17677..17678,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 497,
        column: 16,
        span: 17678..17680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 497,
        column: 17,
        span: 17680..17681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 497,
        column: 21,
        span: 17681..17685,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 497,
        column: 22,
        span: 17685..17686,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 497,
        column: 25,
        span: 17686..17689,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 497,
        column: 0,
        span: 17690..17692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 498,
        column: 12,
        span: 17701..17704,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 498,
        column: 14,
        span: 17705..17706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 498,
        column: 21,
        span: 17707..17713,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 498,
        column: 22,
        span: 17713..17714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 498,
        column: 25,
        span: 17714..17717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 498,
        column: 26,
        span: 17717..17718,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 498,
        column: 29,
        span: 17718..17721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 498,
        column: 30,
        span: 17721..17722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 498,
        column: 32,
        span: 17723..17724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 498,
        column: 33,
        span: 17724..17725,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 498,
        column: 36,
        span: 17726..17728,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s\"",
        ),
        line: 498,
        column: 41,
        span: 17729..17733,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 498,
        column: 44,
        span: 17734..17736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 498,
        column: 51,
        span: 17737..17743,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 498,
        column: 52,
        span: 17743..17744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 498,
        column: 55,
        span: 17744..17747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 498,
        column: 56,
        span: 17747..17748,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"d\"",
        ),
        line: 498,
        column: 59,
        span: 17748..17751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 498,
        column: 60,
        span: 17751..17752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 498,
        column: 62,
        span: 17753..17754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 498,
        column: 63,
        span: 17754..17755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 499,
        column: 16,
        span: 17764..17771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 499,
        column: 17,
        span: 17771..17772,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        line: 499,
        column: 20,
        span: 17772..17775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 499,
        column: 21,
        span: 17775..17776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 499,
        column: 25,
        span: 17777..17780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 499,
        column: 26,
        span: 17780..17781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str1",
        ),
        line: 499,
        column: 31,
        span: 17782..17786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 499,
        column: 32,
        span: 17786..17787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 500,
        column: 16,
        span: 17796..17803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 500,
        column: 17,
        span: 17803..17804,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        line: 500,
        column: 20,
        span: 17804..17807,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 500,
        column: 21,
        span: 17807..17808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 500,
        column: 25,
        span: 17809..17812,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 500,
        column: 26,
        span: 17812..17813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 500,
        column: 30,
        span: 17814..17817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 500,
        column: 31,
        span: 17817..17818,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 501,
        column: 0,
        span: 17825..17828,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 502,
        column: 0,
        span: 17833..17836,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 503,
        column: 0,
        span: 17839..17842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 505,
        column: 6,
        span: 17846..17849,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 505,
        column: 8,
        span: 17850..17851,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc %c def\"",
        ),
        line: 505,
        column: 21,
        span: 17852..17864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 506,
        column: 10,
        span: 17867..17874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 11,
        span: 17874..17875,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 506,
        column: 14,
        span: 17875..17878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 506,
        column: 15,
        span: 17878..17879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 506,
        column: 19,
        span: 17880..17883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 506,
        column: 20,
        span: 17883..17884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 506,
        column: 27,
        span: 17885..17891,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 506,
        column: 28,
        span: 17891..17892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 506,
        column: 32,
        span: 17892..17896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 33,
        span: 17896..17897,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 506,
        column: 36,
        span: 17897..17900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 37,
        span: 17900..17901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 38,
        span: 17901..17902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 507,
        column: 10,
        span: 17905..17912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 507,
        column: 11,
        span: 17912..17913,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"I\"",
        ),
        line: 507,
        column: 14,
        span: 17913..17916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 507,
        column: 15,
        span: 17916..17917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 507,
        column: 19,
        span: 17918..17921,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 507,
        column: 20,
        span: 17921..17922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 507,
        column: 24,
        span: 17922..17926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 507,
        column: 25,
        span: 17926..17927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 509,
        column: 6,
        span: 17931..17934,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 509,
        column: 8,
        span: 17935..17936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 509,
        column: 15,
        span: 17937..17943,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 509,
        column: 16,
        span: 17943..17944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 509,
        column: 19,
        span: 17944..17947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 509,
        column: 20,
        span: 17947..17948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 509,
        column: 23,
        span: 17948..17951,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 509,
        column: 24,
        span: 17951..17952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 509,
        column: 29,
        span: 17953..17957,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 509,
        column: 31,
        span: 17958..17959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 509,
        column: 33,
        span: 17959..17961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 509,
        column: 34,
        span: 17961..17962,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 509,
        column: 37,
        span: 17963..17965,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 509,
        column: 42,
        span: 17966..17970,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 509,
        column: 45,
        span: 17971..17973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 509,
        column: 52,
        span: 17974..17980,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 509,
        column: 53,
        span: 17980..17981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 509,
        column: 56,
        span: 17981..17984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 509,
        column: 57,
        span: 17984..17985,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cd\"",
        ),
        line: 509,
        column: 61,
        span: 17985..17989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 509,
        column: 62,
        span: 17989..17990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 509,
        column: 67,
        span: 17991..17995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 509,
        column: 68,
        span: 17995..17996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 510,
        column: 10,
        span: 17999..18006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 510,
        column: 11,
        span: 18006..18007,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P\"",
        ),
        line: 510,
        column: 14,
        span: 18007..18010,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 510,
        column: 15,
        span: 18010..18011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 510,
        column: 19,
        span: 18012..18015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 510,
        column: 20,
        span: 18015..18016,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 510,
        column: 22,
        span: 18017..18018,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 510,
        column: 23,
        span: 18018..18019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 510,
        column: 24,
        span: 18019..18020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 512,
        column: 6,
        span: 18024..18027,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 512,
        column: 8,
        span: 18028..18029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 512,
        column: 15,
        span: 18030..18036,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 512,
        column: 16,
        span: 18036..18037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 512,
        column: 19,
        span: 18037..18040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 512,
        column: 20,
        span: 18040..18041,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%\"",
        ),
        line: 512,
        column: 24,
        span: 18041..18045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 512,
        column: 25,
        span: 18045..18046,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 512,
        column: 27,
        span: 18046..18048,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 512,
        column: 29,
        span: 18049..18050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 512,
        column: 34,
        span: 18051..18055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 512,
        column: 35,
        span: 18055..18056,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 512,
        column: 38,
        span: 18057..18059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 512,
        column: 43,
        span: 18060..18064,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 512,
        column: 46,
        span: 18065..18067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 512,
        column: 53,
        span: 18068..18074,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 512,
        column: 54,
        span: 18074..18075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 512,
        column: 57,
        span: 18075..18078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 512,
        column: 58,
        span: 18078..18079,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%\"",
        ),
        line: 512,
        column: 62,
        span: 18079..18083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 512,
        column: 63,
        span: 18083..18084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 512,
        column: 65,
        span: 18084..18086,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 512,
        column: 67,
        span: 18087..18088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "blen",
        ),
        line: 512,
        column: 72,
        span: 18089..18093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 512,
        column: 73,
        span: 18093..18094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testpfs",
        ),
        line: 513,
        column: 10,
        span: 18097..18104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 513,
        column: 11,
        span: 18104..18105,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P\"",
        ),
        line: 513,
        column: 14,
        span: 18105..18108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 513,
        column: 15,
        span: 18108..18109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "str",
        ),
        line: 513,
        column: 19,
        span: 18110..18113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 513,
        column: 20,
        span: 18113..18114,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 513,
        column: 22,
        span: 18115..18116,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 513,
        column: 23,
        span: 18116..18117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 513,
        column: 24,
        span: 18117..18118,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 514,
        column: 0,
        span: 18119..18122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 517,
        column: 6,
        span: 18125..18130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 7,
        span: 18130..18131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 517,
        column: 11,
        span: 18131..18135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 12,
        span: 18135..18136,
    },
]
