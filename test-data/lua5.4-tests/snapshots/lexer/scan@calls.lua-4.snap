---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/calls.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing functions and calls\"",
        ),
        line: 4,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 10,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 11,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nil'",
        ),
        line: 12,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        line: 13,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 14,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 14,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 15,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 15,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 15,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 15,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 25,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 26,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 29,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 29,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 30,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 30,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 30,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 31,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 35,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 39,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 40,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 40,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 40,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 41,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 41,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 41,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 45,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 45,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 46,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 46,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 46,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 46,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 46,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 46,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 46,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 46,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 48,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 48,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 48,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "95",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 50,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 51,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 51,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 51,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 52,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 52,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 52,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 52,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 53,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 53,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 54,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 56,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 56,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 56,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 56,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 56,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 56,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 58,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 58,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 58,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 58,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 59,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 59,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 59,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 59,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 59,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 61,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 65,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 65,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 66,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 66,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 66,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 66,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 66,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 70,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 70,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 70,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 70,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 70,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 70,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 70,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 70,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 70,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 73,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 73,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 73,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 73,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 76,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 76,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 77,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 77,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return fat(\"",
        ),
        line: 77,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 77,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 78,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"load 'assert(fat(6)==720)' () \"",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 82,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return fat(5), 3'",
        ),
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 83,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 84,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 88,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 88,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 89,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 89,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 90,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 93,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 95,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 97,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 98,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 105,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 105,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 105,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "180",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 111,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing tail calls\"",
        ),
        line: 111,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 113,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 113,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 113,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 113,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 115,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 115,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 115,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 116,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 116,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 116,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 116,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 116,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 116,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 119,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 120,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 120,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 120,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 120,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 120,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 120,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 122,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 122,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 122,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 124,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 124,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 128,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 128,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 129,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 130,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 131,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 133,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 134,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 136,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 137,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 137,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 137,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 137,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 137,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 137,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 137,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 137,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 137,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 137,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 138,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 138,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 140,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 141,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 141,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 143,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 144,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 144,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 146,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 147,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 150,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 150,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 155,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 156,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 158,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 159,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1023",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 160,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 160,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 160,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 161,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 162,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 165,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 166,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 166,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        line: 166,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 166,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 171,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1023",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 177,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 179,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 179,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 179,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 180,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 181,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 181,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        line: 181,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 181,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 182,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 184,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 186,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 186,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 187,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 187,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 188,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 188,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 188,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 188,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 190,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 190,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 190,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 190,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 190,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 190,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 190,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 190,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 190,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 190,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 190,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 194,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 194,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 195,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 195,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 196,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        line: 202,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 202,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "le",
        ),
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 203,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "le",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 205,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 212,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 212,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 213,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 214,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 214,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 215,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 215,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 215,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 215,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 216,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 219,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 223,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 224,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 225,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 225,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 225,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 225,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 225,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 225,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 225,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 225,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 225,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 225,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 226,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 227,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 227,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 227,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 230,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 233,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 239,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 239,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 240,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 240,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 240,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 241,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 241,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 241,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 242,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 243,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 246,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 247,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 247,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 248,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 248,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 248,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 248,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 250,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 252,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 252,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 254,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 255,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 257,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 257,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 259,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 259,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        line: 261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 262,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 264,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 266,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 266,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 266,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 266,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 267,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 269,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 269,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 269,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 269,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 269,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 269,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 270,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 274,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 275,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 276,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 276,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 277,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 277,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"extra arg\"",
        ),
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 281,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 281,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-- a comment\\0\\0\\0\\n  x = 10 + \\n23; \\\n     local a = function () x = 'hi' end; \\\n     return '\\0'\"",
        ),
        line: 283,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 285,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 286,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 290,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 291,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 293,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 293,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 294,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 294,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 294,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 297,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        line: 297,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 297,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 298,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 298,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 298,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 299,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        line: 299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a text chunk\"",
        ),
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 301,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a text chunk\"",
        ),
        line: 302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        line: 302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 304,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 304,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 304,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 307,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 307,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 311,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 311,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 311,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 311,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 312,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 312,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 313,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 316,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 316,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 316,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 316,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 316,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 317,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 320,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 322,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 322,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'01234567890123456789012345678901234567890123456789'",
        ),
        line: 323,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 326,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'01234567890123456789012345678901234567890123456789'",
        ),
        line: 326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 330,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 330,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x = 1; return x\"",
        ),
        line: 330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 332,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 332,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a binary chunk\"",
        ),
        line: 333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a binary chunk\"",
        ),
        line: 334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 336,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unexpected symbol\"",
        ),
        line: 338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a = 123\"",
        ),
        line: 338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unexpected symbol\"",
        ),
        line: 339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a = 123\"",
        ),
        line: 339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hhi\"",
        ),
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hhi\"",
        ),
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return _ENV\"",
        ),
        line: 343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 347,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 347,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 348,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 349,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 349,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 350,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 351,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 352,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 352,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 353,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 353,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 353,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 354,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 354,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'_ENV'",
        ),
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 355,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 355,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX + ...\"",
        ),
        line: 358,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 358,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 358,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 358,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 362,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  return function (x)\n    return function (y)\n     return function (z)\n       return x+y+z\n     end\n   end\n  end\n]]",
        ),
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"read\"",
        ),
        line: 371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 375,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 375,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 376,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"read\"",
        ),
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 381,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 382,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 383,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 383,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 383,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 383,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 385,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 387,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 388,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 388,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 390,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 391,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 391,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 391,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 394,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 398,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 399,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 400,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 400,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a1\"",
        ),
        line: 400,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 400,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 401,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 401,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 401,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 401,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 401,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 401,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", a\"",
        ),
        line: 401,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 401,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 402,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 402,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 402,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 402,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" = 1\"",
        ),
        line: 402,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 403,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 403,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 403,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 403,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 403,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 403,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 403,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 403,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 403,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 403,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 403,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 403,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        line: 404,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 405,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 405,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 405,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 405,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 405,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 405,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; return function () return a1\"",
        ),
        line: 405,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 406,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 406,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 406,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 406,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" + a\"",
        ),
        line: 406,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 406,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        line: 406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        line: 406,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 406,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 407,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 407,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 407,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 407,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 408,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 408,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 409,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 412,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 412,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 413,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 414,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 414,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 414,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 415,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 415,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 416,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 416,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 416,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 416,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 419,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 422,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 423,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 423,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 423,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 424,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 425,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 425,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 427,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 432,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 432,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 432,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 433,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 433,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 433,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 433,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 434,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 434,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing binary chunks\"",
        ),
        line: 437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 438,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        line: 439,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 439,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c4BBc6BBB\"",
        ),
        line: 439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\27Lua\"",
        ),
        line: 440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x54",
            ),
        ),
        line: 441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 442,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x19\\x93\\r\\n\\x1a\\n\"",
        ),
        line: 443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 445,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"j\"",
        ),
        line: 445,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 446,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 447,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 448,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 448,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 449,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 449,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 449,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 449,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 449,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 449,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 450,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 450,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 450,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 450,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 450,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 450,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 450,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 450,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 451,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a constant\"",
        ),
        line: 451,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2",
        ),
        line: 452,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"another constant\"",
        ),
        line: 452,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 453,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 453,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 459,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ci",
        ),
        line: 461,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cn",
        ),
        line: 461,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 461,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"jn\"",
        ),
        line: 461,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 461,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        line: 461,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ci",
        ),
        line: 462,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x5678",
            ),
        ),
        line: 462,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cn",
        ),
        line: 462,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "370",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 465,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 465,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 465,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 465,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        line: 465,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 465,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 466,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 466,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 466,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 466,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 466,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 466,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 466,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 467,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 467,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 467,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 467,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 467,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 468,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 468,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 469,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 471,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 474,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 474,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 474,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 474,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 474,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 475,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 475,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 475,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 476,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 476,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 476,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"truncated\"",
        ),
        line: 476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 477,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 481,
    },
]
