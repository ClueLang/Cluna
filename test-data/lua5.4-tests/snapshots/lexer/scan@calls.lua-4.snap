---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/calls.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 68..73,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 73..74,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing functions and calls\"",
        ),
        line: 4,
        column: 36,
        span: 74..103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 37,
        span: 103..104,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 106..111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
        column: 12,
        span: 112..117,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 14,
        span: 118..119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 22,
        span: 120..127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
        column: 30,
        span: 128..135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 183..189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 189..190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 10,
        column: 12,
        span: 190..194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 13,
        span: 194..195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 14,
        span: 194..196,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 10,
        column: 15,
        span: 196..197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 16,
        span: 196..198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 17,
        span: 198..199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 20,
        span: 200..202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 10,
        column: 30,
        span: 203..212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 31,
        span: 212..213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
        column: 7,
        span: 214..220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 8,
        span: 220..221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 11,
        column: 12,
        span: 221..225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 13,
        span: 225..226,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 11,
        column: 17,
        span: 226..230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 18,
        span: 230..231,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 21,
        span: 232..234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 11,
        column: 31,
        span: 235..244,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 11,
        column: 35,
        span: 245..248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 11,
        column: 40,
        span: 249..253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 41,
        span: 253..254,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 11,
        column: 46,
        span: 254..259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 47,
        span: 259..260,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 50,
        span: 261..263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 11,
        column: 60,
        span: 264..273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 61,
        span: 273..274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 7,
        span: 275..281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 281..282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 12,
        column: 12,
        span: 282..286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 13,
        span: 286..287,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 12,
        column: 16,
        span: 287..290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 17,
        span: 290..291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 20,
        span: 292..294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nil'",
        ),
        line: 12,
        column: 26,
        span: 295..300,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 13,
        column: 7,
        span: 304..307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 13,
        column: 12,
        span: 308..312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 13,
        span: 312..313,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 13,
        column: 14,
        span: 313..314,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 15,
        span: 313..315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 16,
        span: 315..316,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 19,
        span: 317..319,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        line: 13,
        column: 28,
        span: 320..328,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 14,
        column: 7,
        span: 332..335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 14,
        column: 12,
        span: 336..340,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 14,
        column: 15,
        span: 340..343,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
        column: 18,
        span: 344..346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 14,
        column: 27,
        span: 347..355,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
        column: 7,
        span: 359..362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 15,
        column: 12,
        span: 363..367,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 15,
        column: 13,
        span: 367..368,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 15,
        column: 14,
        span: 368..369,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 17,
        span: 370..372,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 15,
        column: 25,
        span: 373..380,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 16,
        column: 7,
        span: 384..387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 16,
        column: 12,
        span: 388..392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 13,
        span: 392..393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 16,
        column: 17,
        span: 393..397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 18,
        span: 397..398,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 21,
        span: 399..401,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        line: 16,
        column: 32,
        span: 402..412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 33,
        span: 412..413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 7,
        span: 415..421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 8,
        span: 421..422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 18,
        column: 12,
        span: 422..426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 13,
        span: 426..427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 19,
        span: 427..433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 20,
        span: 433..434,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 23,
        span: 435..437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 18,
        column: 28,
        span: 438..442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 29,
        span: 442..443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 18,
        column: 34,
        span: 443..448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 35,
        span: 448..449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 36,
        span: 449..450,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
        column: 9,
        span: 451..459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 19,
        column: 11,
        span: 460..461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 13,
        span: 462..463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 19,
        column: 14,
        span: 463..464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 15,
        span: 464..465,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 19,
        column: 22,
        span: 466..472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 24,
        span: 473..474,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 19,
        column: 25,
        span: 474..475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 19,
        column: 26,
        span: 475..476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 28,
        span: 477..478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 19,
        column: 29,
        span: 478..479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 30,
        span: 479..480,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 19,
        column: 0,
        span: 481..484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 7,
        span: 485..491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 8,
        span: 491..492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 20,
        column: 12,
        span: 492..496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 13,
        span: 496..497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 20,
        column: 14,
        span: 497..498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 15,
        span: 498..499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
        column: 18,
        span: 500..502,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        line: 20,
        column: 29,
        span: 503..513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 30,
        span: 513..514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 7,
        span: 515..521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 8,
        span: 521..522,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 21,
        column: 11,
        span: 522..525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 21,
        column: 17,
        span: 526..531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 18,
        span: 531..532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 21,
        column: 22,
        span: 532..536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 23,
        span: 536..537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 24,
        span: 537..538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 25,
        column: 5,
        span: 577..581,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 7,
        span: 582..583,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 25,
        column: 0,
        span: 584..589,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 26,
        column: 0,
        span: 590..592,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
        column: 8,
        span: 595..600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 27,
        column: 12,
        span: 601..604,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 14,
        span: 605..606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 0,
        span: 606..608,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
        column: 8,
        span: 611..616,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 28,
        column: 17,
        span: 617..625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 28,
        column: 22,
        span: 626..630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 24,
        span: 631..632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 28,
        column: 25,
        span: 632..633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 26,
        span: 633..634,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 29,
        column: 7,
        span: 639..641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 29,
        column: 9,
        span: 642..643,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 11,
        span: 643..645,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 12,
        span: 644..646,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 29,
        column: 17,
        span: 647..651,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 29,
        column: 24,
        span: 652..658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 29,
        column: 0,
        span: 659..662,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 30,
        column: 9,
        span: 667..671,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 30,
        column: 16,
        span: 672..678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 30,
        column: 18,
        span: 679..680,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 30,
        column: 19,
        span: 680..681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 30,
        column: 23,
        span: 681..685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 24,
        span: 685..686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 30,
        column: 25,
        span: 686..687,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 30,
        column: 26,
        span: 687..688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 27,
        span: 687..689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 28,
        span: 689..690,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 31,
        column: 0,
        span: 695..698,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 32,
        column: 0,
        span: 701..704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 9,
        span: 707..713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 10,
        span: 713..714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 33,
        column: 14,
        span: 714..718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 15,
        span: 718..719,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 16,
        span: 718..720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 17,
        span: 720..721,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
        column: 20,
        span: 722..724,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 24,
        span: 724..728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 25,
        span: 728..729,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 34,
        column: 0,
        span: 730..733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 734..740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 740..741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 35,
        column: 12,
        span: 741..745,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 15,
        span: 746..748,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 35,
        column: 21,
        span: 749..754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 22,
        span: 754..755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 2,
        span: 781..782,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 4,
        span: 783..784,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 38,
        column: 6,
        span: 785..786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 38,
        column: 7,
        span: 786..787,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 9,
        span: 788..789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 12,
        span: 789..792,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 38,
        column: 13,
        span: 792..793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 39,
        column: 5,
        span: 794..798,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 7,
        span: 799..800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 0,
        span: 800..803,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 40,
        column: 9,
        span: 804..812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 11,
        span: 813..814,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 40,
        column: 12,
        span: 814..815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 40,
        column: 13,
        span: 815..816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 15,
        span: 817..818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 40,
        column: 16,
        span: 818..819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 17,
        span: 819..820,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 40,
        column: 24,
        span: 821..827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 40,
        column: 26,
        span: 828..829,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 40,
        column: 27,
        span: 829..830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 40,
        column: 31,
        span: 830..834,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 32,
        span: 834..835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 40,
        column: 33,
        span: 835..836,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
        column: 0,
        span: 837..840,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 41,
        column: 9,
        span: 841..849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 41,
        column: 11,
        span: 850..851,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 12,
        span: 851..852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 41,
        column: 13,
        span: 852..853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 15,
        span: 854..855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 41,
        column: 16,
        span: 855..856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 17,
        span: 856..857,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 41,
        column: 24,
        span: 858..864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 41,
        column: 26,
        span: 865..866,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 41,
        column: 27,
        span: 866..867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 41,
        column: 31,
        span: 867..871,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 41,
        column: 0,
        span: 872..875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
        column: 7,
        span: 877..883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 8,
        span: 883..884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
        column: 9,
        span: 884..885,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 43,
        column: 10,
        span: 885..886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 43,
        column: 11,
        span: 886..887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 12,
        span: 887..888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 13,
        span: 887..889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 14,
        span: 889..890,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 43,
        column: 15,
        span: 890..891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 17,
        span: 890..893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 20,
        span: 894..896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
        column: 22,
        span: 897..898,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 23,
        span: 898..899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 43,
        column: 24,
        span: 899..900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 25,
        span: 900..901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 26,
        span: 900..902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 27,
        span: 902..903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 28,
        span: 903..904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
        column: 2,
        span: 906..907,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 3,
        span: 907..908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 45,
        column: 4,
        span: 908..909,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 6,
        span: 910..911,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 45,
        column: 8,
        span: 912..913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 45,
        column: 9,
        span: 913..914,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 10,
        span: 914..915,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 45,
        column: 11,
        span: 915..916,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 14,
        span: 915..919,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 45,
        column: 15,
        span: 919..920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 46,
        column: 2,
        span: 921..922,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 46,
        column: 3,
        span: 922..923,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 46,
        column: 6,
        span: 923..926,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 46,
        column: 7,
        span: 926..927,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 8,
        span: 927..928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 46,
        column: 9,
        span: 928..929,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 11,
        span: 930..931,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 46,
        column: 20,
        span: 932..940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 22,
        span: 941..942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 46,
        column: 26,
        span: 942..946,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 27,
        span: 946..947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 46,
        column: 29,
        span: 948..949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 30,
        span: 949..950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
        column: 31,
        span: 950..951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 32,
        span: 951..952,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 46,
        column: 39,
        span: 953..959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 46,
        column: 44,
        span: 960..964,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 45,
        span: 964..965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 46,
        column: 46,
        span: 965..966,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 46,
        column: 47,
        span: 966..967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 46,
        column: 48,
        span: 967..968,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 46,
        column: 49,
        span: 968..969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
        column: 50,
        span: 969..970,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 46,
        column: 0,
        span: 971..974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 7,
        span: 976..982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 8,
        span: 982..983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 48,
        column: 9,
        span: 983..984,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 10,
        span: 984..985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 48,
        column: 11,
        span: 985..986,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 48,
        column: 12,
        span: 986..987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 48,
        column: 13,
        span: 987..988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 14,
        span: 988..989,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 15,
        span: 988..990,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 16,
        span: 990..991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 17,
        span: 990..992,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 18,
        span: 992..993,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
        column: 21,
        span: 994..996,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 48,
        column: 23,
        span: 997..998,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "95",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 25,
        span: 997..1000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 26,
        span: 1000..1001,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 50,
        column: 0,
        span: 1003..1005,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 51,
        column: 8,
        span: 1008..1013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 51,
        column: 10,
        span: 1014..1015,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 12,
        span: 1016..1017,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 51,
        column: 14,
        span: 1018..1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 51,
        column: 15,
        span: 1019..1020,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 16,
        span: 1020..1021,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 17,
        span: 1020..1022,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 51,
        column: 18,
        span: 1022..1023,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 52,
        column: 11,
        span: 1026..1034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
        column: 13,
        span: 1035..1036,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 52,
        column: 14,
        span: 1036..1037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 52,
        column: 17,
        span: 1037..1040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 19,
        span: 1041..1042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 52,
        column: 20,
        span: 1042..1043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 21,
        span: 1043..1044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 52,
        column: 26,
        span: 1045..1049,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 27,
        span: 1049..1050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 52,
        column: 28,
        span: 1050..1051,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 29,
        span: 1051..1052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
        column: 31,
        span: 1053..1054,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 32,
        span: 1054..1055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 52,
        column: 33,
        span: 1055..1056,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 35,
        span: 1057..1058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 52,
        column: 40,
        span: 1059..1063,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 41,
        span: 1063..1064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 52,
        column: 42,
        span: 1064..1065,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 52,
        column: 43,
        span: 1065..1066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 52,
        column: 44,
        span: 1066..1067,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 45,
        span: 1067..1068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 48,
        span: 1068..1071,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 52,
        column: 49,
        span: 1071..1072,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 52,
        column: 56,
        span: 1073..1079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 52,
        column: 61,
        span: 1080..1084,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 52,
        column: 0,
        span: 1085..1088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
        column: 9,
        span: 1091..1097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 10,
        span: 1097..1098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 11,
        span: 1098..1099,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 53,
        column: 12,
        span: 1099..1100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 53,
        column: 15,
        span: 1100..1103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 16,
        span: 1103..1104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 18,
        span: 1103..1106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 19,
        span: 1106..1107,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 53,
        column: 20,
        span: 1107..1108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 53,
        column: 23,
        span: 1108..1111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 24,
        span: 1111..1112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 26,
        span: 1111..1114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 27,
        span: 1114..1115,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 53,
        column: 28,
        span: 1115..1116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 53,
        column: 31,
        span: 1116..1119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 32,
        span: 1119..1120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 34,
        span: 1119..1122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 35,
        span: 1122..1123,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 36,
        span: 1123..1124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 53,
        column: 37,
        span: 1124..1125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
        column: 40,
        span: 1126..1128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 43,
        span: 1128..1131,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 53,
        column: 47,
        span: 1132..1135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 49,
        span: 1136..1137,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 50,
        span: 1137..1138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 53,
        column: 51,
        span: 1138..1139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
        column: 54,
        span: 1140..1142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 57,
        span: 1142..1145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 58,
        span: 1145..1146,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 54,
        column: 0,
        span: 1147..1150,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 56,
        column: 6,
        span: 1152..1157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
        column: 8,
        span: 1158..1159,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 10,
        span: 1160..1161,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 56,
        column: 12,
        span: 1162..1163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 56,
        column: 13,
        span: 1163..1164,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 14,
        span: 1164..1165,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 56,
        column: 15,
        span: 1165..1166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 56,
        column: 16,
        span: 1166..1167,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 17,
        span: 1167..1168,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 56,
        column: 18,
        span: 1168..1169,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 56,
        column: 19,
        span: 1169..1170,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 56,
        column: 20,
        span: 1170..1171,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 56,
        column: 21,
        span: 1171..1172,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 58,
        column: 9,
        span: 1174..1182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 11,
        span: 1183..1184,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 12,
        span: 1184..1185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 58,
        column: 13,
        span: 1185..1186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 14,
        span: 1186..1187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 58,
        column: 15,
        span: 1187..1188,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 16,
        span: 1188..1189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 58,
        column: 18,
        span: 1189..1191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 20,
        span: 1192..1193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 58,
        column: 21,
        span: 1193..1194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 22,
        span: 1194..1195,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 58,
        column: 29,
        span: 1196..1202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 58,
        column: 31,
        span: 1203..1204,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 58,
        column: 32,
        span: 1204..1205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 33,
        span: 1204..1206,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 58,
        column: 0,
        span: 1207..1210,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 59,
        column: 9,
        span: 1211..1219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 11,
        span: 1220..1221,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 12,
        span: 1221..1222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 59,
        column: 13,
        span: 1222..1223,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 14,
        span: 1223..1224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 59,
        column: 15,
        span: 1224..1225,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 59,
        column: 16,
        span: 1225..1226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        line: 59,
        column: 18,
        span: 1226..1228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 20,
        span: 1229..1230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 59,
        column: 21,
        span: 1230..1231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 22,
        span: 1231..1232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 59,
        column: 23,
        span: 1232..1233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 24,
        span: 1233..1234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 59,
        column: 29,
        span: 1235..1239,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 59,
        column: 30,
        span: 1239..1240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 59,
        column: 31,
        span: 1240..1241,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 59,
        column: 32,
        span: 1241..1242,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 34,
        span: 1243..1244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 59,
        column: 36,
        span: 1245..1246,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 59,
        column: 0,
        span: 1247..1250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 7,
        span: 1251..1257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 8,
        span: 1257..1258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 60,
        column: 9,
        span: 1258..1259,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 10,
        span: 1259..1260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 60,
        column: 11,
        span: 1260..1261,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 12,
        span: 1261..1262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 60,
        column: 13,
        span: 1262..1263,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 14,
        span: 1263..1264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 60,
        column: 16,
        span: 1264..1266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 17,
        span: 1266..1267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 18,
        span: 1266..1268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 19,
        span: 1268..1269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 22,
        span: 1270..1272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 24,
        span: 1272..1274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 25,
        span: 1274..1275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 61,
        column: 2,
        span: 1276..1277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 3,
        span: 1277..1278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 61,
        column: 4,
        span: 1278..1279,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 5,
        span: 1279..1280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 61,
        column: 6,
        span: 1280..1281,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 61,
        column: 7,
        span: 1281..1282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        line: 61,
        column: 9,
        span: 1282..1284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 10,
        span: 1284..1285,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 61,
        column: 13,
        span: 1285..1288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 14,
        span: 1288..1289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 17,
        span: 1289..1292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 18,
        span: 1292..1293,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 61,
        column: 19,
        span: 1293..1294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 26,
        span: 1295..1301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 27,
        span: 1301..1302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 61,
        column: 28,
        span: 1302..1303,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 29,
        span: 1303..1304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 61,
        column: 30,
        span: 1304..1305,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 31,
        span: 1305..1306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 61,
        column: 32,
        span: 1306..1307,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 33,
        span: 1307..1308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 61,
        column: 34,
        span: 1308..1309,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
        column: 37,
        span: 1310..1312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 40,
        span: 1312..1315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 41,
        span: 1315..1316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 63,
        column: 6,
        span: 1318..1323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 7,
        span: 1323..1324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 63,
        column: 10,
        span: 1324..1327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 11,
        span: 1327..1328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 65,
        column: 2,
        span: 1330..1331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
        column: 4,
        span: 1332..1333,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 65,
        column: 8,
        span: 1334..1337,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 66,
        column: 9,
        span: 1355..1363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 66,
        column: 11,
        span: 1364..1365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 12,
        span: 1365..1366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 13,
        span: 1366..1367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 14,
        span: 1367..1368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 66,
        column: 15,
        span: 1368..1369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 16,
        span: 1369..1370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 66,
        column: 17,
        span: 1370..1371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 18,
        span: 1371..1372,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 66,
        column: 24,
        span: 1373..1378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 66,
        column: 26,
        span: 1379..1380,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 28,
        span: 1381..1382,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 66,
        column: 32,
        span: 1383..1386,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 66,
        column: 33,
        span: 1386..1387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 66,
        column: 35,
        span: 1388..1389,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 36,
        span: 1389..1390,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
        column: 37,
        span: 1390..1391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 38,
        span: 1391..1392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 39,
        span: 1392..1393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 66,
        column: 40,
        span: 1393..1394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 41,
        span: 1394..1395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 66,
        column: 42,
        span: 1395..1396,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 43,
        span: 1396..1397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 66,
        column: 44,
        span: 1397..1398,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 66,
        column: 45,
        span: 1398..1399,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 66,
        column: 0,
        span: 1400..1403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 68,
        column: 2,
        span: 1405..1406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 3,
        span: 1406..1407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 4,
        span: 1448..1450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 5,
        span: 1450..1451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 6,
        span: 1450..1452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 7,
        span: 1452..1453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 7,
        span: 1454..1460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 8,
        span: 1460..1461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 70,
        column: 9,
        span: 1461..1462,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 70,
        column: 10,
        span: 1462..1463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 11,
        span: 1462..1464,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 70,
        column: 12,
        span: 1464..1465,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 15,
        span: 1466..1468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 17,
        span: 1468..1470,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 70,
        column: 21,
        span: 1471..1474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 70,
        column: 23,
        span: 1475..1476,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 70,
        column: 24,
        span: 1476..1477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 25,
        span: 1476..1478,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 70,
        column: 26,
        span: 1478..1479,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 29,
        span: 1480..1482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 31,
        span: 1482..1484,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 70,
        column: 35,
        span: 1485..1488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 70,
        column: 37,
        span: 1489..1490,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 70,
        column: 38,
        span: 1490..1491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 39,
        span: 1490..1492,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 70,
        column: 40,
        span: 1492..1493,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 43,
        span: 1494..1496,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 70,
        column: 47,
        span: 1497..1500,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 70,
        column: 51,
        span: 1501..1504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 70,
        column: 53,
        span: 1505..1506,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 70,
        column: 54,
        span: 1506..1507,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 55,
        span: 1506..1508,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 70,
        column: 56,
        span: 1508..1509,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 59,
        span: 1510..1512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 70,
        column: 63,
        span: 1513..1516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 64,
        span: 1516..1517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 71,
        column: 2,
        span: 1518..1519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 3,
        span: 1519..1520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 4,
        span: 1519..1521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 5,
        span: 1521..1522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 6,
        span: 1521..1523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 7,
        span: 1523..1524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 8,
        span: 1548..1550,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 9,
        span: 1550..1551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 10,
        span: 1550..1552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 11,
        span: 1552..1553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 73,
        column: 7,
        span: 1554..1560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 8,
        span: 1560..1561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 73,
        column: 9,
        span: 1561..1562,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
        column: 10,
        span: 1562..1563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 11,
        span: 1562..1564,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
        column: 12,
        span: 1564..1565,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
        column: 15,
        span: 1566..1568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 17,
        span: 1568..1570,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 73,
        column: 21,
        span: 1571..1574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 73,
        column: 23,
        span: 1575..1576,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
        column: 24,
        span: 1576..1577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 25,
        span: 1576..1578,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
        column: 26,
        span: 1578..1579,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
        column: 29,
        span: 1580..1582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 31,
        span: 1582..1584,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 73,
        column: 35,
        span: 1585..1588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 73,
        column: 37,
        span: 1589..1590,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
        column: 38,
        span: 1590..1591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 39,
        span: 1590..1592,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
        column: 40,
        span: 1592..1593,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
        column: 43,
        span: 1594..1596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 45,
        span: 1596..1598,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 73,
        column: 49,
        span: 1599..1602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 73,
        column: 51,
        span: 1603..1604,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
        column: 52,
        span: 1604..1605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 53,
        span: 1604..1606,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
        column: 54,
        span: 1606..1607,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
        column: 57,
        span: 1608..1610,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 73,
        column: 61,
        span: 1611..1614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 62,
        span: 1614..1615,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 75,
        column: 9,
        span: 1617..1625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 75,
        column: 13,
        span: 1626..1629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 14,
        span: 1629..1630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 75,
        column: 15,
        span: 1630..1631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 16,
        span: 1631..1632,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 76,
        column: 5,
        span: 1635..1637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 76,
        column: 7,
        span: 1638..1639,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 76,
        column: 10,
        span: 1640..1642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 12,
        span: 1642..1644,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 76,
        column: 17,
        span: 1645..1649,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 76,
        column: 24,
        span: 1650..1656,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 0,
        span: 1656..1658,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 77,
        column: 7,
        span: 1661..1665,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 77,
        column: 14,
        span: 1666..1672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 77,
        column: 16,
        span: 1673..1674,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 77,
        column: 17,
        span: 1674..1675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 77,
        column: 21,
        span: 1675..1679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 22,
        span: 1679..1680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return fat(\"",
        ),
        line: 77,
        column: 35,
        span: 1680..1693,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 77,
        column: 38,
        span: 1694..1696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 77,
        column: 40,
        span: 1697..1698,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 77,
        column: 41,
        span: 1698..1699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 42,
        span: 1698..1700,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 77,
        column: 45,
        span: 1701..1703,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 77,
        column: 49,
        span: 1704..1707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 50,
        span: 1707..1708,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 77,
        column: 53,
        span: 1709..1711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 54,
        span: 1711..1712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 55,
        span: 1712..1713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 56,
        span: 1713..1714,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 78,
        column: 0,
        span: 1717..1720,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 79,
        column: 0,
        span: 1721..1724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
        column: 7,
        span: 1726..1732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 8,
        span: 1732..1733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 81,
        column: 12,
        span: 1733..1737,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"load 'assert(fat(6)==720)' () \"",
        ),
        line: 81,
        column: 45,
        span: 1738..1770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 46,
        span: 1770..1771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 47,
        span: 1771..1772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 48,
        span: 1772..1773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 82,
        column: 2,
        span: 1774..1775,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 4,
        span: 1776..1777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 82,
        column: 9,
        span: 1778..1782,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 10,
        span: 1782..1783,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return fat(5), 3'",
        ),
        line: 82,
        column: 28,
        span: 1783..1801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 29,
        span: 1801..1802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 2,
        span: 1803..1804,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 3,
        span: 1804..1805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 83,
        column: 4,
        span: 1805..1806,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
        column: 6,
        span: 1807..1808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 8,
        span: 1809..1810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 9,
        span: 1810..1811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 10,
        span: 1811..1812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
        column: 7,
        span: 1813..1819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 8,
        span: 1819..1820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
        column: 9,
        span: 1820..1821,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 12,
        span: 1822..1824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 16,
        span: 1824..1828,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 84,
        column: 20,
        span: 1829..1832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 84,
        column: 22,
        span: 1833..1834,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 25,
        span: 1835..1837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 27,
        span: 1837..1839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 28,
        span: 1839..1840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 85,
        column: 6,
        span: 1841..1846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 7,
        span: 1846..1847,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 85,
        column: 10,
        span: 1847..1850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 11,
        span: 1850..1851,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 87,
        column: 9,
        span: 1853..1861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        line: 87,
        column: 18,
        span: 1862..1870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 20,
        span: 1871..1872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 87,
        column: 21,
        span: 1872..1873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 22,
        span: 1873..1874,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 88,
        column: 5,
        span: 1877..1879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 88,
        column: 7,
        span: 1880..1881,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 9,
        span: 1881..1883,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 10,
        span: 1882..1884,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 88,
        column: 15,
        span: 1885..1889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 88,
        column: 21,
        span: 1890..1895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 22,
        span: 1895..1896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 23,
        span: 1896..1897,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 88,
        column: 24,
        span: 1897..1898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        line: 88,
        column: 29,
        span: 1899..1903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 30,
        span: 1903..1904,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 31,
        span: 1903..1905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 32,
        span: 1905..1906,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 88,
        column: 33,
        span: 1906..1907,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 89,
        column: 7,
        span: 1910..1914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        line: 89,
        column: 16,
        span: 1915..1923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 18,
        span: 1924..1925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 89,
        column: 19,
        span: 1925..1926,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 89,
        column: 20,
        span: 1926..1927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 21,
        span: 1926..1928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 22,
        span: 1928..1929,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 89,
        column: 23,
        span: 1929..1930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        line: 89,
        column: 28,
        span: 1931..1935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 29,
        span: 1935..1936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 30,
        span: 1935..1937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 31,
        span: 1937..1938,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 89,
        column: 32,
        span: 1938..1939,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 90,
        column: 0,
        span: 1942..1945,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
        column: 0,
        span: 1946..1949,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 93,
        column: 0,
        span: 1951..1953,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 94,
        column: 11,
        span: 1956..1964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 94,
        column: 17,
        span: 1965..1970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 19,
        span: 1971..1972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 94,
        column: 20,
        span: 1972..1973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 21,
        span: 1973..1974,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 95,
        column: 7,
        span: 1979..1981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 95,
        column: 9,
        span: 1982..1983,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 95,
        column: 11,
        span: 1984..1985,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 13,
        span: 1985..1987,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 95,
        column: 0,
        span: 1988..1992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 13,
        span: 1999..2005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 14,
        span: 2005..2006,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 96,
        column: 17,
        span: 2006..2009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 96,
        column: 23,
        span: 2010..2015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 24,
        span: 2015..2016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        line: 96,
        column: 32,
        span: 2016..2024,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 33,
        span: 2024..2025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 96,
        column: 35,
        span: 2026..2027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 36,
        span: 2027..2028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 37,
        span: 2028..2029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 97,
        column: 12,
        span: 2036..2041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 13,
        span: 2041..2042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 97,
        column: 14,
        span: 2042..2043,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 97,
        column: 15,
        span: 2043..2044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 16,
        span: 2043..2045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 17,
        span: 2045..2046,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 98,
        column: 0,
        span: 2051..2054,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
        column: 0,
        span: 2057..2060,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
        column: 0,
        span: 2061..2064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 102,
        column: 6,
        span: 2066..2071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 7,
        span: 2071..2072,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 9,
        span: 2071..2074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 10,
        span: 2074..2075,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 104,
        column: 9,
        span: 2077..2085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 104,
        column: 14,
        span: 2086..2090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 16,
        span: 2091..2092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 104,
        column: 17,
        span: 2092..2093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 18,
        span: 2093..2094,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 105,
        column: 5,
        span: 2097..2099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 105,
        column: 7,
        span: 2100..2101,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 105,
        column: 8,
        span: 2101..2102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 9,
        span: 2101..2103,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 105,
        column: 14,
        span: 2104..2108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 105,
        column: 19,
        span: 2109..2113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 20,
        span: 2113..2114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 105,
        column: 21,
        span: 2114..2115,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 105,
        column: 22,
        span: 2115..2116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 23,
        span: 2115..2117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 24,
        span: 2117..2118,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 105,
        column: 0,
        span: 2119..2122,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
        column: 0,
        span: 2123..2126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 107,
        column: 5,
        span: 2127..2131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 6,
        span: 2131..2132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 8,
        span: 2131..2134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 9,
        span: 2134..2135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 108,
        column: 5,
        span: 2136..2140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 6,
        span: 2140..2141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "180",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 9,
        span: 2140..2144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 10,
        span: 2144..2145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 111,
        column: 6,
        span: 2148..2153,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing tail calls\"",
        ),
        line: 111,
        column: 26,
        span: 2153..2173,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 113,
        column: 9,
        span: 2175..2183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 113,
        column: 14,
        span: 2184..2188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 16,
        span: 2189..2190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 113,
        column: 17,
        span: 2190..2191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 18,
        span: 2191..2192,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 113,
        column: 21,
        span: 2193..2195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 113,
        column: 23,
        span: 2196..2197,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 113,
        column: 24,
        span: 2197..2198,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 25,
        span: 2197..2199,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 113,
        column: 30,
        span: 2200..2204,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 113,
        column: 37,
        span: 2205..2211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 113,
        column: 42,
        span: 2212..2216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 43,
        span: 2216..2217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 113,
        column: 44,
        span: 2217..2218,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 113,
        column: 45,
        span: 2218..2219,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 46,
        span: 2218..2220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 47,
        span: 2220..2221,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 113,
        column: 52,
        span: 2222..2226,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 113,
        column: 59,
        span: 2227..2233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 63,
        span: 2233..2237,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
        column: 67,
        span: 2238..2241,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
        column: 0,
        span: 2242..2245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
        column: 7,
        span: 2246..2252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 8,
        span: 2252..2253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 114,
        column: 12,
        span: 2253..2257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 13,
        span: 2257..2258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 18,
        span: 2257..2263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 19,
        span: 2263..2264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 114,
        column: 22,
        span: 2265..2267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 26,
        span: 2267..2271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 27,
        span: 2271..2272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 2,
        span: 2273..2274,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 115,
        column: 4,
        span: 2275..2276,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 115,
        column: 6,
        span: 2277..2278,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 115,
        column: 7,
        span: 2278..2279,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 116,
        column: 9,
        span: 2280..2288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 11,
        span: 2289..2290,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 116,
        column: 12,
        span: 2290..2291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 116,
        column: 16,
        span: 2291..2295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 18,
        span: 2296..2297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 116,
        column: 19,
        span: 2297..2298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 20,
        span: 2298..2299,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 116,
        column: 23,
        span: 2300..2302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 116,
        column: 25,
        span: 2303..2304,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 116,
        column: 26,
        span: 2304..2305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 27,
        span: 2304..2306,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 116,
        column: 32,
        span: 2307..2311,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 116,
        column: 39,
        span: 2312..2318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 116,
        column: 44,
        span: 2319..2323,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 116,
        column: 45,
        span: 2323..2324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 116,
        column: 49,
        span: 2324..2328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 50,
        span: 2328..2329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 116,
        column: 51,
        span: 2329..2330,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 116,
        column: 52,
        span: 2330..2331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 53,
        span: 2330..2332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 54,
        span: 2332..2333,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 116,
        column: 59,
        span: 2334..2338,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 116,
        column: 66,
        span: 2339..2345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 70,
        span: 2345..2349,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 116,
        column: 74,
        span: 2350..2353,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 116,
        column: 0,
        span: 2354..2357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 7,
        span: 2358..2364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 8,
        span: 2364..2365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 9,
        span: 2365..2366,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 117,
        column: 10,
        span: 2366..2367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 117,
        column: 14,
        span: 2367..2371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 15,
        span: 2371..2372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 20,
        span: 2371..2377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 21,
        span: 2377..2378,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 24,
        span: 2379..2381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 28,
        span: 2381..2385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 29,
        span: 2385..2386,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 119,
        column: 3,
        span: 2388..2390,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 120,
        column: 8,
        span: 2419..2424,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 120,
        column: 17,
        span: 2425..2433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 120,
        column: 21,
        span: 2434..2437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 23,
        span: 2438..2439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 120,
        column: 24,
        span: 2439..2440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 25,
        span: 2440..2441,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 120,
        column: 29,
        span: 2442..2445,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 30,
        span: 2445..2446,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 120,
        column: 36,
        span: 2447..2452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 38,
        span: 2453..2454,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 40,
        span: 2455..2456,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 120,
        column: 42,
        span: 2457..2458,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 120,
        column: 45,
        span: 2458..2461,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 120,
        column: 46,
        span: 2461..2462,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 120,
        column: 47,
        span: 2462..2463,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 120,
        column: 54,
        span: 2464..2470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 120,
        column: 56,
        span: 2471..2472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 57,
        span: 2472..2473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 59,
        span: 2474..2475,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
        column: 60,
        span: 2475..2476,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 61,
        span: 2475..2477,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
        column: 62,
        span: 2477..2478,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 63,
        span: 2478..2479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 65,
        span: 2480..2481,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
        column: 66,
        span: 2481..2482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 67,
        span: 2481..2483,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
        column: 68,
        span: 2483..2484,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 120,
        column: 0,
        span: 2485..2488,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 122,
        column: 8,
        span: 2492..2497,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 122,
        column: 17,
        span: 2498..2506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 122,
        column: 22,
        span: 2507..2511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 24,
        span: 2512..2513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 122,
        column: 25,
        span: 2513..2514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 26,
        span: 2514..2515,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 122,
        column: 33,
        span: 2516..2522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 122,
        column: 37,
        span: 2523..2526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 38,
        span: 2526..2527,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 40,
        span: 2526..2529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 41,
        span: 2529..2530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 122,
        column: 43,
        span: 2531..2532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 44,
        span: 2532..2533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 122,
        column: 46,
        span: 2534..2535,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 122,
        column: 48,
        span: 2536..2537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 50,
        span: 2537..2539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 51,
        span: 2539..2540,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 122,
        column: 0,
        span: 2541..2544,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 124,
        column: 8,
        span: 2548..2553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 10,
        span: 2554..2555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 11,
        span: 2555..2556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 124,
        column: 13,
        span: 2557..2558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 14,
        span: 2558..2559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 124,
        column: 16,
        span: 2560..2561,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 124,
        column: 18,
        span: 2562..2563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 124,
        column: 23,
        span: 2564..2568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 24,
        span: 2568..2569,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 124,
        column: 25,
        span: 2569..2570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 26,
        span: 2569..2571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 27,
        span: 2571..2572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 9,
        span: 2575..2581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 10,
        span: 2581..2582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 125,
        column: 11,
        span: 2582..2583,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 14,
        span: 2584..2586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 17,
        span: 2586..2589,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 125,
        column: 21,
        span: 2590..2593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 125,
        column: 23,
        span: 2594..2595,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 26,
        span: 2596..2598,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 28,
        span: 2599..2600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 29,
        span: 2599..2601,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 125,
        column: 33,
        span: 2602..2605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 125,
        column: 35,
        span: 2606..2607,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 38,
        span: 2608..2610,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 40,
        span: 2611..2612,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 41,
        span: 2611..2613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 42,
        span: 2613..2614,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 128,
        column: 8,
        span: 2648..2653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 128,
        column: 10,
        span: 2654..2655,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 12,
        span: 2656..2657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 128,
        column: 25,
        span: 2658..2670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 26,
        span: 2670..2671,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 128,
        column: 27,
        span: 2671..2672,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 128,
        column: 28,
        span: 2672..2673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 29,
        span: 2673..2674,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 128,
        column: 31,
        span: 2675..2676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        line: 128,
        column: 37,
        span: 2676..2682,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 39,
        span: 2683..2684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 128,
        column: 43,
        span: 2685..2688,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 128,
        column: 44,
        span: 2688..2689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 45,
        span: 2689..2690,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 129,
        column: 8,
        span: 2693..2698,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 129,
        column: 17,
        span: 2699..2707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 129,
        column: 22,
        span: 2708..2712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 24,
        span: 2713..2714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
        column: 25,
        span: 2714..2715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 26,
        span: 2715..2716,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 129,
        column: 33,
        span: 2717..2723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 129,
        column: 35,
        span: 2724..2725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 36,
        span: 2725..2726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 38,
        span: 2725..2728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 39,
        span: 2728..2729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
        column: 41,
        span: 2730..2731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 42,
        span: 2731..2732,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 129,
        column: 0,
        span: 2733..2736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 130,
        column: 4,
        span: 2739..2740,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 5,
        span: 2740..2741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 130,
        column: 7,
        span: 2742..2743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 8,
        span: 2743..2744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 130,
        column: 10,
        span: 2745..2746,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 12,
        span: 2747..2748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 130,
        column: 17,
        span: 2749..2753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 18,
        span: 2753..2754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 21,
        span: 2753..2757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 22,
        span: 2757..2758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
        column: 9,
        span: 2761..2767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 10,
        span: 2767..2768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
        column: 11,
        span: 2768..2769,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
        column: 14,
        span: 2770..2772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 131,
        column: 16,
        span: 2773..2774,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 131,
        column: 20,
        span: 2775..2778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 131,
        column: 22,
        span: 2779..2780,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
        column: 25,
        span: 2781..2783,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
        column: 28,
        span: 2783..2786,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 131,
        column: 32,
        span: 2787..2790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 131,
        column: 34,
        span: 2791..2792,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
        column: 37,
        span: 2793..2795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
        column: 41,
        span: 2795..2799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 42,
        span: 2799..2800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 133,
        column: 4,
        span: 2804..2805,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 5,
        span: 2805..2806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 133,
        column: 7,
        span: 2807..2808,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 133,
        column: 9,
        span: 2809..2810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 11,
        span: 2811..2812,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 133,
        column: 19,
        span: 2812..2820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 21,
        span: 2821..2822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 22,
        span: 2822..2823,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 133,
        column: 29,
        span: 2824..2830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 133,
        column: 33,
        span: 2831..2834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 34,
        span: 2834..2835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 35,
        span: 2835..2836,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
        column: 39,
        span: 2837..2840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 40,
        span: 2840..2841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 41,
        span: 2841..2842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 42,
        span: 2842..2843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
        column: 9,
        span: 2846..2852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 10,
        span: 2852..2853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
        column: 11,
        span: 2853..2854,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 14,
        span: 2855..2857,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 134,
        column: 18,
        span: 2858..2861,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 134,
        column: 22,
        span: 2862..2865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 134,
        column: 24,
        span: 2866..2867,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 27,
        span: 2868..2870,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 134,
        column: 31,
        span: 2871..2874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 32,
        span: 2874..2875,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 136,
        column: 8,
        span: 2879..2884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 136,
        column: 10,
        span: 2885..2886,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 11,
        span: 2886..2887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 136,
        column: 13,
        span: 2888..2889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 14,
        span: 2889..2890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 136,
        column: 0,
        span: 2891..2892,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 137,
        column: 8,
        span: 2895..2900,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 137,
        column: 17,
        span: 2901..2909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 137,
        column: 21,
        span: 2910..2913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 23,
        span: 2914..2915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 137,
        column: 24,
        span: 2915..2916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 25,
        span: 2916..2917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 137,
        column: 27,
        span: 2918..2919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 28,
        span: 2919..2920,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 137,
        column: 32,
        span: 2921..2924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 33,
        span: 2924..2925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 137,
        column: 35,
        span: 2926..2927,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 37,
        span: 2928..2929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 137,
        column: 39,
        span: 2930..2931,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 137,
        column: 40,
        span: 2931..2932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 137,
        column: 42,
        span: 2933..2934,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 44,
        span: 2935..2936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 137,
        column: 46,
        span: 2937..2938,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 137,
        column: 47,
        span: 2938..2939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 137,
        column: 49,
        span: 2940..2941,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 51,
        span: 2942..2943,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 137,
        column: 53,
        span: 2944..2945,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 137,
        column: 56,
        span: 2945..2948,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 137,
        column: 57,
        span: 2948..2949,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 137,
        column: 0,
        span: 2950..2953,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 138,
        column: 8,
        span: 2956..2961,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 138,
        column: 17,
        span: 2962..2970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 138,
        column: 22,
        span: 2971..2975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 24,
        span: 2976..2977,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 138,
        column: 27,
        span: 2977..2980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 28,
        span: 2980..2981,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 138,
        column: 35,
        span: 2982..2988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 138,
        column: 39,
        span: 2989..2992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 40,
        span: 2992..2993,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 138,
        column: 43,
        span: 2993..2996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 44,
        span: 2996..2997,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 138,
        column: 0,
        span: 2998..3001,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 140,
        column: 8,
        span: 3005..3010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
        column: 10,
        span: 3011..3012,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 11,
        span: 3012..3013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 140,
        column: 13,
        span: 3014..3015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 14,
        span: 3015..3016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 140,
        column: 16,
        span: 3017..3018,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 140,
        column: 18,
        span: 3019..3020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 140,
        column: 23,
        span: 3021..3025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 24,
        span: 3025..3026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 25,
        span: 3026..3027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 9,
        span: 3030..3036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 10,
        span: 3036..3037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 141,
        column: 11,
        span: 3037..3038,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 14,
        span: 3039..3041,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 141,
        column: 18,
        span: 3042..3045,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
        column: 22,
        span: 3046..3049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 141,
        column: 24,
        span: 3050..3051,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 27,
        span: 3052..3054,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 141,
        column: 31,
        span: 3055..3058,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
        column: 35,
        span: 3059..3062,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 141,
        column: 37,
        span: 3063..3064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 141,
        column: 38,
        span: 3064..3065,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 41,
        span: 3066..3068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 43,
        span: 3068..3070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 44,
        span: 3070..3071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 143,
        column: 4,
        span: 3075..3076,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 5,
        span: 3076..3077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 143,
        column: 7,
        span: 3078..3079,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 8,
        span: 3079..3080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 143,
        column: 10,
        span: 3081..3082,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 143,
        column: 12,
        span: 3083..3084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 143,
        column: 17,
        span: 3085..3089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 18,
        span: 3089..3090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 20,
        span: 3089..3092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 21,
        span: 3092..3093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
        column: 9,
        span: 3096..3102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 10,
        span: 3102..3103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 144,
        column: 11,
        span: 3103..3104,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 14,
        span: 3105..3107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 17,
        span: 3107..3110,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 144,
        column: 21,
        span: 3111..3114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 144,
        column: 23,
        span: 3115..3116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 26,
        span: 3117..3119,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 144,
        column: 30,
        span: 3120..3123,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 144,
        column: 34,
        span: 3124..3127,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 144,
        column: 36,
        span: 3128..3129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 144,
        column: 37,
        span: 3129..3130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 40,
        span: 3131..3133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 42,
        span: 3133..3135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 43,
        span: 3135..3136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 146,
        column: 4,
        span: 3140..3141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 5,
        span: 3141..3142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 146,
        column: 7,
        span: 3143..3144,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 8,
        span: 3144..3145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 146,
        column: 10,
        span: 3146..3147,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
        column: 12,
        span: 3148..3149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 146,
        column: 17,
        span: 3150..3154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 18,
        span: 3154..3155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 20,
        span: 3154..3157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 21,
        span: 3157..3158,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 24,
        span: 3158..3161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 25,
        span: 3161..3162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 9,
        span: 3165..3171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 10,
        span: 3171..3172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 147,
        column: 11,
        span: 3172..3173,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 14,
        span: 3174..3176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 17,
        span: 3176..3179,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 147,
        column: 21,
        span: 3180..3183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 147,
        column: 23,
        span: 3184..3185,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 26,
        span: 3186..3188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 29,
        span: 3188..3191,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 147,
        column: 33,
        span: 3192..3195,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 147,
        column: 35,
        span: 3196..3197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 147,
        column: 36,
        span: 3197..3198,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 39,
        span: 3199..3201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 41,
        span: 3201..3203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 42,
        span: 3203..3204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 149,
        column: 4,
        span: 3208..3209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 5,
        span: 3209..3210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 149,
        column: 7,
        span: 3211..3212,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 8,
        span: 3212..3213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 149,
        column: 10,
        span: 3214..3215,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 12,
        span: 3216..3217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 149,
        column: 17,
        span: 3218..3222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 18,
        span: 3222..3223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 20,
        span: 3222..3225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 21,
        span: 3225..3226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 24,
        span: 3226..3229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 25,
        span: 3229..3230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 28,
        span: 3230..3233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 29,
        span: 3233..3234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
        column: 9,
        span: 3237..3243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 10,
        span: 3243..3244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 150,
        column: 11,
        span: 3244..3245,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 14,
        span: 3246..3248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 17,
        span: 3248..3251,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 150,
        column: 21,
        span: 3252..3255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 150,
        column: 23,
        span: 3256..3257,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 26,
        span: 3258..3260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 29,
        span: 3260..3263,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 150,
        column: 33,
        span: 3264..3267,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 150,
        column: 35,
        span: 3268..3269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 150,
        column: 36,
        span: 3269..3270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 39,
        span: 3271..3273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 41,
        span: 3273..3275,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 150,
        column: 45,
        span: 3276..3279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 150,
        column: 47,
        span: 3280..3281,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 150,
        column: 48,
        span: 3281..3282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 49,
        span: 3281..3283,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 150,
        column: 50,
        span: 3283..3284,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 53,
        span: 3285..3287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 56,
        span: 3287..3290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 57,
        span: 3290..3291,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
        column: 0,
        span: 3292..3295,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 155,
        column: 3,
        span: 3299..3301,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 156,
        column: 8,
        span: 3338..3343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 156,
        column: 10,
        span: 3344..3345,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 156,
        column: 12,
        span: 3346..3347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 18,
        span: 3347..3353,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 158,
        column: 8,
        span: 3368..3373,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 158,
        column: 17,
        span: 3374..3382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 158,
        column: 21,
        span: 3383..3386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 23,
        span: 3387..3388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 24,
        span: 3388..3389,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 159,
        column: 7,
        span: 3394..3396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 159,
        column: 9,
        span: 3397..3398,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
        column: 12,
        span: 3399..3401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 14,
        span: 3401..3403,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 159,
        column: 19,
        span: 3404..3408,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 159,
        column: 26,
        span: 3409..3415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1023",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 0,
        span: 3415..3420,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 160,
        column: 9,
        span: 3425..3429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 160,
        column: 11,
        span: 3430..3431,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 160,
        column: 13,
        span: 3432..3433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 160,
        column: 15,
        span: 3434..3435,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 160,
        column: 17,
        span: 3436..3437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 19,
        span: 3437..3439,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 160,
        column: 20,
        span: 3439..3440,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 160,
        column: 27,
        span: 3441..3447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 160,
        column: 31,
        span: 3448..3451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 32,
        span: 3451..3452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 33,
        span: 3452..3453,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 161,
        column: 0,
        span: 3458..3461,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 162,
        column: 0,
        span: 3464..3467,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 165,
        column: 6,
        span: 3537..3540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 165,
        column: 8,
        span: 3541..3542,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 10,
        span: 3543..3544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 12,
        span: 3544..3546,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 13,
        span: 3546..3547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 17,
        span: 3547..3551,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 165,
        column: 0,
        span: 3552..3554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 166,
        column: 8,
        span: 3559..3562,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 166,
        column: 10,
        span: 3563..3564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 166,
        column: 23,
        span: 3565..3577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 24,
        span: 3577..3578,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 166,
        column: 25,
        span: 3578..3579,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 166,
        column: 26,
        span: 3579..3580,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 27,
        span: 3580..3581,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 166,
        column: 29,
        span: 3582..3583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        line: 166,
        column: 35,
        span: 3583..3589,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 166,
        column: 37,
        span: 3590..3591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 166,
        column: 41,
        span: 3592..3595,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 166,
        column: 42,
        span: 3595..3596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 43,
        span: 3596..3597,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
        column: 0,
        span: 3600..3603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 9,
        span: 3708..3714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 10,
        span: 3714..3715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 171,
        column: 19,
        span: 3715..3724,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 171,
        column: 20,
        span: 3724..3725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 171,
        column: 24,
        span: 3725..3729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 25,
        span: 3729..3730,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 171,
        column: 33,
        span: 3730..3738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 34,
        span: 3738..3739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 35,
        span: 3739..3740,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 171,
        column: 42,
        span: 3741..3747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 171,
        column: 46,
        span: 3748..3751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 47,
        span: 3751..3752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 48,
        span: 3752..3753,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 171,
        column: 52,
        span: 3754..3757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 53,
        span: 3757..3758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 54,
        span: 3758..3759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 55,
        span: 3759..3760,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
        column: 58,
        span: 3761..3763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1023",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 63,
        span: 3763..3768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 64,
        span: 3768..3769,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 172,
        column: 0,
        span: 3770..3773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 174,
        column: 6,
        span: 3775..3780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 7,
        span: 3780..3781,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 174,
        column: 10,
        span: 3781..3784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 11,
        span: 3784..3785,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 177,
        column: 3,
        span: 3788..3790,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 178,
        column: 8,
        span: 3824..3829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 178,
        column: 10,
        span: 3830..3831,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 12,
        span: 3832..3833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 0,
        span: 3833..3836,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 179,
        column: 8,
        span: 3839..3844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 179,
        column: 10,
        span: 3845..3846,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 179,
        column: 12,
        span: 3847..3848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 179,
        column: 18,
        span: 3849..3854,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 179,
        column: 19,
        span: 3854..3855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 179,
        column: 0,
        span: 3855..3859,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 180,
        column: 6,
        span: 3862..3865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 180,
        column: 8,
        span: 3866..3867,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 180,
        column: 10,
        span: 3868..3869,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 12,
        span: 3869..3871,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 13,
        span: 3871..3872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 180,
        column: 15,
        span: 3873..3874,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 180,
        column: 0,
        span: 3875..3877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 181,
        column: 6,
        span: 3882..3883,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 8,
        span: 3884..3885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 181,
        column: 21,
        span: 3886..3898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 22,
        span: 3898..3899,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 181,
        column: 23,
        span: 3899..3900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 181,
        column: 24,
        span: 3900..3901,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 181,
        column: 25,
        span: 3901..3902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 26,
        span: 3902..3903,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 181,
        column: 28,
        span: 3904..3905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        line: 181,
        column: 34,
        span: 3905..3911,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 36,
        span: 3912..3913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 181,
        column: 38,
        span: 3914..3915,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 181,
        column: 39,
        span: 3915..3916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 40,
        span: 3916..3917,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 182,
        column: 0,
        span: 3920..3923,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 184,
        column: 8,
        span: 3927..3932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 184,
        column: 12,
        span: 3933..3936,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 14,
        span: 3937..3938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 184,
        column: 16,
        span: 3939..3940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 17,
        span: 3940..3941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 184,
        column: 20,
        span: 3941..3944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 21,
        span: 3944..3945,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 184,
        column: 25,
        span: 3946..3949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 26,
        span: 3949..3950,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 184,
        column: 30,
        span: 3951..3954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 31,
        span: 3954..3955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 9,
        span: 3959..3965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 10,
        span: 3965..3966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 186,
        column: 13,
        span: 3966..3969,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 14,
        span: 3969..3970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 186,
        column: 15,
        span: 3970..3971,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 186,
        column: 18,
        span: 3972..3974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 186,
        column: 20,
        span: 3975..3976,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 186,
        column: 22,
        span: 3977..3978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 24,
        span: 3978..3980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 25,
        span: 3980..3981,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 187,
        column: 6,
        span: 3984..3987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 187,
        column: 8,
        span: 3988..3989,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 187,
        column: 10,
        span: 3990..3991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 12,
        span: 3991..3993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 13,
        span: 3993..3994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 187,
        column: 15,
        span: 3995..3996,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 187,
        column: 0,
        span: 3997..3999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 188,
        column: 11,
        span: 4004..4010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 12,
        span: 4010..4011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 188,
        column: 15,
        span: 4011..4014,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 188,
        column: 16,
        span: 4014..4015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 188,
        column: 17,
        span: 4015..4016,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 188,
        column: 18,
        span: 4016..4017,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 188,
        column: 19,
        span: 4017..4018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 20,
        span: 4017..4019,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 188,
        column: 21,
        span: 4019..4020,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 188,
        column: 24,
        span: 4021..4023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 188,
        column: 26,
        span: 4024..4025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 27,
        span: 4025..4026,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 189,
        column: 0,
        span: 4029..4032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 9,
        span: 4035..4041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 10,
        span: 4041..4042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 190,
        column: 13,
        span: 4042..4045,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 190,
        column: 14,
        span: 4045..4046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 190,
        column: 15,
        span: 4046..4047,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 190,
        column: 17,
        span: 4048..4049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 19,
        span: 4049..4051,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 190,
        column: 20,
        span: 4051..4052,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 23,
        span: 4053..4055,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 190,
        column: 27,
        span: 4056..4059,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 190,
        column: 31,
        span: 4060..4063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 190,
        column: 35,
        span: 4064..4067,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 190,
        column: 36,
        span: 4067..4068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 190,
        column: 37,
        span: 4068..4069,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 190,
        column: 39,
        span: 4070..4071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 41,
        span: 4071..4073,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 190,
        column: 42,
        span: 4073..4074,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 45,
        span: 4075..4077,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 190,
        column: 49,
        span: 4078..4081,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 190,
        column: 53,
        span: 4082..4085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Res",
        ),
        line: 190,
        column: 57,
        span: 4086..4089,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 190,
        column: 58,
        span: 4089..4090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "N",
        ),
        line: 190,
        column: 59,
        span: 4090..4091,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 190,
        column: 61,
        span: 4092..4093,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 63,
        span: 4093..4095,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 190,
        column: 64,
        span: 4095..4096,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 67,
        span: 4097..4099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 190,
        column: 71,
        span: 4100..4103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 72,
        span: 4103..4104,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 191,
        column: 0,
        span: 4105..4108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 194,
        column: 2,
        span: 4111..4112,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 194,
        column: 4,
        span: 4113..4114,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 194,
        column: 0,
        span: 4115..4118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 2,
        span: 4119..4120,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 195,
        column: 10,
        span: 4120..4128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 12,
        span: 4129..4130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 195,
        column: 13,
        span: 4130..4131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 14,
        span: 4131..4132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 195,
        column: 16,
        span: 4133..4134,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 17,
        span: 4134..4135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 195,
        column: 18,
        span: 4135..4136,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 195,
        column: 22,
        span: 4137..4140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 23,
        span: 4140..4141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 24,
        span: 4141..4142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 26,
        span: 4141..4144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 27,
        span: 4144..4145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 7,
        span: 4146..4152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 8,
        span: 4152..4153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 196,
        column: 9,
        span: 4153..4154,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 12,
        span: 4155..4157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 15,
        span: 4157..4160,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 196,
        column: 19,
        span: 4161..4164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 21,
        span: 4165..4166,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 196,
        column: 29,
        span: 4166..4174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 31,
        span: 4175..4176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 196,
        column: 32,
        span: 4176..4177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 33,
        span: 4177..4178,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 196,
        column: 40,
        span: 4179..4185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 196,
        column: 42,
        span: 4186..4187,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 196,
        column: 43,
        span: 4187..4188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 44,
        span: 4187..4189,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 196,
        column: 48,
        span: 4190..4193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 49,
        span: 4193..4194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 50,
        span: 4194..4195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 52,
        span: 4194..4197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 53,
        span: 4197..4198,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 56,
        span: 4199..4201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 59,
        span: 4201..4204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 60,
        span: 4204..4205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        line: 202,
        column: 2,
        span: 4253..4254,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 202,
        column: 4,
        span: 4255..4256,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 202,
        column: 13,
        span: 4257..4265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 15,
        span: 4266..4267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "le",
        ),
        line: 202,
        column: 17,
        span: 4267..4269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 18,
        span: 4269..4270,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 203,
        column: 12,
        span: 4277..4282,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 203,
        column: 21,
        span: 4283..4291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 203,
        column: 23,
        span: 4292..4293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 25,
        span: 4294..4295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 203,
        column: 26,
        span: 4295..4296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 27,
        span: 4296..4297,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 204,
        column: 15,
        span: 4306..4312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "le",
        ),
        line: 204,
        column: 18,
        span: 4313..4315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 19,
        span: 4315..4316,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 204,
        column: 27,
        span: 4316..4324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 29,
        span: 4325..4326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 204,
        column: 30,
        span: 4326..4327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 31,
        span: 4327..4328,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 204,
        column: 38,
        span: 4329..4335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 204,
        column: 40,
        span: 4336..4337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 41,
        span: 4337..4338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 204,
        column: 42,
        span: 4338..4339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 43,
        span: 4339..4340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 44,
        span: 4340..4341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 204,
        column: 45,
        span: 4341..4342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 46,
        span: 4342..4343,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 204,
        column: 50,
        span: 4344..4347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 51,
        span: 4347..4348,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 205,
        column: 0,
        span: 4355..4358,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 206,
        column: 13,
        span: 4365..4371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 15,
        span: 4372..4373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 16,
        span: 4373..4374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 17,
        span: 4374..4375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 18,
        span: 4375..4376,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 207,
        column: 0,
        span: 4381..4384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 212,
        column: 2,
        span: 4415..4416,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 212,
        column: 4,
        span: 4417..4418,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 212,
        column: 13,
        span: 4419..4427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 15,
        span: 4428..4429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 212,
        column: 16,
        span: 4429..4430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 17,
        span: 4430..4431,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 213,
        column: 13,
        span: 4438..4444,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 213,
        column: 22,
        span: 4445..4453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 24,
        span: 4454..4455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 213,
        column: 25,
        span: 4455..4456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 26,
        span: 4456..4457,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 214,
        column: 18,
        span: 4473..4475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 214,
        column: 20,
        span: 4476..4477,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 214,
        column: 23,
        span: 4478..4480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 25,
        span: 4480..4482,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 214,
        column: 30,
        span: 4483..4487,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 214,
        column: 37,
        span: 4488..4494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 0,
        span: 4494..4496,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 215,
        column: 20,
        span: 4512..4516,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 215,
        column: 27,
        span: 4517..4523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 215,
        column: 29,
        span: 4524..4525,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 215,
        column: 30,
        span: 4525..4526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 215,
        column: 31,
        span: 4526..4527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 32,
        span: 4527..4528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 215,
        column: 33,
        span: 4528..4529,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 215,
        column: 34,
        span: 4529..4530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 35,
        span: 4529..4531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 36,
        span: 4531..4532,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 215,
        column: 0,
        span: 4533..4536,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 216,
        column: 0,
        span: 4550..4553,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 217,
        column: 0,
        span: 4558..4561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 219,
        column: 4,
        span: 4563..4566,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 219,
        column: 6,
        span: 4567..4568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        line: 219,
        column: 8,
        span: 4569..4570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 9,
        span: 4570..4571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 219,
        column: 10,
        span: 4571..4572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 11,
        span: 4572..4573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 7,
        span: 4575..4581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 8,
        span: 4581..4582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 221,
        column: 11,
        span: 4582..4585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 12,
        span: 4585..4586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 13,
        span: 4585..4587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 14,
        span: 4587..4588,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 17,
        span: 4589..4591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 19,
        span: 4591..4593,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 221,
        column: 23,
        span: 4594..4597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 221,
        column: 27,
        span: 4598..4601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 28,
        span: 4601..4602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 29,
        span: 4601..4603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 30,
        span: 4603..4604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 33,
        span: 4605..4607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 36,
        span: 4607..4610,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 221,
        column: 40,
        span: 4611..4614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        line: 221,
        column: 42,
        span: 4615..4616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 43,
        span: 4616..4617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 221,
        column: 44,
        span: 4617..4618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 45,
        span: 4618..4619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 46,
        span: 4619..4620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 47,
        span: 4619..4621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 48,
        span: 4621..4622,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 50,
        span: 4622..4624,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 51,
        span: 4623..4625,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 221,
        column: 52,
        span: 4625..4626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        line: 221,
        column: 53,
        span: 4626..4627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 54,
        span: 4627..4628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 221,
        column: 55,
        span: 4628..4629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 56,
        span: 4629..4630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 57,
        span: 4630..4631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 58,
        span: 4630..4632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 59,
        span: 4632..4633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 60,
        span: 4633..4634,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 223,
        column: 6,
        span: 4636..4641,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 223,
        column: 15,
        span: 4642..4650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 223,
        column: 17,
        span: 4651..4652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 19,
        span: 4653..4654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 223,
        column: 20,
        span: 4654..4655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 21,
        span: 4655..4656,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 224,
        column: 8,
        span: 4659..4664,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 224,
        column: 17,
        span: 4665..4673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 224,
        column: 19,
        span: 4674..4675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 21,
        span: 4676..4677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 224,
        column: 22,
        span: 4677..4678,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 23,
        span: 4678..4679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 224,
        column: 24,
        span: 4679..4680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 25,
        span: 4680..4681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 224,
        column: 26,
        span: 4681..4682,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 27,
        span: 4682..4683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 224,
        column: 28,
        span: 4683..4684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 29,
        span: 4684..4685,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 225,
        column: 11,
        span: 4690..4696,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 225,
        column: 20,
        span: 4697..4705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 22,
        span: 4706..4707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 225,
        column: 23,
        span: 4707..4708,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 24,
        span: 4708..4709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 225,
        column: 25,
        span: 4709..4710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 26,
        span: 4710..4711,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 225,
        column: 33,
        span: 4712..4718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 225,
        column: 35,
        span: 4719..4720,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
        column: 36,
        span: 4720..4721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 225,
        column: 37,
        span: 4721..4722,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
        column: 38,
        span: 4722..4723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 225,
        column: 39,
        span: 4723..4724,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
        column: 40,
        span: 4724..4725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 225,
        column: 41,
        span: 4725..4726,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
        column: 42,
        span: 4726..4727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 225,
        column: 43,
        span: 4727..4728,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
        column: 44,
        span: 4728..4729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 225,
        column: 45,
        span: 4729..4730,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
        column: 46,
        span: 4730..4731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 225,
        column: 47,
        span: 4731..4732,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
        column: 48,
        span: 4732..4733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 225,
        column: 49,
        span: 4733..4734,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 225,
        column: 0,
        span: 4735..4738,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 226,
        column: 0,
        span: 4741..4744,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 227,
        column: 9,
        span: 4747..4753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 227,
        column: 11,
        span: 4754..4755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 12,
        span: 4755..4756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 227,
        column: 13,
        span: 4756..4757,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 14,
        span: 4757..4758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 227,
        column: 15,
        span: 4758..4759,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 227,
        column: 16,
        span: 4759..4760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 17,
        span: 4759..4761,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 18,
        span: 4761..4762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 227,
        column: 19,
        span: 4762..4763,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 227,
        column: 20,
        span: 4763..4764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 21,
        span: 4763..4765,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 22,
        span: 4765..4766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 227,
        column: 23,
        span: 4766..4767,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 227,
        column: 24,
        span: 4767..4768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 25,
        span: 4767..4769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 26,
        span: 4769..4770,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 228,
        column: 0,
        span: 4771..4774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 230,
        column: 2,
        span: 4776..4777,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 4,
        span: 4778..4779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 230,
        column: 6,
        span: 4780..4781,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 7,
        span: 4781..4782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 9,
        span: 4781..4784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 10,
        span: 4784..4785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 7,
        span: 4786..4792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 8,
        span: 4792..4793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 231,
        column: 9,
        span: 4793..4794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 10,
        span: 4794..4795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 11,
        span: 4794..4796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
        column: 12,
        span: 4796..4797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 15,
        span: 4797..4800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 16,
        span: 4800..4801,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 231,
        column: 19,
        span: 4802..4804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 22,
        span: 4804..4807,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
        column: 23,
        span: 4807..4808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 25,
        span: 4807..4810,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
        column: 26,
        span: 4810..4811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 28,
        span: 4810..4813,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
        column: 29,
        span: 4813..4814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 31,
        span: 4813..4816,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
        column: 32,
        span: 4816..4817,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 34,
        span: 4816..4819,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
        column: 35,
        span: 4819..4820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 36,
        span: 4819..4821,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
        column: 37,
        span: 4821..4822,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 39,
        span: 4821..4824,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
        column: 40,
        span: 4824..4825,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 42,
        span: 4824..4827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 43,
        span: 4827..4828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        line: 233,
        column: 2,
        span: 4830..4831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 3,
        span: 4831..4832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 233,
        column: 5,
        span: 4833..4834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 6,
        span: 4834..4835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 233,
        column: 8,
        span: 4836..4837,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 10,
        span: 4838..4839,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 233,
        column: 0,
        span: 4840..4843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 234,
        column: 6,
        span: 4844..4849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 7,
        span: 4849..4850,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 234,
        column: 10,
        span: 4850..4853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 11,
        span: 4853..4854,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 238,
        column: 9,
        span: 4885..4893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 238,
        column: 17,
        span: 4894..4901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 19,
        span: 4902..4903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 238,
        column: 20,
        span: 4903..4904,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 21,
        span: 4904..4905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 238,
        column: 23,
        span: 4906..4907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 24,
        span: 4907..4908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 239,
        column: 4,
        span: 4911..4912,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 6,
        span: 4913..4914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 239,
        column: 8,
        span: 4915..4916,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 239,
        column: 11,
        span: 4917..4919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 0,
        span: 4919..4921,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 240,
        column: 5,
        span: 4924..4926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 7,
        span: 4927..4928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 240,
        column: 8,
        span: 4928..4929,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 240,
        column: 11,
        span: 4930..4932,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 240,
        column: 13,
        span: 4933..4934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 240,
        column: 14,
        span: 4934..4935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 15,
        span: 4935..4936,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 240,
        column: 0,
        span: 4937..4941,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 241,
        column: 11,
        span: 4946..4952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 241,
        column: 13,
        span: 4953..4954,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 241,
        column: 14,
        span: 4954..4955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 241,
        column: 15,
        span: 4955..4956,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 241,
        column: 16,
        span: 4956..4957,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
        column: 17,
        span: 4957..4958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 241,
        column: 25,
        span: 4959..4966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 26,
        span: 4966..4967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 241,
        column: 27,
        span: 4967..4968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
        column: 28,
        span: 4968..4969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 241,
        column: 30,
        span: 4970..4971,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 241,
        column: 31,
        span: 4971..4972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
        column: 32,
        span: 4971..4973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 33,
        span: 4973..4974,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 242,
        column: 0,
        span: 4977..4980,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 243,
        column: 0,
        span: 4981..4984,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 245,
        column: 9,
        span: 4986..4994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        line: 245,
        column: 18,
        span: 4995..5003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 20,
        span: 5004..5005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 245,
        column: 22,
        span: 5005..5007,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 23,
        span: 5007..5008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 245,
        column: 26,
        span: 5009..5011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 27,
        span: 5011..5012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
        column: 9,
        span: 5015..5021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 10,
        span: 5021..5022,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 246,
        column: 11,
        span: 5022..5023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 246,
        column: 13,
        span: 5023..5025,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 16,
        span: 5026..5028,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 246,
        column: 18,
        span: 5029..5030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 246,
        column: 20,
        span: 5030..5032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 21,
        span: 5032..5033,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 247,
        column: 6,
        span: 5036..5039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 247,
        column: 8,
        span: 5040..5041,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 247,
        column: 10,
        span: 5042..5043,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 12,
        span: 5043..5045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 13,
        span: 5045..5046,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 247,
        column: 15,
        span: 5047..5048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 247,
        column: 17,
        span: 5048..5050,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 247,
        column: 0,
        span: 5051..5053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
        column: 11,
        span: 5058..5064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 12,
        span: 5064..5065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 248,
        column: 14,
        span: 5065..5067,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 248,
        column: 15,
        span: 5067..5068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 248,
        column: 16,
        span: 5068..5069,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 248,
        column: 17,
        span: 5069..5070,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
        column: 20,
        span: 5071..5073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 248,
        column: 23,
        span: 5074..5076,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 248,
        column: 24,
        span: 5076..5077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 248,
        column: 25,
        span: 5077..5078,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 248,
        column: 26,
        span: 5078..5079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 27,
        span: 5079..5080,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
        column: 0,
        span: 5083..5086,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 250,
        column: 0,
        span: 5087..5090,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 252,
        column: 6,
        span: 5092..5097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 252,
        column: 11,
        span: 5098..5102,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 13,
        span: 5103..5104,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 252,
        column: 22,
        span: 5105..5113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 24,
        span: 5114..5115,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 252,
        column: 27,
        span: 5115..5118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 28,
        span: 5118..5119,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 252,
        column: 35,
        span: 5120..5126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 37,
        span: 5127..5128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 252,
        column: 42,
        span: 5128..5133,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
        column: 43,
        span: 5133..5134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 252,
        column: 47,
        span: 5134..5138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 48,
        span: 5138..5139,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 252,
        column: 51,
        span: 5139..5142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 52,
        span: 5142..5143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 53,
        span: 5143..5144,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
        column: 0,
        span: 5145..5148,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 254,
        column: 9,
        span: 5150..5158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 254,
        column: 11,
        span: 5159..5160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 12,
        span: 5160..5161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 13,
        span: 5161..5162,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 254,
        column: 20,
        span: 5163..5169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 22,
        span: 5169..5171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 23,
        span: 5171..5172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 24,
        span: 5171..5173,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 25,
        span: 5173..5174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 27,
        span: 5173..5176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 28,
        span: 5176..5177,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 29,
        span: 5176..5178,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 254,
        column: 0,
        span: 5179..5182,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 255,
        column: 9,
        span: 5183..5191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 255,
        column: 14,
        span: 5192..5196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 16,
        span: 5197..5198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 255,
        column: 17,
        span: 5198..5199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 18,
        span: 5199..5200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 255,
        column: 19,
        span: 5200..5201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 20,
        span: 5201..5202,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 255,
        column: 27,
        span: 5203..5209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 255,
        column: 29,
        span: 5210..5211,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 30,
        span: 5211..5212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 255,
        column: 31,
        span: 5212..5213,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
        column: 0,
        span: 5214..5217,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 257,
        column: 6,
        span: 5219..5224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 257,
        column: 8,
        span: 5225..5226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 9,
        span: 5226..5227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 257,
        column: 10,
        span: 5227..5228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 11,
        span: 5228..5229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 257,
        column: 12,
        span: 5229..5230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 13,
        span: 5230..5231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 257,
        column: 14,
        span: 5231..5232,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 257,
        column: 16,
        span: 5233..5234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 257,
        column: 24,
        span: 5235..5242,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 257,
        column: 25,
        span: 5242..5243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 26,
        span: 5242..5244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 27,
        span: 5244..5245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 28,
        span: 5244..5246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 29,
        span: 5246..5247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 30,
        span: 5246..5248,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 257,
        column: 31,
        span: 5248..5249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 7,
        span: 5250..5256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 8,
        span: 5256..5257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 258,
        column: 9,
        span: 5257..5258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 11,
        span: 5258..5260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 12,
        span: 5259..5261,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 258,
        column: 16,
        span: 5262..5265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 258,
        column: 18,
        span: 5266..5267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 20,
        span: 5267..5269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 21,
        span: 5268..5270,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 258,
        column: 25,
        span: 5271..5274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 258,
        column: 27,
        span: 5275..5276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 29,
        span: 5276..5278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 30,
        span: 5277..5279,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 258,
        column: 34,
        span: 5280..5283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 258,
        column: 36,
        span: 5284..5285,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 38,
        span: 5285..5287,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 258,
        column: 41,
        span: 5287..5290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 42,
        span: 5290..5291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 259,
        column: 2,
        span: 5292..5293,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 259,
        column: 4,
        span: 5294..5295,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 259,
        column: 6,
        span: 5296..5297,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 7,
        span: 5296..5298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 8,
        span: 5298..5299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 9,
        span: 5298..5300,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 10,
        span: 5300..5301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 11,
        span: 5300..5302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 12,
        span: 5302..5303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 13,
        span: 5302..5304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 14,
        span: 5304..5305,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 259,
        column: 19,
        span: 5305..5310,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 20,
        span: 5310..5311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 22,
        span: 5310..5313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 23,
        span: 5313..5314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 259,
        column: 28,
        span: 5314..5319,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 29,
        span: 5319..5320,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 259,
        column: 34,
        span: 5320..5325,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 35,
        span: 5325..5326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 41,
        span: 5326..5332,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 259,
        column: 42,
        span: 5332..5333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        line: 260,
        column: 9,
        span: 5334..5342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 10,
        span: 5342..5343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 260,
        column: 14,
        span: 5343..5347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 15,
        span: 5347..5348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 260,
        column: 22,
        span: 5348..5355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 23,
        span: 5355..5356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 260,
        column: 24,
        span: 5356..5357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 25,
        span: 5357..5358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 26,
        span: 5358..5359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
        column: 27,
        span: 5359..5360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 260,
        column: 29,
        span: 5361..5362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 30,
        span: 5362..5363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        line: 261,
        column: 9,
        span: 5364..5372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 10,
        span: 5372..5373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 261,
        column: 14,
        span: 5373..5377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 15,
        span: 5377..5378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 261,
        column: 22,
        span: 5378..5385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 23,
        span: 5385..5386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 261,
        column: 24,
        span: 5386..5387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 25,
        span: 5387..5388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 26,
        span: 5388..5389,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 261,
        column: 28,
        span: 5390..5391,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 29,
        span: 5390..5392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 30,
        span: 5392..5393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 31,
        span: 5393..5394,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 261,
        column: 33,
        span: 5395..5396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 34,
        span: 5395..5397,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 35,
        span: 5397..5398,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 261,
        column: 36,
        span: 5398..5399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 37,
        span: 5398..5400,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 261,
        column: 38,
        span: 5400..5401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 39,
        span: 5401..5402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 262,
        column: 2,
        span: 5403..5404,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 3,
        span: 5404..5405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 262,
        column: 4,
        span: 5405..5406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 5,
        span: 5406..5407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 262,
        column: 6,
        span: 5407..5408,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 7,
        span: 5408..5409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 262,
        column: 8,
        span: 5409..5410,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 10,
        span: 5411..5412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 262,
        column: 15,
        span: 5413..5417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 16,
        span: 5417..5418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 262,
        column: 17,
        span: 5418..5419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 18,
        span: 5419..5420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 19,
        span: 5420..5421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 20,
        span: 5421..5422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 21,
        span: 5422..5423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 262,
        column: 26,
        span: 5424..5428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 27,
        span: 5428..5429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 262,
        column: 28,
        span: 5429..5430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 29,
        span: 5430..5431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 30,
        span: 5431..5432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 31,
        span: 5432..5433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
        column: 7,
        span: 5434..5440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 8,
        span: 5440..5441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 263,
        column: 9,
        span: 5441..5442,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 11,
        span: 5442..5444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 12,
        span: 5443..5445,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 263,
        column: 16,
        span: 5446..5449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 263,
        column: 18,
        span: 5450..5451,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 20,
        span: 5451..5453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 21,
        span: 5452..5454,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 263,
        column: 25,
        span: 5455..5458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 263,
        column: 27,
        span: 5459..5460,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 29,
        span: 5460..5462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 30,
        span: 5461..5463,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 263,
        column: 34,
        span: 5464..5467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 263,
        column: 36,
        span: 5468..5469,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 38,
        span: 5469..5471,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 263,
        column: 41,
        span: 5471..5474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 42,
        span: 5474..5475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 264,
        column: 2,
        span: 5476..5477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 3,
        span: 5477..5478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 264,
        column: 4,
        span: 5478..5479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 5,
        span: 5479..5480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 264,
        column: 6,
        span: 5480..5481,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 7,
        span: 5481..5482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 264,
        column: 8,
        span: 5482..5483,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 10,
        span: 5484..5485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 264,
        column: 18,
        span: 5486..5493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 19,
        span: 5493..5494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 264,
        column: 23,
        span: 5494..5498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 24,
        span: 5498..5499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 264,
        column: 28,
        span: 5499..5503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 29,
        span: 5503..5504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 264,
        column: 30,
        span: 5504..5505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 31,
        span: 5505..5506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 32,
        span: 5506..5507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 33,
        span: 5507..5508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 34,
        span: 5508..5509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 264,
        column: 39,
        span: 5510..5514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 40,
        span: 5514..5515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 264,
        column: 41,
        span: 5515..5516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 42,
        span: 5516..5517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 43,
        span: 5517..5518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 44,
        span: 5518..5519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 45,
        span: 5519..5520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 46,
        span: 5520..5521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 7,
        span: 5522..5528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 8,
        span: 5528..5529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
        column: 9,
        span: 5529..5530,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 11,
        span: 5530..5532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 12,
        span: 5531..5533,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 265,
        column: 16,
        span: 5534..5537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 265,
        column: 18,
        span: 5538..5539,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 20,
        span: 5539..5541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 21,
        span: 5540..5542,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 265,
        column: 25,
        span: 5543..5546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 265,
        column: 27,
        span: 5547..5548,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 29,
        span: 5548..5550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 30,
        span: 5549..5551,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 265,
        column: 34,
        span: 5552..5555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 265,
        column: 36,
        span: 5556..5557,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 38,
        span: 5557..5559,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 265,
        column: 41,
        span: 5559..5562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 42,
        span: 5562..5563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 266,
        column: 2,
        span: 5564..5565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 3,
        span: 5565..5566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 266,
        column: 4,
        span: 5566..5567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 5,
        span: 5567..5568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 266,
        column: 6,
        span: 5568..5569,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 7,
        span: 5569..5570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 266,
        column: 8,
        span: 5570..5571,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
        column: 10,
        span: 5572..5573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 266,
        column: 18,
        span: 5574..5581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 19,
        span: 5581..5582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 266,
        column: 23,
        span: 5582..5586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 24,
        span: 5586..5587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 266,
        column: 28,
        span: 5587..5591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 29,
        span: 5591..5592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 266,
        column: 30,
        span: 5592..5593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 31,
        span: 5593..5594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 32,
        span: 5594..5595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 33,
        span: 5595..5596,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 34,
        span: 5596..5597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 36,
        span: 5598..5599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 266,
        column: 40,
        span: 5599..5603,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 41,
        span: 5603..5604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 266,
        column: 42,
        span: 5604..5605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 43,
        span: 5605..5606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 44,
        span: 5606..5607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 45,
        span: 5607..5608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 46,
        span: 5608..5609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 47,
        span: 5609..5610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 48,
        span: 5610..5611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
        column: 7,
        span: 5612..5618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 8,
        span: 5618..5619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 267,
        column: 9,
        span: 5619..5620,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 11,
        span: 5620..5622,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 12,
        span: 5621..5623,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 267,
        column: 16,
        span: 5624..5627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 267,
        column: 18,
        span: 5628..5629,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 20,
        span: 5629..5631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 21,
        span: 5630..5632,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 267,
        column: 25,
        span: 5633..5636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 267,
        column: 27,
        span: 5637..5638,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 29,
        span: 5638..5640,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 267,
        column: 32,
        span: 5640..5643,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 267,
        column: 36,
        span: 5644..5647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 267,
        column: 38,
        span: 5648..5649,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 40,
        span: 5649..5651,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 267,
        column: 43,
        span: 5651..5654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 44,
        span: 5654..5655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 269,
        column: 2,
        span: 5657..5658,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 269,
        column: 4,
        span: 5659..5660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 269,
        column: 9,
        span: 5661..5665,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
        column: 10,
        span: 5665..5666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 269,
        column: 18,
        span: 5667..5674,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
        column: 19,
        span: 5674..5675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 20,
        span: 5674..5676,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 21,
        span: 5676..5677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 22,
        span: 5676..5678,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 23,
        span: 5678..5679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 24,
        span: 5678..5680,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
        column: 25,
        span: 5680..5681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 26,
        span: 5681..5682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 269,
        column: 34,
        span: 5683..5690,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
        column: 35,
        span: 5690..5691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 36,
        span: 5690..5692,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 37,
        span: 5692..5693,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 38,
        span: 5692..5694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 39,
        span: 5694..5695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 40,
        span: 5694..5696,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
        column: 41,
        span: 5696..5697,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 42,
        span: 5697..5698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 269,
        column: 50,
        span: 5699..5706,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
        column: 51,
        span: 5706..5707,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 269,
        column: 54,
        span: 5707..5710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 55,
        span: 5710..5711,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 269,
        column: 59,
        span: 5712..5715,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
        column: 60,
        span: 5715..5716,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
        column: 61,
        span: 5716..5717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 270,
        column: 7,
        span: 5718..5724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 8,
        span: 5724..5725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
        column: 9,
        span: 5725..5726,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 270,
        column: 10,
        span: 5726..5727,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 11,
        span: 5726..5728,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 270,
        column: 12,
        span: 5728..5729,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 15,
        span: 5730..5732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 17,
        span: 5732..5734,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 270,
        column: 21,
        span: 5735..5738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
        column: 23,
        span: 5739..5740,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 270,
        column: 24,
        span: 5740..5741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 25,
        span: 5740..5742,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 270,
        column: 26,
        span: 5742..5743,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 29,
        span: 5744..5746,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 31,
        span: 5746..5748,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 270,
        column: 35,
        span: 5749..5752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
        column: 37,
        span: 5753..5754,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 270,
        column: 38,
        span: 5754..5755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 39,
        span: 5754..5756,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 270,
        column: 40,
        span: 5756..5757,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 43,
        span: 5758..5760,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 270,
        column: 47,
        span: 5761..5764,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 270,
        column: 51,
        span: 5765..5768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
        column: 53,
        span: 5769..5770,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 270,
        column: 54,
        span: 5770..5771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 55,
        span: 5770..5772,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 270,
        column: 56,
        span: 5772..5773,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 59,
        span: 5774..5776,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 270,
        column: 63,
        span: 5777..5780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 64,
        span: 5780..5781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 274,
        column: 7,
        span: 5828..5834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 8,
        span: 5834..5835,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 274,
        column: 9,
        span: 5835..5836,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 274,
        column: 10,
        span: 5836..5837,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 11,
        span: 5837..5838,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 274,
        column: 15,
        span: 5839..5842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 16,
        span: 5842..5843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 18,
        span: 5843..5845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 19,
        span: 5845..5846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 275,
        column: 7,
        span: 5847..5853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 8,
        span: 5853..5854,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 275,
        column: 9,
        span: 5854..5855,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 275,
        column: 10,
        span: 5855..5856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 11,
        span: 5856..5857,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 275,
        column: 15,
        span: 5858..5861,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 16,
        span: 5861..5862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 18,
        span: 5862..5864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 19,
        span: 5864..5865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 21,
        span: 5865..5867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 22,
        span: 5867..5868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 276,
        column: 7,
        span: 5869..5875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 8,
        span: 5875..5876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 276,
        column: 12,
        span: 5876..5880,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 13,
        span: 5880..5881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 276,
        column: 16,
        span: 5881..5884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 17,
        span: 5884..5885,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 18,
        span: 5884..5886,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 276,
        column: 19,
        span: 5886..5887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 20,
        span: 5886..5888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 21,
        span: 5888..5889,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 276,
        column: 24,
        span: 5890..5892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 276,
        column: 29,
        span: 5893..5897,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 30,
        span: 5897..5898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 276,
        column: 33,
        span: 5898..5901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 34,
        span: 5901..5902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 35,
        span: 5901..5903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 36,
        span: 5903..5904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 37,
        span: 5904..5905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 277,
        column: 6,
        span: 5906..5911,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 7,
        span: 5911..5912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 277,
        column: 11,
        span: 5912..5916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 12,
        span: 5916..5917,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 277,
        column: 13,
        span: 5917..5918,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 15,
        span: 5917..5920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 16,
        span: 5920..5921,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 17,
        span: 5920..5922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 18,
        span: 5922..5923,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 19,
        span: 5922..5924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 20,
        span: 5924..5925,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 21,
        span: 5924..5926,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 22,
        span: 5926..5927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 24,
        span: 5926..5929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 25,
        span: 5929..5930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 27,
        span: 5929..5932,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 28,
        span: 5932..5933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 29,
        span: 5932..5934,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 30,
        span: 5934..5935,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 31,
        span: 5934..5936,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 277,
        column: 32,
        span: 5936..5937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 33,
        span: 5937..5938,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 277,
        column: 42,
        span: 5939..5947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 44,
        span: 5948..5949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 277,
        column: 45,
        span: 5949..5950,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 46,
        span: 5950..5951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 277,
        column: 47,
        span: 5951..5952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 48,
        span: 5952..5953,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 277,
        column: 55,
        span: 5954..5960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 277,
        column: 57,
        span: 5961..5962,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 277,
        column: 58,
        span: 5962..5963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 277,
        column: 59,
        span: 5963..5964,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 277,
        column: 63,
        span: 5965..5968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 64,
        span: 5968..5969,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"extra arg\"",
        ),
        line: 277,
        column: 76,
        span: 5970..5981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 77,
        span: 5981..5982,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 281,
        column: 6,
        span: 6010..6015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 281,
        column: 8,
        span: 6016..6017,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 281,
        column: 10,
        span: 6018..6019,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-- a comment\\0\\0\\0\\n  x = 10 + \\n23; \\\n     local a = function () x = 'hi' end; \\\n     return '\\0'\"",
        ),
        line: 283,
        column: 18,
        span: 6020..6120,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 284,
        column: 9,
        span: 6121..6129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 284,
        column: 15,
        span: 6130..6135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 17,
        span: 6136..6137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 284,
        column: 18,
        span: 6137..6138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 19,
        span: 6138..6139,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 285,
        column: 8,
        span: 6142..6147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 285,
        column: 10,
        span: 6148..6149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
        column: 12,
        span: 6150..6151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 0,
        span: 6151..6153,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 286,
        column: 9,
        span: 6156..6162,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 286,
        column: 18,
        span: 6163..6171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 20,
        span: 6172..6173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 21,
        span: 6173..6174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 287,
        column: 19,
        span: 6179..6193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 20,
        span: 6193..6194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 21,
        span: 6194..6195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
        column: 6,
        span: 6200..6201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
        column: 7,
        span: 6201..6202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
        column: 8,
        span: 6202..6203,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 288,
        column: 9,
        span: 6203..6204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 0,
        span: 6203..6205,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 289,
        column: 11,
        span: 6210..6216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 289,
        column: 18,
        span: 6217..6223,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 289,
        column: 19,
        span: 6223..6224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 289,
        column: 22,
        span: 6224..6227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 23,
        span: 6227..6228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 289,
        column: 24,
        span: 6228..6229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
        column: 25,
        span: 6229..6230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 289,
        column: 27,
        span: 6231..6232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
        column: 28,
        span: 6232..6233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 289,
        column: 30,
        span: 6234..6235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 31,
        span: 6235..6236,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 290,
        column: 0,
        span: 6239..6242,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 291,
        column: 0,
        span: 6243..6246,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 293,
        column: 9,
        span: 6248..6256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 293,
        column: 20,
        span: 6257..6267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 22,
        span: 6268..6269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 293,
        column: 25,
        span: 6269..6272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 26,
        span: 6272..6273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 293,
        column: 28,
        span: 6274..6275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 29,
        span: 6275..6276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 293,
        column: 30,
        span: 6276..6277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 31,
        span: 6277..6278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 294,
        column: 9,
        span: 6281..6287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 10,
        span: 6287..6288,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 294,
        column: 13,
        span: 6288..6291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 294,
        column: 15,
        span: 6292..6293,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 294,
        column: 19,
        span: 6294..6297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 294,
        column: 26,
        span: 6298..6304,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
        column: 27,
        span: 6304..6305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 294,
        column: 31,
        span: 6305..6309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 32,
        span: 6309..6310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 294,
        column: 33,
        span: 6310..6311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 34,
        span: 6311..6312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 294,
        column: 38,
        span: 6313..6316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 39,
        span: 6316..6317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 40,
        span: 6317..6318,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 295,
        column: 0,
        span: 6319..6322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 297,
        column: 2,
        span: 6324..6325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 297,
        column: 4,
        span: 6326..6327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 297,
        column: 11,
        span: 6328..6334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 12,
        span: 6334..6335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 297,
        column: 16,
        span: 6335..6339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 17,
        span: 6339..6340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 297,
        column: 22,
        span: 6340..6345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 23,
        span: 6345..6346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 297,
        column: 24,
        span: 6346..6347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 25,
        span: 6347..6348,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 26,
        span: 6348..6349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        line: 297,
        column: 36,
        span: 6350..6359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 37,
        span: 6359..6360,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 297,
        column: 41,
        span: 6361..6364,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 42,
        span: 6364..6365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 297,
        column: 45,
        span: 6366..6368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 46,
        span: 6368..6369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 47,
        span: 6369..6370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 7,
        span: 6371..6377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 8,
        span: 6377..6378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 298,
        column: 9,
        span: 6378..6379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 10,
        span: 6379..6380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 11,
        span: 6380..6381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 14,
        span: 6382..6384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 298,
        column: 19,
        span: 6385..6389,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 298,
        column: 23,
        span: 6390..6393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 298,
        column: 26,
        span: 6394..6396,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 27,
        span: 6396..6397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 298,
        column: 28,
        span: 6397..6398,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 31,
        span: 6399..6401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 34,
        span: 6401..6404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 35,
        span: 6404..6405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 7,
        span: 6406..6412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 8,
        span: 6412..6413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 299,
        column: 13,
        span: 6413..6418,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 14,
        span: 6418..6419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 299,
        column: 21,
        span: 6419..6426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 22,
        span: 6426..6427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 299,
        column: 23,
        span: 6427..6428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 24,
        span: 6428..6429,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 25,
        span: 6429..6430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 299,
        column: 31,
        span: 6430..6436,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 34,
        span: 6437..6439,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        line: 299,
        column: 44,
        span: 6440..6449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 45,
        span: 6449..6450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 301,
        column: 11,
        span: 6486..6496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 12,
        span: 6496..6497,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a text chunk\"",
        ),
        line: 301,
        column: 42,
        span: 6497..6527,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 43,
        span: 6527..6528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 301,
        column: 48,
        span: 6529..6533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 49,
        span: 6533..6534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 301,
        column: 54,
        span: 6534..6539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 55,
        span: 6539..6540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 301,
        column: 56,
        span: 6540..6541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 57,
        span: 6541..6542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 58,
        span: 6542..6543,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        line: 301,
        column: 68,
        span: 6544..6553,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 69,
        span: 6553..6554,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 301,
        column: 73,
        span: 6555..6558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 74,
        span: 6558..6559,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 301,
        column: 76,
        span: 6560..6561,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 301,
        column: 77,
        span: 6561..6562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 78,
        span: 6562..6563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 79,
        span: 6563..6564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 302,
        column: 11,
        span: 6565..6575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 12,
        span: 6575..6576,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a text chunk\"",
        ),
        line: 302,
        column: 42,
        span: 6576..6606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 43,
        span: 6606..6607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 302,
        column: 48,
        span: 6608..6612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 49,
        span: 6612..6613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 302,
        column: 50,
        span: 6613..6614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 51,
        span: 6614..6615,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        line: 302,
        column: 61,
        span: 6616..6625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 62,
        span: 6625..6626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 302,
        column: 66,
        span: 6627..6630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 67,
        span: 6630..6631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 68,
        span: 6631..6632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 304,
        column: 2,
        span: 6634..6635,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 304,
        column: 4,
        span: 6636..6637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 304,
        column: 11,
        span: 6638..6644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 12,
        span: 6644..6645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 304,
        column: 16,
        span: 6645..6649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 17,
        span: 6649..6650,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 304,
        column: 25,
        span: 6650..6658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 27,
        span: 6659..6660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 28,
        span: 6660..6661,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 304,
        column: 35,
        span: 6662..6668,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 304,
        column: 39,
        span: 6669..6672,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 304,
        column: 43,
        span: 6673..6676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 44,
        span: 6676..6677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 45,
        span: 6677..6678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 305,
        column: 2,
        span: 6679..6680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 3,
        span: 6680..6681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 4,
        span: 6681..6682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 307,
        column: 7,
        span: 6700..6706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 8,
        span: 6706..6707,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 307,
        column: 11,
        span: 6707..6710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 307,
        column: 16,
        span: 6711..6715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 17,
        span: 6715..6716,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 307,
        column: 25,
        span: 6716..6724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 27,
        span: 6725..6726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 28,
        span: 6726..6727,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 307,
        column: 35,
        span: 6728..6734,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 307,
        column: 40,
        span: 6735..6739,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 307,
        column: 44,
        span: 6740..6743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 45,
        span: 6743..6744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 46,
        span: 6744..6745,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 311,
        column: 6,
        span: 6761..6766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 311,
        column: 8,
        span: 6767..6768,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 311,
        column: 10,
        span: 6769..6770,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 311,
        column: 12,
        span: 6771..6772,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 311,
        column: 15,
        span: 6772..6775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 16,
        span: 6775..6776,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 311,
        column: 26,
        span: 6777..6786,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 27,
        span: 6786..6787,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 311,
        column: 31,
        span: 6788..6791,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 311,
        column: 32,
        span: 6791..6792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 312,
        column: 2,
        span: 6793..6794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 3,
        span: 6794..6795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 312,
        column: 7,
        span: 6796..6799,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 312,
        column: 9,
        span: 6800..6801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 312,
        column: 14,
        span: 6802..6806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 15,
        span: 6806..6807,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 312,
        column: 23,
        span: 6807..6815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 25,
        span: 6816..6817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 26,
        span: 6817..6818,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 312,
        column: 33,
        span: 6819..6825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 312,
        column: 39,
        span: 6826..6831,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 312,
        column: 40,
        span: 6831..6832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 312,
        column: 46,
        span: 6832..6838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 47,
        span: 6838..6839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 312,
        column: 48,
        span: 6839..6840,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 49,
        span: 6840..6841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 51,
        span: 6841..6843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 52,
        span: 6843..6844,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 312,
        column: 56,
        span: 6845..6848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 57,
        span: 6848..6849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 313,
        column: 7,
        span: 6850..6856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 8,
        span: 6856..6857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 313,
        column: 9,
        span: 6857..6858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 10,
        span: 6858..6859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 11,
        span: 6859..6860,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 313,
        column: 14,
        span: 6861..6863,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 313,
        column: 18,
        span: 6864..6867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 19,
        span: 6867..6868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 316,
        column: 2,
        span: 6935..6936,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
        column: 4,
        span: 6937..6938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 316,
        column: 9,
        span: 6939..6943,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 10,
        span: 6943..6944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 316,
        column: 16,
        span: 6944..6950,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 316,
        column: 17,
        span: 6950..6951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 316,
        column: 21,
        span: 6951..6955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 22,
        span: 6955..6956,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 316,
        column: 30,
        span: 6956..6964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 32,
        span: 6965..6966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 33,
        span: 6966..6967,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 316,
        column: 40,
        span: 6968..6974,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 42,
        span: 6974..6976,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 316,
        column: 46,
        span: 6977..6980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 47,
        span: 6980..6981,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 48,
        span: 6981..6982,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 316,
        column: 52,
        span: 6983..6986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 53,
        span: 6986..6987,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 316,
        column: 57,
        span: 6988..6991,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 58,
        span: 6991..6992,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 316,
        column: 60,
        span: 6993..6994,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 316,
        column: 61,
        span: 6994..6995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 62,
        span: 6995..6996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 317,
        column: 7,
        span: 6997..7003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 8,
        span: 7003..7004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 317,
        column: 12,
        span: 7004..7008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 13,
        span: 7008..7009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 317,
        column: 14,
        span: 7009..7010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 15,
        span: 7010..7011,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 317,
        column: 18,
        span: 7012..7014,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 317,
        column: 29,
        span: 7015..7025,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 317,
        column: 33,
        span: 7026..7029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 317,
        column: 35,
        span: 7030..7031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 36,
        span: 7031..7032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 37,
        span: 7032..7033,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 317,
        column: 40,
        span: 7034..7036,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 42,
        span: 7036..7038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 43,
        span: 7038..7039,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 320,
        column: 3,
        span: 7042..7044,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 322,
        column: 8,
        span: 7134..7139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 322,
        column: 10,
        span: 7140..7141,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 322,
        column: 12,
        span: 7142..7143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 322,
        column: 19,
        span: 7144..7150,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 322,
        column: 20,
        span: 7150..7151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 322,
        column: 24,
        span: 7151..7155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 25,
        span: 7155..7156,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 322,
        column: 33,
        span: 7156..7164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 35,
        span: 7165..7166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 36,
        span: 7166..7167,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 323,
        column: 11,
        span: 7172..7178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'01234567890123456789012345678901234567890123456789'",
        ),
        line: 323,
        column: 64,
        span: 7179..7231,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 324,
        column: 6,
        span: 7234..7237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 7,
        span: 7237..7238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 325,
        column: 4,
        span: 7241..7242,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 6,
        span: 7243..7244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 325,
        column: 11,
        span: 7245..7249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 12,
        span: 7249..7250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 325,
        column: 17,
        span: 7250..7255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 18,
        span: 7255..7256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 325,
        column: 19,
        span: 7256..7257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 20,
        span: 7257..7258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 21,
        span: 7258..7259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 326,
        column: 9,
        span: 7262..7268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 10,
        span: 7268..7269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 326,
        column: 11,
        span: 7269..7270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 12,
        span: 7270..7271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 13,
        span: 7271..7272,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 326,
        column: 16,
        span: 7273..7275,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'01234567890123456789012345678901234567890123456789'",
        ),
        line: 326,
        column: 69,
        span: 7276..7328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 70,
        span: 7328..7329,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 327,
        column: 0,
        span: 7330..7333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 330,
        column: 2,
        span: 7336..7337,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
        column: 4,
        span: 7338..7339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 330,
        column: 11,
        span: 7340..7346,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 330,
        column: 12,
        span: 7346..7347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 330,
        column: 16,
        span: 7347..7351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 17,
        span: 7351..7352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 330,
        column: 21,
        span: 7352..7356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 22,
        span: 7356..7357,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x = 1; return x\"",
        ),
        line: 330,
        column: 39,
        span: 7357..7374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 40,
        span: 7374..7375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 41,
        span: 7375..7376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
        column: 2,
        span: 7377..7378,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 331,
        column: 4,
        span: 7379..7380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
        column: 11,
        span: 7381..7387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 12,
        span: 7387..7388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 331,
        column: 16,
        span: 7388..7392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 17,
        span: 7392..7393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 331,
        column: 22,
        span: 7393..7398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 23,
        span: 7398..7399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 331,
        column: 24,
        span: 7399..7400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 25,
        span: 7400..7401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
        column: 26,
        span: 7401..7402,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 331,
        column: 30,
        span: 7403..7406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
        column: 31,
        span: 7406..7407,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 331,
        column: 35,
        span: 7408..7411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 36,
        span: 7411..7412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 37,
        span: 7412..7413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 332,
        column: 7,
        span: 7414..7420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 8,
        span: 7420..7421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 332,
        column: 9,
        span: 7421..7422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 10,
        span: 7422..7423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 11,
        span: 7423..7424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
        column: 14,
        span: 7425..7427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 16,
        span: 7427..7429,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 332,
        column: 20,
        span: 7430..7433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 332,
        column: 23,
        span: 7434..7436,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 332,
        column: 24,
        span: 7436..7437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 332,
        column: 25,
        span: 7437..7438,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
        column: 28,
        span: 7439..7441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 30,
        span: 7441..7443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 31,
        span: 7443..7444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 333,
        column: 11,
        span: 7445..7455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 12,
        span: 7455..7456,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a binary chunk\"",
        ),
        line: 333,
        column: 44,
        span: 7456..7488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
        column: 45,
        span: 7488..7489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 333,
        column: 50,
        span: 7490..7494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 51,
        span: 7494..7495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 333,
        column: 56,
        span: 7495..7500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 57,
        span: 7500..7501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 333,
        column: 58,
        span: 7501..7502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 59,
        span: 7502..7503,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
        column: 60,
        span: 7503..7504,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 333,
        column: 64,
        span: 7505..7508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
        column: 65,
        span: 7508..7509,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 333,
        column: 69,
        span: 7510..7513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 70,
        span: 7513..7514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 71,
        span: 7514..7515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 334,
        column: 11,
        span: 7516..7526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 12,
        span: 7526..7527,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a binary chunk\"",
        ),
        line: 334,
        column: 44,
        span: 7527..7559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 45,
        span: 7559..7560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 334,
        column: 50,
        span: 7561..7565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 51,
        span: 7565..7566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 334,
        column: 52,
        span: 7566..7567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 53,
        span: 7567..7568,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 334,
        column: 57,
        span: 7569..7572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 58,
        span: 7572..7573,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 334,
        column: 62,
        span: 7574..7577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
        column: 63,
        span: 7577..7578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
        column: 64,
        span: 7578..7579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 336,
        column: 7,
        span: 7581..7587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 8,
        span: 7587..7588,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 336,
        column: 11,
        span: 7588..7591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 336,
        column: 17,
        span: 7592..7597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 18,
        span: 7597..7598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 336,
        column: 24,
        span: 7598..7604,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
        column: 25,
        span: 7604..7605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 336,
        column: 29,
        span: 7605..7609,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 30,
        span: 7609..7610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 336,
        column: 36,
        span: 7611..7616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 37,
        span: 7616..7617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 38,
        span: 7617..7618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 338,
        column: 11,
        span: 7647..7657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 12,
        span: 7657..7658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unexpected symbol\"",
        ),
        line: 338,
        column: 31,
        span: 7658..7677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
        column: 32,
        span: 7677..7678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 338,
        column: 37,
        span: 7679..7683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 38,
        span: 7683..7684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 338,
        column: 43,
        span: 7684..7689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 44,
        span: 7689..7690,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a = 123\"",
        ),
        line: 338,
        column: 54,
        span: 7690..7700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 55,
        span: 7700..7701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 56,
        span: 7701..7702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 57,
        span: 7702..7703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 339,
        column: 11,
        span: 7704..7714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 12,
        span: 7714..7715,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unexpected symbol\"",
        ),
        line: 339,
        column: 31,
        span: 7715..7734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
        column: 32,
        span: 7734..7735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 339,
        column: 37,
        span: 7736..7740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 38,
        span: 7740..7741,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a = 123\"",
        ),
        line: 339,
        column: 48,
        span: 7741..7751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 49,
        span: 7751..7752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 50,
        span: 7752..7753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        line: 340,
        column: 11,
        span: 7754..7764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 12,
        span: 7764..7765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hhi\"",
        ),
        line: 340,
        column: 17,
        span: 7765..7770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 18,
        span: 7770..7771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 340,
        column: 23,
        span: 7772..7776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 24,
        span: 7776..7777,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 340,
        column: 32,
        span: 7777..7785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 34,
        span: 7786..7787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 35,
        span: 7787..7788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 340,
        column: 41,
        span: 7789..7794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 42,
        span: 7794..7795,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hhi\"",
        ),
        line: 340,
        column: 47,
        span: 7795..7800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 48,
        span: 7800..7801,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 340,
        column: 52,
        span: 7802..7805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 53,
        span: 7805..7806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 54,
        span: 7806..7807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 343,
        column: 7,
        span: 7840..7846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 8,
        span: 7846..7847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 343,
        column: 12,
        span: 7847..7851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 13,
        span: 7851..7852,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return _ENV\"",
        ),
        line: 343,
        column: 26,
        span: 7852..7865,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
        column: 27,
        span: 7865..7866,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 343,
        column: 31,
        span: 7867..7870,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
        column: 32,
        span: 7870..7871,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 343,
        column: 36,
        span: 7872..7875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
        column: 37,
        span: 7875..7876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
        column: 41,
        span: 7876..7880,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 42,
        span: 7880..7881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 43,
        span: 7881..7882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 44,
        span: 7882..7883,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 343,
        column: 47,
        span: 7884..7886,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
        column: 51,
        span: 7886..7890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 52,
        span: 7890..7891,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 347,
        column: 6,
        span: 7933..7938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 347,
        column: 8,
        span: 7939..7940,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 347,
        column: 9,
        span: 7940..7941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 347,
        column: 12,
        span: 7942..7944,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 347,
        column: 14,
        span: 7945..7946,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 0,
        span: 7946..7950,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 348,
        column: 6,
        span: 7951..7956,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 348,
        column: 15,
        span: 7957..7965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 348,
        column: 17,
        span: 7966..7967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 19,
        span: 7968..7969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 20,
        span: 7969..7970,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 349,
        column: 8,
        span: 7973..7978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 349,
        column: 10,
        span: 7979..7980,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 349,
        column: 11,
        span: 7980..7981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 349,
        column: 12,
        span: 7981..7982,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 350,
        column: 9,
        span: 8030..8036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 350,
        column: 12,
        span: 8037..8039,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 351,
        column: 0,
        span: 8057..8060,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 352,
        column: 6,
        span: 8061..8066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 352,
        column: 8,
        span: 8067..8068,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 352,
        column: 10,
        span: 8069..8070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 352,
        column: 17,
        span: 8071..8077,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
        column: 18,
        span: 8077..8078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 352,
        column: 22,
        span: 8078..8082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 23,
        span: 8082..8083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 352,
        column: 24,
        span: 8083..8084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 25,
        span: 8084..8085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 353,
        column: 2,
        span: 8086..8087,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 353,
        column: 4,
        span: 8088..8089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 353,
        column: 9,
        span: 8090..8094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 10,
        span: 8094..8095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 353,
        column: 11,
        span: 8095..8096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 353,
        column: 12,
        span: 8096..8097,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 353,
        column: 15,
        span: 8098..8100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 353,
        column: 16,
        span: 8100..8101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 353,
        column: 20,
        span: 8102..8105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 21,
        span: 8105..8106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 354,
        column: 7,
        span: 8107..8113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 8,
        span: 8113..8114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 354,
        column: 13,
        span: 8114..8119,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 354,
        column: 14,
        span: 8119..8120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 354,
        column: 24,
        span: 8120..8130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 25,
        span: 8130..8131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 354,
        column: 26,
        span: 8131..8132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 27,
        span: 8132..8133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 29,
        span: 8133..8135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 30,
        span: 8135..8136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 354,
        column: 33,
        span: 8137..8139,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'_ENV'",
        ),
        line: 354,
        column: 40,
        span: 8140..8146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 41,
        span: 8146..8147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 355,
        column: 6,
        span: 8148..8153,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 355,
        column: 7,
        span: 8153..8154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 355,
        column: 17,
        span: 8154..8164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 18,
        span: 8164..8165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 355,
        column: 19,
        span: 8165..8166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 355,
        column: 20,
        span: 8166..8167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
        column: 22,
        span: 8167..8169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 355,
        column: 23,
        span: 8169..8170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 355,
        column: 26,
        span: 8171..8173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 27,
        span: 8173..8174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 356,
        column: 7,
        span: 8175..8181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 8,
        span: 8181..8182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 356,
        column: 9,
        span: 8182..8183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 10,
        span: 8183..8184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 11,
        span: 8184..8185,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 356,
        column: 14,
        span: 8186..8188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 18,
        span: 8188..8192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 19,
        span: 8192..8193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 7,
        span: 8195..8201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 8,
        span: 8201..8202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 14,
        span: 8202..8208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 15,
        span: 8208..8209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 358,
        column: 19,
        span: 8209..8213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 20,
        span: 8213..8214,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX + ...\"",
        ),
        line: 358,
        column: 37,
        span: 8214..8231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 38,
        span: 8231..8232,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 358,
        column: 42,
        span: 8233..8236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 43,
        span: 8236..8237,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 358,
        column: 47,
        span: 8238..8241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 48,
        span: 8241..8242,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 358,
        column: 50,
        span: 8243..8244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 358,
        column: 52,
        span: 8244..8246,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
        column: 54,
        span: 8247..8248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 57,
        span: 8248..8251,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 358,
        column: 58,
        span: 8251..8252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 59,
        span: 8252..8253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 60,
        span: 8253..8254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 61,
        span: 8254..8255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 62,
        span: 8254..8256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 63,
        span: 8256..8257,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 358,
        column: 66,
        span: 8258..8260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 69,
        span: 8260..8263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 70,
        span: 8263..8264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 362,
        column: 2,
        span: 8310..8311,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
        column: 4,
        span: 8312..8313,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  return function (x)\n    return function (y)\n     return function (z)\n       return x+y+z\n     end\n   end\n  end\n]]",
        ),
        line: 370,
        column: 3,
        span: 8314..8432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
        column: 2,
        span: 8433..8434,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 4,
        span: 8435..8436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 371,
        column: 11,
        span: 8437..8443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 12,
        span: 8443..8444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 371,
        column: 16,
        span: 8444..8448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 17,
        span: 8448..8449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 371,
        column: 22,
        span: 8449..8454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 23,
        span: 8454..8455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 371,
        column: 24,
        span: 8455..8456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 25,
        span: 8456..8457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 26,
        span: 8457..8458,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"read\"",
        ),
        line: 371,
        column: 33,
        span: 8459..8465,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 34,
        span: 8465..8466,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 371,
        column: 38,
        span: 8467..8470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 39,
        span: 8470..8471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 40,
        span: 8471..8472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 372,
        column: 7,
        span: 8473..8479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 8,
        span: 8479..8480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 372,
        column: 9,
        span: 8480..8481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 10,
        span: 8481..8482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 11,
        span: 8482..8483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 12,
        span: 8483..8484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 13,
        span: 8483..8485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 14,
        span: 8485..8486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 15,
        span: 8486..8487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 16,
        span: 8486..8488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 17,
        span: 8488..8489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 18,
        span: 8489..8490,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 20,
        span: 8489..8492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 21,
        span: 8492..8493,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 372,
        column: 24,
        span: 8494..8496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 27,
        span: 8496..8499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 28,
        span: 8499..8500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 375,
        column: 2,
        span: 8544..8545,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 375,
        column: 4,
        span: 8546..8547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 375,
        column: 11,
        span: 8548..8554,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 375,
        column: 12,
        span: 8554..8555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 375,
        column: 16,
        span: 8555..8559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 17,
        span: 8559..8560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 375,
        column: 18,
        span: 8560..8561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 19,
        span: 8561..8562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 376,
        column: 2,
        span: 8563..8564,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
        column: 4,
        span: 8565..8566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 376,
        column: 11,
        span: 8567..8573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 12,
        span: 8573..8574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 376,
        column: 16,
        span: 8574..8578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 17,
        span: 8578..8579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 376,
        column: 22,
        span: 8579..8584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 23,
        span: 8584..8585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 376,
        column: 24,
        span: 8585..8586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 25,
        span: 8586..8587,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 26,
        span: 8587..8588,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"read\"",
        ),
        line: 376,
        column: 33,
        span: 8589..8595,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 34,
        span: 8595..8596,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 376,
        column: 38,
        span: 8597..8600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 39,
        span: 8600..8601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 40,
        span: 8601..8602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
        column: 7,
        span: 8603..8609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 8,
        span: 8609..8610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 377,
        column: 9,
        span: 8610..8611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 10,
        span: 8611..8612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 11,
        span: 8612..8613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 12,
        span: 8613..8614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
        column: 13,
        span: 8613..8615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 14,
        span: 8615..8616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 15,
        span: 8616..8617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
        column: 16,
        span: 8616..8618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 17,
        span: 8618..8619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 18,
        span: 8619..8620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
        column: 20,
        span: 8619..8622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 21,
        span: 8622..8623,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
        column: 24,
        span: 8624..8626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
        column: 27,
        span: 8626..8629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 28,
        span: 8629..8630,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 381,
        column: 6,
        span: 8671..8676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 381,
        column: 8,
        span: 8677..8678,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 381,
        column: 9,
        span: 8678..8679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 381,
        column: 11,
        span: 8680..8681,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 381,
        column: 13,
        span: 8682..8683,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
        column: 16,
        span: 8683..8686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 381,
        column: 17,
        span: 8686..8687,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
        column: 0,
        span: 8687..8690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 382,
        column: 2,
        span: 8691..8692,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 382,
        column: 4,
        span: 8693..8694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 382,
        column: 9,
        span: 8695..8699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 10,
        span: 8699..8700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 382,
        column: 16,
        span: 8700..8706,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 382,
        column: 17,
        span: 8706..8707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 382,
        column: 21,
        span: 8707..8711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 22,
        span: 8711..8712,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 382,
        column: 30,
        span: 8712..8720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 32,
        span: 8721..8722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 382,
        column: 33,
        span: 8722..8723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 34,
        span: 8723..8724,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 383,
        column: 5,
        span: 8727..8729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 383,
        column: 7,
        span: 8730..8731,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
        column: 10,
        span: 8732..8734,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 383,
        column: 16,
        span: 8735..8740,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 383,
        column: 21,
        span: 8741..8745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 23,
        span: 8746..8747,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
        column: 25,
        span: 8748..8749,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 28,
        span: 8749..8752,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 383,
        column: 29,
        span: 8752..8753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 383,
        column: 30,
        span: 8753..8754,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 383,
        column: 31,
        span: 8754..8755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 383,
        column: 33,
        span: 8756..8757,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
        column: 35,
        span: 8758..8759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 383,
        column: 37,
        span: 8760..8761,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 383,
        column: 38,
        span: 8761..8762,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 39,
        span: 8761..8763,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 383,
        column: 0,
        span: 8764..8768,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 384,
        column: 9,
        span: 8771..8777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 0,
        span: 8778..8779,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 385,
        column: 0,
        span: 8782..8785,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 386,
        column: 4,
        span: 8786..8789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 5,
        span: 8789..8790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 6,
        span: 8790..8791,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 386,
        column: 9,
        span: 8792..8794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 10,
        span: 8794..8795,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 386,
        column: 14,
        span: 8796..8799,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 15,
        span: 8799..8800,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 386,
        column: 19,
        span: 8801..8804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 20,
        span: 8804..8805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 7,
        span: 8806..8812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 8,
        span: 8812..8813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 387,
        column: 9,
        span: 8813..8814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 10,
        span: 8814..8815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 11,
        span: 8815..8816,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 387,
        column: 14,
        span: 8817..8819,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 387,
        column: 18,
        span: 8820..8823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 19,
        span: 8823..8824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 388,
        column: 7,
        span: 8825..8831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 8,
        span: 8831..8832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 388,
        column: 13,
        span: 8832..8837,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 388,
        column: 14,
        span: 8837..8838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 388,
        column: 24,
        span: 8838..8848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 25,
        span: 8848..8849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 388,
        column: 26,
        span: 8849..8850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
        column: 27,
        span: 8850..8851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
        column: 29,
        span: 8851..8853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
        column: 30,
        span: 8853..8854,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 388,
        column: 35,
        span: 8855..8859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 36,
        span: 8859..8860,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 388,
        column: 39,
        span: 8861..8863,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 388,
        column: 43,
        span: 8864..8867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 44,
        span: 8867..8868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
        column: 7,
        span: 8869..8875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 8,
        span: 8875..8876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 389,
        column: 9,
        span: 8876..8877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 10,
        span: 8877..8878,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 11,
        span: 8878..8879,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
        column: 14,
        span: 8880..8882,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 389,
        column: 19,
        span: 8883..8887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 20,
        span: 8887..8888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 390,
        column: 7,
        span: 8889..8895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 8,
        span: 8895..8896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 390,
        column: 13,
        span: 8896..8901,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 390,
        column: 14,
        span: 8901..8902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 390,
        column: 24,
        span: 8902..8912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 25,
        span: 8912..8913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 390,
        column: 26,
        span: 8913..8914,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 27,
        span: 8914..8915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 29,
        span: 8915..8917,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 30,
        span: 8917..8918,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 33,
        span: 8918..8921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 34,
        span: 8921..8922,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
        column: 37,
        span: 8923..8925,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 390,
        column: 41,
        span: 8926..8929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 42,
        span: 8929..8930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 391,
        column: 7,
        span: 8931..8937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 8,
        span: 8937..8938,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 391,
        column: 11,
        span: 8938..8941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 391,
        column: 17,
        span: 8942..8947,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 391,
        column: 18,
        span: 8947..8948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 391,
        column: 28,
        span: 8948..8958,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 29,
        span: 8958..8959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 391,
        column: 30,
        span: 8959..8960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 391,
        column: 31,
        span: 8960..8961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
        column: 33,
        span: 8961..8963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 391,
        column: 34,
        span: 8963..8964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
        column: 37,
        span: 8964..8967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 38,
        span: 8967..8968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 39,
        span: 8968..8969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 392,
        column: 2,
        span: 8991..8992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 3,
        span: 8992..8993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 392,
        column: 8,
        span: 8993..8998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 9,
        span: 8998..8999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
        column: 7,
        span: 9000..9006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 8,
        span: 9006..9007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 393,
        column: 9,
        span: 9007..9008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 10,
        span: 9008..9009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 11,
        span: 9009..9010,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 393,
        column: 14,
        span: 9011..9013,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 17,
        span: 9013..9016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 18,
        span: 9016..9017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 394,
        column: 2,
        span: 9018..9019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 3,
        span: 9019..9020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 394,
        column: 8,
        span: 9020..9025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 9,
        span: 9025..9026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
        column: 7,
        span: 9027..9033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 8,
        span: 9033..9034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 395,
        column: 9,
        span: 9034..9035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 10,
        span: 9035..9036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 11,
        span: 9036..9037,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
        column: 14,
        span: 9038..9040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 17,
        span: 9040..9043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 18,
        span: 9043..9044,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 398,
        column: 0,
        span: 9089..9091,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 399,
        column: 8,
        span: 9094..9099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 399,
        column: 12,
        span: 9100..9103,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 399,
        column: 14,
        span: 9104..9105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 18,
        span: 9105..9109,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 400,
        column: 8,
        span: 9152..9157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 400,
        column: 13,
        span: 9158..9162,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 15,
        span: 9163..9164,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 400,
        column: 17,
        span: 9165..9166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a1\"",
        ),
        line: 400,
        column: 27,
        span: 9166..9176,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 400,
        column: 28,
        span: 9176..9177,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 401,
        column: 6,
        span: 9180..9183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 401,
        column: 8,
        span: 9184..9185,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
        column: 10,
        span: 9186..9187,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 12,
        span: 9187..9189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 13,
        span: 9189..9190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 401,
        column: 17,
        span: 9191..9194,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 401,
        column: 20,
        span: 9195..9197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 401,
        column: 25,
        span: 9198..9202,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 401,
        column: 26,
        span: 9202..9203,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 401,
        column: 27,
        span: 9203..9204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 401,
        column: 31,
        span: 9204..9208,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 401,
        column: 33,
        span: 9209..9210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 35,
        span: 9210..9212,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 401,
        column: 36,
        span: 9212..9213,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
        column: 38,
        span: 9214..9215,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", a\"",
        ),
        line: 401,
        column: 44,
        span: 9216..9221,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 401,
        column: 47,
        span: 9222..9224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 401,
        column: 49,
        span: 9225..9226,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 401,
        column: 0,
        span: 9227..9230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 402,
        column: 7,
        span: 9233..9237,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 402,
        column: 8,
        span: 9237..9238,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 402,
        column: 9,
        span: 9238..9239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 402,
        column: 13,
        span: 9239..9243,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 402,
        column: 15,
        span: 9244..9245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 17,
        span: 9245..9247,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 402,
        column: 18,
        span: 9247..9248,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 20,
        span: 9249..9250,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" = 1\"",
        ),
        line: 402,
        column: 27,
        span: 9251..9257,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 403,
        column: 6,
        span: 9260..9263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 403,
        column: 8,
        span: 9264..9265,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 403,
        column: 10,
        span: 9266..9267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
        column: 12,
        span: 9267..9269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
        column: 13,
        span: 9269..9270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 403,
        column: 17,
        span: 9271..9274,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 403,
        column: 20,
        span: 9275..9277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 403,
        column: 25,
        span: 9278..9282,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 403,
        column: 26,
        span: 9282..9283,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 403,
        column: 27,
        span: 9283..9284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 403,
        column: 31,
        span: 9284..9288,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 403,
        column: 33,
        span: 9289..9290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
        column: 35,
        span: 9290..9292,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 403,
        column: 36,
        span: 9292..9293,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 403,
        column: 38,
        span: 9294..9295,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 403,
        column: 43,
        span: 9296..9300,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 403,
        column: 46,
        span: 9301..9303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 403,
        column: 48,
        span: 9304..9305,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 403,
        column: 0,
        span: 9306..9309,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 404,
        column: 8,
        span: 9312..9317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        line: 404,
        column: 12,
        span: 9318..9321,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 404,
        column: 14,
        span: 9322..9323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
        column: 0,
        span: 9323..9325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 405,
        column: 7,
        span: 9328..9332,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 405,
        column: 8,
        span: 9332..9333,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 405,
        column: 9,
        span: 9333..9334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 405,
        column: 13,
        span: 9334..9338,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 405,
        column: 15,
        span: 9339..9340,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 405,
        column: 17,
        span: 9340..9342,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 405,
        column: 18,
        span: 9342..9343,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 405,
        column: 20,
        span: 9344..9345,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; return function () return a1\"",
        ),
        line: 405,
        column: 53,
        span: 9346..9378,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 406,
        column: 6,
        span: 9381..9384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 406,
        column: 8,
        span: 9385..9386,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
        column: 10,
        span: 9387..9388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
        column: 12,
        span: 9388..9390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
        column: 13,
        span: 9390..9391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 406,
        column: 17,
        span: 9392..9395,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 406,
        column: 20,
        span: 9396..9398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 406,
        column: 25,
        span: 9399..9403,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 406,
        column: 26,
        span: 9403..9404,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 406,
        column: 27,
        span: 9404..9405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 406,
        column: 31,
        span: 9405..9409,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 406,
        column: 33,
        span: 9410..9411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
        column: 35,
        span: 9411..9413,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 406,
        column: 36,
        span: 9413..9414,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
        column: 38,
        span: 9415..9416,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" + a\"",
        ),
        line: 406,
        column: 45,
        span: 9417..9423,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 406,
        column: 48,
        span: 9424..9426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 406,
        column: 50,
        span: 9427..9428,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 406,
        column: 51,
        span: 9428..9429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        line: 406,
        column: 55,
        span: 9430..9433,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
        column: 57,
        span: 9434..9435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        line: 406,
        column: 61,
        span: 9436..9439,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 406,
        column: 63,
        span: 9440..9441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 406,
        column: 65,
        span: 9442..9443,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 406,
        column: 0,
        span: 9444..9447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 407,
        column: 7,
        span: 9450..9454,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 407,
        column: 8,
        span: 9454..9455,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 407,
        column: 9,
        span: 9455..9456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 407,
        column: 13,
        span: 9456..9460,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 407,
        column: 15,
        span: 9461..9462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 17,
        span: 9462..9464,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 407,
        column: 18,
        span: 9464..9465,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
        column: 20,
        span: 9466..9467,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 407,
        column: 27,
        span: 9468..9474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 408,
        column: 7,
        span: 9477..9481,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 408,
        column: 9,
        span: 9482..9483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 408,
        column: 15,
        span: 9484..9489,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 408,
        column: 16,
        span: 9489..9490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 408,
        column: 22,
        span: 9490..9496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 23,
        span: 9496..9497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 408,
        column: 27,
        span: 9497..9501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 28,
        span: 9501..9502,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 409,
        column: 8,
        span: 9505..9510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 409,
        column: 10,
        span: 9511..9512,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 409,
        column: 12,
        span: 9513..9514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 409,
        column: 19,
        span: 9515..9521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 20,
        span: 9521..9522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 409,
        column: 24,
        span: 9522..9526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 25,
        span: 9526..9527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 409,
        column: 29,
        span: 9527..9531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 30,
        span: 9531..9532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 31,
        span: 9532..9533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 32,
        span: 9533..9534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 33,
        span: 9534..9535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 410,
        column: 9,
        span: 9538..9544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 10,
        span: 9544..9545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 410,
        column: 11,
        span: 9545..9546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 12,
        span: 9546..9547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 13,
        span: 9547..9548,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
        column: 16,
        span: 9549..9551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        line: 410,
        column: 20,
        span: 9552..9555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 21,
        span: 9555..9556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 412,
        column: 4,
        span: 9560..9561,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 412,
        column: 6,
        span: 9562..9563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 412,
        column: 11,
        span: 9564..9568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 12,
        span: 9568..9569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 412,
        column: 18,
        span: 9569..9575,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 412,
        column: 19,
        span: 9575..9576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 412,
        column: 23,
        span: 9576..9580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 24,
        span: 9580..9581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 412,
        column: 25,
        span: 9581..9582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 26,
        span: 9582..9583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 27,
        span: 9583..9584,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 413,
        column: 8,
        span: 9625..9630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 413,
        column: 10,
        span: 9631..9632,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 413,
        column: 12,
        span: 9633..9634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 0,
        span: 9634..9637,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 414,
        column: 8,
        span: 9640..9645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 414,
        column: 10,
        span: 9646..9647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
        column: 12,
        span: 9648..9649,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 414,
        column: 21,
        span: 9650..9658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 23,
        span: 9659..9660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 24,
        span: 9660..9661,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 414,
        column: 31,
        span: 9662..9668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 414,
        column: 33,
        span: 9669..9670,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 414,
        column: 0,
        span: 9671..9674,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 415,
        column: 6,
        span: 9677..9680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 415,
        column: 8,
        span: 9681..9682,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
        column: 10,
        span: 9683..9684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 12,
        span: 9684..9686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
        column: 13,
        span: 9686..9687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 415,
        column: 17,
        span: 9688..9691,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 415,
        column: 0,
        span: 9692..9694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 416,
        column: 10,
        span: 9699..9704,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 416,
        column: 11,
        span: 9704..9705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 416,
        column: 22,
        span: 9705..9716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 23,
        span: 9716..9717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 416,
        column: 24,
        span: 9717..9718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
        column: 25,
        span: 9718..9719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 416,
        column: 27,
        span: 9720..9721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
        column: 28,
        span: 9721..9722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 416,
        column: 30,
        span: 9723..9724,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
        column: 31,
        span: 9724..9725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
        column: 33,
        span: 9725..9727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 34,
        span: 9727..9728,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 417,
        column: 0,
        span: 9731..9734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 9,
        span: 9737..9743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 10,
        span: 9743..9744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 418,
        column: 11,
        span: 9744..9745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 12,
        span: 9745..9746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 13,
        span: 9746..9747,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
        column: 16,
        span: 9748..9750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 19,
        span: 9750..9753,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 418,
        column: 21,
        span: 9754..9755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        line: 418,
        column: 25,
        span: 9756..9759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 26,
        span: 9759..9760,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 419,
        column: 0,
        span: 9761..9764,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 422,
        column: 0,
        span: 9796..9798,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 423,
        column: 8,
        span: 9801..9806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 423,
        column: 10,
        span: 9807..9808,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
        column: 12,
        span: 9809..9810,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 423,
        column: 14,
        span: 9811..9812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 423,
        column: 15,
        span: 9812..9813,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
        column: 17,
        span: 9814..9815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 19,
        span: 9815..9817,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 423,
        column: 20,
        span: 9817..9818,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 424,
        column: 11,
        span: 9821..9829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 424,
        column: 13,
        span: 9830..9831,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 424,
        column: 14,
        span: 9831..9832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        line: 424,
        column: 75,
        span: 9832..9893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 77,
        span: 9894..9895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 78,
        span: 9895..9896,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 425,
        column: 11,
        span: 9901..9907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 425,
        column: 16,
        span: 9908..9912,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 425,
        column: 17,
        span: 9912..9913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 425,
        column: 0,
        span: 9913..9914,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 426,
        column: 0,
        span: 9917..9920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 427,
        column: 9,
        span: 9923..9929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 10,
        span: 9929..9930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 427,
        column: 11,
        span: 9930..9931,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 427,
        column: 12,
        span: 9931..9932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        line: 427,
        column: 73,
        span: 9932..9993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 74,
        span: 9993..9994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 75,
        span: 9994..9995,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 427,
        column: 78,
        span: 9996..9998,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
        column: 80,
        span: 9998..10000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 81,
        span: 10000..10001,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 428,
        column: 0,
        span: 10002..10005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 432,
        column: 7,
        span: 10048..10054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 8,
        span: 10054..10055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 9,
        span: 10055..10056,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 432,
        column: 17,
        span: 10056..10064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 19,
        span: 10065..10066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 20,
        span: 10066..10067,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 432,
        column: 27,
        span: 10068..10074,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 432,
        column: 31,
        span: 10075..10078,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 432,
        column: 35,
        span: 10079..10082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 36,
        span: 10082..10083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 37,
        span: 10083..10084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
        column: 38,
        span: 10083..10085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 39,
        span: 10085..10086,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 432,
        column: 42,
        span: 10087..10089,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 432,
        column: 46,
        span: 10090..10093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 47,
        span: 10093..10094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 433,
        column: 7,
        span: 10095..10101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
        column: 8,
        span: 10101..10102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
        column: 9,
        span: 10102..10103,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 433,
        column: 17,
        span: 10103..10111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
        column: 19,
        span: 10112..10113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
        column: 20,
        span: 10113..10114,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 433,
        column: 26,
        span: 10115..10120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 433,
        column: 28,
        span: 10121..10122,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 433,
        column: 29,
        span: 10122..10123,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 433,
        column: 36,
        span: 10124..10130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 433,
        column: 38,
        span: 10131..10132,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 433,
        column: 42,
        span: 10133..10136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
        column: 43,
        span: 10136..10137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
        column: 44,
        span: 10137..10138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 433,
        column: 45,
        span: 10137..10139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
        column: 46,
        span: 10139..10140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 433,
        column: 49,
        span: 10141..10143,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 433,
        column: 53,
        span: 10144..10147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
        column: 54,
        span: 10147..10148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 434,
        column: 7,
        span: 10149..10155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 8,
        span: 10155..10156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 9,
        span: 10156..10157,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 434,
        column: 17,
        span: 10157..10165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 19,
        span: 10166..10167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 434,
        column: 20,
        span: 10167..10168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 21,
        span: 10168..10169,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 434,
        column: 28,
        span: 10170..10176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 434,
        column: 30,
        span: 10177..10178,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 434,
        column: 34,
        span: 10179..10182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 35,
        span: 10182..10183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 36,
        span: 10183..10184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 37,
        span: 10184..10185,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 434,
        column: 40,
        span: 10186..10188,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 434,
        column: 44,
        span: 10189..10192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 45,
        span: 10192..10193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 437,
        column: 6,
        span: 10196..10201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
        column: 7,
        span: 10201..10202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing binary chunks\"",
        ),
        line: 437,
        column: 30,
        span: 10202..10225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
        column: 31,
        span: 10225..10226,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 438,
        column: 0,
        span: 10227..10229,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 439,
        column: 8,
        span: 10232..10237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        line: 439,
        column: 15,
        span: 10238..10244,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 439,
        column: 17,
        span: 10245..10246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 439,
        column: 24,
        span: 10247..10253,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 439,
        column: 25,
        span: 10253..10254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 439,
        column: 29,
        span: 10254..10258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
        column: 30,
        span: 10258..10259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c4BBc6BBB\"",
        ),
        line: 439,
        column: 41,
        span: 10259..10270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
        column: 42,
        span: 10270..10271,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\27Lua\"",
        ),
        line: 440,
        column: 13,
        span: 10276..10284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
        column: 14,
        span: 10284..10285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x54",
            ),
        ),
        line: 441,
        column: 9,
        span: 10335..10340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
        column: 10,
        span: 10340..10341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
        column: 6,
        span: 10404..10406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 442,
        column: 7,
        span: 10406..10407,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x19\\x93\\r\\n\\x1a\\n\"",
        ),
        line: 443,
        column: 25,
        span: 10462..10482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
        column: 26,
        span: 10482..10483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
        column: 6,
        span: 10516..10518,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 7,
        span: 10518..10519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 445,
        column: 11,
        span: 10587..10593,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 445,
        column: 12,
        span: 10593..10594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 445,
        column: 20,
        span: 10594..10602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 21,
        span: 10602..10603,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"j\"",
        ),
        line: 445,
        column: 24,
        span: 10603..10606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 25,
        span: 10606..10607,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
        column: 26,
        span: 10607..10608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 446,
        column: 11,
        span: 10657..10663,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 446,
        column: 12,
        span: 10663..10664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 446,
        column: 20,
        span: 10664..10672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 21,
        span: 10672..10673,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 446,
        column: 24,
        span: 10673..10676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 25,
        span: 10676..10677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 447,
        column: 4,
        span: 10724..10725,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 448,
        column: 8,
        span: 10728..10733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 448,
        column: 10,
        span: 10734..10735,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 448,
        column: 12,
        span: 10736..10737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 448,
        column: 19,
        span: 10738..10744,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 448,
        column: 20,
        span: 10744..10745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 448,
        column: 24,
        span: 10745..10749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 25,
        span: 10749..10750,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 448,
        column: 33,
        span: 10750..10758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 35,
        span: 10759..10760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 36,
        span: 10760..10761,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 449,
        column: 10,
        span: 10766..10771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 449,
        column: 12,
        span: 10772..10773,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
        column: 14,
        span: 10774..10775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 449,
        column: 16,
        span: 10775..10777,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 449,
        column: 17,
        span: 10777..10778,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 449,
        column: 23,
        span: 10779..10784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 449,
        column: 25,
        span: 10785..10786,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
        column: 27,
        span: 10787..10788,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 449,
        column: 29,
        span: 10788..10790,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 449,
        column: 30,
        span: 10790..10791,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 450,
        column: 10,
        span: 10796..10801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 450,
        column: 12,
        span: 10802..10803,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 450,
        column: 14,
        span: 10804..10805,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 450,
        column: 23,
        span: 10806..10814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 25,
        span: 10815..10816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 26,
        span: 10816..10817,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 450,
        column: 33,
        span: 10818..10824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 450,
        column: 35,
        span: 10825..10826,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 450,
        column: 37,
        span: 10827..10828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 450,
        column: 39,
        span: 10829..10830,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 450,
        column: 41,
        span: 10831..10832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 450,
        column: 46,
        span: 10833..10837,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 450,
        column: 47,
        span: 10837..10838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 450,
        column: 48,
        span: 10838..10839,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 450,
        column: 49,
        span: 10839..10840,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 450,
        column: 53,
        span: 10841..10844,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 451,
        column: 10,
        span: 10864..10869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 451,
        column: 13,
        span: 10870..10872,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 451,
        column: 15,
        span: 10873..10874,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a constant\"",
        ),
        line: 451,
        column: 28,
        span: 10875..10887,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 452,
        column: 10,
        span: 10892..10897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2",
        ),
        line: 452,
        column: 13,
        span: 10898..10900,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 452,
        column: 15,
        span: 10901..10902,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"another constant\"",
        ),
        line: 452,
        column: 34,
        span: 10903..10921,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 453,
        column: 11,
        span: 10926..10932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 453,
        column: 13,
        span: 10933..10934,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 453,
        column: 15,
        span: 10935..10936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 453,
        column: 17,
        span: 10937..10938,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 453,
        column: 19,
        span: 10939..10940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
        column: 0,
        span: 10940..10942,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 454,
        column: 6,
        span: 10945..10948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 7,
        span: 10948..10949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
        column: 9,
        span: 10953..10959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 10,
        span: 10959..10960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
        column: 16,
        span: 10960..10966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 17,
        span: 10966..10967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 456,
        column: 21,
        span: 10967..10971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 22,
        span: 10971..10972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 456,
        column: 23,
        span: 10972..10973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 24,
        span: 10973..10974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 25,
        span: 10974..10975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 26,
        span: 10975..10976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 27,
        span: 10976..10977,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 456,
        column: 30,
        span: 10978..10980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 456,
        column: 33,
        span: 10980..10983,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 34,
        span: 10983..10984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 459,
        column: 9,
        span: 11006..11012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 10,
        span: 11012..11013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 459,
        column: 16,
        span: 11013..11019,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 459,
        column: 17,
        span: 11019..11020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 459,
        column: 20,
        span: 11020..11023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 21,
        span: 11023..11024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 459,
        column: 22,
        span: 11024..11025,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
        column: 23,
        span: 11025..11026,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 459,
        column: 25,
        span: 11026..11028,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
        column: 26,
        span: 11028..11029,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 459,
        column: 28,
        span: 11030..11031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        line: 459,
        column: 34,
        span: 11031..11037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 35,
        span: 11037..11038,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 459,
        column: 38,
        span: 11039..11041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        line: 459,
        column: 45,
        span: 11042..11048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 46,
        span: 11048..11049,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 461,
        column: 8,
        span: 11085..11090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ci",
        ),
        line: 461,
        column: 11,
        span: 11091..11093,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
        column: 12,
        span: 11093..11094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cn",
        ),
        line: 461,
        column: 15,
        span: 11095..11097,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 461,
        column: 17,
        span: 11098..11099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 461,
        column: 24,
        span: 11100..11106,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 461,
        column: 25,
        span: 11106..11107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 461,
        column: 31,
        span: 11107..11113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 32,
        span: 11113..11114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"jn\"",
        ),
        line: 461,
        column: 36,
        span: 11114..11118,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
        column: 37,
        span: 11118..11119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 461,
        column: 39,
        span: 11120..11121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
        column: 40,
        span: 11121..11122,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 461,
        column: 42,
        span: 11123..11124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        line: 461,
        column: 48,
        span: 11124..11130,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 461,
        column: 50,
        span: 11131..11132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 461,
        column: 52,
        span: 11132..11134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 53,
        span: 11134..11135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 462,
        column: 9,
        span: 11138..11144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 10,
        span: 11144..11145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ci",
        ),
        line: 462,
        column: 12,
        span: 11145..11147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 462,
        column: 15,
        span: 11148..11150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x5678",
            ),
        ),
        line: 462,
        column: 22,
        span: 11150..11157,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 462,
        column: 26,
        span: 11158..11161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cn",
        ),
        line: 462,
        column: 29,
        span: 11162..11164,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 462,
        column: 32,
        span: 11165..11167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "370",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 462,
        column: 38,
        span: 11167..11173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 39,
        span: 11173..11174,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 465,
        column: 6,
        span: 11200..11203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 465,
        column: 8,
        span: 11204..11205,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 465,
        column: 10,
        span: 11206..11207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 465,
        column: 12,
        span: 11207..11209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 465,
        column: 13,
        span: 11209..11210,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 465,
        column: 15,
        span: 11211..11212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        line: 465,
        column: 21,
        span: 11212..11218,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 465,
        column: 0,
        span: 11219..11221,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 466,
        column: 10,
        span: 11226..11231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 466,
        column: 12,
        span: 11232..11233,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 466,
        column: 14,
        span: 11234..11235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 466,
        column: 21,
        span: 11236..11242,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 466,
        column: 22,
        span: 11242..11243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 466,
        column: 25,
        span: 11243..11246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 26,
        span: 11246..11247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 466,
        column: 27,
        span: 11247..11248,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 466,
        column: 28,
        span: 11248..11249,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 466,
        column: 30,
        span: 11249..11251,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 466,
        column: 31,
        span: 11251..11252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 466,
        column: 33,
        span: 11253..11254,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 466,
        column: 35,
        span: 11255..11256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 466,
        column: 37,
        span: 11256..11258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 38,
        span: 11258..11259,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 466,
        column: 41,
        span: 11260..11262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 467,
        column: 21,
        span: 11277..11283,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 467,
        column: 22,
        span: 11283..11284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 467,
        column: 26,
        span: 11284..11288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 27,
        span: 11288..11289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 467,
        column: 33,
        span: 11289..11295,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 467,
        column: 34,
        span: 11295..11296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 467,
        column: 38,
        span: 11296..11300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 39,
        span: 11300..11301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 467,
        column: 45,
        span: 11301..11307,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 467,
        column: 46,
        span: 11307..11308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 467,
        column: 49,
        span: 11308..11311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 50,
        span: 11311..11312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 467,
        column: 51,
        span: 11312..11313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 467,
        column: 52,
        span: 11313..11314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 467,
        column: 54,
        span: 11315..11316,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 467,
        column: 55,
        span: 11316..11317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 467,
        column: 57,
        span: 11318..11319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 58,
        span: 11319..11320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 59,
        span: 11320..11321,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 467,
        column: 61,
        span: 11322..11323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 467,
        column: 63,
        span: 11323..11325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 64,
        span: 11325..11326,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 467,
        column: 67,
        span: 11327..11329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 468,
        column: 21,
        span: 11344..11350,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 468,
        column: 22,
        span: 11350..11351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 468,
        column: 25,
        span: 11351..11354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
        column: 26,
        span: 11354..11355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 468,
        column: 27,
        span: 11355..11356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
        column: 28,
        span: 11356..11357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 468,
        column: 30,
        span: 11358..11359,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 468,
        column: 32,
        span: 11360..11361,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
        column: 34,
        span: 11361..11363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
        column: 35,
        span: 11363..11364,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 468,
        column: 37,
        span: 11365..11366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
        column: 38,
        span: 11365..11367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
        column: 39,
        span: 11367..11368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 469,
        column: 11,
        span: 11373..11379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 12,
        span: 11379..11380,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 469,
        column: 13,
        span: 11380..11381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 469,
        column: 14,
        span: 11381..11382,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
        column: 17,
        span: 11383..11385,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 469,
        column: 19,
        span: 11386..11387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 469,
        column: 20,
        span: 11387..11388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 21,
        span: 11388..11389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 470,
        column: 11,
        span: 11394..11400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 12,
        span: 11400..11401,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 470,
        column: 15,
        span: 11401..11404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 470,
        column: 20,
        span: 11405..11409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 21,
        span: 11409..11410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 470,
        column: 22,
        span: 11410..11411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 23,
        span: 11411..11412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 24,
        span: 11412..11413,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 471,
        column: 0,
        span: 11416..11419,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 474,
        column: 6,
        span: 11460..11463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 474,
        column: 8,
        span: 11464..11465,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 474,
        column: 10,
        span: 11466..11467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 12,
        span: 11467..11469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 13,
        span: 11469..11470,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 474,
        column: 15,
        span: 11471..11472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 474,
        column: 16,
        span: 11472..11473,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 474,
        column: 18,
        span: 11474..11475,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 20,
        span: 11475..11477,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 474,
        column: 0,
        span: 11478..11480,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 475,
        column: 10,
        span: 11485..11490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 475,
        column: 13,
        span: 11491..11493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 475,
        column: 14,
        span: 11493..11494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 475,
        column: 18,
        span: 11495..11498,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 475,
        column: 20,
        span: 11499..11500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 475,
        column: 25,
        span: 11501..11505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
        column: 26,
        span: 11505..11506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 475,
        column: 32,
        span: 11506..11512,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 475,
        column: 33,
        span: 11512..11513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 475,
        column: 36,
        span: 11513..11516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
        column: 37,
        span: 11516..11517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 475,
        column: 38,
        span: 11517..11518,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 475,
        column: 39,
        span: 11518..11519,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 475,
        column: 41,
        span: 11519..11521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 475,
        column: 42,
        span: 11521..11522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 475,
        column: 44,
        span: 11523..11524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
        column: 45,
        span: 11524..11525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
        column: 46,
        span: 11525..11526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 476,
        column: 11,
        span: 11531..11537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
        column: 12,
        span: 11537..11538,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 476,
        column: 15,
        span: 11538..11541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 476,
        column: 18,
        span: 11542..11544,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 476,
        column: 22,
        span: 11545..11548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 476,
        column: 29,
        span: 11549..11555,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 476,
        column: 30,
        span: 11555..11556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 476,
        column: 34,
        span: 11556..11560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
        column: 35,
        span: 11560..11561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 476,
        column: 38,
        span: 11561..11564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 476,
        column: 39,
        span: 11564..11565,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"truncated\"",
        ),
        line: 476,
        column: 51,
        span: 11566..11577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
        column: 52,
        span: 11577..11578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
        column: 53,
        span: 11578..11579,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 477,
        column: 0,
        span: 11582..11585,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 478,
        column: 0,
        span: 11586..11589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 480,
        column: 6,
        span: 11591..11596,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 7,
        span: 11596..11597,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 480,
        column: 11,
        span: 11597..11601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 12,
        span: 11601..11602,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 481,
        column: 7,
        span: 11603..11609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 481,
        column: 0,
        span: 11610..11614,
    },
]
