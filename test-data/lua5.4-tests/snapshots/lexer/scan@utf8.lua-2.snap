---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/utf8.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 67..72,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing UTF-8 library\"",
        ),
        position: Position {
            line: 4,
            column: 30,
            span: 73..96,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 98..103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 6,
            column: 11,
            span: 104..108,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 6,
            column: 13,
            span: 109..110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 6,
            column: 21,
            span: 111..118,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'utf8'",
        ),
        position: Position {
            line: 6,
            column: 27,
            span: 118..124,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 9,
            column: 6,
            span: 127..132,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 9,
            column: 15,
            span: 133..141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 9,
            column: 26,
            span: 142..152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 28,
            span: 153..154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 9,
            column: 31,
            span: 154..157,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 9,
            column: 32,
            span: 157..158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 9,
            column: 34,
            span: 159..160,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 9,
            column: 35,
            span: 160..161,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 9,
            column: 39,
            span: 162..165,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 40,
            span: 165..166,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 10,
            column: 8,
            span: 169..174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 10,
            column: 10,
            span: 175..176,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 10,
            column: 11,
            span: 176..177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 10,
            column: 15,
            span: 178..181,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 10,
            column: 17,
            span: 182..183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 10,
            column: 23,
            span: 184..189,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 24,
            span: 189..190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 10,
            column: 25,
            span: 190..191,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 10,
            column: 26,
            span: 191..192,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 10,
            column: 30,
            span: 193..196,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 31,
            span: 196..197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 11,
            column: 9,
            span: 200..206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 10,
            span: 206..207,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 11,
            column: 13,
            span: 207..210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 11,
            column: 15,
            span: 211..212,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 11,
            column: 19,
            span: 213..216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 11,
            column: 26,
            span: 217..223,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 11,
            column: 27,
            span: 223..224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 11,
            column: 31,
            span: 224..228,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 32,
            span: 228..229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 11,
            column: 35,
            span: 229..232,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 11,
            column: 36,
            span: 232..233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 11,
            column: 40,
            span: 234..237,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 41,
            span: 237..238,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 42,
            span: 238..239,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 12,
            column: 0,
            span: 240..243,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 15,
            column: 6,
            span: 246..251,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 15,
            column: 15,
            span: 252..260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 15,
            column: 19,
            span: 261..264,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 21,
            span: 265..266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 15,
            column: 22,
            span: 266..267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 23,
            span: 267..268,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 16,
            column: 9,
            span: 271..277,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 16,
            column: 11,
            span: 278..279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 16,
            column: 17,
            span: 279..285,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 16,
            column: 18,
            span: 285..286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 16,
            column: 22,
            span: 286..290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 23,
            span: 290..291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 16,
            column: 24,
            span: 291..292,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 16,
            column: 25,
            span: 292..293,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\\x80-\\xBF]\"",
        ),
        position: Position {
            line: 16,
            column: 39,
            span: 294..307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 16,
            column: 40,
            span: 307..308,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 16,
            column: 43,
            span: 309..311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 44,
            span: 311..312,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 17,
            column: 0,
            span: 313..316,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 20,
            column: 6,
            span: 319..324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "justone",
        ),
        position: Position {
            line: 20,
            column: 14,
            span: 325..332,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 20,
            column: 16,
            span: 333..334,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^\"",
        ),
        position: Position {
            line: 20,
            column: 20,
            span: 335..338,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 20,
            column: 23,
            span: 339..341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 20,
            column: 28,
            span: 342..346,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 20,
            column: 29,
            span: 346..347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "charpattern",
        ),
        position: Position {
            line: 20,
            column: 40,
            span: 347..358,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 20,
            column: 43,
            span: 359..361,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$\"",
        ),
        position: Position {
            line: 20,
            column: 47,
            span: 362..365,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 23,
            column: 6,
            span: 407..412,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 413..421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 23,
            column: 27,
            span: 422..433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 29,
            span: 434..435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 23,
            column: 30,
            span: 435..436,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 31,
            span: 436..437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 23,
            column: 33,
            span: 438..439,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 34,
            span: 439..440,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 25,
            column: 8,
            span: 496..501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        position: Position {
            line: 25,
            column: 11,
            span: 502..504,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 25,
            column: 13,
            span: 505..506,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 25,
            column: 15,
            span: 507..508,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return '\"",
        ),
        position: Position {
            line: 25,
            column: 25,
            span: 508..518,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 25,
            column: 26,
            span: 518..519,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 26,
            column: 6,
            span: 522..525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 26,
            column: 8,
            span: 526..527,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 26,
            column: 10,
            span: 528..529,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 12,
            span: 529..531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 26,
            column: 13,
            span: 531..532,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 26,
            column: 15,
            span: 533..534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 26,
            column: 16,
            span: 534..535,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 26,
            column: 19,
            span: 536..538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        position: Position {
            line: 26,
            column: 22,
            span: 539..541,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 26,
            column: 23,
            span: 541..542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 26,
            column: 24,
            span: 542..543,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 26,
            column: 26,
            span: 544..545,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 28,
            span: 545..547,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 26,
            column: 29,
            span: 547..548,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 26,
            column: 31,
            span: 549..550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 26,
            column: 38,
            span: 551..557,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 26,
            column: 39,
            span: 557..558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 26,
            column: 45,
            span: 558..564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 46,
            span: 564..565,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\\\u{%x}\"",
        ),
        position: Position {
            line: 26,
            column: 55,
            span: 565..574,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 26,
            column: 56,
            span: 574..575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 26,
            column: 58,
            span: 576..577,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 26,
            column: 59,
            span: 577..578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 26,
            column: 60,
            span: 578..579,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 26,
            column: 61,
            span: 579..580,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 62,
            span: 580..581,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 26,
            column: 0,
            span: 582..585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        position: Position {
            line: 27,
            column: 5,
            span: 588..590,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 27,
            column: 6,
            span: 590..591,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 27,
            column: 7,
            span: 591..592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 27,
            column: 8,
            span: 592..593,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 27,
            column: 10,
            span: 594..595,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 27,
            column: 12,
            span: 595..597,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 27,
            column: 13,
            span: 597..598,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 27,
            column: 15,
            span: 599..600,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        position: Position {
            line: 27,
            column: 19,
            span: 601..604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        position: Position {
            line: 28,
            column: 5,
            span: 607..609,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 28,
            column: 7,
            span: 610..611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 28,
            column: 13,
            span: 612..617,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 617..618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 28,
            column: 20,
            span: 618..624,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 21,
            span: 624..625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        position: Position {
            line: 28,
            column: 23,
            span: 625..627,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 24,
            span: 627..628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 30,
            column: 9,
            span: 671..677,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 10,
            span: 677..678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 30,
            column: 16,
            span: 678..684,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 17,
            span: 684..685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 30,
            column: 21,
            span: 685..689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 22,
            span: 689..690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        position: Position {
            line: 30,
            column: 24,
            span: 690..692,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 25,
            span: 692..693,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 26,
            span: 693..694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 27,
            span: 694..695,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 28,
            span: 695..696,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 31,
            span: 697..699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 30,
            column: 33,
            span: 700..701,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 34,
            span: 701..702,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 31,
            column: 0,
            span: 703..706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 7,
            span: 708..714,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 8,
            span: 714..715,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 33,
            column: 11,
            span: 715..718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 33,
            column: 16,
            span: 719..723,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 17,
            span: 723..724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 33,
            column: 23,
            span: 724..730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 24,
            span: 730..731,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 33,
            column: 29,
            span: 731..736,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 30,
            span: 736..737,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 32,
            span: 737..739,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 33,
            span: 739..740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 34,
            span: 740..741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 34,
            column: 7,
            span: 742..748,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 8,
            span: 748..749,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 34,
            column: 11,
            span: 749..752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 34,
            column: 16,
            span: 753..757,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 34,
            column: 17,
            span: 757..758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 34,
            column: 23,
            span: 758..764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 24,
            span: 764..765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 34,
            column: 29,
            span: 765..770,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 34,
            column: 30,
            span: 770..771,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 34,
            column: 32,
            span: 772..773,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 33,
            span: 772..774,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 34,
            span: 774..775,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 35,
            span: 775..776,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 38,
            column: 6,
            span: 883..888,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 38,
            column: 15,
            span: 889..897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 38,
            column: 21,
            span: 898..903,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 23,
            span: 904..905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 38,
            column: 24,
            span: 905..906,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 25,
            span: 906..907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 38,
            column: 27,
            span: 908..909,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 28,
            span: 909..910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 38,
            column: 38,
            span: 911..920,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 39,
            span: 920..921,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 39,
            column: 8,
            span: 924..929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 39,
            column: 10,
            span: 930..931,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 39,
            column: 12,
            span: 932..933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 39,
            column: 17,
            span: 934..938,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 39,
            column: 18,
            span: 938..939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 39,
            column: 21,
            span: 939..942,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 22,
            span: 942..943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 39,
            column: 23,
            span: 943..944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 24,
            span: 944..945,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 39,
            column: 26,
            span: 945..947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 27,
            span: 947..948,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 39,
            column: 29,
            span: 949..950,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 39,
            column: 30,
            span: 949..951,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 31,
            span: 951..952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 39,
            column: 41,
            span: 953..962,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 42,
            span: 962..963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 40,
            column: 9,
            span: 966..972,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 10,
            span: 972..973,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 40,
            column: 11,
            span: 973..974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 974..975,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 40,
            column: 15,
            span: 976..978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 40,
            column: 17,
            span: 979..980,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 40,
            column: 21,
            span: 981..984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 40,
            column: 25,
            span: 985..988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 26,
            span: 988..989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 40,
            column: 27,
            span: 989..990,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 28,
            span: 990..991,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 40,
            column: 31,
            span: 992..994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 40,
            column: 33,
            span: 995..996,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 34,
            span: 996..997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 9,
            span: 1000..1006,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 10,
            span: 1006..1007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 41,
            column: 14,
            span: 1007..1011,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 15,
            span: 1011..1012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 41,
            column: 19,
            span: 1012..1016,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 20,
            span: 1016..1017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 41,
            column: 25,
            span: 1017..1022,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 26,
            span: 1022..1023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 41,
            column: 32,
            span: 1023..1029,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 33,
            span: 1029..1030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 41,
            column: 34,
            span: 1030..1031,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 35,
            span: 1031..1032,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 36,
            span: 1032..1033,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 39,
            span: 1034..1036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 41,
            column: 41,
            span: 1037..1038,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 42,
            span: 1038..1039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 43,
            column: 9,
            span: 1075..1081,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 10,
            span: 1081..1082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 43,
            column: 14,
            span: 1082..1086,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 15,
            span: 1086..1087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 43,
            column: 21,
            span: 1087..1093,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 22,
            span: 1093..1094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 43,
            column: 23,
            span: 1094..1095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 24,
            span: 1095..1096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 26,
            span: 1096..1098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 27,
            span: 1098..1099,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 43,
            column: 30,
            span: 1100..1102,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 32,
            span: 1102..1104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 33,
            span: 1104..1105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 45,
            column: 14,
            span: 1109..1120,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 15,
            span: 1120..1121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 45,
            column: 16,
            span: 1121..1122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 17,
            span: 1122..1123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 45,
            column: 19,
            span: 1124..1125,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 20,
            span: 1125..1126,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 48,
            column: 8,
            span: 1180..1185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 48,
            column: 11,
            span: 1186..1188,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 13,
            span: 1189..1190,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 48,
            column: 15,
            span: 1191..1192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 48,
            column: 19,
            span: 1192..1196,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 48,
            column: 20,
            span: 1196..1197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 48,
            column: 29,
            span: 1197..1206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 30,
            span: 1206..1207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 48,
            column: 31,
            span: 1207..1208,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 32,
            span: 1208..1209,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 34,
            span: 1209..1211,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 35,
            span: 1211..1212,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 48,
            column: 37,
            span: 1213..1214,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 38,
            span: 1213..1215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 39,
            span: 1215..1216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 48,
            column: 49,
            span: 1217..1226,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 50,
            span: 1226..1227,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 48,
            column: 51,
            span: 1227..1228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 49,
            column: 9,
            span: 1231..1237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 10,
            span: 1237..1238,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 49,
            column: 11,
            span: 1238..1239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 49,
            column: 12,
            span: 1239..1240,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 49,
            column: 15,
            span: 1241..1243,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 49,
            column: 17,
            span: 1244..1245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 49,
            column: 19,
            span: 1245..1247,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 20,
            span: 1247..1248,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 50,
            column: 6,
            span: 1251..1254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1255..1256,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 50,
            column: 10,
            span: 1257..1258,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 12,
            span: 1258..1260,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 13,
            span: 1260..1261,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 50,
            column: 15,
            span: 1262..1263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 50,
            column: 16,
            span: 1263..1264,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 50,
            column: 19,
            span: 1265..1267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 50,
            column: 26,
            span: 1268..1274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 27,
            span: 1274..1275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 50,
            column: 28,
            span: 1275..1276,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 50,
            column: 29,
            span: 1276..1277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 50,
            column: 30,
            span: 1277..1278,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 50,
            column: 31,
            span: 1278..1279,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 34,
            span: 1280..1282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 50,
            column: 37,
            span: 1283..1285,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 50,
            column: 38,
            span: 1285..1286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 50,
            column: 39,
            span: 1286..1287,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 50,
            column: 40,
            span: 1287..1288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 41,
            span: 1288..1289,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 50,
            column: 45,
            span: 1290..1293,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 52,
            column: 6,
            span: 1323..1326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 52,
            column: 8,
            span: 1327..1328,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 52,
            column: 10,
            span: 1329..1330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 12,
            span: 1330..1332,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 13,
            span: 1332..1333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 52,
            column: 15,
            span: 1334..1335,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 52,
            column: 18,
            span: 1336..1338,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 53,
            column: 10,
            span: 1367..1372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 53,
            column: 13,
            span: 1373..1375,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 53,
            column: 15,
            span: 1376..1377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 53,
            column: 20,
            span: 1378..1382,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 53,
            column: 21,
            span: 1382..1383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 53,
            column: 27,
            span: 1383..1389,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 28,
            span: 1389..1390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 53,
            column: 29,
            span: 1390..1391,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 30,
            span: 1391..1392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 53,
            column: 32,
            span: 1393..1394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 33,
            span: 1394..1395,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 54,
            column: 10,
            span: 1432..1437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        position: Position {
            line: 54,
            column: 14,
            span: 1438..1441,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 54,
            column: 16,
            span: 1442..1443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 54,
            column: 21,
            span: 1444..1448,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 54,
            column: 22,
            span: 1448..1449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 54,
            column: 28,
            span: 1449..1455,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 29,
            span: 1455..1456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 54,
            column: 30,
            span: 1456..1457,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 31,
            span: 1457..1458,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 54,
            column: 33,
            span: 1458..1460,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 34,
            span: 1460..1461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 54,
            column: 37,
            span: 1462..1464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 38,
            span: 1464..1465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 11,
            span: 1497..1503,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 12,
            span: 1503..1504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 55,
            column: 18,
            span: 1504..1510,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 55,
            column: 19,
            span: 1510..1511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 55,
            column: 23,
            span: 1511..1515,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 24,
            span: 1515..1516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 55,
            column: 30,
            span: 1516..1522,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 55,
            column: 31,
            span: 1522..1523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 55,
            column: 34,
            span: 1523..1526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 35,
            span: 1526..1527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 55,
            column: 36,
            span: 1527..1528,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 37,
            span: 1528..1529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 55,
            column: 40,
            span: 1530..1532,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 41,
            span: 1532..1533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        position: Position {
            line: 55,
            column: 45,
            span: 1534..1537,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 55,
            column: 47,
            span: 1538..1539,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 49,
            span: 1539..1541,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 50,
            span: 1541..1542,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 51,
            span: 1542..1543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "justone",
        ),
        position: Position {
            line: 55,
            column: 59,
            span: 1544..1551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 60,
            span: 1551..1552,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 61,
            span: 1552..1553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 56,
            column: 11,
            span: 1558..1564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 12,
            span: 1564..1565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 56,
            column: 16,
            span: 1565..1569,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 56,
            column: 17,
            span: 1569..1570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 56,
            column: 23,
            span: 1570..1576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 24,
            span: 1576..1577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 56,
            column: 25,
            span: 1577..1578,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 26,
            span: 1578..1579,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 56,
            column: 28,
            span: 1580..1581,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 56,
            column: 29,
            span: 1580..1582,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 30,
            span: 1582..1583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        position: Position {
            line: 56,
            column: 34,
            span: 1584..1587,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 35,
            span: 1587..1588,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 56,
            column: 38,
            span: 1589..1591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 56,
            column: 41,
            span: 1592..1594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 42,
            span: 1594..1595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 57,
            column: 11,
            span: 1600..1606,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 12,
            span: 1606..1607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 57,
            column: 16,
            span: 1607..1611,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 57,
            column: 17,
            span: 1611..1612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 57,
            column: 23,
            span: 1612..1618,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 24,
            span: 1618..1619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 57,
            column: 25,
            span: 1619..1620,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 26,
            span: 1620..1621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 57,
            column: 28,
            span: 1622..1623,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 57,
            column: 30,
            span: 1624..1625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 57,
            column: 32,
            span: 1626..1627,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 57,
            column: 34,
            span: 1628..1629,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 57,
            column: 36,
            span: 1629..1631,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 37,
            span: 1631..1632,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 57,
            column: 40,
            span: 1633..1635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 57,
            column: 43,
            span: 1636..1638,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 44,
            span: 1638..1639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 58,
            column: 11,
            span: 1644..1650,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 12,
            span: 1650..1651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        position: Position {
            line: 58,
            column: 15,
            span: 1651..1654,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 58,
            column: 17,
            span: 1655..1656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 58,
            column: 20,
            span: 1657..1659,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 58,
            column: 23,
            span: 1660..1662,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 58,
            column: 25,
            span: 1663..1664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 58,
            column: 29,
            span: 1664..1668,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 58,
            column: 30,
            span: 1668..1669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 58,
            column: 34,
            span: 1669..1673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 35,
            span: 1673..1674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 58,
            column: 39,
            span: 1674..1678,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 58,
            column: 40,
            span: 1678..1679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 58,
            column: 49,
            span: 1679..1688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 50,
            span: 1688..1689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 58,
            column: 51,
            span: 1689..1690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 52,
            span: 1690..1691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 58,
            column: 55,
            span: 1692..1694,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 56,
            span: 1694..1695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 58,
            column: 59,
            span: 1696..1698,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 60,
            span: 1698..1699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 58,
            column: 70,
            span: 1700..1709,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 71,
            span: 1709..1710,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 72,
            span: 1710..1711,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 73,
            span: 1711..1712,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1717..1720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 59,
            column: 10,
            span: 1721..1722,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 59,
            column: 12,
            span: 1723..1724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 59,
            column: 15,
            span: 1725..1727,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 59,
            column: 16,
            span: 1727..1728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        position: Position {
            line: 59,
            column: 20,
            span: 1729..1732,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 59,
            column: 22,
            span: 1733..1734,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 59,
            column: 24,
            span: 1734..1736,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 59,
            column: 0,
            span: 1737..1739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 60,
            column: 13,
            span: 1746..1752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 14,
            span: 1752..1753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 60,
            column: 18,
            span: 1753..1757,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 60,
            column: 19,
            span: 1757..1758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 60,
            column: 25,
            span: 1758..1764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 26,
            span: 1764..1765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 60,
            column: 27,
            span: 1765..1766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 28,
            span: 1766..1767,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 30,
            span: 1767..1769,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 31,
            span: 1769..1770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 60,
            column: 33,
            span: 1771..1772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 34,
            span: 1772..1773,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 60,
            column: 37,
            span: 1774..1776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 60,
            column: 40,
            span: 1777..1779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 41,
            span: 1779..1780,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 61,
            column: 0,
            span: 1785..1788,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 1793..1796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 1797..1798,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 62,
            column: 12,
            span: 1799..1800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 62,
            column: 15,
            span: 1801..1803,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 62,
            column: 17,
            span: 1804..1805,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 19,
            span: 1805..1807,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 20,
            span: 1807..1808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        position: Position {
            line: 62,
            column: 24,
            span: 1809..1812,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 62,
            column: 26,
            span: 1813..1814,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 28,
            span: 1814..1816,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 62,
            column: 0,
            span: 1817..1819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 13,
            span: 1826..1832,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 14,
            span: 1832..1833,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 63,
            column: 17,
            span: 1833..1836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 63,
            column: 22,
            span: 1837..1841,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 63,
            column: 23,
            span: 1841..1842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 63,
            column: 26,
            span: 1842..1845,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 27,
            span: 1845..1846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 63,
            column: 28,
            span: 1846..1847,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 29,
            span: 1847..1848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 63,
            column: 31,
            span: 1849..1850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 32,
            span: 1850..1851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 33,
            span: 1851..1852,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 64,
            column: 0,
            span: 1857..1860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 1864..1870,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 11,
            span: 1870..1871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 65,
            column: 15,
            span: 1871..1875,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 16,
            span: 1875..1876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 65,
            column: 19,
            span: 1876..1879,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 20,
            span: 1879..1880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 65,
            column: 21,
            span: 1880..1881,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 22,
            span: 1881..1882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 65,
            column: 25,
            span: 1883..1885,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 26,
            span: 1885..1886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 65,
            column: 29,
            span: 1887..1889,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 30,
            span: 1889..1890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 65,
            column: 40,
            span: 1891..1900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 41,
            span: 1900..1901,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 44,
            span: 1902..1904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 46,
            span: 1904..1906,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 47,
            span: 1906..1907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 66,
            column: 10,
            span: 1911..1917,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 11,
            span: 1917..1918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 66,
            column: 15,
            span: 1918..1922,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 66,
            column: 16,
            span: 1922..1923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 66,
            column: 19,
            span: 1923..1926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 20,
            span: 1926..1927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 66,
            column: 21,
            span: 1927..1928,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 22,
            span: 1928..1929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 66,
            column: 25,
            span: 1930..1932,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 26,
            span: 1932..1933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        position: Position {
            line: 66,
            column: 30,
            span: 1934..1937,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 66,
            column: 32,
            span: 1938..1939,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 34,
            span: 1939..1941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 35,
            span: 1941..1942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 66,
            column: 45,
            span: 1943..1952,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 46,
            span: 1952..1953,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 66,
            column: 49,
            span: 1954..1956,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 51,
            span: 1956..1958,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 52,
            span: 1958..1959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 1963..1969,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 11,
            span: 1969..1970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 67,
            column: 15,
            span: 1970..1974,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 67,
            column: 16,
            span: 1974..1975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 67,
            column: 19,
            span: 1975..1978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 20,
            span: 1978..1979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 67,
            column: 21,
            span: 1979..1980,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 22,
            span: 1980..1981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 67,
            column: 25,
            span: 1982..1984,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 26,
            span: 1984..1985,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 67,
            column: 28,
            span: 1986..1987,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 29,
            span: 1986..1988,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 30,
            span: 1988..1989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 67,
            column: 40,
            span: 1990..1999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 41,
            span: 1999..2000,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 67,
            column: 44,
            span: 2001..2003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 67,
            column: 46,
            span: 2004..2005,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 67,
            column: 48,
            span: 2006..2007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 67,
            column: 50,
            span: 2008..2009,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 67,
            column: 52,
            span: 2010..2011,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 54,
            span: 2011..2013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 55,
            span: 2013..2014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 2018..2024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 11,
            span: 2024..2025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 2025..2029,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 2029..2030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 68,
            column: 19,
            span: 2030..2033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 20,
            span: 2033..2034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 2034..2035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 22,
            span: 2035..2036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        position: Position {
            line: 68,
            column: 26,
            span: 2037..2040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 27,
            span: 2040..2041,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 68,
            column: 29,
            span: 2042..2043,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 30,
            span: 2042..2044,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 31,
            span: 2044..2045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 68,
            column: 41,
            span: 2046..2055,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 42,
            span: 2055..2056,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 45,
            span: 2057..2059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 68,
            column: 47,
            span: 2060..2061,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 68,
            column: 49,
            span: 2062..2063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 68,
            column: 51,
            span: 2064..2065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 52,
            span: 2065..2066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 2070..2076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 11,
            span: 2076..2077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 69,
            column: 15,
            span: 2077..2081,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 69,
            column: 16,
            span: 2081..2082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 69,
            column: 19,
            span: 2082..2085,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 20,
            span: 2085..2086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 69,
            column: 21,
            span: 2086..2087,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 22,
            span: 2087..2088,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 24,
            span: 2088..2090,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 25,
            span: 2090..2091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 69,
            column: 28,
            span: 2092..2094,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 29,
            span: 2094..2095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 69,
            column: 39,
            span: 2096..2105,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 40,
            span: 2105..2106,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 69,
            column: 43,
            span: 2107..2109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 69,
            column: 45,
            span: 2110..2111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 46,
            span: 2111..2112,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 70,
            column: 0,
            span: 2115..2118,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 72,
            column: 8,
            span: 2122..2127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 72,
            column: 10,
            span: 2128..2129,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 72,
            column: 12,
            span: 2130..2131,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 72,
            column: 0,
            span: 2131..2133,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 73,
            column: 6,
            span: 2136..2139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 73,
            column: 8,
            span: 2140..2141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 9,
            span: 2141..2142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 73,
            column: 11,
            span: 2143..2144,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 73,
            column: 14,
            span: 2145..2147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 73,
            column: 19,
            span: 2148..2152,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 20,
            span: 2152..2153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codes",
        ),
        position: Position {
            line: 73,
            column: 25,
            span: 2153..2158,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 26,
            span: 2158..2159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 73,
            column: 27,
            span: 2159..2160,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 28,
            span: 2160..2161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 73,
            column: 38,
            span: 2162..2171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 39,
            span: 2171..2172,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 73,
            column: 0,
            span: 2173..2175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 74,
            column: 6,
            span: 2180..2181,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 2182..2183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 2184..2185,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 2186..2187,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 2187..2189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 75,
            column: 11,
            span: 2194..2200,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 12,
            span: 2200..2201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 75,
            column: 13,
            span: 2201..2202,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 75,
            column: 16,
            span: 2203..2205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 75,
            column: 18,
            span: 2206..2207,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 75,
            column: 19,
            span: 2207..2208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 75,
            column: 20,
            span: 2208..2209,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 75,
            column: 21,
            span: 2209..2210,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 75,
            column: 25,
            span: 2211..2214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 75,
            column: 27,
            span: 2215..2216,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 75,
            column: 30,
            span: 2217..2219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 75,
            column: 35,
            span: 2220..2224,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 75,
            column: 36,
            span: 2224..2225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 75,
            column: 42,
            span: 2225..2231,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 43,
            span: 2231..2232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 75,
            column: 44,
            span: 2232..2233,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 45,
            span: 2233..2234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 75,
            column: 47,
            span: 2235..2236,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 48,
            span: 2236..2237,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 49,
            span: 2237..2238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 11,
            span: 2243..2249,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 12,
            span: 2249..2250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 76,
            column: 16,
            span: 2250..2254,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 17,
            span: 2254..2255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 76,
            column: 26,
            span: 2255..2264,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 27,
            span: 2264..2265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 76,
            column: 28,
            span: 2265..2266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 29,
            span: 2266..2267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 76,
            column: 31,
            span: 2268..2269,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 32,
            span: 2269..2270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 76,
            column: 34,
            span: 2271..2272,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 35,
            span: 2272..2273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nonstrict",
        ),
        position: Position {
            line: 76,
            column: 45,
            span: 2274..2283,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 46,
            span: 2283..2284,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 49,
            span: 2285..2287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 76,
            column: 51,
            span: 2288..2289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 52,
            span: 2289..2290,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 77,
            column: 0,
            span: 2293..2296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 78,
            column: 9,
            span: 2299..2305,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 10,
            span: 2305..2306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 78,
            column: 11,
            span: 2306..2307,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 78,
            column: 14,
            span: 2308..2310,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 78,
            column: 16,
            span: 2311..2312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 78,
            column: 17,
            span: 2312..2313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 18,
            span: 2313..2314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 80,
            column: 4,
            span: 2318..2319,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 6,
            span: 2320..2321,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 0,
            span: 2321..2323,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 81,
            column: 6,
            span: 2326..2329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 81,
            column: 8,
            span: 2330..2331,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 81,
            column: 11,
            span: 2332..2334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 81,
            column: 18,
            span: 2335..2341,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 81,
            column: 19,
            span: 2341..2342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 81,
            column: 25,
            span: 2342..2348,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 26,
            span: 2348..2349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 81,
            column: 27,
            span: 2349..2350,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 28,
            span: 2350..2351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 81,
            column: 33,
            span: 2352..2356,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 81,
            column: 34,
            span: 2356..2357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "charpattern",
        ),
        position: Position {
            line: 81,
            column: 45,
            span: 2357..2368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 46,
            span: 2368..2369,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 81,
            column: 0,
            span: 2370..2372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 82,
            column: 6,
            span: 2377..2378,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 82,
            column: 8,
            span: 2379..2380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 2381..2382,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 82,
            column: 12,
            span: 2383..2384,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 0,
            span: 2384..2386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 83,
            column: 11,
            span: 2391..2397,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 12,
            span: 2397..2398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 83,
            column: 13,
            span: 2398..2399,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 83,
            column: 16,
            span: 2400..2402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 83,
            column: 21,
            span: 2403..2407,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 83,
            column: 22,
            span: 2407..2408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 83,
            column: 26,
            span: 2408..2412,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 27,
            span: 2412..2413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 83,
            column: 28,
            span: 2413..2414,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 83,
            column: 29,
            span: 2414..2415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 83,
            column: 30,
            span: 2415..2416,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 83,
            column: 31,
            span: 2416..2417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 32,
            span: 2417..2418,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 33,
            span: 2418..2419,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 84,
            column: 0,
            span: 2422..2425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 2428..2434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 10,
            span: 2434..2435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 2435..2436,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 85,
            column: 14,
            span: 2437..2439,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 85,
            column: 16,
            span: 2440..2441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 85,
            column: 17,
            span: 2441..2442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 18,
            span: 2442..2443,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 87,
            column: 6,
            span: 2447..2450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 87,
            column: 8,
            span: 2451..2452,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 2453..2454,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 12,
            span: 2454..2456,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 13,
            span: 2456..2457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 87,
            column: 15,
            span: 2458..2459,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 87,
            column: 0,
            span: 2460..2462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 2467..2473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 12,
            span: 2473..2474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 88,
            column: 16,
            span: 2474..2478,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 88,
            column: 17,
            span: 2478..2479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 88,
            column: 23,
            span: 2479..2485,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 24,
            span: 2485..2486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 88,
            column: 25,
            span: 2486..2487,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 26,
            span: 2487..2488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 88,
            column: 28,
            span: 2489..2490,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 29,
            span: 2490..2491,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 88,
            column: 32,
            span: 2492..2494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 88,
            column: 37,
            span: 2495..2499,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 88,
            column: 38,
            span: 2499..2500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 88,
            column: 44,
            span: 2500..2506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 45,
            span: 2506..2507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 88,
            column: 46,
            span: 2507..2508,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 47,
            span: 2508..2509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 88,
            column: 49,
            span: 2510..2511,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 88,
            column: 51,
            span: 2512..2513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 88,
            column: 53,
            span: 2514..2515,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 88,
            column: 55,
            span: 2516..2517,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 57,
            span: 2517..2519,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 58,
            span: 2519..2520,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 88,
            column: 60,
            span: 2521..2522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 88,
            column: 61,
            span: 2522..2523,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 88,
            column: 63,
            span: 2524..2525,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 65,
            span: 2525..2527,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 66,
            span: 2527..2528,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 67,
            span: 2528..2529,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 89,
            column: 0,
            span: 2532..2535,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 91,
            column: 0,
            span: 2537..2540,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 94,
            column: 3,
            span: 2543..2545,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 95,
            column: 8,
            span: 2583..2588,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 95,
            column: 17,
            span: 2589..2597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 95,
            column: 23,
            span: 2598..2603,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 25,
            span: 2604..2605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 95,
            column: 26,
            span: 2605..2606,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 27,
            span: 2606..2607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 95,
            column: 29,
            span: 2608..2609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 30,
            span: 2609..2610,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 96,
            column: 10,
            span: 2615..2620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 96,
            column: 12,
            span: 2621..2622,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 13,
            span: 2622..2623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 96,
            column: 15,
            span: 2624..2625,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 96,
            column: 17,
            span: 2626..2627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 96,
            column: 22,
            span: 2628..2632,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 96,
            column: 23,
            span: 2632..2633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 96,
            column: 26,
            span: 2633..2636,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 27,
            span: 2636..2637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 96,
            column: 28,
            span: 2637..2638,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 29,
            span: 2638..2639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 97,
            column: 11,
            span: 2644..2650,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 12,
            span: 2650..2651,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 97,
            column: 15,
            span: 2651..2654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 97,
            column: 17,
            span: 2655..2656,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 97,
            column: 21,
            span: 2657..2660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 97,
            column: 23,
            span: 2661..2662,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 97,
            column: 26,
            span: 2663..2665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 97,
            column: 28,
            span: 2666..2667,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 29,
            span: 2667..2668,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 98,
            column: 0,
            span: 2671..2674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 99,
            column: 8,
            span: 2677..2682,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 9,
            span: 2682..2683,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\xE3def\"",
        ),
        position: Position {
            line: 99,
            column: 21,
            span: 2683..2695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 22,
            span: 2695..2696,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 24,
            span: 2696..2698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 25,
            span: 2698..2699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 100,
            column: 8,
            span: 2702..2707,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 9,
            span: 2707..2708,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"汉字\\x80\"",
        ),
        position: Position {
            line: 100,
            column: 17,
            span: 2708..2716,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 18,
            span: 2716..2717,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 100,
            column: 20,
            span: 2718..2719,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 21,
            span: 2719..2720,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"汉字\"",
        ),
        position: Position {
            line: 100,
            column: 25,
            span: 2720..2724,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 26,
            span: 2724..2725,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 100,
            column: 28,
            span: 2726..2727,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 30,
            span: 2727..2729,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 31,
            span: 2729..2730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 2733..2738,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 2738..2739,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF4\\x9F\\xBF\"",
        ),
        position: Position {
            line: 101,
            column: 23,
            span: 2739..2753,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 24,
            span: 2753..2754,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 26,
            span: 2754..2756,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 27,
            span: 2756..2757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 2760..2765,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 9,
            span: 2765..2766,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF4\\x9F\\xBF\\xBF\"",
        ),
        position: Position {
            line: 102,
            column: 27,
            span: 2766..2784,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 28,
            span: 2784..2785,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 30,
            span: 2785..2787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 31,
            span: 2787..2788,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 103,
            column: 0,
            span: 2789..2792,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 106,
            column: 0,
            span: 2818..2820,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 107,
            column: 8,
            span: 2823..2828,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 107,
            column: 17,
            span: 2829..2837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errorcodes",
        ),
        position: Position {
            line: 107,
            column: 28,
            span: 2838..2848,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 30,
            span: 2849..2850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 107,
            column: 31,
            span: 2850..2851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 32,
            span: 2851..2852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 108,
            column: 15,
            span: 2857..2867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 16,
            span: 2867..2868,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid UTF%-8 code\"",
        ),
        position: Position {
            line: 108,
            column: 37,
            span: 2868..2889,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 38,
            span: 2889..2890,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 109,
            column: 15,
            span: 2897..2905,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 17,
            span: 2906..2907,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 18,
            span: 2907..2908,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 110,
            column: 12,
            span: 2917..2920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 110,
            column: 14,
            span: 2921..2922,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 110,
            column: 17,
            span: 2923..2925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 110,
            column: 22,
            span: 2926..2930,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 110,
            column: 23,
            span: 2930..2931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codes",
        ),
        position: Position {
            line: 110,
            column: 28,
            span: 2931..2936,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 29,
            span: 2936..2937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 110,
            column: 30,
            span: 2937..2938,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 31,
            span: 2938..2939,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 110,
            column: 34,
            span: 2940..2942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 110,
            column: 41,
            span: 2943..2949,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 42,
            span: 2949..2950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 110,
            column: 43,
            span: 2950..2951,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 44,
            span: 2951..2952,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 110,
            column: 0,
            span: 2953..2956,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 111,
            column: 10,
            span: 2963..2966,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 11,
            span: 2966..2967,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 112,
            column: 0,
            span: 2970..2973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errorcodes",
        ),
        position: Position {
            line: 113,
            column: 13,
            span: 2976..2986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 14,
            span: 2986..2987,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\\xff\"",
        ),
        position: Position {
            line: 113,
            column: 22,
            span: 2987..2995,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 23,
            span: 2995..2996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errorcodes",
        ),
        position: Position {
            line: 114,
            column: 13,
            span: 2999..3009,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 14,
            span: 3009..3010,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{110000}\"",
        ),
        position: Position {
            line: 114,
            column: 26,
            span: 3010..3022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 27,
            span: 3022..3023,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 117,
            column: 8,
            span: 3083..3088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 117,
            column: 10,
            span: 3089..3090,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 117,
            column: 12,
            span: 3091..3092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 117,
            column: 17,
            span: 3093..3097,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 117,
            column: 18,
            span: 3097..3098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codes",
        ),
        position: Position {
            line: 117,
            column: 23,
            span: 3098..3103,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 24,
            span: 3103..3104,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 117,
            column: 26,
            span: 3104..3106,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 27,
            span: 3106..3107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 118,
            column: 9,
            span: 3110..3116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 3116..3117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 118,
            column: 11,
            span: 3117..3118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 12,
            span: 3118..3119,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 3119..3121,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 118,
            column: 15,
            span: 3121..3122,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 118,
            column: 17,
            span: 3122..3124,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 18,
            span: 3124..3125,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 21,
            span: 3126..3128,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 118,
            column: 25,
            span: 3129..3132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 26,
            span: 3132..3133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 119,
            column: 9,
            span: 3136..3142,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 10,
            span: 3142..3143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 119,
            column: 11,
            span: 3143..3144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 12,
            span: 3144..3145,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 119,
            column: 14,
            span: 3145..3147,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 15,
            span: 3147..3148,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 119,
            column: 17,
            span: 3149..3150,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 18,
            span: 3149..3151,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 19,
            span: 3151..3152,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 119,
            column: 22,
            span: 3153..3155,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 119,
            column: 26,
            span: 3156..3159,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 27,
            span: 3159..3160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 120,
            column: 9,
            span: 3163..3169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 10,
            span: 3169..3170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 120,
            column: 11,
            span: 3170..3171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 12,
            span: 3171..3172,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 120,
            column: 14,
            span: 3172..3174,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 120,
            column: 15,
            span: 3174..3175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 120,
            column: 20,
            span: 3176..3180,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 120,
            column: 21,
            span: 3180..3181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        position: Position {
            line: 120,
            column: 31,
            span: 3181..3191,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 32,
            span: 3191..3192,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 120,
            column: 35,
            span: 3193..3195,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 120,
            column: 39,
            span: 3196..3199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 40,
            span: 3199..3200,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 121,
            column: 0,
            span: 3201..3204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 124,
            column: 11,
            span: 3246..3256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 12,
            span: 3256..3257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"position out of bounds\"",
        ),
        position: Position {
            line: 124,
            column: 36,
            span: 3257..3281,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 37,
            span: 3281..3282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 124,
            column: 42,
            span: 3283..3287,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 124,
            column: 43,
            span: 3287..3288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 124,
            column: 49,
            span: 3288..3294,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 50,
            span: 3294..3295,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 124,
            column: 56,
            span: 3296..3301,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 57,
            span: 3301..3302,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 124,
            column: 59,
            span: 3302..3304,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 60,
            span: 3304..3305,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 124,
            column: 62,
            span: 3305..3307,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 63,
            span: 3307..3308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 125,
            column: 11,
            span: 3309..3319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 12,
            span: 3319..3320,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"position out of bounds\"",
        ),
        position: Position {
            line: 125,
            column: 36,
            span: 3320..3344,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 37,
            span: 3344..3345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 125,
            column: 42,
            span: 3346..3350,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 125,
            column: 43,
            span: 3350..3351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 125,
            column: 49,
            span: 3351..3357,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 50,
            span: 3357..3358,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 125,
            column: 56,
            span: 3359..3364,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 57,
            span: 3364..3365,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 125,
            column: 59,
            span: 3365..3367,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 60,
            span: 3367..3368,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 125,
            column: 62,
            span: 3369..3370,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 125,
            column: 63,
            span: 3369..3371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 64,
            span: 3371..3372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 126,
            column: 11,
            span: 3373..3383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 12,
            span: 3383..3384,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"position out of bounds\"",
        ),
        position: Position {
            line: 126,
            column: 36,
            span: 3384..3408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 37,
            span: 3408..3409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 126,
            column: 42,
            span: 3410..3414,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 126,
            column: 43,
            span: 3414..3415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 126,
            column: 49,
            span: 3415..3421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 50,
            span: 3421..3422,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 126,
            column: 53,
            span: 3423..3425,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 54,
            span: 3425..3426,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 56,
            span: 3426..3428,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 57,
            span: 3428..3429,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 59,
            span: 3429..3431,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 60,
            span: 3431..3432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 127,
            column: 11,
            span: 3433..3443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 3443..3444,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"position out of bounds\"",
        ),
        position: Position {
            line: 127,
            column: 36,
            span: 3444..3468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 37,
            span: 3468..3469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 127,
            column: 42,
            span: 3470..3474,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 127,
            column: 43,
            span: 3474..3475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 127,
            column: 49,
            span: 3475..3481,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 50,
            span: 3481..3482,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 127,
            column: 53,
            span: 3483..3485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 54,
            span: 3485..3486,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 56,
            span: 3486..3488,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 57,
            span: 3488..3489,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 127,
            column: 59,
            span: 3490..3491,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 60,
            span: 3490..3492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 61,
            span: 3492..3493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 128,
            column: 11,
            span: 3494..3504,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 12,
            span: 3504..3505,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"continuation byte\"",
        ),
        position: Position {
            line: 128,
            column: 31,
            span: 3505..3524,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 32,
            span: 3524..3525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 128,
            column: 37,
            span: 3526..3530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 128,
            column: 38,
            span: 3530..3531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 128,
            column: 44,
            span: 3531..3537,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 45,
            span: 3537..3538,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"𦧺\"",
        ),
        position: Position {
            line: 128,
            column: 49,
            span: 3539..3542,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 50,
            span: 3542..3543,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 52,
            span: 3543..3545,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 53,
            span: 3545..3546,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 55,
            span: 3546..3548,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 56,
            span: 3548..3549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 129,
            column: 11,
            span: 3550..3560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 12,
            span: 3560..3561,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"continuation byte\"",
        ),
        position: Position {
            line: 129,
            column: 31,
            span: 3561..3580,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 32,
            span: 3580..3581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 129,
            column: 37,
            span: 3582..3586,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 129,
            column: 38,
            span: 3586..3587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 129,
            column: 44,
            span: 3587..3593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 45,
            span: 3593..3594,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"𦧺\"",
        ),
        position: Position {
            line: 129,
            column: 49,
            span: 3595..3598,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 50,
            span: 3598..3599,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 52,
            span: 3599..3601,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 53,
            span: 3601..3602,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 55,
            span: 3602..3604,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 56,
            span: 3604..3605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 130,
            column: 11,
            span: 3606..3616,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 12,
            span: 3616..3617,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"continuation byte\"",
        ),
        position: Position {
            line: 130,
            column: 31,
            span: 3617..3636,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 32,
            span: 3636..3637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 130,
            column: 37,
            span: 3638..3642,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 130,
            column: 38,
            span: 3642..3643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 130,
            column: 44,
            span: 3643..3649,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 45,
            span: 3649..3650,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x80\"",
        ),
        position: Position {
            line: 130,
            column: 52,
            span: 3651..3657,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 53,
            span: 3657..3658,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 130,
            column: 55,
            span: 3658..3660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 56,
            span: 3660..3661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 133,
            column: 11,
            span: 3691..3701,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 12,
            span: 3701..3702,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of bounds\"",
        ),
        position: Position {
            line: 133,
            column: 27,
            span: 3702..3717,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 28,
            span: 3717..3718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 133,
            column: 33,
            span: 3719..3723,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 133,
            column: 34,
            span: 3723..3724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 133,
            column: 37,
            span: 3724..3727,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 38,
            span: 3727..3728,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 133,
            column: 44,
            span: 3729..3734,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 45,
            span: 3734..3735,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 133,
            column: 47,
            span: 3735..3737,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 48,
            span: 3737..3738,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 133,
            column: 50,
            span: 3738..3740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 51,
            span: 3740..3741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 134,
            column: 11,
            span: 3742..3752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 12,
            span: 3752..3753,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of bounds\"",
        ),
        position: Position {
            line: 134,
            column: 27,
            span: 3753..3768,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 28,
            span: 3768..3769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 134,
            column: 33,
            span: 3770..3774,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 134,
            column: 34,
            span: 3774..3775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 134,
            column: 37,
            span: 3775..3778,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 38,
            span: 3778..3779,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 134,
            column: 44,
            span: 3780..3785,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 45,
            span: 3785..3786,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 134,
            column: 47,
            span: 3786..3788,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 48,
            span: 3788..3789,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 134,
            column: 50,
            span: 3789..3791,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 51,
            span: 3791..3792,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 137,
            column: 6,
            span: 3795..3800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 137,
            column: 8,
            span: 3801..3802,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 137,
            column: 10,
            span: 3803..3804,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello World\"",
        ),
        position: Position {
            line: 137,
            column: 24,
            span: 3805..3818,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 138,
            column: 6,
            span: 3819..3824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 138,
            column: 8,
            span: 3825..3826,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 138,
            column: 10,
            span: 3827..3828,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 138,
            column: 12,
            span: 3829..3830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 138,
            column: 18,
            span: 3830..3836,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 138,
            column: 19,
            span: 3836..3837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        position: Position {
            line: 138,
            column: 23,
            span: 3837..3841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 24,
            span: 3841..3842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 138,
            column: 25,
            span: 3842..3843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 26,
            span: 3843..3844,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 28,
            span: 3844..3846,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 29,
            span: 3846..3847,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 138,
            column: 31,
            span: 3848..3849,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 32,
            span: 3848..3850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 33,
            span: 3850..3851,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 138,
            column: 34,
            span: 3851..3852,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 139,
            column: 4,
            span: 3853..3856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 139,
            column: 6,
            span: 3857..3858,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 139,
            column: 8,
            span: 3859..3860,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 139,
            column: 10,
            span: 3860..3862,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 11,
            span: 3862..3863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 139,
            column: 16,
            span: 3864..3868,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 139,
            column: 17,
            span: 3868..3869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 139,
            column: 20,
            span: 3869..3872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 21,
            span: 3872..3873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 139,
            column: 22,
            span: 3873..3874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 23,
            span: 3874..3875,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 139,
            column: 26,
            span: 3876..3878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 139,
            column: 33,
            span: 3879..3885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 34,
            span: 3885..3886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 139,
            column: 35,
            span: 3886..3887,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 139,
            column: 36,
            span: 3887..3888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 139,
            column: 37,
            span: 3888..3889,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 139,
            column: 38,
            span: 3889..3890,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 139,
            column: 41,
            span: 3891..3893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 139,
            column: 48,
            span: 3894..3900,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 139,
            column: 49,
            span: 3900..3901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        position: Position {
            line: 139,
            column: 53,
            span: 3901..3905,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 54,
            span: 3905..3906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 139,
            column: 55,
            span: 3906..3907,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 56,
            span: 3907..3908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 139,
            column: 58,
            span: 3909..3910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 59,
            span: 3910..3911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 60,
            span: 3911..3912,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 139,
            column: 0,
            span: 3913..3916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 140,
            column: 6,
            span: 3917..3922,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 7,
            span: 3922..3923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 140,
            column: 8,
            span: 3923..3924,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 9,
            span: 3924..3925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 140,
            column: 11,
            span: 3926..3927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 12,
            span: 3927..3928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 142,
            column: 6,
            span: 3930..3935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 142,
            column: 7,
            span: 3935..3936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"汉字/漢字\"",
        ),
        position: Position {
            line: 142,
            column: 14,
            span: 3936..3943,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 15,
            span: 3943..3944,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 142,
            column: 17,
            span: 3945..3946,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27721",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 22,
            span: 3945..3951,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 23,
            span: 3951..3952,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23383",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 29,
            span: 3952..3958,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 30,
            span: 3958..3959,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "47",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 33,
            span: 3959..3962,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 34,
            span: 3962..3963,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "28450",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 40,
            span: 3963..3969,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 41,
            span: 3969..3970,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23383",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 47,
            span: 3970..3976,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 48,
            span: 3976..3977,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 142,
            column: 49,
            span: 3977..3978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 142,
            column: 50,
            span: 3978..3979,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 144,
            column: 0,
            span: 3981..3983,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 145,
            column: 8,
            span: 3986..3991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 145,
            column: 10,
            span: 3992..3993,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 12,
            span: 3994..3995,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áéí\\128\"",
        ),
        position: Position {
            line: 145,
            column: 22,
            span: 3996..4005,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 4008..4013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 146,
            column: 10,
            span: 4014..4015,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 146,
            column: 12,
            span: 4016..4017,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 146,
            column: 14,
            span: 4018..4019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 146,
            column: 18,
            span: 4019..4023,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 146,
            column: 19,
            span: 4023..4024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 146,
            column: 28,
            span: 4024..4033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 29,
            span: 4033..4034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 146,
            column: 30,
            span: 4034..4035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 31,
            span: 4035..4036,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 32,
            span: 4035..4037,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 33,
            span: 4037..4038,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 146,
            column: 34,
            span: 4038..4039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 146,
            column: 35,
            span: 4039..4040,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 146,
            column: 37,
            span: 4041..4042,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 39,
            span: 4042..4044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 40,
            span: 4044..4045,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 146,
            column: 41,
            span: 4045..4046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 147,
            column: 9,
            span: 4049..4055,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 10,
            span: 4055..4056,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 147,
            column: 11,
            span: 4056..4057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 147,
            column: 12,
            span: 4057..4058,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 15,
            span: 4059..4061,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 17,
            span: 4061..4063,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 147,
            column: 21,
            span: 4064..4067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 147,
            column: 23,
            span: 4068..4069,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 147,
            column: 24,
            span: 4069..4070,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 25,
            span: 4069..4071,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 147,
            column: 26,
            span: 4071..4072,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 29,
            span: 4073..4075,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "225",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 33,
            span: 4075..4079,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 147,
            column: 37,
            span: 4080..4083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 147,
            column: 39,
            span: 4084..4085,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 147,
            column: 40,
            span: 4085..4086,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 41,
            span: 4085..4087,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 147,
            column: 42,
            span: 4087..4088,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 45,
            span: 4089..4091,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "233",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 49,
            span: 4091..4095,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 147,
            column: 53,
            span: 4096..4099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 147,
            column: 55,
            span: 4100..4101,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 147,
            column: 56,
            span: 4101..4102,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 57,
            span: 4101..4103,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 147,
            column: 58,
            span: 4103..4104,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 61,
            span: 4105..4107,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "237",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 65,
            span: 4107..4111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 66,
            span: 4111..4112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 148,
            column: 13,
            span: 4115..4125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 14,
            span: 4125..4126,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid UTF%-8 code\"",
        ),
        position: Position {
            line: 148,
            column: 35,
            span: 4126..4147,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 36,
            span: 4147..4148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 148,
            column: 41,
            span: 4149..4153,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 148,
            column: 42,
            span: 4153..4154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 148,
            column: 51,
            span: 4154..4163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 52,
            span: 4163..4164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 148,
            column: 54,
            span: 4165..4166,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 55,
            span: 4166..4167,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 57,
            span: 4167..4169,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 58,
            span: 4169..4170,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 148,
            column: 60,
            span: 4171..4172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 148,
            column: 61,
            span: 4172..4173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 62,
            span: 4173..4174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 149,
            column: 13,
            span: 4177..4187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 14,
            span: 4187..4188,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of bounds\"",
        ),
        position: Position {
            line: 149,
            column: 29,
            span: 4188..4203,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 30,
            span: 4203..4204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 149,
            column: 35,
            span: 4205..4209,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 149,
            column: 36,
            span: 4209..4210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 149,
            column: 45,
            span: 4210..4219,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 46,
            span: 4219..4220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 149,
            column: 48,
            span: 4221..4222,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 49,
            span: 4222..4223,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 149,
            column: 51,
            span: 4224..4225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 149,
            column: 52,
            span: 4225..4226,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 149,
            column: 54,
            span: 4227..4228,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 56,
            span: 4228..4230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 57,
            span: 4230..4231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 150,
            column: 4,
            span: 4234..4235,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 6,
            span: 4236..4237,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 150,
            column: 8,
            span: 4238..4239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 150,
            column: 12,
            span: 4239..4243,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 150,
            column: 13,
            span: 4243..4244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 4244..4253,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 23,
            span: 4253..4254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 150,
            column: 24,
            span: 4254..4255,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 25,
            span: 4255..4256,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 27,
            span: 4256..4258,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 28,
            span: 4258..4259,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 30,
            span: 4259..4261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 31,
            span: 4261..4262,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 150,
            column: 32,
            span: 4262..4263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 151,
            column: 9,
            span: 4266..4272,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 10,
            span: 4272..4273,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 151,
            column: 11,
            span: 4273..4274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 151,
            column: 12,
            span: 4274..4275,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 151,
            column: 15,
            span: 4276..4278,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 17,
            span: 4278..4280,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 18,
            span: 4280..4281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 4284..4294,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 14,
            span: 4294..4295,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of bounds\"",
        ),
        position: Position {
            line: 152,
            column: 29,
            span: 4295..4310,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 30,
            span: 4310..4311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 152,
            column: 35,
            span: 4312..4316,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 152,
            column: 36,
            span: 4316..4317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 152,
            column: 45,
            span: 4317..4326,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 46,
            span: 4326..4327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 152,
            column: 48,
            span: 4328..4329,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 49,
            span: 4329..4330,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 152,
            column: 51,
            span: 4331..4332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 52,
            span: 4332..4333,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 152,
            column: 53,
            span: 4333..4334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 152,
            column: 54,
            span: 4334..4335,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 152,
            column: 56,
            span: 4336..4337,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 58,
            span: 4337..4339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 59,
            span: 4339..4340,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 60,
            span: 4340..4341,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 62,
            span: 4341..4343,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 63,
            span: 4343..4344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 153,
            column: 13,
            span: 4347..4357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 14,
            span: 4357..4358,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of bounds\"",
        ),
        position: Position {
            line: 153,
            column: 29,
            span: 4358..4373,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 30,
            span: 4373..4374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 153,
            column: 35,
            span: 4375..4379,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 36,
            span: 4379..4380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 153,
            column: 45,
            span: 4380..4389,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 46,
            span: 4389..4390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 153,
            column: 48,
            span: 4391..4392,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 49,
            span: 4392..4393,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 51,
            span: 4393..4395,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 52,
            span: 4395..4396,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 153,
            column: 54,
            span: 4397..4398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 153,
            column: 55,
            span: 4398..4399,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 153,
            column: 57,
            span: 4400..4401,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 59,
            span: 4401..4403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 60,
            span: 4403..4404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 155,
            column: 9,
            span: 4423..4429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 10,
            span: 4429..4430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 155,
            column: 14,
            span: 4430..4434,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 15,
            span: 4434..4435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 155,
            column: 24,
            span: 4435..4444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 25,
            span: 4444..4445,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{D7FF}\"",
        ),
        position: Position {
            line: 155,
            column: 35,
            span: 4445..4455,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 36,
            span: 4455..4456,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 155,
            column: 39,
            span: 4457..4459,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xD800",
            ),
        ),
        position: Position {
            line: 155,
            column: 46,
            span: 4459..4466,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 155,
            column: 48,
            span: 4467..4468,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 50,
            span: 4468..4470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 51,
            span: 4470..4471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 156,
            column: 9,
            span: 4474..4480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 10,
            span: 4480..4481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 156,
            column: 14,
            span: 4481..4485,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 15,
            span: 4485..4486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 156,
            column: 24,
            span: 4486..4495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 25,
            span: 4495..4496,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{E000}\"",
        ),
        position: Position {
            line: 156,
            column: 35,
            span: 4496..4506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 36,
            span: 4506..4507,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 156,
            column: 39,
            span: 4508..4510,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xDFFF",
            ),
        ),
        position: Position {
            line: 156,
            column: 46,
            span: 4510..4517,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 156,
            column: 48,
            span: 4518..4519,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 156,
            column: 50,
            span: 4519..4521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 51,
            span: 4521..4522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 157,
            column: 9,
            span: 4525..4531,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 10,
            span: 4531..4532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 157,
            column: 14,
            span: 4532..4536,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 157,
            column: 15,
            span: 4536..4537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 157,
            column: 24,
            span: 4537..4546,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 25,
            span: 4546..4547,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{D800}\"",
        ),
        position: Position {
            line: 157,
            column: 35,
            span: 4547..4557,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 36,
            span: 4557..4558,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 38,
            span: 4558..4560,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 39,
            span: 4560..4561,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 41,
            span: 4561..4563,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 42,
            span: 4563..4564,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 157,
            column: 47,
            span: 4565..4569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 48,
            span: 4569..4570,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 157,
            column: 51,
            span: 4571..4573,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xD800",
            ),
        ),
        position: Position {
            line: 157,
            column: 58,
            span: 4573..4580,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 59,
            span: 4580..4581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 158,
            column: 9,
            span: 4584..4590,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 10,
            span: 4590..4591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 158,
            column: 14,
            span: 4591..4595,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 15,
            span: 4595..4596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 158,
            column: 24,
            span: 4596..4605,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 25,
            span: 4605..4606,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{DFFF}\"",
        ),
        position: Position {
            line: 158,
            column: 35,
            span: 4606..4616,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 36,
            span: 4616..4617,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 158,
            column: 38,
            span: 4617..4619,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 39,
            span: 4619..4620,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 158,
            column: 41,
            span: 4620..4622,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 42,
            span: 4622..4623,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 158,
            column: 47,
            span: 4624..4628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 48,
            span: 4628..4629,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 158,
            column: 51,
            span: 4630..4632,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xDFFF",
            ),
        ),
        position: Position {
            line: 158,
            column: 58,
            span: 4632..4639,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 59,
            span: 4639..4640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 159,
            column: 9,
            span: 4643..4649,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 10,
            span: 4649..4650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 159,
            column: 14,
            span: 4650..4654,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 159,
            column: 15,
            span: 4654..4655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 159,
            column: 24,
            span: 4655..4664,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 25,
            span: 4664..4665,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{7FFFFFFF}\"",
        ),
        position: Position {
            line: 159,
            column: 39,
            span: 4665..4679,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 40,
            span: 4679..4680,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 159,
            column: 42,
            span: 4680..4682,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 43,
            span: 4682..4683,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 159,
            column: 45,
            span: 4683..4685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 46,
            span: 4685..4686,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 159,
            column: 51,
            span: 4687..4691,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 52,
            span: 4691..4692,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 159,
            column: 55,
            span: 4693..4695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7FFFFFFF",
            ),
        ),
        position: Position {
            line: 159,
            column: 66,
            span: 4695..4706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 67,
            span: 4706..4707,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 160,
            column: 0,
            span: 4708..4711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 162,
            column: 7,
            span: 4713..4719,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 8,
            span: 4719..4720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 162,
            column: 12,
            span: 4720..4724,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 162,
            column: 13,
            span: 4724..4725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 162,
            column: 17,
            span: 4725..4729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 18,
            span: 4729..4730,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 19,
            span: 4730..4731,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 162,
            column: 22,
            span: 4732..4734,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 162,
            column: 25,
            span: 4735..4737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 26,
            span: 4737..4738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 163,
            column: 7,
            span: 4739..4745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 8,
            span: 4745..4746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 163,
            column: 12,
            span: 4746..4750,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 13,
            span: 4750..4751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 163,
            column: 17,
            span: 4751..4755,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 18,
            span: 4755..4756,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 19,
            span: 4755..4757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 20,
            span: 4757..4758,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 23,
            span: 4758..4761,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 24,
            span: 4761..4762,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "98",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 27,
            span: 4762..4765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 28,
            span: 4765..4766,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "99",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 31,
            span: 4766..4769,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 32,
            span: 4769..4770,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 34,
            span: 4770..4772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 35,
            span: 4772..4773,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 163,
            column: 38,
            span: 4774..4776,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0abc\\1\"",
        ),
        position: Position {
            line: 163,
            column: 48,
            span: 4777..4786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 49,
            span: 4786..4787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 165,
            column: 7,
            span: 4789..4795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 8,
            span: 4795..4796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 165,
            column: 12,
            span: 4796..4800,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 165,
            column: 13,
            span: 4800..4801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 165,
            column: 22,
            span: 4801..4810,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 23,
            span: 4810..4811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 165,
            column: 27,
            span: 4811..4815,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 165,
            column: 28,
            span: 4815..4816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 165,
            column: 32,
            span: 4816..4820,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 33,
            span: 4820..4821,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10FFFF",
            ),
        ),
        position: Position {
            line: 165,
            column: 41,
            span: 4820..4829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 42,
            span: 4829..4830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 43,
            span: 4830..4831,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 165,
            column: 46,
            span: 4832..4834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10FFFF",
            ),
        ),
        position: Position {
            line: 165,
            column: 55,
            span: 4834..4843,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 56,
            span: 4843..4844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 166,
            column: 7,
            span: 4845..4851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 8,
            span: 4851..4852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 166,
            column: 12,
            span: 4852..4856,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 166,
            column: 13,
            span: 4856..4857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 166,
            column: 22,
            span: 4857..4866,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 23,
            span: 4866..4867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 166,
            column: 27,
            span: 4867..4871,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 166,
            column: 28,
            span: 4871..4872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 166,
            column: 32,
            span: 4872..4876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 33,
            span: 4876..4877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7FFFFFFF",
            ),
        ),
        position: Position {
            line: 166,
            column: 43,
            span: 4876..4887,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 44,
            span: 4887..4888,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 45,
            span: 4888..4889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 47,
            span: 4889..4891,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 48,
            span: 4891..4892,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 50,
            span: 4892..4894,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 51,
            span: 4894..4895,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 166,
            column: 56,
            span: 4896..4900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 57,
            span: 4900..4901,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 166,
            column: 60,
            span: 4902..4904,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 62,
            span: 4905..4906,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 63,
            span: 4905..4907,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 166,
            column: 65,
            span: 4907..4909,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 67,
            span: 4908..4911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 68,
            span: 4911..4912,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 166,
            column: 70,
            span: 4913..4914,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 72,
            span: 4914..4916,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 73,
            span: 4916..4917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 168,
            column: 11,
            span: 4919..4929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 12,
            span: 4929..4930,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value out of range\"",
        ),
        position: Position {
            line: 168,
            column: 32,
            span: 4930..4950,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 33,
            span: 4950..4951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 168,
            column: 38,
            span: 4952..4956,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 168,
            column: 39,
            span: 4956..4957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 168,
            column: 43,
            span: 4957..4961,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 44,
            span: 4961..4962,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7FFFFFFF",
            ),
        ),
        position: Position {
            line: 168,
            column: 55,
            span: 4962..4973,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 168,
            column: 57,
            span: 4974..4975,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 168,
            column: 59,
            span: 4975..4977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 60,
            span: 4977..4978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 169,
            column: 11,
            span: 4979..4989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 12,
            span: 4989..4990,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value out of range\"",
        ),
        position: Position {
            line: 169,
            column: 32,
            span: 4990..5010,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 169,
            column: 33,
            span: 5010..5011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 169,
            column: 38,
            span: 5012..5016,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 169,
            column: 39,
            span: 5016..5017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 169,
            column: 43,
            span: 5017..5021,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 169,
            column: 44,
            span: 5021..5022,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 169,
            column: 46,
            span: 5023..5024,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 169,
            column: 47,
            span: 5023..5025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 48,
            span: 5025..5026,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 171,
            column: 6,
            span: 5028..5033,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 171,
            column: 15,
            span: 5034..5042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 171,
            column: 23,
            span: 5043..5050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 25,
            span: 5051..5052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 171,
            column: 26,
            span: 5052..5053,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 27,
            span: 5053..5054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 172,
            column: 13,
            span: 5057..5067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 14,
            span: 5067..5068,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid UTF%-8 code\"",
        ),
        position: Position {
            line: 172,
            column: 35,
            span: 5068..5089,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 36,
            span: 5089..5090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 172,
            column: 41,
            span: 5091..5095,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 172,
            column: 42,
            span: 5095..5096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        position: Position {
            line: 172,
            column: 51,
            span: 5096..5105,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 52,
            span: 5105..5106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 172,
            column: 54,
            span: 5107..5108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 55,
            span: 5108..5109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 173,
            column: 9,
            span: 5112..5118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 10,
            span: 5118..5119,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 173,
            column: 13,
            span: 5119..5122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 173,
            column: 18,
            span: 5123..5127,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 173,
            column: 19,
            span: 5127..5128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 173,
            column: 22,
            span: 5128..5131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 23,
            span: 5131..5132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 173,
            column: 24,
            span: 5132..5133,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 25,
            span: 5133..5134,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 26,
            span: 5134..5135,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 174,
            column: 0,
            span: 5136..5139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 177,
            column: 8,
            span: 5205..5212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 9,
            span: 5212..5213,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF4\\x9F\\xBF\\xBF\"",
        ),
        position: Position {
            line: 177,
            column: 27,
            span: 5213..5231,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 28,
            span: 5231..5232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 180,
            column: 8,
            span: 5248..5255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 9,
            span: 5255..5256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{D800}\"",
        ),
        position: Position {
            line: 180,
            column: 19,
            span: 5256..5266,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 20,
            span: 5266..5267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 181,
            column: 8,
            span: 5268..5275,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 9,
            span: 5275..5276,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{DFFF}\"",
        ),
        position: Position {
            line: 181,
            column: 19,
            span: 5276..5286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 20,
            span: 5286..5287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 184,
            column: 8,
            span: 5311..5318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 9,
            span: 5318..5319,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xC0\\x80\"",
        ),
        position: Position {
            line: 184,
            column: 19,
            span: 5319..5329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 20,
            span: 5329..5330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 185,
            column: 8,
            span: 5348..5355,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 9,
            span: 5355..5356,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xC1\\xBF\"",
        ),
        position: Position {
            line: 185,
            column: 19,
            span: 5356..5366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 20,
            span: 5366..5367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 186,
            column: 8,
            span: 5413..5420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 9,
            span: 5420..5421,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xE0\\x9F\\xBF\"",
        ),
        position: Position {
            line: 186,
            column: 23,
            span: 5421..5435,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 24,
            span: 5435..5436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 5480..5487,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 9,
            span: 5487..5488,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF0\\x8F\\xBF\\xBF\"",
        ),
        position: Position {
            line: 187,
            column: 27,
            span: 5488..5506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 28,
            span: 5506..5507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 191,
            column: 8,
            span: 5567..5574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 9,
            span: 5574..5575,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x80\"",
        ),
        position: Position {
            line: 191,
            column: 15,
            span: 5575..5581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 16,
            span: 5581..5582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 192,
            column: 8,
            span: 5605..5612,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 9,
            span: 5612..5613,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xBF\"",
        ),
        position: Position {
            line: 192,
            column: 15,
            span: 5613..5619,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 16,
            span: 5619..5620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 193,
            column: 8,
            span: 5643..5650,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 9,
            span: 5650..5651,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xFE\"",
        ),
        position: Position {
            line: 193,
            column: 15,
            span: 5651..5657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 16,
            span: 5657..5658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        position: Position {
            line: 194,
            column: 8,
            span: 5676..5683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 9,
            span: 5683..5684,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xFF\"",
        ),
        position: Position {
            line: 194,
            column: 15,
            span: 5684..5690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 16,
            span: 5690..5691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 198,
            column: 6,
            span: 5727..5732,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 7,
            span: 5732..5733,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 198,
            column: 9,
            span: 5733..5735,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 10,
            span: 5735..5736,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 198,
            column: 12,
            span: 5737..5738,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 198,
            column: 13,
            span: 5738..5739,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 198,
            column: 14,
            span: 5739..5740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 201,
            column: 2,
            span: 5795..5796,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 201,
            column: 4,
            span: 5797..5798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0 \\x7F\\z\n     \\xC2\\x80 \\xDF\\xBF\\z\n     \\xE0\\xA0\\x80 \\xEF\\xBF\\xBF\\z\n     \\xF0\\x90\\x80\\x80  \\xF4\\x8F\\xBF\\xBF\"",
        ),
        position: Position {
            line: 204,
            column: 41,
            span: 5799..5908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 205,
            column: 2,
            span: 5909..5910,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 205,
            column: 4,
            span: 5911..5912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 205,
            column: 11,
            span: 5913..5919,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 205,
            column: 12,
            span: 5919..5920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 205,
            column: 16,
            span: 5920..5924,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 17,
            span: 5924..5925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 205,
            column: 18,
            span: 5925..5926,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 19,
            span: 5926..5927,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        position: Position {
            line: 205,
            column: 23,
            span: 5928..5931,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 24,
            span: 5931..5932,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 205,
            column: 27,
            span: 5933..5935,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 28,
            span: 5935..5936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 206,
            column: 6,
            span: 5937..5942,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 7,
            span: 5942..5943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 206,
            column: 8,
            span: 5943..5944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 9,
            span: 5944..5945,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 206,
            column: 11,
            span: 5946..5947,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 12,
            span: 5946..5948,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 13,
            span: 5948..5949,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7F",
            ),
        ),
        position: Position {
            line: 206,
            column: 17,
            span: 5948..5953,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 18,
            span: 5953..5954,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80",
            ),
        ),
        position: Position {
            line: 206,
            column: 23,
            span: 5954..5959,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 24,
            span: 5959..5960,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7FF",
            ),
        ),
        position: Position {
            line: 206,
            column: 29,
            span: 5959..5965,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 30,
            span: 5965..5966,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x800",
            ),
        ),
        position: Position {
            line: 206,
            column: 36,
            span: 5966..5972,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 37,
            span: 5972..5973,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFF",
            ),
        ),
        position: Position {
            line: 206,
            column: 43,
            span: 5972..5979,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 44,
            span: 5979..5980,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10000",
            ),
        ),
        position: Position {
            line: 206,
            column: 52,
            span: 5980..5988,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 53,
            span: 5988..5989,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10FFFF",
            ),
        ),
        position: Position {
            line: 206,
            column: 61,
            span: 5988..5997,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 206,
            column: 62,
            span: 5997..5998,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 63,
            span: 5998..5999,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 208,
            column: 0,
            span: 6001..6003,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 210,
            column: 8,
            span: 6033..6038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 210,
            column: 10,
            span: 6039..6040,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 210,
            column: 12,
            span: 6041..6042,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{4000000}\\u{7FFFFFFF}\"",
        ),
        position: Position {
            line: 210,
            column: 38,
            span: 6043..6068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 211,
            column: 9,
            span: 6071..6077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 10,
            span: 6077..6078,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 211,
            column: 11,
            span: 6078..6079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 211,
            column: 12,
            span: 6079..6080,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 211,
            column: 15,
            span: 6081..6083,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 18,
            span: 6083..6086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 19,
            span: 6086..6087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 212,
            column: 8,
            span: 6090..6095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 9,
            span: 6095..6096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 212,
            column: 10,
            span: 6096..6097,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 11,
            span: 6097..6098,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 212,
            column: 13,
            span: 6099..6100,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x4000000",
            ),
        ),
        position: Position {
            line: 212,
            column: 22,
            span: 6099..6109,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 23,
            span: 6109..6110,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7FFFFFFF",
            ),
        ),
        position: Position {
            line: 212,
            column: 34,
            span: 6110..6121,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 212,
            column: 35,
            span: 6121..6122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 36,
            span: 6122..6123,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 212,
            column: 41,
            span: 6124..6128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 42,
            span: 6128..6129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 214,
            column: 4,
            span: 6133..6134,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 214,
            column: 6,
            span: 6135..6136,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{200000}\\u{3FFFFFF}\"",
        ),
        position: Position {
            line: 214,
            column: 30,
            span: 6137..6160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 215,
            column: 9,
            span: 6163..6169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 10,
            span: 6169..6170,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 215,
            column: 11,
            span: 6170..6171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 215,
            column: 12,
            span: 6171..6172,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 215,
            column: 15,
            span: 6173..6175,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 215,
            column: 18,
            span: 6175..6178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 19,
            span: 6178..6179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 216,
            column: 8,
            span: 6182..6187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 9,
            span: 6187..6188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 216,
            column: 10,
            span: 6188..6189,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 11,
            span: 6189..6190,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 216,
            column: 13,
            span: 6191..6192,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x200000",
            ),
        ),
        position: Position {
            line: 216,
            column: 21,
            span: 6191..6200,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 22,
            span: 6200..6201,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x3FFFFFF",
            ),
        ),
        position: Position {
            line: 216,
            column: 32,
            span: 6201..6211,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 216,
            column: 33,
            span: 6211..6212,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 34,
            span: 6212..6213,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 216,
            column: 39,
            span: 6214..6218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 40,
            span: 6218..6219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 218,
            column: 4,
            span: 6223..6224,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 218,
            column: 6,
            span: 6225..6226,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{10000}\\u{1fffff}\"",
        ),
        position: Position {
            line: 218,
            column: 28,
            span: 6227..6248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 219,
            column: 9,
            span: 6251..6257,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 10,
            span: 6257..6258,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 219,
            column: 11,
            span: 6258..6259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 219,
            column: 12,
            span: 6259..6260,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 219,
            column: 15,
            span: 6261..6263,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 219,
            column: 17,
            span: 6263..6265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 18,
            span: 6265..6266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 220,
            column: 8,
            span: 6269..6274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 9,
            span: 6274..6275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 220,
            column: 10,
            span: 6275..6276,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 11,
            span: 6276..6277,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 220,
            column: 13,
            span: 6278..6279,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10000",
            ),
        ),
        position: Position {
            line: 220,
            column: 20,
            span: 6278..6286,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 21,
            span: 6286..6287,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x1FFFFF",
            ),
        ),
        position: Position {
            line: 220,
            column: 30,
            span: 6287..6296,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 220,
            column: 31,
            span: 6296..6297,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 32,
            span: 6297..6298,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 220,
            column: 37,
            span: 6299..6303,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 38,
            span: 6303..6304,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 221,
            column: 0,
            span: 6305..6308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 223,
            column: 2,
            span: 6310..6311,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 223,
            column: 4,
            span: 6312..6313,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"日本語a-4\\0éó\"",
        ),
        position: Position {
            line: 223,
            column: 17,
            span: 6314..6326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 224,
            column: 6,
            span: 6327..6332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 7,
            span: 6332..6333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 224,
            column: 8,
            span: 6333..6334,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 9,
            span: 6334..6335,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 224,
            column: 11,
            span: 6336..6337,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "26085",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 16,
            span: 6336..6342,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 17,
            span: 6342..6343,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "26412",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 23,
            span: 6343..6349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 24,
            span: 6349..6350,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35486",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 30,
            span: 6350..6356,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 31,
            span: 6356..6357,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 34,
            span: 6357..6360,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 35,
            span: 6360..6361,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 38,
            span: 6361..6364,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 39,
            span: 6364..6365,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "52",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 42,
            span: 6365..6368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 43,
            span: 6368..6369,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 45,
            span: 6369..6371,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 46,
            span: 6371..6372,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "233",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 50,
            span: 6372..6376,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 51,
            span: 6376..6377,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "243",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 55,
            span: 6377..6381,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 224,
            column: 56,
            span: 6381..6382,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 57,
            span: 6382..6383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 228,
            column: 6,
            span: 6414..6419,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 7,
            span: 6419..6420,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"𣲷𠜎𠱓𡁻𠵼ab𠺢\"",
        ),
        position: Position {
            line: 228,
            column: 17,
            span: 6420..6430,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 18,
            span: 6430..6431,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 229,
            column: 8,
            span: 6438..6439,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x23CB7",
            ),
        ),
        position: Position {
            line: 229,
            column: 15,
            span: 6438..6446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 16,
            span: 6446..6447,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x2070E",
            ),
        ),
        position: Position {
            line: 229,
            column: 24,
            span: 6447..6455,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 25,
            span: 6455..6456,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x20C53",
            ),
        ),
        position: Position {
            line: 229,
            column: 33,
            span: 6456..6464,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 34,
            span: 6464..6465,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x2107B",
            ),
        ),
        position: Position {
            line: 229,
            column: 42,
            span: 6465..6473,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 43,
            span: 6473..6474,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x20D7C",
            ),
        ),
        position: Position {
            line: 229,
            column: 51,
            span: 6474..6482,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 52,
            span: 6482..6483,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x61",
            ),
        ),
        position: Position {
            line: 229,
            column: 57,
            span: 6483..6488,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 58,
            span: 6488..6489,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x62",
            ),
        ),
        position: Position {
            line: 229,
            column: 63,
            span: 6489..6494,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 64,
            span: 6494..6495,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x20EA2",
            ),
        ),
        position: Position {
            line: 229,
            column: 72,
            span: 6495..6503,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 73,
            span: 6503..6504,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 229,
            column: 74,
            span: 6504..6505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 75,
            span: 6505..6506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 231,
            column: 6,
            span: 6508..6513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 7,
            span: 6513..6514,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"𨳊𩶘𦧺𨳒𥄫𤓓\\xF4\\x8F\\xBF\\xBF\"",
        ),
        position: Position {
            line: 231,
            column: 31,
            span: 6514..6538,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 32,
            span: 6538..6539,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 232,
            column: 8,
            span: 6546..6547,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x28CCA",
            ),
        ),
        position: Position {
            line: 232,
            column: 15,
            span: 6546..6554,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 16,
            span: 6554..6555,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x29D98",
            ),
        ),
        position: Position {
            line: 232,
            column: 24,
            span: 6555..6563,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 25,
            span: 6563..6564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x269FA",
            ),
        ),
        position: Position {
            line: 232,
            column: 33,
            span: 6564..6572,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 34,
            span: 6572..6573,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x28CD2",
            ),
        ),
        position: Position {
            line: 232,
            column: 42,
            span: 6573..6581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 43,
            span: 6581..6582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x2512B",
            ),
        ),
        position: Position {
            line: 232,
            column: 51,
            span: 6582..6590,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 52,
            span: 6590..6591,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x244D3",
            ),
        ),
        position: Position {
            line: 232,
            column: 60,
            span: 6591..6599,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 61,
            span: 6599..6600,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10ffff",
            ),
        ),
        position: Position {
            line: 232,
            column: 70,
            span: 6600..6609,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 232,
            column: 71,
            span: 6609..6610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 72,
            span: 6610..6611,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 235,
            column: 6,
            span: 6614..6619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 235,
            column: 8,
            span: 6620..6621,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 235,
            column: 10,
            span: 6622..6623,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 235,
            column: 0,
            span: 6623..6625,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 236,
            column: 4,
            span: 6626..6629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 236,
            column: 6,
            span: 6630..6631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 7,
            span: 6631..6632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 236,
            column: 9,
            span: 6633..6634,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 236,
            column: 12,
            span: 6635..6637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 236,
            column: 19,
            span: 6638..6644,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 236,
            column: 20,
            span: 6644..6645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 236,
            column: 26,
            span: 6645..6651,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 27,
            span: 6651..6652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 236,
            column: 28,
            span: 6652..6653,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 29,
            span: 6653..6654,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()(\"",
        ),
        position: Position {
            line: 236,
            column: 35,
            span: 6655..6660,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 236,
            column: 38,
            span: 6661..6663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 236,
            column: 43,
            span: 6664..6668,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 236,
            column: 44,
            span: 6668..6669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "charpattern",
        ),
        position: Position {
            line: 236,
            column: 55,
            span: 6669..6680,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 236,
            column: 58,
            span: 6681..6683,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        position: Position {
            line: 236,
            column: 62,
            span: 6684..6687,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 63,
            span: 6687..6688,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 236,
            column: 0,
            span: 6689..6691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 237,
            column: 4,
            span: 6694..6695,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 237,
            column: 6,
            span: 6696..6697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 237,
            column: 8,
            span: 6698..6699,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 237,
            column: 10,
            span: 6700..6701,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 0,
            span: 6701..6703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 238,
            column: 9,
            span: 6706..6712,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 10,
            span: 6712..6713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 238,
            column: 14,
            span: 6713..6717,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 238,
            column: 15,
            span: 6717..6718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 238,
            column: 21,
            span: 6718..6724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 22,
            span: 6724..6725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 238,
            column: 23,
            span: 6725..6726,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 24,
            span: 6726..6727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 238,
            column: 26,
            span: 6728..6729,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 27,
            span: 6729..6730,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 238,
            column: 30,
            span: 6731..6733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 238,
            column: 32,
            span: 6734..6735,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 33,
            span: 6735..6736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 239,
            column: 9,
            span: 6739..6745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 10,
            span: 6745..6746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 239,
            column: 14,
            span: 6746..6750,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 239,
            column: 15,
            span: 6750..6751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 239,
            column: 18,
            span: 6751..6754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 19,
            span: 6754..6755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 239,
            column: 20,
            span: 6755..6756,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 21,
            span: 6756..6757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 239,
            column: 23,
            span: 6758..6759,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 24,
            span: 6759..6760,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 239,
            column: 27,
            span: 6761..6763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 239,
            column: 32,
            span: 6764..6768,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 239,
            column: 33,
            span: 6768..6769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 239,
            column: 36,
            span: 6769..6772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 37,
            span: 6772..6773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 239,
            column: 38,
            span: 6773..6774,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 39,
            span: 6774..6775,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 239,
            column: 41,
            span: 6776..6777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 239,
            column: 43,
            span: 6778..6779,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 239,
            column: 45,
            span: 6780..6781,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 239,
            column: 47,
            span: 6781..6783,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 48,
            span: 6783..6784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 240,
            column: 9,
            span: 6787..6793,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 10,
            span: 6793..6794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 240,
            column: 14,
            span: 6794..6798,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 240,
            column: 15,
            span: 6798..6799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 240,
            column: 18,
            span: 6799..6802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 19,
            span: 6802..6803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 240,
            column: 20,
            span: 6803..6804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 21,
            span: 6804..6805,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 240,
            column: 24,
            span: 6806..6808,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 26,
            span: 6808..6810,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 27,
            span: 6810..6811,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 241,
            column: 6,
            span: 6814..6817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 241,
            column: 8,
            span: 6818..6819,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 241,
            column: 10,
            span: 6820..6821,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 12,
            span: 6821..6823,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 241,
            column: 13,
            span: 6823..6824,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 241,
            column: 15,
            span: 6825..6826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 241,
            column: 16,
            span: 6826..6827,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 241,
            column: 18,
            span: 6828..6829,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 20,
            span: 6829..6831,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 241,
            column: 0,
            span: 6832..6834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 242,
            column: 11,
            span: 6839..6845,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 12,
            span: 6845..6846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        position: Position {
            line: 242,
            column: 16,
            span: 6846..6850,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 242,
            column: 17,
            span: 6850..6851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        position: Position {
            line: 242,
            column: 23,
            span: 6851..6857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 24,
            span: 6857..6858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 242,
            column: 25,
            span: 6858..6859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 26,
            span: 6859..6860,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 28,
            span: 6860..6862,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 29,
            span: 6862..6863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 242,
            column: 31,
            span: 6864..6865,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 242,
            column: 33,
            span: 6866..6867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 242,
            column: 35,
            span: 6868..6869,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 242,
            column: 37,
            span: 6870..6871,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 39,
            span: 6871..6873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 40,
            span: 6873..6874,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 242,
            column: 43,
            span: 6875..6877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 242,
            column: 45,
            span: 6878..6879,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 46,
            span: 6879..6880,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 243,
            column: 0,
            span: 6883..6886,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 244,
            column: 0,
            span: 6887..6890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 246,
            column: 6,
            span: 6892..6897,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ok'",
        ),
        position: Position {
            line: 246,
            column: 10,
            span: 6897..6901,
        },
    },
]
