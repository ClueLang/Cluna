---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/attrib.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 69..74,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing require\"",
        ),
        line: 4,
        column: 24,
        span: 75..92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 6,
        column: 7,
        span: 94..100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 8,
        span: 100..101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 15,
        span: 101..108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 6,
        column: 23,
        span: 108..116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 6,
        column: 26,
        span: 117..119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 6,
        column: 33,
        span: 120..126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 34,
        span: 126..127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 7,
        column: 7,
        span: 128..134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 8,
        span: 134..135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 7,
        column: 15,
        span: 135..142,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"math\"",
        ),
        line: 7,
        column: 21,
        span: 142..148,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
        column: 24,
        span: 149..151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 7,
        column: 29,
        span: 152..156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 30,
        span: 156..157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 7,
        span: 158..164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 8,
        span: 164..165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 8,
        column: 15,
        span: 165..172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 8,
        column: 22,
        span: 172..179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
        column: 25,
        span: 180..182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 8,
        column: 31,
        span: 183..188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 32,
        span: 188..189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 9,
        column: 7,
        span: 190..196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 8,
        span: 196..197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 9,
        column: 15,
        span: 197..204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io\"",
        ),
        line: 9,
        column: 19,
        span: 204..208,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 9,
        column: 22,
        span: 209..211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 9,
        column: 25,
        span: 212..214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 26,
        span: 214..215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 216..222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 222..223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 10,
        column: 15,
        span: 223..230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os\"",
        ),
        line: 10,
        column: 19,
        span: 230..234,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 22,
        span: 235..237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 10,
        column: 25,
        span: 238..240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 26,
        span: 240..241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
        column: 7,
        span: 242..248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 8,
        span: 248..249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 11,
        column: 15,
        span: 249..256,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutine\"",
        ),
        line: 11,
        column: 26,
        span: 256..267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 29,
        span: 268..270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 11,
        column: 39,
        span: 271..280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 40,
        span: 280..281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 7,
        span: 283..289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 8,
        span: 289..290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 13,
        column: 12,
        span: 290..294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 13,
        span: 294..295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 13,
        column: 20,
        span: 295..302,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
        column: 21,
        span: 302..303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 13,
        column: 25,
        span: 303..307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 26,
        span: 307..308,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 29,
        span: 309..311,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 13,
        column: 38,
        span: 312..320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 39,
        span: 320..321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 14,
        column: 7,
        span: 322..328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 8,
        span: 328..329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 14,
        column: 12,
        span: 329..333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 13,
        span: 333..334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 14,
        column: 20,
        span: 334..341,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 21,
        span: 341..342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 14,
        column: 26,
        span: 342..347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 27,
        span: 347..348,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
        column: 30,
        span: 349..351,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 14,
        column: 39,
        span: 352..360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 40,
        span: 360..361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
        column: 7,
        span: 362..368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 8,
        span: 368..369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 15,
        column: 12,
        span: 369..373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 13,
        span: 373..374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 15,
        column: 20,
        span: 374..381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 21,
        span: 381..382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 15,
        column: 27,
        span: 382..388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 28,
        span: 388..389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 31,
        span: 390..392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 15,
        column: 39,
        span: 393..400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 40,
        span: 400..401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 7,
        span: 402..408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 408..409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 16,
        column: 12,
        span: 409..413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 13,
        span: 413..414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 16,
        column: 20,
        span: 414..421,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 21,
        span: 421..422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preload",
        ),
        line: 16,
        column: 28,
        span: 422..429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 29,
        span: 429..430,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 32,
        span: 431..433,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 16,
        column: 40,
        span: 434..441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 41,
        span: 441..442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 7,
        span: 444..450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 8,
        span: 450..451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 18,
        column: 12,
        span: 451..455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 13,
        span: 455..456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 18,
        column: 20,
        span: 456..463,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 18,
        column: 21,
        span: 463..464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "config",
        ),
        line: 18,
        column: 27,
        span: 464..470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 28,
        span: 470..471,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 31,
        span: 472..474,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 18,
        column: 40,
        span: 475..483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 41,
        span: 483..484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 19,
        column: 6,
        span: 485..490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 7,
        span: 490..491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"package config: \"",
        ),
        line: 19,
        column: 25,
        span: 491..509,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 19,
        column: 27,
        span: 509..511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 19,
        column: 33,
        span: 511..517,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 34,
        span: 517..518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 19,
        column: 38,
        span: 518..522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 39,
        span: 522..523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 19,
        column: 46,
        span: 523..530,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 47,
        span: 530..531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "config",
        ),
        line: 19,
        column: 53,
        span: 531..537,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 54,
        span: 537..538,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 19,
        column: 59,
        span: 539..543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 60,
        span: 543..544,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"|\"",
        ),
        line: 19,
        column: 64,
        span: 545..548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 65,
        span: 548..549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 66,
        span: 549..550,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 21,
        column: 0,
        span: 552..554,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 24,
        column: 8,
        span: 637..642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 24,
        column: 12,
        span: 643..646,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 14,
        span: 647..648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 24,
        column: 20,
        span: 649..654,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 24,
        column: 24,
        span: 655..658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 28,
        span: 658..662,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 24,
        column: 31,
        span: 663..665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 0,
        span: 665..670,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 25,
        column: 8,
        span: 673..678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 25,
        column: 10,
        span: 679..680,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 12,
        span: 681..682,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 25,
        column: 14,
        span: 683..684,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 25,
        column: 15,
        span: 684..685,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 26,
        column: 6,
        span: 688..691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 26,
        column: 8,
        span: 692..693,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 10,
        span: 694..695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 12,
        span: 695..697,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 13,
        span: 697..698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 26,
        column: 16,
        span: 698..701,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 26,
        column: 19,
        span: 702..704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 26,
        column: 21,
        span: 705..706,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 26,
        column: 22,
        span: 706..707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 26,
        column: 23,
        span: 707..708,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 26,
        column: 24,
        span: 708..709,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 26,
        span: 710..711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 26,
        column: 33,
        span: 712..718,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 26,
        column: 34,
        span: 718..719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 26,
        column: 37,
        span: 719..722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 38,
        span: 722..723,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 26,
        column: 41,
        span: 723..726,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 42,
        span: 726..727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 26,
        column: 44,
        span: 728..729,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 26,
        column: 45,
        span: 729..730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 47,
        span: 729..732,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 26,
        column: 49,
        span: 733..734,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 51,
        span: 734..736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 52,
        span: 736..737,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 26,
        column: 0,
        span: 738..741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 27,
        column: 4,
        span: 744..745,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 27,
        column: 5,
        span: 745..746,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 27,
        column: 6,
        span: 746..747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 27,
        column: 7,
        span: 747..748,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 27,
        column: 9,
        span: 749..750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 11,
        span: 750..752,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 27,
        column: 12,
        span: 752..753,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 14,
        span: 754..755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 27,
        column: 18,
        span: 756..759,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
        column: 8,
        span: 783..788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 28,
        column: 13,
        span: 789..793,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 15,
        span: 794..795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 28,
        column: 21,
        span: 796..801,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 22,
        span: 801..802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 28,
        column: 28,
        span: 802..808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 29,
        span: 808..809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 28,
        column: 30,
        span: 809..810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 31,
        span: 810..811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 28,
        column: 35,
        span: 812..815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 36,
        span: 815..816,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 30,
        column: 8,
        span: 850..855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 30,
        column: 10,
        span: 856..857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 11,
        span: 857..858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 30,
        column: 15,
        span: 859..862,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 17,
        span: 863..864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 30,
        column: 25,
        span: 865..872,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
        column: 26,
        span: 872..873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 30,
        column: 36,
        span: 873..883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 37,
        span: 883..884,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 30,
        column: 43,
        span: 884..890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 44,
        span: 890..891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 30,
        column: 49,
        span: 892..896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 50,
        span: 896..897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 9,
        span: 1026..1032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 10,
        span: 1032..1033,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 33,
        column: 13,
        span: 1033..1036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 33,
        column: 15,
        span: 1037..1038,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 33,
        column: 0,
        span: 1039..1042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 34,
        column: 16,
        span: 1052..1058,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 17,
        span: 1058..1059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 34,
        column: 21,
        span: 1059..1063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 22,
        span: 1063..1064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 34,
        column: 25,
        span: 1064..1067,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 26,
        span: 1067..1068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 34,
        column: 33,
        span: 1069..1075,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 34,
        span: 1075..1076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 34,
        column: 37,
        span: 1076..1079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 38,
        span: 1079..1080,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 34,
        column: 44,
        span: 1080..1086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 45,
        span: 1086..1087,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 48,
        span: 1087..1090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 49,
        span: 1090..1091,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 50,
        span: 1091..1092,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 34,
        column: 0,
        span: 1093..1096,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 35,
        column: 11,
        span: 1106..1107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 35,
        column: 17,
        span: 1107..1113,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 18,
        span: 1113..1114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 35,
        column: 22,
        span: 1114..1118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 23,
        span: 1118..1119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 35,
        column: 26,
        span: 1119..1122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 27,
        span: 1122..1123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]\"",
        ),
        line: 35,
        column: 35,
        span: 1124..1131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 36,
        span: 1131..1132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 35,
        column: 39,
        span: 1133..1135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 40,
        span: 1135..1136,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 35,
        column: 43,
        span: 1137..1139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 35,
        column: 47,
        span: 1140..1143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 48,
        span: 1143..1144,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 8,
        span: 1185..1190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 37,
        column: 13,
        span: 1191..1195,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 15,
        span: 1196..1197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
        column: 22,
        span: 1198..1204,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 23,
        span: 1204..1205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 37,
        column: 26,
        span: 1205..1208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 27,
        span: 1208..1209,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 37,
        column: 30,
        span: 1209..1212,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 31,
        span: 1212..1213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 37,
        column: 35,
        span: 1214..1217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 36,
        span: 1217..1218,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 38,
        column: 8,
        span: 1221..1226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 38,
        column: 10,
        span: 1227..1228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 11,
        span: 1228..1229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 38,
        column: 15,
        span: 1230..1233,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 17,
        span: 1234..1235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 38,
        column: 25,
        span: 1236..1243,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 26,
        span: 1243..1244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 38,
        column: 36,
        span: 1244..1254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 37,
        span: 1254..1255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 38,
        column: 43,
        span: 1255..1261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 44,
        span: 1261..1262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 38,
        column: 49,
        span: 1263..1267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 50,
        span: 1267..1268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 9,
        span: 1271..1277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 10,
        span: 1277..1278,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 39,
        column: 13,
        span: 1278..1281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 39,
        column: 15,
        span: 1282..1283,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 39,
        column: 19,
        span: 1284..1287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
        column: 26,
        span: 1288..1294,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 27,
        span: 1294..1295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 39,
        column: 31,
        span: 1295..1299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 32,
        span: 1299..1300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 39,
        column: 35,
        span: 1300..1303,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 36,
        span: 1303..1304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
        column: 43,
        span: 1305..1311,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 44,
        span: 1311..1312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 39,
        column: 47,
        span: 1312..1315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 48,
        span: 1315..1316,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 39,
        column: 54,
        span: 1316..1322,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 55,
        span: 1322..1323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 39,
        column: 59,
        span: 1324..1327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 60,
        span: 1327..1328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 61,
        span: 1328..1329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 62,
        span: 1329..1330,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
        column: 0,
        span: 1331..1334,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 42,
        column: 0,
        span: 1336..1338,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 43,
        column: 8,
        span: 1341..1346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 43,
        column: 16,
        span: 1347..1354,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 18,
        span: 1355..1356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 43,
        column: 26,
        span: 1357..1364,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 27,
        span: 1364..1365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 43,
        column: 0,
        span: 1365..1369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 44,
        column: 10,
        span: 1372..1379,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 11,
        span: 1379..1380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 44,
        column: 15,
        span: 1380..1384,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 17,
        span: 1385..1386,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 44,
        column: 19,
        span: 1387..1388,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 44,
        column: 20,
        span: 1388..1389,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 8,
        span: 1392..1397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 45,
        column: 10,
        span: 1398..1399,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 11,
        span: 1399..1400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 45,
        column: 15,
        span: 1401..1404,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 17,
        span: 1405..1406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 45,
        column: 23,
        span: 1407..1412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 24,
        span: 1412..1413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 45,
        column: 31,
        span: 1413..1420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 32,
        span: 1420..1421,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no-such-file\"",
        ),
        line: 45,
        column: 47,
        span: 1422..1436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 48,
        span: 1436..1437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 9,
        span: 1440..1446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 10,
        span: 1446..1447,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 46,
        column: 13,
        span: 1447..1450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 46,
        column: 15,
        span: 1451..1452,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 46,
        column: 19,
        span: 1453..1456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 46,
        column: 26,
        span: 1457..1463,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 27,
        span: 1463..1464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 46,
        column: 31,
        span: 1464..1468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 32,
        span: 1468..1469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 46,
        column: 35,
        span: 1469..1472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 36,
        span: 1472..1473,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"package.path\"",
        ),
        line: 46,
        column: 51,
        span: 1474..1488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 52,
        span: 1488..1489,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 53,
        span: 1489..1490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 47,
        column: 10,
        span: 1493..1500,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 11,
        span: 1500..1501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 47,
        column: 15,
        span: 1501..1505,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 17,
        span: 1506..1507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 47,
        column: 0,
        span: 1508..1515,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
        column: 0,
        span: 1516..1519,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 51,
        column: 3,
        span: 1522..1524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 51,
        column: 10,
        span: 1526..1531,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'require' message\"",
        ),
        line: 51,
        column: 37,
        span: 1531..1558,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 52,
        column: 8,
        span: 1561..1566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 52,
        column: 16,
        span: 1567..1574,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 18,
        span: 1575..1576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 52,
        column: 26,
        span: 1577..1584,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 27,
        span: 1584..1585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 52,
        column: 0,
        span: 1585..1589,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 53,
        column: 8,
        span: 1592..1597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldcpath",
        ),
        line: 53,
        column: 17,
        span: 1598..1606,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
        column: 19,
        span: 1607..1608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 53,
        column: 27,
        span: 1609..1616,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 28,
        span: 1616..1617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 53,
        column: 0,
        span: 1617..1622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 55,
        column: 10,
        span: 1626..1633,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 55,
        column: 11,
        span: 1633..1634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 55,
        column: 15,
        span: 1634..1638,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 55,
        column: 17,
        span: 1639..1640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?.lua;?/?\"",
        ),
        line: 55,
        column: 29,
        span: 1641..1652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 56,
        column: 10,
        span: 1655..1662,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 11,
        span: 1662..1663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 56,
        column: 16,
        span: 1663..1668,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 18,
        span: 1669..1670,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?.so;?/init\"",
        ),
        line: 56,
        column: 32,
        span: 1671..1684,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 58,
        column: 8,
        span: 1688..1693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 58,
        column: 11,
        span: 1694..1696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 12,
        span: 1696..1697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 58,
        column: 16,
        span: 1698..1701,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 18,
        span: 1702..1703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 58,
        column: 24,
        span: 1704..1709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 25,
        span: 1709..1710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 58,
        column: 32,
        span: 1710..1717,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 33,
        span: 1717..1718,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'XXX'",
        ),
        line: 58,
        column: 39,
        span: 1719..1724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 40,
        span: 1724..1725,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 60,
        column: 8,
        span: 1729..1734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 60,
        column: 17,
        span: 1735..1743,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
        column: 19,
        span: 1744..1745,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[module 'XXX' not found:\n\tno field package.preload['XXX']\n\tno file 'XXX.lua'\n\tno file 'XXX/XXX'\n\tno file 'XXX.so'\n\tno file 'XXX/init']]",
        ),
        line: 65,
        column: 22,
        span: 1746..1882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 9,
        span: 1886..1892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 10,
        span: 1892..1893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 67,
        column: 13,
        span: 1893..1896,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 16,
        span: 1897..1899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 67,
        column: 25,
        span: 1900..1908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 26,
        span: 1908..1909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 69,
        column: 10,
        span: 1913..1920,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 11,
        span: 1920..1921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 69,
        column: 15,
        span: 1921..1925,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
        column: 17,
        span: 1926..1927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 69,
        column: 0,
        span: 1928..1935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 70,
        column: 10,
        span: 1938..1945,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 11,
        span: 1945..1946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 70,
        column: 16,
        span: 1946..1951,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 18,
        span: 1952..1953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldcpath",
        ),
        line: 70,
        column: 0,
        span: 1954..1962,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 71,
        column: 0,
        span: 1963..1966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 73,
        column: 6,
        span: 1968..1973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 7,
        span: 1973..1974,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 73,
        column: 10,
        span: 1974..1977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 11,
        span: 1977..1978,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 79,
        column: 3,
        span: 2065..2067,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 79,
        column: 7,
        span: 2068..2071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 79,
        column: 13,
        span: 2072..2077,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 79,
        column: 18,
        span: 2078..2082,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 81,
        column: 6,
        span: 2088..2093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dirsep",
        ),
        line: 81,
        column: 13,
        span: 2094..2100,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
        column: 15,
        span: 2101..2102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 81,
        column: 22,
        span: 2103..2109,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 23,
        span: 2109..2110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 81,
        column: 28,
        span: 2110..2115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 29,
        span: 2115..2116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 81,
        column: 36,
        span: 2116..2123,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 37,
        span: 2123..2124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "config",
        ),
        line: 81,
        column: 43,
        span: 2124..2130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 44,
        span: 2130..2131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^([^\\n]+)\\n\"",
        ),
        line: 81,
        column: 58,
        span: 2132..2145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 59,
        span: 2145..2146,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 84,
        column: 6,
        span: 2206..2211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 84,
        column: 10,
        span: 2212..2215,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 12,
        span: 2216..2217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs\"",
        ),
        line: 84,
        column: 19,
        span: 2218..2224,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 84,
        column: 22,
        span: 2225..2227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dirsep",
        ),
        line: 84,
        column: 0,
        span: 2228..2234,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 87,
        column: 6,
        span: 2294..2299,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 87,
        column: 15,
        span: 2300..2308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 87,
        column: 17,
        span: 2309..2310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 19,
        span: 2311..2312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 87,
        column: 20,
        span: 2312..2313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 21,
        span: 2313..2314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 88,
        column: 4,
        span: 2317..2318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 88,
        column: 6,
        span: 2319..2320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 88,
        column: 13,
        span: 2321..2327,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 14,
        span: 2327..2328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 88,
        column: 18,
        span: 2328..2332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 19,
        span: 2332..2333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 88,
        column: 20,
        span: 2333..2334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 21,
        span: 2334..2335,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/\"",
        ),
        line: 88,
        column: 25,
        span: 2336..2339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 26,
        span: 2339..2340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dirsep",
        ),
        line: 88,
        column: 33,
        span: 2341..2347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 34,
        span: 2347..2348,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 89,
        column: 9,
        span: 2351..2357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 89,
        column: 13,
        span: 2358..2361,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 89,
        column: 16,
        span: 2362..2364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 89,
        column: 0,
        span: 2365..2366,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 90,
        column: 0,
        span: 2367..2370,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 93,
        column: 6,
        span: 2433..2438,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 93,
        column: 15,
        span: 2439..2447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 93,
        column: 18,
        span: 2448..2450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 20,
        span: 2451..2452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 93,
        column: 21,
        span: 2452..2453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 22,
        span: 2453..2454,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 94,
        column: 8,
        span: 2457..2462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 94,
        column: 12,
        span: 2463..2466,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 94,
        column: 14,
        span: 2467..2468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 16,
        span: 2469..2470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dirsep",
        ),
        line: 94,
        column: 22,
        span: 2470..2476,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
        column: 25,
        span: 2477..2479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\\\'",
        ),
        line: 94,
        column: 30,
        span: 2480..2484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 31,
        span: 2484..2485,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 94,
        column: 35,
        span: 2486..2489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".dll\"",
        ),
        line: 94,
        column: 42,
        span: 2490..2496,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 94,
        column: 45,
        span: 2497..2499,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".so\"",
        ),
        line: 94,
        column: 51,
        span: 2500..2505,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 95,
        column: 9,
        span: 2508..2514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 95,
        column: 11,
        span: 2515..2516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 12,
        span: 2516..2517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 95,
        column: 13,
        span: 2517..2518,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 95,
        column: 16,
        span: 2519..2521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 95,
        column: 20,
        span: 2522..2525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 21,
        span: 2525..2526,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 96,
        column: 0,
        span: 2527..2530,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 99,
        column: 6,
        span: 2533..2538,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 99,
        column: 15,
        span: 2539..2547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        line: 99,
        column: 27,
        span: 2548..2559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 29,
        span: 2560..2561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 99,
        column: 34,
        span: 2561..2566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 35,
        span: 2566..2567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preextras",
        ),
        line: 99,
        column: 45,
        span: 2568..2577,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 46,
        span: 2577..2578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "posextras",
        ),
        line: 99,
        column: 56,
        span: 2579..2588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 57,
        span: 2588..2589,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 100,
        column: 6,
        span: 2592..2595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 100,
        column: 8,
        span: 2596..2597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 9,
        span: 2597..2598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 100,
        column: 10,
        span: 2598..2599,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 100,
        column: 13,
        span: 2600..2602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 100,
        column: 19,
        span: 2603..2608,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 20,
        span: 2608..2609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 100,
        column: 25,
        span: 2609..2614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 26,
        span: 2614..2615,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 100,
        column: 0,
        span: 2616..2618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 101,
        column: 7,
        span: 2623..2625,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
        column: 8,
        span: 2625..2626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 101,
        column: 14,
        span: 2626..2632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 15,
        span: 2632..2633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 101,
        column: 16,
        span: 2633..2634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 17,
        span: 2634..2635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 101,
        column: 18,
        span: 2635..2636,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 19,
        span: 2636..2637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 20,
        span: 2637..2638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 102,
        column: 7,
        span: 2643..2645,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 102,
        column: 8,
        span: 2645..2646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 102,
        column: 13,
        span: 2646..2651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 14,
        span: 2651..2652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 102,
        column: 20,
        span: 2652..2658,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 102,
        column: 21,
        span: 2658..2659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 102,
        column: 27,
        span: 2659..2665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 28,
        span: 2665..2666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preextras",
        ),
        line: 102,
        column: 37,
        span: 2666..2675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 38,
        span: 2675..2676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 102,
        column: 40,
        span: 2677..2678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 41,
        span: 2678..2679,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 42,
        span: 2679..2680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 103,
        column: 7,
        span: 2685..2687,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
        column: 8,
        span: 2687..2688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 103,
        column: 13,
        span: 2688..2693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 14,
        span: 2693..2694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 103,
        column: 15,
        span: 2694..2695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 16,
        span: 2695..2696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 104,
        column: 7,
        span: 2701..2703,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 104,
        column: 8,
        span: 2703..2704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 104,
        column: 13,
        span: 2704..2709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 14,
        span: 2709..2710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 104,
        column: 20,
        span: 2710..2716,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 104,
        column: 21,
        span: 2716..2717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 104,
        column: 27,
        span: 2717..2723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 28,
        span: 2723..2724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "posextras",
        ),
        line: 104,
        column: 37,
        span: 2724..2733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 38,
        span: 2733..2734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 104,
        column: 40,
        span: 2735..2736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 41,
        span: 2736..2737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 42,
        span: 2737..2738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 105,
        column: 7,
        span: 2743..2745,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 8,
        span: 2745..2746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 105,
        column: 13,
        span: 2746..2751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 14,
        span: 2751..2752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 105,
        column: 16,
        span: 2752..2754,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 17,
        span: 2754..2755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 105,
        column: 23,
        span: 2755..2761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 24,
        span: 2761..2762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 25,
        span: 2762..2763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 26,
        span: 2763..2764,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
        column: 0,
        span: 2767..2770,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 107,
        column: 0,
        span: 2771..2774,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 109,
        column: 9,
        span: 2776..2784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        line: 109,
        column: 21,
        span: 2785..2796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 23,
        span: 2797..2798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 109,
        column: 28,
        span: 2798..2803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 29,
        span: 2803..2804,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 110,
        column: 6,
        span: 2807..2810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 110,
        column: 8,
        span: 2811..2812,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 110,
        column: 11,
        span: 2813..2815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 110,
        column: 17,
        span: 2816..2821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 18,
        span: 2821..2822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 110,
        column: 23,
        span: 2822..2827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 24,
        span: 2827..2828,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 110,
        column: 0,
        span: 2829..2831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 111,
        column: 7,
        span: 2836..2838,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
        column: 8,
        span: 2838..2839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 111,
        column: 14,
        span: 2839..2845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 15,
        span: 2845..2846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 111,
        column: 16,
        span: 2846..2847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 17,
        span: 2847..2848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 111,
        column: 18,
        span: 2848..2849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 19,
        span: 2849..2850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 20,
        span: 2850..2851,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 112,
        column: 0,
        span: 2854..2857,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
        column: 0,
        span: 2858..2861,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 115,
        column: 6,
        span: 2863..2868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 115,
        column: 12,
        span: 2869..2874,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 115,
        column: 14,
        span: 2875..2876,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 115,
        column: 16,
        span: 2877..2878,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 116,
        column: 4,
        span: 2881..2882,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names.lua\"",
        ),
        line: 116,
        column: 15,
        span: 2882..2893,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 116,
        column: 16,
        span: 2893..2894,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 18,
        span: 2895..2896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"do return {...} end\\n\"",
        ),
        line: 116,
        column: 42,
        span: 2897..2920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 43,
        span: 2920..2921,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 117,
        column: 4,
        span: 2924..2925,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"err.lua\"",
        ),
        line: 117,
        column: 13,
        span: 2925..2934,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 117,
        column: 14,
        span: 2934..2935,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 117,
        column: 16,
        span: 2936..2937,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B = 15; a = a + 1;\"",
        ),
        line: 117,
        column: 37,
        span: 2938..2958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 38,
        span: 2958..2959,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
        column: 4,
        span: 2962..2963,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"synerr.lua\"",
        ),
        line: 118,
        column: 16,
        span: 2963..2975,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
        column: 17,
        span: 2975..2976,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 19,
        span: 2977..2978,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B =\"",
        ),
        line: 118,
        column: 25,
        span: 2979..2984,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 26,
        span: 2984..2985,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 4,
        span: 2988..2989,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lua\"",
        ),
        line: 119,
        column: 11,
        span: 2989..2996,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 12,
        span: 2996..2997,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 14,
        span: 2998..2999,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 119,
        column: 17,
        span: 3000..3002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 18,
        span: 3002..3003,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
        column: 4,
        span: 3006..3007,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B.lua\"",
        ),
        line: 120,
        column: 11,
        span: 3007..3014,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
        column: 12,
        span: 3014..3015,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 14,
        span: 3016..3017,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(...=='B');require 'A'\"",
        ),
        line: 120,
        column: 45,
        span: 3018..3048,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 46,
        span: 3048..3049,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 121,
        column: 4,
        span: 3052..3053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lc\"",
        ),
        line: 121,
        column: 10,
        span: 3053..3059,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 121,
        column: 11,
        span: 3059..3060,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 121,
        column: 13,
        span: 3061..3062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 121,
        column: 16,
        span: 3063..3065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 17,
        span: 3065..3066,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
        column: 4,
        span: 3069..3070,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 122,
        column: 7,
        span: 3070..3073,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
        column: 8,
        span: 3073..3074,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 122,
        column: 10,
        span: 3075..3076,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 122,
        column: 13,
        span: 3077..3079,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 14,
        span: 3079..3080,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 123,
        column: 4,
        span: 3083..3084,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 123,
        column: 7,
        span: 3084..3087,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 123,
        column: 8,
        span: 3087..3088,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
        column: 10,
        span: 3089..3090,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 123,
        column: 13,
        span: 3091..3093,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 14,
        span: 3093..3094,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
        column: 4,
        span: 3097..3098,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 124,
        column: 10,
        span: 3098..3104,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
        column: 11,
        span: 3104..3105,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 124,
        column: 13,
        span: 3106..3107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 124,
        column: 16,
        span: 3108..3110,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 17,
        span: 3110..3111,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 125,
        column: 4,
        span: 3114..3115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 125,
        column: 11,
        span: 3115..3122,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 125,
        column: 12,
        span: 3122..3123,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 125,
        column: 14,
        span: 3124..3125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"package.loaded[...] = 25; require'C'\"",
        ),
        line: 125,
        column: 53,
        span: 3126..3164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 54,
        span: 3164..3165,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 126,
        column: 2,
        span: 3166..3167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 128,
        column: 3,
        span: 3169..3171,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 5,
        span: 3172..3173,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 128,
        column: 0,
        span: 3174..3177,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 129,
        column: 6,
        span: 3178..3183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extras",
        ),
        line: 129,
        column: 13,
        span: 3184..3190,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 15,
        span: 3191..3192,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nNAME = '%s'\nREQUIRED = ...\nreturn AA]]",
        ),
        line: 132,
        column: 12,
        span: 3193..3234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        line: 134,
        column: 12,
        span: 3236..3247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 13,
        span: 3247..3248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 134,
        column: 18,
        span: 3248..3253,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 19,
        span: 3253..3254,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 134,
        column: 22,
        span: 3255..3257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 23,
        span: 3257..3258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extras",
        ),
        line: 134,
        column: 30,
        span: 3259..3265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 31,
        span: 3265..3266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 7,
        span: 3320..3326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 8,
        span: 3326..3327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 137,
        column: 15,
        span: 3327..3334,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 137,
        column: 16,
        span: 3334..3335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 137,
        column: 26,
        span: 3335..3345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 27,
        span: 3345..3346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 137,
        column: 34,
        span: 3346..3353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 35,
        span: 3353..3354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 137,
        column: 37,
        span: 3355..3356,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 137,
        column: 40,
        span: 3356..3359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 41,
        span: 3359..3360,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 137,
        column: 44,
        span: 3361..3363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 45,
        span: 3363..3364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 137,
        column: 48,
        span: 3365..3367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 49,
        span: 3367..3368,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 52,
        span: 3369..3371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 137,
        column: 54,
        span: 3372..3373,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 137,
        column: 61,
        span: 3373..3380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 62,
        span: 3380..3381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 3382..3388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 3388..3389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 138,
        column: 15,
        span: 3389..3396,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
        column: 16,
        span: 3396..3397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 138,
        column: 26,
        span: 3397..3407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 27,
        span: 3407..3408,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 138,
        column: 34,
        span: 3408..3415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 35,
        span: 3415..3416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 138,
        column: 37,
        span: 3417..3418,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 138,
        column: 40,
        span: 3418..3421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 41,
        span: 3421..3422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 138,
        column: 45,
        span: 3423..3426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 46,
        span: 3426..3427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 138,
        column: 50,
        span: 3428..3431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 51,
        span: 3431..3432,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 54,
        span: 3433..3435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 138,
        column: 56,
        span: 3436..3437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 138,
        column: 63,
        span: 3437..3444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 64,
        span: 3444..3445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 7,
        span: 3446..3452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 8,
        span: 3452..3453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 139,
        column: 15,
        span: 3453..3460,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 139,
        column: 16,
        span: 3460..3461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 139,
        column: 26,
        span: 3461..3471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 27,
        span: 3471..3472,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"--x-\"",
        ),
        line: 139,
        column: 33,
        span: 3472..3478,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 34,
        span: 3478..3479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 139,
        column: 36,
        span: 3480..3481,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 139,
        column: 39,
        span: 3481..3484,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 40,
        span: 3484..3485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 139,
        column: 44,
        span: 3486..3489,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 45,
        span: 3489..3490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 139,
        column: 49,
        span: 3491..3494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 50,
        span: 3494..3495,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
        column: 53,
        span: 3496..3498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 139,
        column: 55,
        span: 3499..3500,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 139,
        column: 61,
        span: 3500..3506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 62,
        span: 3506..3507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 3508..3514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 3514..3515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 140,
        column: 15,
        span: 3515..3522,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 16,
        span: 3522..3523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 140,
        column: 26,
        span: 3523..3533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 27,
        span: 3533..3534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"---xX\"",
        ),
        line: 140,
        column: 34,
        span: 3534..3541,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 35,
        span: 3541..3542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 140,
        column: 37,
        span: 3543..3544,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 140,
        column: 40,
        span: 3544..3547,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 41,
        span: 3547..3548,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"---\"",
        ),
        line: 140,
        column: 47,
        span: 3549..3554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 48,
        span: 3554..3555,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XX\"",
        ),
        line: 140,
        column: 53,
        span: 3556..3560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 54,
        span: 3560..3561,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 57,
        span: 3562..3564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 140,
        column: 59,
        span: 3565..3566,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 140,
        column: 65,
        span: 3566..3572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 66,
        span: 3572..3573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 7,
        span: 3574..3580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 8,
        span: 3580..3581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 141,
        column: 15,
        span: 3581..3588,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 141,
        column: 16,
        span: 3588..3589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 141,
        column: 26,
        span: 3589..3599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 27,
        span: 3599..3600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 141,
        column: 28,
        span: 3600..3601,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 141,
        column: 35,
        span: 3601..3608,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 36,
        span: 3608..3609,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 141,
        column: 40,
        span: 3610..3613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 41,
        span: 3613..3614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dirsep",
        ),
        line: 141,
        column: 48,
        span: 3615..3621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 49,
        span: 3621..3622,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 52,
        span: 3623..3625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 141,
        column: 54,
        span: 3626..3627,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 141,
        column: 61,
        span: 3627..3634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 62,
        span: 3634..3635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
        column: 7,
        span: 3636..3642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 8,
        span: 3642..3643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 142,
        column: 15,
        span: 3643..3650,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
        column: 16,
        span: 3650..3651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 142,
        column: 26,
        span: 3651..3661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 27,
        span: 3661..3662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\\\\C.lua\"",
        ),
        line: 142,
        column: 37,
        span: 3662..3672,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 38,
        span: 3672..3673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 142,
        column: 40,
        span: 3674..3675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 142,
        column: 43,
        span: 3675..3678,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 44,
        span: 3678..3679,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\\\\"",
        ),
        line: 142,
        column: 49,
        span: 3680..3684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 50,
        span: 3684..3685,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 53,
        span: 3686..3688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 142,
        column: 55,
        span: 3689..3690,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"./C.lua\"",
        ),
        line: 142,
        column: 64,
        span: 3690..3699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 65,
        span: 3699..3700,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 144,
        column: 6,
        span: 3702..3707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 144,
        column: 14,
        span: 3708..3715,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 144,
        column: 16,
        span: 3716..3717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 144,
        column: 24,
        span: 3718..3725,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 144,
        column: 25,
        span: 3725..3726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 144,
        column: 0,
        span: 3726..3730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 146,
        column: 8,
        span: 3732..3739,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 9,
        span: 3739..3740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 146,
        column: 13,
        span: 3740..3744,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
        column: 15,
        span: 3745..3746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 146,
        column: 22,
        span: 3747..3753,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 23,
        span: 3753..3754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 146,
        column: 27,
        span: 3754..3758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 28,
        span: 3758..3759,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/?.lua;D/?.lc;D/?;D/??x?;D/L\"",
        ),
        line: 146,
        column: 59,
        span: 3759..3790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 60,
        span: 3790..3791,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/\"",
        ),
        line: 146,
        column: 65,
        span: 3792..3796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 66,
        span: 3796..3797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 146,
        column: 70,
        span: 3798..3801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 71,
        span: 3801..3802,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 148,
        column: 6,
        span: 3804..3809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 148,
        column: 10,
        span: 3810..3813,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 148,
        column: 12,
        span: 3814..3815,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 148,
        column: 21,
        span: 3816..3824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 23,
        span: 3825..3826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 148,
        column: 24,
        span: 3826..3827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 25,
        span: 3827..3828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 148,
        column: 27,
        span: 3829..3830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 28,
        span: 3830..3831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 148,
        column: 30,
        span: 3832..3833,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 31,
        span: 3833..3834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 148,
        column: 35,
        span: 3835..3838,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 36,
        span: 3838..3839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NAME",
        ),
        line: 149,
        column: 7,
        span: 3842..3846,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 9,
        span: 3847..3848,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 149,
        column: 0,
        span: 3849..3852,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 150,
        column: 8,
        span: 3855..3860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rr",
        ),
        line: 150,
        column: 11,
        span: 3861..3863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 12,
        span: 3863..3864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 150,
        column: 14,
        span: 3865..3866,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
        column: 16,
        span: 3867..3868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 150,
        column: 24,
        span: 3869..3876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 25,
        span: 3876..3877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 150,
        column: 26,
        span: 3877..3878,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 27,
        span: 3878..3879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 9,
        span: 3882..3888,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 10,
        span: 3888..3889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NAME",
        ),
        line: 151,
        column: 14,
        span: 3889..3893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 151,
        column: 17,
        span: 3894..3896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 151,
        column: 19,
        span: 3897..3898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 20,
        span: 3898..3899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
        column: 9,
        span: 3902..3908,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 10,
        span: 3908..3909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "REQUIRED",
        ),
        line: 152,
        column: 18,
        span: 3909..3917,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
        column: 21,
        span: 3918..3920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 152,
        column: 23,
        span: 3921..3922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 24,
        span: 3922..3923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
        column: 9,
        span: 3926..3932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 10,
        span: 3932..3933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rr",
        ),
        line: 153,
        column: 12,
        span: 3933..3935,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 15,
        span: 3936..3938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 153,
        column: 17,
        span: 3939..3940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 18,
        span: 3940..3941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 9,
        span: 3944..3950,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 10,
        span: 3950..3951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 154,
        column: 13,
        span: 3951..3954,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 16,
        span: 3955..3957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 154,
        column: 18,
        span: 3958..3959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 19,
        span: 3959..3960,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 155,
        column: 0,
        span: 3961..3964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 157,
        column: 2,
        span: 3966..3967,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 157,
        column: 4,
        span: 3968..3969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 157,
        column: 12,
        span: 3970..3977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names\"",
        ),
        line: 157,
        column: 19,
        span: 3977..3984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 158,
        column: 7,
        span: 3985..3991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 8,
        span: 3991..3992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 158,
        column: 9,
        span: 3992..3993,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 158,
        column: 10,
        span: 3993..3994,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 11,
        span: 3993..3995,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 158,
        column: 12,
        span: 3995..3996,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 158,
        column: 15,
        span: 3997..3999,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names\"",
        ),
        line: 158,
        column: 23,
        span: 4000..4007,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 158,
        column: 27,
        span: 4008..4011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 158,
        column: 29,
        span: 4012..4013,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 158,
        column: 30,
        span: 4013..4014,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 31,
        span: 4013..4015,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 158,
        column: 32,
        span: 4015..4016,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 158,
        column: 35,
        span: 4017..4019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 158,
        column: 37,
        span: 4020..4021,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names.lua\"",
        ),
        line: 158,
        column: 48,
        span: 4021..4032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 49,
        span: 4032..4033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 160,
        column: 3,
        span: 4035..4037,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 160,
        column: 4,
        span: 4037..4038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 160,
        column: 5,
        span: 4038..4039,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 160,
        column: 7,
        span: 4040..4041,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 160,
        column: 0,
        span: 4042..4045,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 161,
        column: 6,
        span: 4046..4051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 161,
        column: 9,
        span: 4052..4054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 10,
        span: 4054..4055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 161,
        column: 14,
        span: 4056..4059,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 16,
        span: 4060..4061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 161,
        column: 22,
        span: 4062..4067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 23,
        span: 4067..4068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 161,
        column: 30,
        span: 4068..4075,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 31,
        span: 4075..4076,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"err\"",
        ),
        line: 161,
        column: 37,
        span: 4077..4082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 38,
        span: 4082..4083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 162,
        column: 7,
        span: 4084..4090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 8,
        span: 4090..4091,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 162,
        column: 11,
        span: 4091..4094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 162,
        column: 14,
        span: 4095..4097,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 162,
        column: 18,
        span: 4098..4101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 162,
        column: 25,
        span: 4102..4108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
        column: 26,
        span: 4108..4109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 162,
        column: 30,
        span: 4109..4113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 31,
        span: 4113..4114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 162,
        column: 34,
        span: 4114..4117,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 35,
        span: 4117..4118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arithmetic\"",
        ),
        line: 162,
        column: 48,
        span: 4119..4131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 49,
        span: 4131..4132,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 162,
        column: 53,
        span: 4133..4136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 162,
        column: 55,
        span: 4137..4138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 162,
        column: 58,
        span: 4139..4141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 61,
        span: 4141..4144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 62,
        span: 4144..4145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 163,
        column: 3,
        span: 4146..4148,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 4,
        span: 4148..4149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 163,
        column: 8,
        span: 4150..4153,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 163,
        column: 10,
        span: 4154..4155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 163,
        column: 16,
        span: 4156..4161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 17,
        span: 4161..4162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 163,
        column: 24,
        span: 4162..4169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 25,
        span: 4169..4170,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"synerr\"",
        ),
        line: 163,
        column: 34,
        span: 4171..4179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 35,
        span: 4179..4180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 164,
        column: 7,
        span: 4181..4187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 8,
        span: 4187..4188,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 164,
        column: 11,
        span: 4188..4191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 164,
        column: 14,
        span: 4192..4194,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 164,
        column: 18,
        span: 4195..4198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 164,
        column: 25,
        span: 4199..4205,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 164,
        column: 26,
        span: 4205..4206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 164,
        column: 30,
        span: 4206..4210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 31,
        span: 4210..4211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 164,
        column: 34,
        span: 4211..4214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 35,
        span: 4214..4215,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error loading module\"",
        ),
        line: 164,
        column: 58,
        span: 4216..4238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 59,
        span: 4238..4239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 60,
        span: 4239..4240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 166,
        column: 7,
        span: 4242..4248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 8,
        span: 4248..4249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 166,
        column: 15,
        span: 4249..4256,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 166,
        column: 16,
        span: 4256..4257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 166,
        column: 26,
        span: 4257..4267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 27,
        span: 4267..4268,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 166,
        column: 30,
        span: 4268..4271,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 31,
        span: 4271..4272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 166,
        column: 39,
        span: 4273..4280,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 166,
        column: 40,
        span: 4280..4281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 166,
        column: 44,
        span: 4281..4285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 45,
        span: 4285..4286,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 166,
        column: 48,
        span: 4287..4289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 166,
        column: 50,
        span: 4290..4291,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 166,
        column: 57,
        span: 4291..4298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 58,
        span: 4298..4299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 7,
        span: 4300..4306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 8,
        span: 4306..4307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 167,
        column: 15,
        span: 4307..4314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 167,
        column: 18,
        span: 4314..4317,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 167,
        column: 21,
        span: 4318..4320,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 24,
        span: 4320..4323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 25,
        span: 4323..4324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
        column: 7,
        span: 4325..4331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 8,
        span: 4331..4332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 168,
        column: 15,
        span: 4332..4339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 168,
        column: 18,
        span: 4339..4342,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 168,
        column: 21,
        span: 4343..4345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 24,
        span: 4345..4348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 25,
        span: 4348..4349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 169,
        column: 3,
        span: 4350..4352,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 169,
        column: 5,
        span: 4353..4354,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 169,
        column: 0,
        span: 4355..4358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 170,
        column: 4,
        span: 4359..4362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 5,
        span: 4362..4363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        line: 170,
        column: 8,
        span: 4363..4366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 9,
        span: 4366..4367,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B.lua'",
        ),
        line: 170,
        column: 17,
        span: 4368..4375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 18,
        span: 4375..4376,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 170,
        column: 23,
        span: 4377..4381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 24,
        span: 4381..4382,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/B.lua\"",
        ),
        line: 170,
        column: 37,
        span: 4383..4395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 38,
        span: 4395..4396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 7,
        span: 4397..4403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 8,
        span: 4403..4404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 171,
        column: 15,
        span: 4404..4411,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 171,
        column: 16,
        span: 4411..4412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 171,
        column: 22,
        span: 4412..4418,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 171,
        column: 23,
        span: 4418..4419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 171,
        column: 24,
        span: 4419..4420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 25,
        span: 4420..4421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 172,
        column: 7,
        span: 4422..4428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 8,
        span: 4428..4429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 172,
        column: 15,
        span: 4429..4436,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        line: 172,
        column: 18,
        span: 4436..4439,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 21,
        span: 4440..4442,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 172,
        column: 26,
        span: 4443..4447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 27,
        span: 4447..4448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
        column: 7,
        span: 4449..4455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 8,
        span: 4455..4456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 173,
        column: 15,
        span: 4456..4463,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 16,
        span: 4463..4464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 173,
        column: 22,
        span: 4464..4470,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 23,
        span: 4470..4471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 173,
        column: 24,
        span: 4471..4472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 25,
        span: 4472..4473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 174,
        column: 7,
        span: 4474..4480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 8,
        span: 4480..4481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 174,
        column: 15,
        span: 4481..4488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 174,
        column: 18,
        span: 4488..4491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 174,
        column: 21,
        span: 4492..4494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 24,
        span: 4494..4497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 25,
        span: 4497..4498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 175,
        column: 8,
        span: 4499..4506,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 175,
        column: 9,
        span: 4506..4507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 175,
        column: 15,
        span: 4507..4513,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 175,
        column: 16,
        span: 4513..4514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 175,
        column: 17,
        span: 4514..4515,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 175,
        column: 19,
        span: 4516..4517,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 175,
        column: 0,
        span: 4518..4521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 176,
        column: 4,
        span: 4522..4525,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 5,
        span: 4525..4526,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        line: 176,
        column: 8,
        span: 4526..4529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 9,
        span: 4529..4530,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 176,
        column: 13,
        span: 4531..4534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 14,
        span: 4534..4535,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 176,
        column: 19,
        span: 4536..4540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 20,
        span: 4540..4541,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 176,
        column: 24,
        span: 4542..4545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 25,
        span: 4545..4546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 177,
        column: 4,
        span: 4578..4581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 5,
        span: 4581..4582,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A'",
        ),
        line: 177,
        column: 8,
        span: 4582..4585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 9,
        span: 4585..4586,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lua'",
        ),
        line: 177,
        column: 17,
        span: 4587..4594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 18,
        span: 4594..4595,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 177,
        column: 23,
        span: 4596..4600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 24,
        span: 4600..4601,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/A.lua\"",
        ),
        line: 177,
        column: 37,
        span: 4602..4614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 38,
        span: 4614..4615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 178,
        column: 8,
        span: 4616..4623,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 178,
        column: 9,
        span: 4623..4624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 178,
        column: 15,
        span: 4624..4630,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 178,
        column: 16,
        span: 4630..4631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 178,
        column: 17,
        span: 4631..4632,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 19,
        span: 4633..4634,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 178,
        column: 0,
        span: 4635..4638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 179,
        column: 3,
        span: 4639..4641,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 179,
        column: 4,
        span: 4641..4642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 179,
        column: 10,
        span: 4642..4648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 11,
        span: 4648..4649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 179,
        column: 12,
        span: 4649..4650,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lua'",
        ),
        line: 179,
        column: 19,
        span: 4650..4657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 20,
        span: 4657..4658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 180,
        column: 3,
        span: 4659..4661,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 180,
        column: 5,
        span: 4662..4663,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 180,
        column: 7,
        span: 4664..4665,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 180,
        column: 8,
        span: 4665..4666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 181,
        column: 4,
        span: 4667..4670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 5,
        span: 4670..4671,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A'",
        ),
        line: 181,
        column: 8,
        span: 4671..4674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 9,
        span: 4674..4675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lc'",
        ),
        line: 181,
        column: 16,
        span: 4676..4682,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 17,
        span: 4682..4683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 181,
        column: 20,
        span: 4684..4686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 21,
        span: 4686..4687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/A.lc\"",
        ),
        line: 181,
        column: 33,
        span: 4688..4699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 34,
        span: 4699..4700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 182,
        column: 7,
        span: 4733..4739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 8,
        span: 4739..4740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 182,
        column: 15,
        span: 4740..4747,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 16,
        span: 4747..4748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 182,
        column: 26,
        span: 4748..4758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 27,
        span: 4758..4759,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 182,
        column: 30,
        span: 4759..4762,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 31,
        span: 4762..4763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 182,
        column: 39,
        span: 4764..4771,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 40,
        span: 4771..4772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 182,
        column: 44,
        span: 4772..4776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 45,
        span: 4776..4777,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 182,
        column: 48,
        span: 4778..4780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 182,
        column: 50,
        span: 4781..4782,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lc\"",
        ),
        line: 182,
        column: 56,
        span: 4782..4788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 57,
        span: 4788..4789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 183,
        column: 7,
        span: 4790..4796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 8,
        span: 4796..4797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 183,
        column: 15,
        span: 4797..4804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 16,
        span: 4804..4805,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 183,
        column: 19,
        span: 4805..4808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 20,
        span: 4808..4809,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 183,
        column: 23,
        span: 4810..4812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 183,
        column: 26,
        span: 4813..4815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 27,
        span: 4815..4816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 184,
        column: 3,
        span: 4817..4819,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 5,
        span: 4820..4821,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 184,
        column: 0,
        span: 4822..4827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 185,
        column: 4,
        span: 4828..4831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 5,
        span: 4831..4832,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'K'",
        ),
        line: 185,
        column: 8,
        span: 4832..4835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 9,
        span: 4835..4836,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'L'",
        ),
        line: 185,
        column: 13,
        span: 4837..4840,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 14,
        span: 4840..4841,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 185,
        column: 20,
        span: 4842..4847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 21,
        span: 4847..4848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/L\"",
        ),
        line: 185,
        column: 30,
        span: 4849..4857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 31,
        span: 4857..4858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 186,
        column: 4,
        span: 4881..4884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 5,
        span: 4884..4885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'K'",
        ),
        line: 186,
        column: 8,
        span: 4885..4888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 9,
        span: 4888..4889,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'L'",
        ),
        line: 186,
        column: 13,
        span: 4890..4893,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 14,
        span: 4893..4894,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 186,
        column: 20,
        span: 4895..4900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 21,
        span: 4900..4901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/L\"",
        ),
        line: 186,
        column: 30,
        span: 4902..4910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 31,
        span: 4910..4911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 7,
        span: 4953..4959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 8,
        span: 4959..4960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 187,
        column: 14,
        span: 4960..4966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 15,
        span: 4966..4967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 187,
        column: 17,
        span: 4967..4969,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 18,
        span: 4969..4970,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_REQUIREDNAME\"",
        ),
        line: 187,
        column: 34,
        span: 4971..4986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 35,
        span: 4986..4987,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 38,
        span: 4988..4990,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 187,
        column: 42,
        span: 4991..4994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 43,
        span: 4994..4995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 189,
        column: 3,
        span: 4997..4999,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 5,
        span: 5000..5001,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 189,
        column: 9,
        span: 5002..5005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 190,
        column: 4,
        span: 5006..5009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 5,
        span: 5009..5010,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 190,
        column: 8,
        span: 5010..5013,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 9,
        span: 5013..5014,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 190,
        column: 16,
        span: 5015..5021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 17,
        span: 5021..5022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 190,
        column: 20,
        span: 5023..5025,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 21,
        span: 5025..5026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/XXxX\"",
        ),
        line: 190,
        column: 33,
        span: 5027..5038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 34,
        span: 5038..5039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        line: 193,
        column: 12,
        span: 5042..5053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 13,
        span: 5053..5054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 193,
        column: 18,
        span: 5054..5059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 19,
        span: 5059..5060,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 198,
        column: 6,
        span: 5099..5104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 198,
        column: 9,
        span: 5105..5107,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 11,
        span: 5108..5109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 198,
        column: 0,
        span: 5110..5112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 200,
        column: 8,
        span: 5114..5121,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 9,
        span: 5121..5122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 200,
        column: 13,
        span: 5122..5126,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 200,
        column: 15,
        span: 5127..5128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 200,
        column: 22,
        span: 5129..5135,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 23,
        span: 5135..5136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 200,
        column: 27,
        span: 5136..5140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 28,
        span: 5140..5141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/?.lua;D/?/init.lua\"",
        ),
        line: 200,
        column: 50,
        span: 5141..5163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 51,
        span: 5163..5164,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/\"",
        ),
        line: 200,
        column: 56,
        span: 5165..5169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 57,
        span: 5169..5170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 200,
        column: 61,
        span: 5171..5174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 62,
        span: 5174..5175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 202,
        column: 6,
        span: 5177..5182,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 202,
        column: 8,
        span: 5183..5184,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 202,
        column: 10,
        span: 5185..5186,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 203,
        column: 4,
        span: 5189..5190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/init.lua\"",
        ),
        line: 203,
        column: 17,
        span: 5190..5203,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 203,
        column: 18,
        span: 5203..5204,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 20,
        span: 5205..5206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA = 10\"",
        ),
        line: 203,
        column: 30,
        span: 5207..5216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 31,
        span: 5216..5217,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 204,
        column: 4,
        span: 5220..5221,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/xuxu.lua\"",
        ),
        line: 204,
        column: 17,
        span: 5221..5234,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 204,
        column: 18,
        span: 5234..5235,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
        column: 20,
        span: 5236..5237,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA = 20\"",
        ),
        line: 204,
        column: 30,
        span: 5238..5247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 31,
        span: 5247..5248,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 205,
        column: 2,
        span: 5249..5250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        line: 207,
        column: 12,
        span: 5252..5263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 13,
        span: 5263..5264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 207,
        column: 18,
        span: 5264..5269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 19,
        span: 5269..5270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ENV = {}\\n\"",
        ),
        line: 207,
        column: 33,
        span: 5271..5284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 34,
        span: 5284..5285,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nreturn _ENV\\n\"",
        ),
        line: 207,
        column: 52,
        span: 5286..5303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 53,
        span: 5303..5304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 208,
        column: 3,
        span: 5305..5307,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 208,
        column: 5,
        span: 5308..5309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 0,
        span: 5309..5311,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 210,
        column: 6,
        span: 5313..5318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 210,
        column: 8,
        span: 5319..5320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 9,
        span: 5320..5321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 210,
        column: 13,
        span: 5322..5325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 210,
        column: 15,
        span: 5326..5327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 210,
        column: 22,
        span: 5328..5334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 23,
        span: 5334..5335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 210,
        column: 30,
        span: 5335..5342,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 210,
        column: 34,
        span: 5342..5346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 35,
        span: 5346..5347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
        column: 7,
        span: 5348..5354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 8,
        span: 5354..5355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 211,
        column: 11,
        span: 5355..5358,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 14,
        span: 5359..5361,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/P1/init.lua\"",
        ),
        line: 211,
        column: 33,
        span: 5362..5380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 34,
        span: 5380..5381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
        column: 7,
        span: 5382..5388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 8,
        span: 5388..5389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 212,
        column: 10,
        span: 5389..5391,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 212,
        column: 13,
        span: 5392..5394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 15,
        span: 5394..5396,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 212,
        column: 19,
        span: 5397..5400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 212,
        column: 21,
        span: 5401..5402,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 22,
        span: 5402..5403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 212,
        column: 24,
        span: 5403..5405,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 212,
        column: 27,
        span: 5406..5408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 30,
        span: 5408..5411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 31,
        span: 5411..5412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 213,
        column: 7,
        span: 5413..5419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 8,
        span: 5419..5420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 213,
        column: 15,
        span: 5420..5427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 213,
        column: 19,
        span: 5427..5431,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 213,
        column: 22,
        span: 5432..5434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 213,
        column: 24,
        span: 5435..5436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 25,
        span: 5436..5437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 214,
        column: 7,
        span: 5438..5444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 8,
        span: 5444..5445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 214,
        column: 15,
        span: 5445..5452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 214,
        column: 19,
        span: 5452..5456,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 214,
        column: 22,
        span: 5457..5459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 214,
        column: 24,
        span: 5460..5461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 25,
        span: 5461..5462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 216,
        column: 7,
        span: 5464..5470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 8,
        span: 5470..5471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 216,
        column: 15,
        span: 5471..5478,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
        column: 16,
        span: 5478..5479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 216,
        column: 26,
        span: 5479..5489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 27,
        span: 5489..5490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 216,
        column: 36,
        span: 5490..5499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 37,
        span: 5499..5500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 216,
        column: 45,
        span: 5501..5508,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
        column: 46,
        span: 5508..5509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 216,
        column: 50,
        span: 5509..5513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 51,
        span: 5513..5514,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 216,
        column: 54,
        span: 5515..5517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 216,
        column: 56,
        span: 5518..5519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/xuxu.lua\"",
        ),
        line: 216,
        column: 69,
        span: 5519..5532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 70,
        span: 5532..5533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 217,
        column: 2,
        span: 5534..5535,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
        column: 3,
        span: 5535..5536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 217,
        column: 7,
        span: 5536..5540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 8,
        span: 5540..5541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 217,
        column: 12,
        span: 5542..5545,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 217,
        column: 14,
        span: 5546..5547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
        column: 21,
        span: 5548..5554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 22,
        span: 5554..5555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 217,
        column: 29,
        span: 5555..5562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 217,
        column: 38,
        span: 5562..5571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 39,
        span: 5571..5572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
        column: 7,
        span: 5573..5579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 8,
        span: 5579..5580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 218,
        column: 10,
        span: 5580..5582,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 218,
        column: 13,
        span: 5583..5585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 15,
        span: 5585..5587,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 218,
        column: 19,
        span: 5588..5591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 218,
        column: 21,
        span: 5592..5593,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 218,
        column: 22,
        span: 5593..5594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 218,
        column: 26,
        span: 5594..5598,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 218,
        column: 27,
        span: 5598..5599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 218,
        column: 29,
        span: 5599..5601,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 218,
        column: 32,
        span: 5602..5604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 35,
        span: 5604..5607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 36,
        span: 5607..5608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 219,
        column: 7,
        span: 5609..5615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 8,
        span: 5615..5616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 219,
        column: 11,
        span: 5616..5619,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 219,
        column: 14,
        span: 5620..5622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/P1/xuxu.lua\"",
        ),
        line: 219,
        column: 33,
        span: 5623..5641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 34,
        span: 5641..5642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 220,
        column: 7,
        span: 5643..5649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 8,
        span: 5649..5650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 220,
        column: 15,
        span: 5650..5657,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 220,
        column: 24,
        span: 5657..5666,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 220,
        column: 27,
        span: 5667..5669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 220,
        column: 29,
        span: 5670..5671,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 220,
        column: 30,
        span: 5671..5672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 220,
        column: 34,
        span: 5672..5676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 35,
        span: 5676..5677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 7,
        span: 5678..5684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 8,
        span: 5684..5685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 221,
        column: 15,
        span: 5685..5692,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 221,
        column: 24,
        span: 5692..5701,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 27,
        span: 5702..5704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 221,
        column: 29,
        span: 5705..5706,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 30,
        span: 5706..5707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 221,
        column: 34,
        span: 5707..5711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 35,
        span: 5711..5712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 222,
        column: 7,
        span: 5713..5719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 8,
        span: 5719..5720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 222,
        column: 15,
        span: 5720..5727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 222,
        column: 19,
        span: 5727..5731,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 222,
        column: 22,
        span: 5732..5734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 222,
        column: 24,
        span: 5735..5736,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 222,
        column: 28,
        span: 5737..5740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 222,
        column: 30,
        span: 5741..5742,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 31,
        span: 5742..5743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 222,
        column: 33,
        span: 5743..5745,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 222,
        column: 36,
        span: 5746..5748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 39,
        span: 5748..5751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 40,
        span: 5751..5752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        line: 225,
        column: 12,
        span: 5755..5766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 13,
        span: 5766..5767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 225,
        column: 18,
        span: 5767..5772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 19,
        span: 5772..5773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 228,
        column: 8,
        span: 5776..5783,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 228,
        column: 9,
        span: 5783..5784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 228,
        column: 13,
        span: 5784..5788,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 15,
        span: 5789..5790,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 228,
        column: 18,
        span: 5791..5793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 229,
        column: 7,
        span: 5794..5800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 8,
        span: 5800..5801,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 229,
        column: 11,
        span: 5801..5804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 229,
        column: 17,
        span: 5805..5810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 18,
        span: 5810..5811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 229,
        column: 25,
        span: 5811..5818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
        column: 26,
        span: 5818..5819,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist\"",
        ),
        line: 229,
        column: 48,
        span: 5820..5841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 49,
        span: 5841..5842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 50,
        span: 5842..5843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 230,
        column: 8,
        span: 5844..5851,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 9,
        span: 5851..5852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 230,
        column: 13,
        span: 5852..5856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 15,
        span: 5857..5858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"??\\0?\"",
        ),
        line: 230,
        column: 23,
        span: 5859..5866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 7,
        span: 5867..5873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 8,
        span: 5873..5874,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 231,
        column: 11,
        span: 5874..5877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 231,
        column: 17,
        span: 5878..5883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 18,
        span: 5883..5884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 231,
        column: 25,
        span: 5884..5891,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
        column: 26,
        span: 5891..5892,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist1\"",
        ),
        line: 231,
        column: 49,
        span: 5893..5915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 50,
        span: 5915..5916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 51,
        span: 5916..5917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 233,
        column: 8,
        span: 5919..5926,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 233,
        column: 9,
        span: 5926..5927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 233,
        column: 13,
        span: 5927..5931,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 15,
        span: 5932..5933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 233,
        column: 0,
        span: 5934..5941,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 236,
        column: 6,
        span: 5976..5981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 236,
        column: 12,
        span: 5982..5987,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 236,
        column: 14,
        span: 5988..5989,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist2\"",
        ),
        line: 236,
        column: 37,
        span: 5990..6012,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 237,
        column: 6,
        span: 6013..6018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 237,
        column: 8,
        span: 6019..6020,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 9,
        span: 6020..6021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 237,
        column: 13,
        span: 6022..6025,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 237,
        column: 15,
        span: 6026..6027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 237,
        column: 21,
        span: 6028..6033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 22,
        span: 6033..6034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 237,
        column: 29,
        span: 6034..6041,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 30,
        span: 6041..6042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 237,
        column: 36,
        span: 6043..6048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 37,
        span: 6048..6049,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 238,
        column: 4,
        span: 6050..6053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 238,
        column: 6,
        span: 6054..6055,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 238,
        column: 9,
        span: 6056..6058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 238,
        column: 16,
        span: 6059..6065,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 238,
        column: 17,
        span: 6065..6066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 238,
        column: 23,
        span: 6066..6072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 24,
        span: 6072..6073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 238,
        column: 31,
        span: 6073..6080,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 238,
        column: 32,
        span: 6080..6081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 238,
        column: 36,
        span: 6081..6085,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 238,
        column: 38,
        span: 6085..6087,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 238,
        column: 41,
        span: 6087..6090,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 238,
        column: 43,
        span: 6090..6092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 238,
        column: 50,
        span: 6092..6099,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 238,
        column: 51,
        span: 6099..6100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 238,
        column: 56,
        span: 6100..6105,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 57,
        span: 6105..6106,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^;]+\"",
        ),
        line: 238,
        column: 65,
        span: 6107..6114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 66,
        span: 6114..6115,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 238,
        column: 0,
        span: 6116..6118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 239,
        column: 4,
        span: 6121..6122,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 6,
        span: 6123..6124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 239,
        column: 13,
        span: 6125..6131,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 239,
        column: 14,
        span: 6131..6132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 239,
        column: 18,
        span: 6132..6136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 19,
        span: 6136..6137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 239,
        column: 20,
        span: 6137..6138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 21,
        span: 6138..6139,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 239,
        column: 25,
        span: 6140..6143,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 26,
        span: 6143..6144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 239,
        column: 32,
        span: 6145..6150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 33,
        span: 6150..6151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 9,
        span: 6154..6160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 10,
        span: 6160..6161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 240,
        column: 16,
        span: 6161..6167,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 17,
        span: 6167..6168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 240,
        column: 21,
        span: 6168..6172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 22,
        span: 6172..6173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 240,
        column: 25,
        span: 6173..6176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 26,
        span: 6176..6177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 240,
        column: 28,
        span: 6178..6179,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 29,
        span: 6179..6180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 31,
        span: 6180..6182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 32,
        span: 6182..6183,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 240,
        column: 37,
        span: 6184..6188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 38,
        span: 6188..6189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 39,
        span: 6189..6190,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 241,
        column: 0,
        span: 6191..6194,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 243,
        column: 3,
        span: 6196..6198,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 244,
        column: 8,
        span: 6251..6256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchers",
        ),
        line: 244,
        column: 18,
        span: 6257..6266,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 244,
        column: 20,
        span: 6267..6268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 244,
        column: 28,
        span: 6269..6276,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 244,
        column: 29,
        span: 6276..6277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchers",
        ),
        line: 244,
        column: 0,
        span: 6277..6286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 245,
        column: 10,
        span: 6289..6296,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 11,
        span: 6296..6297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchers",
        ),
        line: 245,
        column: 20,
        span: 6297..6306,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 22,
        span: 6307..6308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 0,
        span: 6308..6310,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 246,
        column: 8,
        span: 6313..6318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 246,
        column: 11,
        span: 6319..6321,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 12,
        span: 6321..6322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 246,
        column: 16,
        span: 6323..6326,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 18,
        span: 6327..6328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 246,
        column: 24,
        span: 6329..6334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 25,
        span: 6334..6335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 246,
        column: 32,
        span: 6335..6342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 33,
        span: 6342..6343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 246,
        column: 37,
        span: 6344..6347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 38,
        span: 6347..6348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 9,
        span: 6351..6357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 10,
        span: 6357..6358,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 247,
        column: 13,
        span: 6358..6361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 247,
        column: 16,
        span: 6362..6364,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 247,
        column: 20,
        span: 6365..6368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 247,
        column: 27,
        span: 6369..6375,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 247,
        column: 28,
        span: 6375..6376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 247,
        column: 32,
        span: 6376..6380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 33,
        span: 6380..6381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 247,
        column: 36,
        span: 6381..6384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 37,
        span: 6384..6385,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"must be a table\"",
        ),
        line: 247,
        column: 55,
        span: 6386..6403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 56,
        span: 6403..6404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 57,
        span: 6404..6405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 248,
        column: 10,
        span: 6408..6415,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 248,
        column: 11,
        span: 6415..6416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchers",
        ),
        line: 248,
        column: 20,
        span: 6416..6425,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 248,
        column: 22,
        span: 6426..6427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchers",
        ),
        line: 248,
        column: 0,
        span: 6428..6437,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
        column: 0,
        span: 6438..6441,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 251,
        column: 6,
        span: 6443..6448,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 251,
        column: 15,
        span: 6449..6457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "import",
        ),
        line: 251,
        column: 22,
        span: 6458..6464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 23,
        span: 6464..6465,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 251,
        column: 26,
        span: 6465..6468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 27,
        span: 6468..6469,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 252,
        column: 8,
        span: 6472..6477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 252,
        column: 10,
        span: 6478..6479,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 12,
        span: 6480..6481,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 252,
        column: 14,
        span: 6482..6483,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 252,
        column: 17,
        span: 6483..6486,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 252,
        column: 18,
        span: 6486..6487,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 253,
        column: 9,
        span: 6490..6496,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 253,
        column: 18,
        span: 6497..6505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 20,
        span: 6506..6507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 253,
        column: 21,
        span: 6507..6508,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 22,
        span: 6508..6509,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 254,
        column: 8,
        span: 6514..6517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 254,
        column: 10,
        span: 6518..6519,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 11,
        span: 6519..6520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 12,
        span: 6519..6521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 13,
        span: 6521..6522,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 254,
        column: 15,
        span: 6523..6524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 254,
        column: 16,
        span: 6524..6525,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 254,
        column: 19,
        span: 6526..6528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 254,
        column: 21,
        span: 6529..6530,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 254,
        column: 22,
        span: 6530..6531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 254,
        column: 23,
        span: 6531..6532,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 254,
        column: 24,
        span: 6532..6533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 254,
        column: 25,
        span: 6533..6534,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 254,
        column: 26,
        span: 6534..6535,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 254,
        column: 27,
        span: 6535..6536,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 29,
        span: 6537..6538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 254,
        column: 32,
        span: 6539..6541,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 254,
        column: 33,
        span: 6541..6542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 254,
        column: 34,
        span: 6542..6543,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 254,
        column: 35,
        span: 6543..6544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 254,
        column: 36,
        span: 6544..6545,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 254,
        column: 37,
        span: 6545..6546,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 254,
        column: 38,
        span: 6546..6547,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 254,
        column: 0,
        span: 6548..6551,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
        column: 0,
        span: 6554..6557,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 256,
        column: 0,
        span: 6558..6561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 7,
        span: 6608..6614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 8,
        span: 6614..6615,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 259,
        column: 11,
        span: 6615..6618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 259,
        column: 17,
        span: 6619..6624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 18,
        span: 6624..6625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        line: 259,
        column: 24,
        span: 6625..6631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 25,
        span: 6631..6632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'XUXU'",
        ),
        line: 259,
        column: 32,
        span: 6633..6639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 33,
        span: 6639..6640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 34,
        span: 6640..6641,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 266,
        column: 6,
        span: 6681..6686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 266,
        column: 8,
        span: 6687..6688,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
        column: 10,
        span: 6689..6690,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 266,
        column: 13,
        span: 6691..6693,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 269,
        column: 6,
        span: 6780..6785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 269,
        column: 9,
        span: 6786..6788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 10,
        span: 6788..6789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 269,
        column: 14,
        span: 6790..6793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 15,
        span: 6793..6794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 269,
        column: 20,
        span: 6795..6799,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 269,
        column: 22,
        span: 6800..6801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 269,
        column: 30,
        span: 6802..6809,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 31,
        span: 6809..6810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 269,
        column: 38,
        span: 6810..6817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 39,
        span: 6817..6818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 269,
        column: 41,
        span: 6818..6820,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        line: 269,
        column: 47,
        span: 6820..6826,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 48,
        span: 6826..6827,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*\"",
        ),
        line: 269,
        column: 52,
        span: 6828..6831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 53,
        span: 6831..6832,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 270,
        column: 3,
        span: 6833..6835,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 270,
        column: 7,
        span: 6836..6839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 270,
        column: 10,
        span: 6840..6842,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 270,
        column: 0,
        span: 6843..6847,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 271,
        column: 8,
        span: 6850..6855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 271,
        column: 10,
        span: 6856..6857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 11,
        span: 6857..6858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 271,
        column: 15,
        span: 6859..6862,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 16,
        span: 6862..6863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 271,
        column: 21,
        span: 6864..6868,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 271,
        column: 23,
        span: 6869..6870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 271,
        column: 31,
        span: 6871..6878,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 271,
        column: 32,
        span: 6878..6879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 271,
        column: 39,
        span: 6879..6886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 40,
        span: 6886..6887,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"donotexist\"",
        ),
        line: 271,
        column: 52,
        span: 6887..6899,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 53,
        span: 6899..6900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 271,
        column: 55,
        span: 6901..6902,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 271,
        column: 57,
        span: 6902..6904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 271,
        column: 63,
        span: 6904..6910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 64,
        span: 6910..6911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 272,
        column: 9,
        span: 6914..6920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 10,
        span: 6920..6921,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 272,
        column: 13,
        span: 6921..6924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 272,
        column: 15,
        span: 6925..6926,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 272,
        column: 19,
        span: 6927..6930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 272,
        column: 24,
        span: 6931..6935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 25,
        span: 6935..6936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 272,
        column: 28,
        span: 6936..6939,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 29,
        span: 6939..6940,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 272,
        column: 32,
        span: 6941..6943,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 272,
        column: 41,
        span: 6944..6952,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 272,
        column: 45,
        span: 6953..6956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 272,
        column: 50,
        span: 6957..6961,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 272,
        column: 53,
        span: 6962..6964,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"absent\"",
        ),
        line: 272,
        column: 62,
        span: 6965..6973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 63,
        span: 6973..6974,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 273,
        column: 4,
        span: 6977..6978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 5,
        span: 6978..6979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 273,
        column: 12,
        span: 6979..6986,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 273,
        column: 15,
        span: 6987..6989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 273,
        column: 21,
        span: 6990..6995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 22,
        span: 6995..6996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 23,
        span: 6996..6997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> cannot load dynamic library <<<\\n'",
        ),
        line: 273,
        column: 65,
        span: 6997..7039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 66,
        span: 7039..7040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 274,
        column: 8,
        span: 7043..7048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 9,
        span: 7048..7049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 274,
        column: 12,
        span: 7049..7052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 13,
        span: 7052..7053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 274,
        column: 18,
        span: 7054..7058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 19,
        span: 7058..7059,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 275,
        column: 0,
        span: 7060..7064,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 277,
        column: 8,
        span: 7090..7095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 277,
        column: 10,
        span: 7096..7097,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 12,
        span: 7098..7099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 19,
        span: 7100..7106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 20,
        span: 7106..7107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 277,
        column: 27,
        span: 7107..7114,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 28,
        span: 7114..7115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 277,
        column: 35,
        span: 7115..7122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 36,
        span: 7122..7123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 277,
        column: 38,
        span: 7123..7125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        line: 277,
        column: 44,
        span: 7125..7131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 45,
        span: 7131..7132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 277,
        column: 47,
        span: 7133..7134,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 277,
        column: 49,
        span: 7134..7136,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"onefunction\"",
        ),
        line: 277,
        column: 62,
        span: 7136..7149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 63,
        span: 7149..7150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 64,
        span: 7150..7151,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 278,
        column: 8,
        span: 7154..7159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 278,
        column: 10,
        span: 7160..7161,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 11,
        span: 7161..7162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 278,
        column: 13,
        span: 7163..7164,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 278,
        column: 15,
        span: 7165..7166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 278,
        column: 17,
        span: 7167..7168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 18,
        span: 7168..7169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 20,
        span: 7168..7171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 21,
        span: 7171..7172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 24,
        span: 7172..7175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 25,
        span: 7175..7176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
        column: 9,
        span: 7179..7185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 10,
        span: 7185..7186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 279,
        column: 11,
        span: 7186..7187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 14,
        span: 7188..7190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 17,
        span: 7190..7193,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 279,
        column: 21,
        span: 7194..7197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 279,
        column: 23,
        span: 7198..7199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 26,
        span: 7200..7202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 29,
        span: 7202..7205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 30,
        span: 7205..7206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 281,
        column: 4,
        span: 7210..7211,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 281,
        column: 6,
        span: 7212..7213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 281,
        column: 13,
        span: 7214..7220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 14,
        span: 7220..7221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 281,
        column: 21,
        span: 7221..7228,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 281,
        column: 22,
        span: 7228..7229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 281,
        column: 29,
        span: 7229..7236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 30,
        span: 7236..7237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 281,
        column: 32,
        span: 7237..7239,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        line: 281,
        column: 38,
        span: 7239..7245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 39,
        span: 7245..7246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 281,
        column: 41,
        span: 7247..7248,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 281,
        column: 43,
        span: 7248..7250,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"anotherfunc\"",
        ),
        line: 281,
        column: 56,
        span: 7250..7263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 57,
        span: 7263..7264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 58,
        span: 7264..7265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 282,
        column: 9,
        span: 7268..7274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 10,
        span: 7274..7275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 282,
        column: 11,
        span: 7275..7276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 12,
        span: 7276..7277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
        column: 14,
        span: 7276..7279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 15,
        span: 7279..7280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
        column: 18,
        span: 7280..7283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 19,
        span: 7283..7284,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 282,
        column: 22,
        span: 7285..7287,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10%20\\n\"",
        ),
        line: 282,
        column: 32,
        span: 7288..7297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 33,
        span: 7297..7298,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 285,
        column: 8,
        span: 7328..7333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 285,
        column: 10,
        span: 7334..7335,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 11,
        span: 7335..7336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 285,
        column: 15,
        span: 7337..7340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 16,
        span: 7340..7341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 285,
        column: 21,
        span: 7342..7346,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
        column: 23,
        span: 7347..7348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 285,
        column: 31,
        span: 7349..7356,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 285,
        column: 32,
        span: 7356..7357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 285,
        column: 39,
        span: 7357..7364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 40,
        span: 7364..7365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 285,
        column: 42,
        span: 7365..7367,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        line: 285,
        column: 48,
        span: 7367..7373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 49,
        span: 7373..7374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 285,
        column: 51,
        span: 7375..7376,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 285,
        column: 53,
        span: 7376..7378,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 285,
        column: 59,
        span: 7378..7384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 60,
        span: 7384..7385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 286,
        column: 9,
        span: 7388..7394,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 10,
        span: 7394..7395,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 286,
        column: 13,
        span: 7395..7398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 286,
        column: 15,
        span: 7399..7400,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 286,
        column: 19,
        span: 7401..7404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 286,
        column: 24,
        span: 7405..7409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 25,
        span: 7409..7410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 286,
        column: 28,
        span: 7410..7413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 29,
        span: 7413..7414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 286,
        column: 32,
        span: 7415..7417,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 286,
        column: 41,
        span: 7418..7426,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 286,
        column: 45,
        span: 7427..7430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 286,
        column: 50,
        span: 7431..7435,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 286,
        column: 53,
        span: 7436..7438,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"init\"",
        ),
        line: 286,
        column: 60,
        span: 7439..7445,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 61,
        span: 7445..7446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 287,
        column: 4,
        span: 7449..7450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 5,
        span: 7450..7451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 287,
        column: 9,
        span: 7452..7455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 10,
        span: 7455..7456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 287,
        column: 15,
        span: 7457..7461,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 287,
        column: 17,
        span: 7462..7463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 287,
        column: 25,
        span: 7464..7471,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 287,
        column: 26,
        span: 7471..7472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 287,
        column: 33,
        span: 7472..7479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 34,
        span: 7479..7480,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"donotexist\"",
        ),
        line: 287,
        column: 46,
        span: 7480..7492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 47,
        span: 7492..7493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 287,
        column: 49,
        span: 7494..7495,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 287,
        column: 51,
        span: 7495..7497,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 287,
        column: 57,
        span: 7497..7503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 58,
        span: 7503..7504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 288,
        column: 9,
        span: 7507..7513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 10,
        span: 7513..7514,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 288,
        column: 13,
        span: 7514..7517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 288,
        column: 15,
        span: 7518..7519,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 288,
        column: 19,
        span: 7520..7523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 288,
        column: 24,
        span: 7524..7528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 25,
        span: 7528..7529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 288,
        column: 28,
        span: 7529..7532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 29,
        span: 7532..7533,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 288,
        column: 32,
        span: 7534..7536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 288,
        column: 41,
        span: 7537..7545,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 288,
        column: 45,
        span: 7546..7549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 288,
        column: 50,
        span: 7550..7554,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 288,
        column: 53,
        span: 7555..7557,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"open\"",
        ),
        line: 288,
        column: 60,
        span: 7558..7564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 61,
        span: 7564..7565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 291,
        column: 4,
        span: 7629..7630,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 291,
        column: 6,
        span: 7631..7632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 291,
        column: 13,
        span: 7633..7639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 14,
        span: 7639..7640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 291,
        column: 21,
        span: 7640..7647,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 291,
        column: 22,
        span: 7647..7648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 291,
        column: 29,
        span: 7648..7655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 30,
        span: 7655..7656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 291,
        column: 32,
        span: 7656..7658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib11\"",
        ),
        line: 291,
        column: 39,
        span: 7658..7665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 40,
        span: 7665..7666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 291,
        column: 42,
        span: 7667..7668,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 291,
        column: 44,
        span: 7668..7670,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"luaopen_lib11\"",
        ),
        line: 291,
        column: 59,
        span: 7670..7685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 60,
        span: 7685..7686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 61,
        span: 7686..7687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 292,
        column: 9,
        span: 7690..7696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 10,
        span: 7696..7697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 292,
        column: 11,
        span: 7697..7698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 12,
        span: 7698..7699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 13,
        span: 7699..7700,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 292,
        column: 16,
        span: 7701..7703,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exported\"",
        ),
        line: 292,
        column: 27,
        span: 7704..7714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 28,
        span: 7714..7715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 295,
        column: 10,
        span: 7762..7769,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 295,
        column: 11,
        span: 7769..7770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 295,
        column: 16,
        span: 7770..7775,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 295,
        column: 18,
        span: 7776..7777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 295,
        column: 21,
        span: 7778..7780,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 295,
        column: 24,
        span: 7780..7783,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 296,
        column: 8,
        span: 7786..7791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib2",
        ),
        line: 296,
        column: 13,
        span: 7792..7796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
        column: 14,
        span: 7796..7797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 296,
        column: 18,
        span: 7798..7801,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 296,
        column: 20,
        span: 7802..7803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 296,
        column: 28,
        span: 7804..7811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib2-v2\"",
        ),
        line: 296,
        column: 37,
        span: 7811..7820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 297,
        column: 9,
        span: 7823..7829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 10,
        span: 7829..7830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 297,
        column: 16,
        span: 7830..7836,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 297,
        column: 17,
        span: 7836..7837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 297,
        column: 21,
        span: 7837..7841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 22,
        span: 7841..7842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 297,
        column: 25,
        span: 7842..7845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 26,
        span: 7845..7846,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/lib2-v2\"",
        ),
        line: 297,
        column: 41,
        span: 7847..7861,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 42,
        span: 7861..7862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 44,
        span: 7862..7864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 45,
        span: 7864..7865,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 297,
        column: 50,
        span: 7866..7870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 51,
        span: 7870..7871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 52,
        span: 7871..7872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 300,
        column: 9,
        span: 7951..7957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 10,
        span: 7957..7958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 300,
        column: 14,
        span: 7958..7962,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 300,
        column: 15,
        span: 7962..7963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 300,
        column: 16,
        span: 7963..7964,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 300,
        column: 19,
        span: 7965..7967,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib2-v2\"",
        ),
        line: 300,
        column: 29,
        span: 7968..7977,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 300,
        column: 33,
        span: 7978..7981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 300,
        column: 38,
        span: 7982..7986,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 300,
        column: 39,
        span: 7986..7987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 300,
        column: 40,
        span: 7987..7988,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 300,
        column: 43,
        span: 7989..7991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 300,
        column: 46,
        span: 7992..7994,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib2-v2\"",
        ),
        line: 300,
        column: 55,
        span: 7994..8003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 56,
        span: 8003..8004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 301,
        column: 9,
        span: 8007..8013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 10,
        span: 8013..8014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib2",
        ),
        line: 301,
        column: 14,
        span: 8014..8018,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 301,
        column: 15,
        span: 8018..8019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "id",
        ),
        line: 301,
        column: 17,
        span: 8019..8021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 18,
        span: 8021..8022,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 301,
        column: 21,
        span: 8022..8025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 22,
        span: 8025..8026,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 301,
        column: 25,
        span: 8027..8029,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 301,
        column: 30,
        span: 8030..8034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 31,
        span: 8034..8035,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 304,
        column: 8,
        span: 8099..8104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fs",
        ),
        line: 304,
        column: 11,
        span: 8105..8107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 304,
        column: 12,
        span: 8107..8108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 304,
        column: 16,
        span: 8109..8112,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 304,
        column: 18,
        span: 8113..8114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 304,
        column: 26,
        span: 8115..8122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.sub\"",
        ),
        line: 304,
        column: 36,
        span: 8122..8132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 305,
        column: 9,
        span: 8135..8141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 10,
        span: 8141..8142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 305,
        column: 14,
        span: 8142..8146,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 305,
        column: 15,
        span: 8146..8147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 305,
        column: 16,
        span: 8147..8148,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 305,
        column: 19,
        span: 8149..8151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.sub\"",
        ),
        line: 305,
        column: 30,
        span: 8152..8162,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 305,
        column: 34,
        span: 8163..8166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 305,
        column: 39,
        span: 8167..8171,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 305,
        column: 40,
        span: 8171..8172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 305,
        column: 41,
        span: 8172..8173,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 305,
        column: 44,
        span: 8174..8176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 305,
        column: 47,
        span: 8177..8179,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        line: 305,
        column: 53,
        span: 8179..8185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 54,
        span: 8185..8186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 306,
        column: 9,
        span: 8189..8195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 10,
        span: 8195..8196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 306,
        column: 16,
        span: 8196..8202,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 306,
        column: 17,
        span: 8202..8203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 306,
        column: 21,
        span: 8203..8207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 22,
        span: 8207..8208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 306,
        column: 25,
        span: 8208..8211,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 306,
        column: 26,
        span: 8211..8212,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/lib1\"",
        ),
        line: 306,
        column: 38,
        span: 8213..8224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 306,
        column: 39,
        span: 8224..8225,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 306,
        column: 41,
        span: 8225..8227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 306,
        column: 42,
        span: 8227..8228,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 306,
        column: 47,
        span: 8229..8233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 48,
        span: 8233..8234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 49,
        span: 8234..8235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 307,
        column: 9,
        span: 8238..8244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 10,
        span: 8244..8245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fs",
        ),
        line: 307,
        column: 12,
        span: 8245..8247,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 307,
        column: 13,
        span: 8247..8248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "id",
        ),
        line: 307,
        column: 15,
        span: 8248..8250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 16,
        span: 8250..8251,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 18,
        span: 8250..8253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 19,
        span: 8253..8254,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 307,
        column: 22,
        span: 8255..8257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 25,
        span: 8257..8260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 26,
        span: 8260..8261,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 308,
        column: 0,
        span: 8262..8265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 310,
        column: 5,
        span: 8267..8271,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 310,
        column: 7,
        span: 8272..8273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 310,
        column: 0,
        span: 8274..8276,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 315,
        column: 0,
        span: 8299..8301,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 316,
        column: 8,
        span: 8304..8309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 316,
        column: 10,
        span: 8310..8311,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
        column: 12,
        span: 8312..8313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 316,
        column: 0,
        span: 8314..8321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 317,
        column: 10,
        span: 8324..8331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
        column: 12,
        span: 8332..8333,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 317,
        column: 14,
        span: 8334..8335,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 317,
        column: 15,
        span: 8335..8336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 318,
        column: 4,
        span: 8339..8340,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 318,
        column: 5,
        span: 8340..8341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preload",
        ),
        line: 318,
        column: 12,
        span: 8341..8348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 318,
        column: 13,
        span: 8348..8349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 318,
        column: 15,
        span: 8349..8351,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 318,
        column: 17,
        span: 8352..8353,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 318,
        column: 26,
        span: 8354..8362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 28,
        span: 8363..8364,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 318,
        column: 31,
        span: 8364..8367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 32,
        span: 8367..8368,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 319,
        column: 10,
        span: 8373..8378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 319,
        column: 15,
        span: 8379..8383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 319,
        column: 17,
        span: 8384..8385,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 319,
        column: 19,
        span: 8386..8387,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 319,
        column: 22,
        span: 8387..8390,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 319,
        column: 23,
        span: 8390..8391,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 320,
        column: 13,
        span: 8396..8404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 320,
        column: 18,
        span: 8405..8409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 20,
        span: 8410..8411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 320,
        column: 21,
        span: 8411..8412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 22,
        span: 8412..8413,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 320,
        column: 29,
        span: 8414..8420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 320,
        column: 31,
        span: 8421..8422,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 320,
        column: 32,
        span: 8422..8423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 34,
        span: 8422..8425,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 320,
        column: 0,
        span: 8426..8429,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 321,
        column: 11,
        span: 8434..8440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 321,
        column: 0,
        span: 8441..8445,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 322,
        column: 0,
        span: 8448..8451,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 324,
        column: 8,
        span: 8455..8460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 324,
        column: 11,
        span: 8461..8463,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 324,
        column: 12,
        span: 8463..8464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 324,
        column: 16,
        span: 8465..8468,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 324,
        column: 18,
        span: 8469..8470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 324,
        column: 26,
        span: 8471..8478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        line: 324,
        column: 30,
        span: 8478..8482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 325,
        column: 9,
        span: 8485..8491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 10,
        span: 8491..8492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 325,
        column: 17,
        span: 8492..8499,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        line: 325,
        column: 21,
        span: 8499..8503,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 325,
        column: 24,
        span: 8504..8506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 325,
        column: 27,
        span: 8507..8509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 28,
        span: 8509..8510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 326,
        column: 9,
        span: 8513..8519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 10,
        span: 8519..8520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 326,
        column: 12,
        span: 8520..8522,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 326,
        column: 13,
        span: 8522..8523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 326,
        column: 17,
        span: 8523..8527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 18,
        span: 8527..8528,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 326,
        column: 20,
        span: 8527..8530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 21,
        span: 8530..8531,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 326,
        column: 24,
        span: 8532..8534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 326,
        column: 27,
        span: 8534..8537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 28,
        span: 8537..8538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 327,
        column: 9,
        span: 8541..8547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 10,
        span: 8547..8548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 327,
        column: 12,
        span: 8548..8550,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 327,
        column: 13,
        span: 8550..8551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 14,
        span: 8550..8552,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 327,
        column: 15,
        span: 8552..8553,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 18,
        span: 8554..8556,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        line: 327,
        column: 23,
        span: 8557..8561,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 327,
        column: 27,
        span: 8562..8565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 327,
        column: 30,
        span: 8566..8568,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 327,
        column: 31,
        span: 8568..8569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 32,
        span: 8568..8570,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 327,
        column: 33,
        span: 8570..8571,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 36,
        span: 8572..8574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":preload:\"",
        ),
        line: 327,
        column: 48,
        span: 8575..8586,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 327,
        column: 52,
        span: 8587..8590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 327,
        column: 56,
        span: 8591..8594,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 59,
        span: 8595..8597,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":preload:\"",
        ),
        line: 327,
        column: 71,
        span: 8598..8609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 72,
        span: 8609..8610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 329,
        column: 10,
        span: 8614..8621,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
        column: 12,
        span: 8622..8623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 329,
        column: 0,
        span: 8624..8625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 330,
        column: 9,
        span: 8628..8634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 10,
        span: 8634..8635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 330,
        column: 14,
        span: 8635..8639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 15,
        span: 8639..8640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 330,
        column: 22,
        span: 8640..8647,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 330,
        column: 23,
        span: 8647..8648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 330,
        column: 27,
        span: 8648..8652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 28,
        span: 8652..8653,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 330,
        column: 31,
        span: 8654..8656,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 330,
        column: 40,
        span: 8657..8665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 41,
        span: 8665..8666,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 331,
        column: 0,
        span: 8667..8670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 333,
        column: 6,
        span: 8672..8677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 7,
        span: 8677..8678,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 333,
        column: 10,
        span: 8678..8681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 11,
        span: 8681..8682,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 335,
        column: 4,
        span: 8684..8687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 337,
        column: 6,
        span: 8694..8699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 7,
        span: 8699..8700,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing assignments, logical operators, and constructors\"",
        ),
        line: 337,
        column: 65,
        span: 8700..8758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 66,
        span: 8758..8759,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 339,
        column: 6,
        span: 8761..8766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 339,
        column: 10,
        span: 8767..8770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
        column: 11,
        span: 8770..8771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 339,
        column: 16,
        span: 8772..8776,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 339,
        column: 18,
        span: 8777..8778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
        column: 0,
        span: 8778..8781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 341,
        column: 2,
        span: 8783..8784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 3,
        span: 8784..8785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 341,
        column: 5,
        span: 8786..8787,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 341,
        column: 7,
        span: 8788..8789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 9,
        span: 8789..8791,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 10,
        span: 8791..8792,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 12,
        span: 8792..8794,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 341,
        column: 13,
        span: 8794..8795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 0,
        span: 8794..8796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
        column: 7,
        span: 8797..8803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 8,
        span: 8803..8804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 342,
        column: 9,
        span: 8804..8805,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 342,
        column: 11,
        span: 8805..8807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 12,
        span: 8806..8808,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 342,
        column: 16,
        span: 8809..8812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 342,
        column: 18,
        span: 8813..8814,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 342,
        column: 20,
        span: 8814..8816,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 21,
        span: 8815..8817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 22,
        span: 8817..8818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 343,
        column: 2,
        span: 8819..8820,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 3,
        span: 8820..8821,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 343,
        column: 4,
        span: 8821..8822,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 343,
        column: 5,
        span: 8822..8823,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 344,
        column: 9,
        span: 8824..8832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 344,
        column: 11,
        span: 8833..8834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 12,
        span: 8834..8835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 13,
        span: 8835..8836,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 344,
        column: 20,
        span: 8837..8843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 344,
        column: 23,
        span: 8843..8846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
        column: 24,
        span: 8846..8847,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 344,
        column: 27,
        span: 8847..8850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
        column: 28,
        span: 8850..8851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 344,
        column: 31,
        span: 8851..8854,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 344,
        column: 0,
        span: 8855..8858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 345,
        column: 2,
        span: 8859..8860,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
        column: 3,
        span: 8860..8861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 345,
        column: 4,
        span: 8861..8862,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 5,
        span: 8862..8863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 345,
        column: 7,
        span: 8864..8865,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 8,
        span: 8865..8866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 345,
        column: 10,
        span: 8867..8868,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 345,
        column: 11,
        span: 8868..8869,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 345,
        column: 12,
        span: 8868..8870,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 345,
        column: 13,
        span: 8870..8871,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 345,
        column: 15,
        span: 8872..8873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 345,
        column: 17,
        span: 8873..8875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 18,
        span: 8875..8876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 345,
        column: 20,
        span: 8876..8878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 21,
        span: 8878..8879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 345,
        column: 23,
        span: 8880..8881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 24,
        span: 8881..8882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 25,
        span: 8882..8883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 346,
        column: 7,
        span: 8884..8890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 8,
        span: 8890..8891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 346,
        column: 9,
        span: 8891..8892,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 346,
        column: 10,
        span: 8892..8893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 346,
        column: 11,
        span: 8893..8894,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 13,
        span: 8894..8896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 14,
        span: 8895..8897,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 346,
        column: 18,
        span: 8898..8901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 346,
        column: 20,
        span: 8902..8903,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 22,
        span: 8903..8905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 23,
        span: 8904..8906,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 346,
        column: 27,
        span: 8907..8910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 346,
        column: 29,
        span: 8911..8912,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 346,
        column: 30,
        span: 8912..8913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 31,
        span: 8912..8914,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 346,
        column: 32,
        span: 8914..8915,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 34,
        span: 8915..8917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 36,
        span: 8916..8919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 37,
        span: 8919..8920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 347,
        column: 2,
        span: 8921..8922,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 347,
        column: 3,
        span: 8922..8923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 347,
        column: 4,
        span: 8923..8924,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 5,
        span: 8924..8925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 6,
        span: 8925..8926,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 347,
        column: 7,
        span: 8926..8927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 8,
        span: 8927..8928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 347,
        column: 10,
        span: 8929..8930,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 11,
        span: 8930..8931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 347,
        column: 13,
        span: 8932..8933,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 347,
        column: 14,
        span: 8933..8934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 347,
        column: 15,
        span: 8934..8935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 16,
        span: 8935..8936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 17,
        span: 8936..8937,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 347,
        column: 18,
        span: 8937..8938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 19,
        span: 8937..8939,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 347,
        column: 20,
        span: 8939..8940,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 347,
        column: 22,
        span: 8941..8942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 347,
        column: 24,
        span: 8943..8944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 25,
        span: 8944..8945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 26,
        span: 8945..8946,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 27,
        span: 8946..8947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 347,
        column: 29,
        span: 8948..8949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 30,
        span: 8949..8950,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 347,
        column: 34,
        span: 8951..8954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
        column: 7,
        span: 8955..8961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 8,
        span: 8961..8962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 348,
        column: 9,
        span: 8962..8963,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 348,
        column: 10,
        span: 8963..8964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 12,
        span: 8963..8966,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 348,
        column: 13,
        span: 8966..8967,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 348,
        column: 16,
        span: 8968..8970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 19,
        span: 8970..8973,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 348,
        column: 23,
        span: 8974..8977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 348,
        column: 25,
        span: 8978..8979,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 348,
        column: 28,
        span: 8980..8982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 348,
        column: 30,
        span: 8983..8984,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 348,
        column: 34,
        span: 8985..8988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 348,
        column: 36,
        span: 8989..8990,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 348,
        column: 37,
        span: 8990..8991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 39,
        span: 8990..8993,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 348,
        column: 40,
        span: 8993..8994,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 348,
        column: 43,
        span: 8995..8997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 348,
        column: 47,
        span: 8998..9001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 48,
        span: 9001..9002,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 350,
        column: 0,
        span: 9004..9006,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 351,
        column: 8,
        span: 9009..9014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 351,
        column: 10,
        span: 9015..9016,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
        column: 12,
        span: 9017..9018,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 351,
        column: 21,
        span: 9019..9027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 23,
        span: 9028..9029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 351,
        column: 24,
        span: 9029..9030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 25,
        span: 9030..9031,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 351,
        column: 31,
        span: 9032..9037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 351,
        column: 33,
        span: 9038..9039,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
        column: 35,
        span: 9040..9041,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 351,
        column: 37,
        span: 9042..9043,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 351,
        column: 38,
        span: 9043..9044,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 351,
        column: 39,
        span: 9044..9045,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 351,
        column: 43,
        span: 9046..9049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 351,
        column: 45,
        span: 9050..9051,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
        column: 46,
        span: 9051..9052,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
        column: 47,
        span: 9051..9053,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
        column: 48,
        span: 9053..9054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 351,
        column: 49,
        span: 9054..9055,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 351,
        column: 52,
        span: 9056..9058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 351,
        column: 54,
        span: 9059..9060,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 351,
        column: 55,
        span: 9060..9061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 351,
        column: 56,
        span: 9061..9062,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 351,
        column: 57,
        span: 9062..9063,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
        column: 58,
        span: 9063..9064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 351,
        column: 59,
        span: 9064..9065,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 351,
        column: 63,
        span: 9066..9069,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 351,
        column: 64,
        span: 9069..9070,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 352,
        column: 32,
        span: 9096..9102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 352,
        column: 38,
        span: 9103..9108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
        column: 39,
        span: 9108..9109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 352,
        column: 45,
        span: 9109..9115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 46,
        span: 9115..9116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 352,
        column: 47,
        span: 9116..9117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 48,
        span: 9117..9118,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 352,
        column: 52,
        span: 9119..9122,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 352,
        column: 53,
        span: 9122..9123,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 353,
        column: 8,
        span: 9126..9131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 353,
        column: 10,
        span: 9132..9133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 353,
        column: 11,
        span: 9133..9134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 353,
        column: 12,
        span: 9134..9135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 353,
        column: 13,
        span: 9135..9136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 353,
        column: 0,
        span: 9136..9137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 354,
        column: 4,
        span: 9140..9141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 5,
        span: 9141..9142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 354,
        column: 6,
        span: 9142..9143,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 354,
        column: 8,
        span: 9144..9145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 10,
        span: 9145..9147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 11,
        span: 9147..9148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 354,
        column: 13,
        span: 9149..9150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 14,
        span: 9150..9151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 15,
        span: 9150..9152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 16,
        span: 9152..9153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 355,
        column: 9,
        span: 9156..9162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 10,
        span: 9162..9163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 355,
        column: 11,
        span: 9163..9164,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 355,
        column: 14,
        span: 9165..9167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
        column: 16,
        span: 9167..9169,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 355,
        column: 20,
        span: 9170..9173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 355,
        column: 22,
        span: 9174..9175,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 355,
        column: 25,
        span: 9176..9178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
        column: 27,
        span: 9178..9180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 28,
        span: 9180..9181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 356,
        column: 4,
        span: 9184..9185,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
        column: 5,
        span: 9185..9186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 356,
        column: 6,
        span: 9186..9187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 356,
        column: 8,
        span: 9188..9189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 10,
        span: 9189..9191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
        column: 11,
        span: 9191..9192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 356,
        column: 13,
        span: 9193..9194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 14,
        span: 9194..9195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 15,
        span: 9194..9196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 16,
        span: 9196..9197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 357,
        column: 9,
        span: 9200..9206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 10,
        span: 9206..9207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 357,
        column: 11,
        span: 9207..9208,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 357,
        column: 14,
        span: 9209..9211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
        column: 16,
        span: 9211..9213,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 357,
        column: 20,
        span: 9214..9217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 357,
        column: 22,
        span: 9218..9219,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 357,
        column: 25,
        span: 9220..9222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
        column: 27,
        span: 9222..9224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 28,
        span: 9224..9225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 4,
        span: 9228..9229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 5,
        span: 9229..9230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 358,
        column: 6,
        span: 9230..9231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 7,
        span: 9231..9232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 358,
        column: 8,
        span: 9232..9233,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
        column: 10,
        span: 9234..9235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 12,
        span: 9235..9237,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 13,
        span: 9237..9238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 14,
        span: 9237..9239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 15,
        span: 9239..9240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 358,
        column: 16,
        span: 9240..9241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 17,
        span: 9241..9242,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 18,
        span: 9241..9243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 19,
        span: 9243..9244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 359,
        column: 9,
        span: 9247..9253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 10,
        span: 9253..9254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 359,
        column: 11,
        span: 9254..9255,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 359,
        column: 13,
        span: 9255..9257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
        column: 14,
        span: 9256..9258,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 359,
        column: 18,
        span: 9259..9262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 359,
        column: 20,
        span: 9263..9264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 359,
        column: 22,
        span: 9264..9266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
        column: 23,
        span: 9265..9267,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 359,
        column: 27,
        span: 9268..9271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 359,
        column: 29,
        span: 9272..9273,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 359,
        column: 31,
        span: 9273..9275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
        column: 32,
        span: 9274..9276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 33,
        span: 9276..9277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 360,
        column: 4,
        span: 9280..9281,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 5,
        span: 9281..9282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 360,
        column: 6,
        span: 9282..9283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 7,
        span: 9283..9284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 360,
        column: 8,
        span: 9284..9285,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
        column: 10,
        span: 9286..9287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 12,
        span: 9287..9289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 13,
        span: 9289..9290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 14,
        span: 9289..9291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 15,
        span: 9291..9292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 360,
        column: 16,
        span: 9292..9293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 17,
        span: 9293..9294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 18,
        span: 9293..9295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 19,
        span: 9295..9296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 361,
        column: 9,
        span: 9299..9305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 10,
        span: 9305..9306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 361,
        column: 11,
        span: 9306..9307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 361,
        column: 13,
        span: 9307..9309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 361,
        column: 14,
        span: 9308..9310,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 361,
        column: 18,
        span: 9311..9314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 361,
        column: 20,
        span: 9315..9316,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 361,
        column: 22,
        span: 9316..9318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 361,
        column: 23,
        span: 9317..9319,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 361,
        column: 27,
        span: 9320..9323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 361,
        column: 29,
        span: 9324..9325,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 361,
        column: 31,
        span: 9325..9327,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 361,
        column: 34,
        span: 9327..9330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 35,
        span: 9330..9331,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 362,
        column: 0,
        span: 9332..9335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 364,
        column: 2,
        span: 9337..9338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 3,
        span: 9338..9339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 364,
        column: 5,
        span: 9340..9341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 6,
        span: 9341..9342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 364,
        column: 8,
        span: 9343..9344,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 9,
        span: 9344..9345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 364,
        column: 11,
        span: 9346..9347,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 364,
        column: 13,
        span: 9348..9349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 15,
        span: 9349..9351,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 364,
        column: 19,
        span: 9352..9355,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 364,
        column: 23,
        span: 9356..9359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 24,
        span: 9359..9360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 26,
        span: 9360..9362,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 364,
        column: 29,
        span: 9363..9365,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 364,
        column: 33,
        span: 9366..9369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 34,
        span: 9369..9370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 36,
        span: 9371..9372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 37,
        span: 9371..9373,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 364,
        column: 41,
        span: 9374..9377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 43,
        span: 9378..9379,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 364,
        column: 46,
        span: 9379..9382,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 364,
        column: 49,
        span: 9383..9385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 51,
        span: 9385..9387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 52,
        span: 9387..9388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 53,
        span: 9388..9389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 54,
        span: 9389..9390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 0,
        span: 9390..9392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 365,
        column: 7,
        span: 9393..9399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 8,
        span: 9399..9400,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 365,
        column: 11,
        span: 9400..9403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 365,
        column: 13,
        span: 9404..9405,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 365,
        column: 17,
        span: 9406..9409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 365,
        column: 19,
        span: 9410..9411,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 365,
        column: 23,
        span: 9412..9415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 365,
        column: 25,
        span: 9416..9417,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 365,
        column: 29,
        span: 9418..9421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 365,
        column: 31,
        span: 9422..9423,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 33,
        span: 9423..9425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 34,
        span: 9424..9426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 35,
        span: 9426..9427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 367,
        column: 2,
        span: 9429..9430,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
        column: 4,
        span: 9431..9432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 0,
        span: 9432..9435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 2,
        span: 9436..9437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 3,
        span: 9437..9438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 368,
        column: 5,
        span: 9439..9440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 6,
        span: 9440..9441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 368,
        column: 8,
        span: 9442..9443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 9,
        span: 9443..9444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 368,
        column: 11,
        span: 9445..9446,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 13,
        span: 9447..9448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 368,
        column: 15,
        span: 9449..9450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 16,
        span: 9450..9451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 17,
        span: 9451..9452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 369,
        column: 7,
        span: 9453..9459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 8,
        span: 9459..9460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 369,
        column: 9,
        span: 9460..9461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 11,
        span: 9461..9463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 13,
        span: 9462..9465,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 369,
        column: 17,
        span: 9466..9469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 369,
        column: 19,
        span: 9470..9471,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 21,
        span: 9471..9473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 23,
        span: 9472..9475,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 369,
        column: 27,
        span: 9476..9479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 369,
        column: 29,
        span: 9480..9481,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 31,
        span: 9481..9483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 33,
        span: 9482..9485,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 369,
        column: 37,
        span: 9486..9489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 369,
        column: 39,
        span: 9490..9491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 41,
        span: 9491..9493,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 369,
        column: 44,
        span: 9493..9496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 45,
        span: 9496..9497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 370,
        column: 2,
        span: 9498..9499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 3,
        span: 9499..9500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 370,
        column: 4,
        span: 9500..9501,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 370,
        column: 6,
        span: 9502..9503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 370,
        column: 8,
        span: 9504..9505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 9,
        span: 9505..9506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 10,
        span: 9506..9507,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 11,
        span: 9507..9508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
        column: 13,
        span: 9508..9510,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 14,
        span: 9510..9511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
        column: 16,
        span: 9511..9513,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 17,
        span: 9513..9514,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
        column: 19,
        span: 9514..9516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 20,
        span: 9516..9517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 370,
        column: 22,
        span: 9518..9519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 23,
        span: 9519..9520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 24,
        span: 9520..9521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 371,
        column: 7,
        span: 9522..9528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 8,
        span: 9528..9529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
        column: 9,
        span: 9529..9530,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 371,
        column: 11,
        span: 9530..9532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 13,
        span: 9531..9534,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 371,
        column: 17,
        span: 9535..9538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 371,
        column: 19,
        span: 9539..9540,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 371,
        column: 21,
        span: 9540..9542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 22,
        span: 9541..9543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 23,
        span: 9543..9544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 373,
        column: 7,
        span: 9546..9552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 8,
        span: 9552..9553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 373,
        column: 9,
        span: 9553..9554,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 373,
        column: 10,
        span: 9554..9555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 373,
        column: 11,
        span: 9555..9556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 373,
        column: 14,
        span: 9557..9559,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 373,
        column: 20,
        span: 9560..9565,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 373,
        column: 24,
        span: 9566..9569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 373,
        column: 26,
        span: 9570..9571,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 373,
        column: 27,
        span: 9571..9572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 373,
        column: 28,
        span: 9572..9573,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 373,
        column: 31,
        span: 9574..9576,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 373,
        column: 36,
        span: 9577..9581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 37,
        span: 9581..9582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 374,
        column: 7,
        span: 9583..9589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 8,
        span: 9589..9590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 9,
        span: 9590..9591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 11,
        span: 9590..9593,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 374,
        column: 15,
        span: 9594..9597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 17,
        span: 9597..9599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 18,
        span: 9599..9600,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 374,
        column: 21,
        span: 9601..9603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 23,
        span: 9603..9605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 24,
        span: 9605..9606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 375,
        column: 7,
        span: 9607..9613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 8,
        span: 9613..9614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 9,
        span: 9614..9615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 11,
        span: 9614..9617,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 375,
        column: 14,
        span: 9618..9620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 16,
        span: 9620..9622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 17,
        span: 9622..9623,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 375,
        column: 20,
        span: 9624..9626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 23,
        span: 9626..9629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 24,
        span: 9629..9630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 376,
        column: 7,
        span: 9631..9637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 8,
        span: 9637..9638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 9,
        span: 9638..9639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 11,
        span: 9638..9641,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 376,
        column: 14,
        span: 9642..9644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 376,
        column: 21,
        span: 9645..9651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 22,
        span: 9651..9652,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 376,
        column: 25,
        span: 9652..9655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 26,
        span: 9655..9656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 27,
        span: 9656..9657,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 376,
        column: 30,
        span: 9658..9660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 33,
        span: 9660..9663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 34,
        span: 9663..9664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
        column: 7,
        span: 9665..9671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 8,
        span: 9671..9672,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 377,
        column: 11,
        span: 9672..9675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 13,
        span: 9676..9677,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 377,
        column: 16,
        span: 9677..9680,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 377,
        column: 20,
        span: 9681..9684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
        column: 27,
        span: 9685..9691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 28,
        span: 9691..9692,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 377,
        column: 31,
        span: 9692..9695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 32,
        span: 9695..9696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 33,
        span: 9696..9697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 34,
        span: 9697..9698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 378,
        column: 7,
        span: 9699..9705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 8,
        span: 9705..9706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 9,
        span: 9706..9707,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 378,
        column: 12,
        span: 9707..9710,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 378,
        column: 15,
        span: 9711..9713,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 378,
        column: 21,
        span: 9714..9719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 22,
        span: 9719..9720,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 378,
        column: 25,
        span: 9721..9723,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 378,
        column: 31,
        span: 9724..9729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 32,
        span: 9729..9730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 379,
        column: 7,
        span: 9731..9737,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 8,
        span: 9737..9738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 9,
        span: 9738..9739,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 379,
        column: 12,
        span: 9739..9742,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 379,
        column: 16,
        span: 9743..9746,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 379,
        column: 19,
        span: 9746..9749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 20,
        span: 9749..9750,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 379,
        column: 23,
        span: 9751..9753,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 379,
        column: 27,
        span: 9754..9757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 28,
        span: 9757..9758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 380,
        column: 7,
        span: 9759..9765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 8,
        span: 9765..9766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 9,
        span: 9766..9767,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 380,
        column: 14,
        span: 9767..9772,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 380,
        column: 18,
        span: 9773..9776,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 21,
        span: 9776..9779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 22,
        span: 9779..9780,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 380,
        column: 25,
        span: 9781..9783,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 380,
        column: 31,
        span: 9784..9789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 32,
        span: 9789..9790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 381,
        column: 7,
        span: 9791..9797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 8,
        span: 9797..9798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 9,
        span: 9798..9799,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 381,
        column: 13,
        span: 9799..9803,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 381,
        column: 16,
        span: 9804..9806,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
        column: 19,
        span: 9806..9809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 20,
        span: 9809..9810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 381,
        column: 23,
        span: 9811..9813,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 381,
        column: 28,
        span: 9814..9818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 29,
        span: 9818..9819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 382,
        column: 7,
        span: 9820..9826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 8,
        span: 9826..9827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 9,
        span: 9827..9828,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 382,
        column: 14,
        span: 9828..9833,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 382,
        column: 17,
        span: 9834..9836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 20,
        span: 9836..9839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 21,
        span: 9839..9840,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 382,
        column: 24,
        span: 9841..9843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 27,
        span: 9843..9846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 28,
        span: 9846..9847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
        column: 7,
        span: 9848..9854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 8,
        span: 9854..9855,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 383,
        column: 13,
        span: 9855..9860,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 383,
        column: 16,
        span: 9861..9863,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 383,
        column: 20,
        span: 9864..9867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 21,
        span: 9867..9868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 384,
        column: 7,
        span: 9869..9875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 8,
        span: 9875..9876,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 384,
        column: 11,
        span: 9876..9879,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 384,
        column: 14,
        span: 9880..9882,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 384,
        column: 20,
        span: 9883..9888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 21,
        span: 9888..9889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 385,
        column: 7,
        span: 9890..9896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 8,
        span: 9896..9897,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 385,
        column: 11,
        span: 9897..9900,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 385,
        column: 15,
        span: 9901..9904,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 385,
        column: 18,
        span: 9905..9907,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 385,
        column: 23,
        span: 9908..9912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 24,
        span: 9912..9913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 386,
        column: 7,
        span: 9914..9920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 8,
        span: 9920..9921,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 386,
        column: 11,
        span: 9921..9924,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 386,
        column: 15,
        span: 9925..9928,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 386,
        column: 19,
        span: 9929..9932,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 22,
        span: 9933..9935,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 386,
        column: 28,
        span: 9936..9941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 29,
        span: 9941..9942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 7,
        span: 9943..9949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 8,
        span: 9949..9950,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 387,
        column: 11,
        span: 9950..9953,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 387,
        column: 15,
        span: 9954..9957,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 17,
        span: 9957..9959,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 387,
        column: 20,
        span: 9960..9962,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 387,
        column: 25,
        span: 9963..9967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 26,
        span: 9967..9968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 388,
        column: 7,
        span: 9969..9975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 8,
        span: 9975..9976,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 388,
        column: 11,
        span: 9976..9979,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 388,
        column: 15,
        span: 9980..9983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 388,
        column: 17,
        span: 9984..9985,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 388,
        column: 20,
        span: 9986..9988,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 388,
        column: 25,
        span: 9989..9993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 26,
        span: 9993..9994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
        column: 7,
        span: 9995..10001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 8,
        span: 10001..10002,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 389,
        column: 11,
        span: 10002..10005,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 389,
        column: 15,
        span: 10006..10009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 17,
        span: 10010..10011,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 18,
        span: 10010..10012,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 389,
        column: 21,
        span: 10013..10015,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 389,
        column: 25,
        span: 10016..10019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 26,
        span: 10019..10020,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
        column: 29,
        span: 10021..10023,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 389,
        column: 34,
        span: 10024..10028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 35,
        span: 10028..10029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 390,
        column: 7,
        span: 10030..10036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 8,
        span: 10036..10037,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 390,
        column: 11,
        span: 10037..10040,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 390,
        column: 15,
        span: 10041..10044,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 17,
        span: 10045..10046,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 390,
        column: 20,
        span: 10046..10049,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 390,
        column: 24,
        span: 10050..10053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "56",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 27,
        span: 10053..10056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 28,
        span: 10056..10057,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
        column: 31,
        span: 10058..10060,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 390,
        column: 37,
        span: 10061..10066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 38,
        span: 10066..10067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 391,
        column: 7,
        span: 10068..10074,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 8,
        span: 10074..10075,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 391,
        column: 11,
        span: 10075..10078,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 391,
        column: 15,
        span: 10079..10082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 17,
        span: 10083..10084,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 391,
        column: 20,
        span: 10084..10087,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 391,
        column: 24,
        span: 10088..10091,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 391,
        column: 29,
        span: 10092..10096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 30,
        span: 10096..10097,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
        column: 33,
        span: 10098..10100,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 391,
        column: 39,
        span: 10101..10106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 40,
        span: 10106..10107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 392,
        column: 7,
        span: 10108..10114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 8,
        span: 10114..10115,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 392,
        column: 11,
        span: 10115..10118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 14,
        span: 10118..10121,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 392,
        column: 17,
        span: 10122..10124,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 392,
        column: 23,
        span: 10125..10130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 24,
        span: 10130..10131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
        column: 7,
        span: 10132..10138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 8,
        span: 10138..10139,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 393,
        column: 11,
        span: 10139..10142,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 393,
        column: 13,
        span: 10143..10144,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 393,
        column: 14,
        span: 10144..10145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 393,
        column: 17,
        span: 10146..10148,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 393,
        column: 23,
        span: 10149..10154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 24,
        span: 10154..10155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 394,
        column: 7,
        span: 10156..10162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 8,
        span: 10162..10163,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 394,
        column: 11,
        span: 10163..10166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 394,
        column: 15,
        span: 10166..10170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 394,
        column: 18,
        span: 10171..10173,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 394,
        column: 24,
        span: 10174..10179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 25,
        span: 10179..10180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
        column: 7,
        span: 10181..10187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 8,
        span: 10187..10188,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 395,
        column: 11,
        span: 10188..10191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 395,
        column: 15,
        span: 10192..10195,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
        column: 18,
        span: 10196..10198,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 395,
        column: 24,
        span: 10199..10204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 25,
        span: 10204..10205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 397,
        column: 7,
        span: 10207..10213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 8,
        span: 10213..10214,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 397,
        column: 9,
        span: 10214..10215,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 397,
        column: 10,
        span: 10215..10216,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 397,
        column: 13,
        span: 10217..10219,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 397,
        column: 15,
        span: 10220..10221,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 397,
        column: 16,
        span: 10221..10222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 17,
        span: 10222..10223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 398,
        column: 6,
        span: 10224..10229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 7,
        span: 10229..10230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 398,
        column: 10,
        span: 10230..10233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 11,
        span: 10233..10234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 400,
        column: 2,
        span: 10236..10237,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 4,
        span: 10238..10239,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 400,
        column: 6,
        span: 10240..10241,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 400,
        column: 7,
        span: 10241..10242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 401,
        column: 2,
        span: 10243..10244,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 401,
        column: 3,
        span: 10244..10245,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 401,
        column: 7,
        span: 10245..10249,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 401,
        column: 8,
        span: 10249..10250,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
        column: 10,
        span: 10251..10252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 0,
        span: 10252..10255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 402,
        column: 2,
        span: 10256..10257,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 402,
        column: 3,
        span: 10257..10258,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 402,
        column: 8,
        span: 10258..10263,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 402,
        column: 9,
        span: 10263..10264,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 11,
        span: 10265..10266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 0,
        span: 10266..10269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 403,
        column: 7,
        span: 10270..10276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 8,
        span: 10276..10277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 403,
        column: 9,
        span: 10277..10278,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 403,
        column: 10,
        span: 10278..10279,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
        column: 11,
        span: 10278..10280,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 403,
        column: 12,
        span: 10280..10281,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
        column: 13,
        span: 10280..10282,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 403,
        column: 14,
        span: 10282..10283,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 403,
        column: 17,
        span: 10284..10286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
        column: 20,
        span: 10286..10289,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 403,
        column: 24,
        span: 10290..10293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 403,
        column: 26,
        span: 10294..10295,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 403,
        column: 27,
        span: 10295..10296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
        column: 28,
        span: 10295..10297,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 403,
        column: 29,
        span: 10297..10298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
        column: 30,
        span: 10297..10299,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 403,
        column: 31,
        span: 10299..10300,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 403,
        column: 34,
        span: 10301..10303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 403,
        column: 37,
        span: 10303..10306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 38,
        span: 10306..10307,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 405,
        column: 9,
        span: 10309..10317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 405,
        column: 11,
        span: 10318..10319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 12,
        span: 10319..10320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 405,
        column: 13,
        span: 10320..10321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 14,
        span: 10321..10322,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 405,
        column: 21,
        span: 10323..10329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 405,
        column: 23,
        span: 10330..10331,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 405,
        column: 0,
        span: 10332..10335,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 407,
        column: 6,
        span: 10337..10342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 407,
        column: 8,
        span: 10343..10344,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
        column: 10,
        span: 10345..10346,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 407,
        column: 12,
        span: 10347..10348,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 407,
        column: 13,
        span: 10348..10349,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 408,
        column: 4,
        span: 10350..10353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 408,
        column: 6,
        span: 10354..10355,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 408,
        column: 7,
        span: 10355..10356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 11,
        span: 10355..10360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 12,
        span: 10360..10361,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 408,
        column: 13,
        span: 10361..10362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 17,
        span: 10361..10366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 18,
        span: 10366..10367,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 408,
        column: 19,
        span: 10367..10368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 20,
        span: 10367..10369,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 408,
        column: 23,
        span: 10370..10372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 408,
        column: 25,
        span: 10373..10374,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 408,
        column: 26,
        span: 10374..10375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 408,
        column: 27,
        span: 10375..10376,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 408,
        column: 29,
        span: 10377..10378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 408,
        column: 33,
        span: 10378..10382,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 408,
        column: 34,
        span: 10382..10383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 408,
        column: 36,
        span: 10384..10385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 408,
        column: 38,
        span: 10386..10387,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 408,
        column: 39,
        span: 10387..10388,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 408,
        column: 0,
        span: 10389..10392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 409,
        column: 2,
        span: 10393..10394,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 409,
        column: 3,
        span: 10394..10395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 409,
        column: 8,
        span: 10394..10400,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 409,
        column: 9,
        span: 10400..10401,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 409,
        column: 11,
        span: 10402..10403,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 409,
        column: 17,
        span: 10404..10409,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 409,
        column: 18,
        span: 10409..10410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 409,
        column: 20,
        span: 10411..10412,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 409,
        column: 21,
        span: 10412..10413,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 409,
        column: 25,
        span: 10413..10417,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 409,
        column: 26,
        span: 10417..10418,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 409,
        column: 28,
        span: 10419..10420,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
        column: 31,
        span: 10420..10423,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 409,
        column: 32,
        span: 10423..10424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 409,
        column: 34,
        span: 10425..10426,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 409,
        column: 35,
        span: 10426..10427,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 409,
        column: 40,
        span: 10427..10432,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 409,
        column: 41,
        span: 10432..10433,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 409,
        column: 43,
        span: 10434..10435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
        column: 0,
        span: 10435..10438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 410,
        column: 7,
        span: 10439..10445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 8,
        span: 10445..10446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 410,
        column: 9,
        span: 10446..10447,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 410,
        column: 10,
        span: 10447..10448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 410,
        column: 15,
        span: 10447..10453,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 410,
        column: 16,
        span: 10453..10454,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
        column: 19,
        span: 10455..10457,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 410,
        column: 25,
        span: 10458..10463,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 410,
        column: 29,
        span: 10464..10467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 410,
        column: 31,
        span: 10468..10469,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 410,
        column: 32,
        span: 10469..10470,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 410,
        column: 35,
        span: 10470..10473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 37,
        span: 10473..10475,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 410,
        column: 38,
        span: 10475..10476,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
        column: 41,
        span: 10477..10479,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 44,
        span: 10479..10482,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 410,
        column: 48,
        span: 10483..10486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 410,
        column: 50,
        span: 10487..10488,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 410,
        column: 51,
        span: 10488..10489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 53,
        span: 10488..10491,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 410,
        column: 54,
        span: 10491..10492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 56,
        span: 10491..10494,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 410,
        column: 57,
        span: 10494..10495,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
        column: 60,
        span: 10496..10498,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 63,
        span: 10498..10501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 64,
        span: 10501..10502,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 411,
        column: 4,
        span: 10503..10506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 411,
        column: 6,
        span: 10507..10508,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 411,
        column: 7,
        span: 10508..10509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 11,
        span: 10508..10513,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 12,
        span: 10513..10514,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 411,
        column: 13,
        span: 10514..10515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 17,
        span: 10514..10519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 18,
        span: 10519..10520,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 411,
        column: 19,
        span: 10520..10521,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 20,
        span: 10520..10522,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 411,
        column: 23,
        span: 10523..10525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 411,
        column: 30,
        span: 10526..10532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 31,
        span: 10532..10533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 411,
        column: 32,
        span: 10533..10534,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 411,
        column: 33,
        span: 10534..10535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 411,
        column: 34,
        span: 10535..10536,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 411,
        column: 35,
        span: 10536..10537,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 411,
        column: 38,
        span: 10538..10540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 411,
        column: 40,
        span: 10541..10542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 41,
        span: 10542..10543,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 411,
        column: 42,
        span: 10543..10544,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 411,
        column: 0,
        span: 10545..10548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 412,
        column: 2,
        span: 10549..10550,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 412,
        column: 3,
        span: 10550..10551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 412,
        column: 8,
        span: 10551..10556,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 412,
        column: 9,
        span: 10556..10557,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 412,
        column: 11,
        span: 10558..10559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
        column: 0,
        span: 10560..10566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 413,
        column: 2,
        span: 10567..10568,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 413,
        column: 3,
        span: 10568..10569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 413,
        column: 4,
        span: 10569..10570,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 413,
        column: 5,
        span: 10570..10571,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 413,
        column: 7,
        span: 10572..10573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 413,
        column: 0,
        span: 10574..10579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 414,
        column: 2,
        span: 10580..10581,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 414,
        column: 3,
        span: 10581..10582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 414,
        column: 4,
        span: 10582..10583,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 414,
        column: 5,
        span: 10583..10584,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
        column: 7,
        span: 10585..10586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 414,
        column: 0,
        span: 10587..10588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
        column: 7,
        span: 10589..10595,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 8,
        span: 10595..10596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 9,
        span: 10596..10597,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 415,
        column: 10,
        span: 10597..10598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 11,
        span: 10598..10599,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 415,
        column: 12,
        span: 10599..10600,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 415,
        column: 13,
        span: 10600..10601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 14,
        span: 10601..10602,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 415,
        column: 15,
        span: 10602..10603,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 415,
        column: 16,
        span: 10603..10604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 17,
        span: 10604..10605,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 415,
        column: 18,
        span: 10605..10606,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 415,
        column: 19,
        span: 10606..10607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 20,
        span: 10607..10608,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 415,
        column: 21,
        span: 10608..10609,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 415,
        column: 22,
        span: 10609..10610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 415,
        column: 27,
        span: 10610..10615,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 415,
        column: 28,
        span: 10615..10616,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 415,
        column: 31,
        span: 10617..10619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
        column: 38,
        span: 10620..10626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 39,
        span: 10626..10627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 2,
        span: 10628..10629,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 416,
        column: 3,
        span: 10629..10630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 416,
        column: 8,
        span: 10630..10635,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 416,
        column: 9,
        span: 10635..10636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 10,
        span: 10636..10637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 11,
        span: 10637..10638,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 416,
        column: 12,
        span: 10638..10639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 13,
        span: 10639..10640,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 416,
        column: 14,
        span: 10640..10641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 416,
        column: 15,
        span: 10641..10642,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 416,
        column: 16,
        span: 10642..10643,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 416,
        column: 17,
        span: 10643..10644,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 416,
        column: 20,
        span: 10645..10647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 22,
        span: 10648..10649,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 416,
        column: 23,
        span: 10649..10650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 416,
        column: 28,
        span: 10650..10655,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 416,
        column: 29,
        span: 10655..10656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 30,
        span: 10656..10657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 417,
        column: 7,
        span: 10658..10664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 8,
        span: 10664..10665,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 417,
        column: 11,
        span: 10665..10668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 417,
        column: 17,
        span: 10669..10674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 18,
        span: 10674..10675,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 417,
        column: 26,
        span: 10675..10683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 28,
        span: 10684..10685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 29,
        span: 10685..10686,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 417,
        column: 35,
        span: 10687..10692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 417,
        column: 37,
        span: 10693..10694,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 417,
        column: 39,
        span: 10695..10696,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 417,
        column: 41,
        span: 10697..10698,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 417,
        column: 42,
        span: 10698..10699,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 417,
        column: 43,
        span: 10699..10700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 417,
        column: 45,
        span: 10701..10702,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 417,
        column: 46,
        span: 10702..10703,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 417,
        column: 49,
        span: 10703..10706,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 417,
        column: 50,
        span: 10706..10707,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 417,
        column: 52,
        span: 10708..10709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 417,
        column: 55,
        span: 10709..10712,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 417,
        column: 59,
        span: 10713..10716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 60,
        span: 10716..10717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 61,
        span: 10717..10718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 7,
        span: 10719..10725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 8,
        span: 10725..10726,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 418,
        column: 11,
        span: 10726..10729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 418,
        column: 17,
        span: 10730..10735,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 18,
        span: 10735..10736,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 418,
        column: 26,
        span: 10736..10744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 28,
        span: 10745..10746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 29,
        span: 10746..10747,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 418,
        column: 35,
        span: 10748..10753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 418,
        column: 37,
        span: 10754..10755,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 418,
        column: 39,
        span: 10756..10757,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 418,
        column: 41,
        span: 10758..10759,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 418,
        column: 42,
        span: 10759..10760,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 418,
        column: 45,
        span: 10760..10763,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 418,
        column: 46,
        span: 10763..10764,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 418,
        column: 48,
        span: 10765..10766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 51,
        span: 10766..10769,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 418,
        column: 52,
        span: 10769..10770,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 418,
        column: 56,
        span: 10771..10774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 57,
        span: 10774..10775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 58,
        span: 10775..10776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 419,
        column: 7,
        span: 10777..10783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 8,
        span: 10783..10784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 419,
        column: 9,
        span: 10784..10785,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 419,
        column: 10,
        span: 10785..10786,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 419,
        column: 13,
        span: 10786..10789,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 419,
        column: 14,
        span: 10789..10790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
        column: 17,
        span: 10791..10793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 419,
        column: 23,
        span: 10794..10799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 24,
        span: 10799..10800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 420,
        column: 2,
        span: 10801..10802,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 420,
        column: 4,
        span: 10803..10804,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 420,
        column: 0,
        span: 10805..10808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 422,
        column: 2,
        span: 10810..10811,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
        column: 4,
        span: 10812..10813,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 422,
        column: 6,
        span: 10814..10815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 8,
        span: 10814..10817,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 9,
        span: 10817..10818,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 10,
        span: 10817..10819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 11,
        span: 10819..10820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 12,
        span: 10819..10821,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 13,
        span: 10821..10822,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 14,
        span: 10821..10823,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 15,
        span: 10823..10824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 16,
        span: 10823..10825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 17,
        span: 10825..10826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 18,
        span: 10825..10827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 19,
        span: 10827..10828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 20,
        span: 10827..10829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 21,
        span: 10829..10830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 22,
        span: 10829..10831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 23,
        span: 10831..10832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 24,
        span: 10831..10833,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 422,
        column: 25,
        span: 10833..10834,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 422,
        column: 27,
        span: 10835..10836,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 422,
        column: 28,
        span: 10836..10837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 29,
        span: 10836..10838,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 422,
        column: 30,
        span: 10838..10839,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
        column: 31,
        span: 10839..10840,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 422,
        column: 34,
        span: 10840..10843,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 35,
        span: 10843..10844,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 422,
        column: 37,
        span: 10845..10846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 422,
        column: 38,
        span: 10846..10847,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 422,
        column: 39,
        span: 10847..10848,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
        column: 40,
        span: 10848..10849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 422,
        column: 45,
        span: 10849..10854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 46,
        span: 10854..10855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 422,
        column: 48,
        span: 10856..10857,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
        column: 49,
        span: 10857..10858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 422,
        column: 52,
        span: 10858..10861,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 53,
        span: 10861..10862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 422,
        column: 55,
        span: 10863..10864,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
        column: 56,
        span: 10864..10865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab'",
        ),
        line: 422,
        column: 60,
        span: 10865..10869,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 422,
        column: 61,
        span: 10869..10870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 423,
        column: 2,
        span: 10871..10872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
        column: 3,
        span: 10872..10873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 423,
        column: 5,
        span: 10874..10875,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 423,
        column: 6,
        span: 10875..10876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 423,
        column: 7,
        span: 10876..10877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
        column: 8,
        span: 10877..10878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 423,
        column: 10,
        span: 10879..10880,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 423,
        column: 11,
        span: 10880..10881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 423,
        column: 12,
        span: 10881..10882,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
        column: 14,
        span: 10883..10884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 423,
        column: 16,
        span: 10885..10886,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
        column: 17,
        span: 10886..10887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 423,
        column: 19,
        span: 10888..10889,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 423,
        column: 20,
        span: 10889..10890,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 423,
        column: 21,
        span: 10890..10891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 22,
        span: 10890..10892,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 423,
        column: 23,
        span: 10892..10893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 424,
        column: 7,
        span: 10894..10900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 8,
        span: 10900..10901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 9,
        span: 10901..10902,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 424,
        column: 10,
        span: 10902..10903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 11,
        span: 10902..10904,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 424,
        column: 12,
        span: 10904..10905,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 14,
        span: 10905..10907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 16,
        span: 10906..10909,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 424,
        column: 20,
        span: 10910..10913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 22,
        span: 10914..10915,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 424,
        column: 23,
        span: 10915..10916,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 424,
        column: 24,
        span: 10916..10917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 25,
        span: 10916..10918,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 424,
        column: 26,
        span: 10918..10919,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 28,
        span: 10919..10921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 29,
        span: 10921..10922,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 424,
        column: 30,
        span: 10922..10923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 31,
        span: 10923..10924,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 424,
        column: 35,
        span: 10925..10928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 37,
        span: 10929..10930,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 424,
        column: 38,
        span: 10930..10931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 424,
        column: 39,
        span: 10931..10932,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 424,
        column: 40,
        span: 10932..10933,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 42,
        span: 10933..10935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 424,
        column: 47,
        span: 10935..10940,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 424,
        column: 51,
        span: 10941..10944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 53,
        span: 10945..10946,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 424,
        column: 54,
        span: 10946..10947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 424,
        column: 55,
        span: 10947..10948,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 57,
        span: 10948..10950,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 424,
        column: 60,
        span: 10950..10953,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 424,
        column: 64,
        span: 10954..10957,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 424,
        column: 68,
        span: 10958..10961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 70,
        span: 10962..10963,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 424,
        column: 71,
        span: 10963..10964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 424,
        column: 72,
        span: 10964..10965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 73,
        span: 10965..10966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 425,
        column: 2,
        span: 10967..10968,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 425,
        column: 3,
        span: 10968..10969,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 4,
        span: 10968..10970,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 425,
        column: 5,
        span: 10970..10971,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 6,
        span: 10971..10972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 425,
        column: 8,
        span: 10973..10974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 9,
        span: 10974..10975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 425,
        column: 10,
        span: 10975..10976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 11,
        span: 10976..10977,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 425,
        column: 12,
        span: 10977..10978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 13,
        span: 10977..10979,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 425,
        column: 14,
        span: 10979..10980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 15,
        span: 10980..10981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 425,
        column: 17,
        span: 10982..10983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 18,
        span: 10983..10984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 425,
        column: 20,
        span: 10985..10986,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 425,
        column: 22,
        span: 10987..10988,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 425,
        column: 24,
        span: 10989..10990,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 425,
        column: 25,
        span: 10990..10991,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 425,
        column: 30,
        span: 10991..10996,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 425,
        column: 31,
        span: 10996..10997,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 425,
        column: 32,
        span: 10997..10998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 425,
        column: 38,
        span: 10998..11004,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 425,
        column: 39,
        span: 11004..11005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 40,
        span: 11005..11006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 43,
        span: 11006..11009,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 44,
        span: 11009..11010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 425,
        column: 46,
        span: 11011..11012,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 425,
        column: 47,
        span: 11012..11013,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 48,
        span: 11012..11014,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 425,
        column: 49,
        span: 11014..11015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 50,
        span: 11015..11016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 425,
        column: 52,
        span: 11017..11018,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 425,
        column: 53,
        span: 11018..11019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 425,
        column: 54,
        span: 11019..11020,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 425,
        column: 55,
        span: 11020..11021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 56,
        span: 11021..11022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 58,
        span: 11022..11024,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 59,
        span: 11024..11025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 62,
        span: 11025..11028,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 63,
        span: 11028..11029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 66,
        span: 11029..11032,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 67,
        span: 11032..11033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 425,
        column: 69,
        span: 11034..11035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 70,
        span: 11035..11036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 425,
        column: 71,
        span: 11036..11037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 72,
        span: 11037..11038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 73,
        span: 11038..11039,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 0,
        span: 11039..11041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 426,
        column: 2,
        span: 11042..11043,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 426,
        column: 3,
        span: 11043..11044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 4,
        span: 11043..11045,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 426,
        column: 5,
        span: 11045..11046,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 426,
        column: 6,
        span: 11046..11047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alo",
        ),
        line: 426,
        column: 9,
        span: 11047..11050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 10,
        span: 11050..11051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 426,
        column: 11,
        span: 11051..11052,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 426,
        column: 12,
        span: 11052..11053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 13,
        span: 11052..11054,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 426,
        column: 14,
        span: 11054..11055,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 426,
        column: 16,
        span: 11055..11057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 18,
        span: 11056..11059,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 426,
        column: 22,
        span: 11060..11063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 426,
        column: 24,
        span: 11064..11065,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 426,
        column: 26,
        span: 11065..11067,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 28,
        span: 11066..11069,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 426,
        column: 32,
        span: 11070..11073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 426,
        column: 34,
        span: 11074..11075,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 426,
        column: 36,
        span: 11075..11077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 426,
        column: 41,
        span: 11077..11082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 42,
        span: 11082..11083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 428,
        column: 2,
        span: 11085..11086,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
        column: 3,
        span: 11086..11087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aVeryLongName012345678901234567890123456789012345678901234567890123456789",
        ),
        line: 428,
        column: 76,
        span: 11087..11160,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 428,
        column: 78,
        span: 11161..11162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
        column: 0,
        span: 11162..11165,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 429,
        column: 6,
        span: 11166..11171,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 429,
        column: 15,
        span: 11172..11180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 429,
        column: 19,
        span: 11181..11184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 21,
        span: 11185..11186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 22,
        span: 11186..11187,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 430,
        column: 9,
        span: 11190..11196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 430,
        column: 11,
        span: 11197..11198,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 430,
        column: 12,
        span: 11198..11199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aVeryLongName012345678901234567890123456789012345678901234567890123456789",
        ),
        line: 430,
        column: 0,
        span: 11199..11272,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 431,
        column: 0,
        span: 11273..11276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 432,
        column: 7,
        span: 11277..11283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 8,
        span: 11283..11284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 432,
        column: 11,
        span: 11284..11287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 12,
        span: 11287..11288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 13,
        span: 11288..11289,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 432,
        column: 16,
        span: 11290..11292,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
        column: 19,
        span: 11292..11295,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 432,
        column: 0,
        span: 11296..11299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 433,
        column: 2,
        span: 11300..11301,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 433,
        column: 3,
        span: 11301..11302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aVeryLongName012345678901234567890123456789012345678901234567890123456789",
        ),
        line: 433,
        column: 76,
        span: 11302..11375,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 433,
        column: 79,
        span: 11376..11378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 434,
        column: 3,
        span: 11378..11381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 4,
        span: 11381..11382,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 441,
        column: 6,
        span: 11484..11489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 441,
        column: 13,
        span: 11490..11496,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 441,
        column: 15,
        span: 11497..11498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 441,
        column: 20,
        span: 11499..11503,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 441,
        column: 21,
        span: 11503..11504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 441,
        column: 0,
        span: 11504..11514,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 444,
        column: 6,
        span: 11554..11559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 444,
        column: 13,
        span: 11560..11566,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 444,
        column: 16,
        span: 11567..11569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
        column: 18,
        span: 11570..11571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 444,
        column: 24,
        span: 11571..11577,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 444,
        column: 26,
        span: 11578..11579,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 444,
        column: 30,
        span: 11579..11583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
        column: 31,
        span: 11583..11584,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 444,
        column: 34,
        span: 11585..11587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
        column: 36,
        span: 11588..11589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 444,
        column: 42,
        span: 11589..11595,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 444,
        column: 44,
        span: 11596..11597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
        column: 46,
        span: 11597..11599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
        column: 47,
        span: 11599..11600,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 444,
        column: 50,
        span: 11601..11603,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
        column: 52,
        span: 11604..11605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 444,
        column: 58,
        span: 11605..11611,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 444,
        column: 60,
        span: 11612..11613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 444,
        column: 64,
        span: 11613..11617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
        column: 65,
        span: 11617..11618,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 444,
        column: 0,
        span: 11619..11621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 445,
        column: 9,
        span: 11624..11630,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 445,
        column: 11,
        span: 11631..11632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 445,
        column: 18,
        span: 11633..11639,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 445,
        column: 21,
        span: 11640..11642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 445,
        column: 0,
        span: 11642..11644,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 446,
        column: 0,
        span: 11645..11648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 448,
        column: 8,
        span: 11650..11657,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 448,
        column: 10,
        span: 11658..11659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 448,
        column: 17,
        span: 11660..11666,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 448,
        column: 19,
        span: 11667..11668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 448,
        column: 23,
        span: 11668..11672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 450,
        column: 7,
        span: 11693..11699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 8,
        span: 11699..11700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 450,
        column: 15,
        span: 11700..11707,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 450,
        column: 18,
        span: 11708..11710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 450,
        column: 25,
        span: 11711..11717,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 450,
        column: 29,
        span: 11718..11721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 450,
        column: 34,
        span: 11722..11726,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 450,
        column: 35,
        span: 11726..11727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 450,
        column: 39,
        span: 11727..11731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 40,
        span: 11731..11732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 450,
        column: 47,
        span: 11732..11739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 48,
        span: 11739..11740,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 450,
        column: 51,
        span: 11741..11743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float\"",
        ),
        line: 450,
        column: 59,
        span: 11744..11751,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 450,
        column: 0,
        span: 11752..11755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 451,
        column: 15,
        span: 11763..11770,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 451,
        column: 18,
        span: 11771..11773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 451,
        column: 22,
        span: 11773..11777,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 451,
        column: 23,
        span: 11777..11778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 25,
        span: 11777..11780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 26,
        span: 11780..11781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 454,
        column: 2,
        span: 11833..11834,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 454,
        column: 3,
        span: 11834..11835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 454,
        column: 10,
        span: 11835..11842,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 454,
        column: 11,
        span: 11842..11843,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 454,
        column: 13,
        span: 11844..11845,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 454,
        column: 16,
        span: 11845..11848,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 454,
        column: 17,
        span: 11848..11849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 454,
        column: 19,
        span: 11850..11851,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 454,
        column: 20,
        span: 11851..11852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 454,
        column: 27,
        span: 11852..11859,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 454,
        column: 29,
        span: 11860..11861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 454,
        column: 33,
        span: 11861..11865,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 454,
        column: 34,
        span: 11865..11866,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 454,
        column: 36,
        span: 11867..11868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 454,
        column: 39,
        span: 11868..11871,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 454,
        column: 40,
        span: 11871..11872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 455,
        column: 2,
        span: 11873..11874,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 455,
        column: 3,
        span: 11874..11875,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 455,
        column: 4,
        span: 11875..11876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 455,
        column: 11,
        span: 11876..11883,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 455,
        column: 12,
        span: 11883..11884,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 455,
        column: 14,
        span: 11885..11886,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 455,
        column: 17,
        span: 11886..11889,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 455,
        column: 18,
        span: 11889..11890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 455,
        column: 20,
        span: 11891..11892,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 455,
        column: 21,
        span: 11892..11893,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 455,
        column: 22,
        span: 11893..11894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 455,
        column: 29,
        span: 11894..11901,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 455,
        column: 31,
        span: 11902..11903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 455,
        column: 35,
        span: 11903..11907,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 455,
        column: 36,
        span: 11907..11908,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 455,
        column: 38,
        span: 11909..11910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 455,
        column: 41,
        span: 11910..11913,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 455,
        column: 42,
        span: 11913..11914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 457,
        column: 7,
        span: 11916..11922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 8,
        span: 11922..11923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 457,
        column: 9,
        span: 11923..11924,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 457,
        column: 10,
        span: 11924..11925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 457,
        column: 16,
        span: 11925..11931,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 457,
        column: 17,
        span: 11931..11932,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 457,
        column: 20,
        span: 11933..11935,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 457,
        column: 23,
        span: 11935..11938,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 457,
        column: 27,
        span: 11939..11942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 457,
        column: 29,
        span: 11943..11944,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 457,
        column: 30,
        span: 11944..11945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 457,
        column: 36,
        span: 11945..11951,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 457,
        column: 38,
        span: 11952..11953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 457,
        column: 40,
        span: 11953..11955,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 457,
        column: 41,
        span: 11955..11956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 457,
        column: 44,
        span: 11957..11959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 457,
        column: 47,
        span: 11959..11962,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 457,
        column: 0,
        span: 11963..11966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 458,
        column: 9,
        span: 11974..11975,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 458,
        column: 10,
        span: 11975..11976,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 458,
        column: 11,
        span: 11976..11977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 458,
        column: 17,
        span: 11977..11983,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 458,
        column: 18,
        span: 11983..11984,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 458,
        column: 21,
        span: 11985..11987,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 458,
        column: 24,
        span: 11987..11990,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 458,
        column: 28,
        span: 11991..11994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 458,
        column: 30,
        span: 11995..11996,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 458,
        column: 31,
        span: 11996..11997,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 458,
        column: 32,
        span: 11997..11998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 458,
        column: 38,
        span: 11998..12004,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 458,
        column: 40,
        span: 12005..12006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 458,
        column: 42,
        span: 12006..12008,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 458,
        column: 43,
        span: 12008..12009,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 458,
        column: 46,
        span: 12010..12012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 458,
        column: 49,
        span: 12012..12015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 50,
        span: 12015..12016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 460,
        column: 2,
        span: 12018..12019,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 460,
        column: 3,
        span: 12019..12020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 460,
        column: 9,
        span: 12020..12026,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 460,
        column: 10,
        span: 12026..12027,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 460,
        column: 12,
        span: 12028..12029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 460,
        column: 0,
        span: 12029..12032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 461,
        column: 2,
        span: 12033..12034,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 461,
        column: 3,
        span: 12034..12035,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 461,
        column: 4,
        span: 12035..12036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 461,
        column: 10,
        span: 12036..12042,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 461,
        column: 11,
        span: 12042..12043,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 461,
        column: 13,
        span: 12044..12045,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "22",
                    after_decimal: "",
                },
            ),
        ),
        line: 461,
        column: 0,
        span: 12045..12048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 463,
        column: 7,
        span: 12050..12056,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 8,
        span: 12056..12057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 463,
        column: 9,
        span: 12057..12058,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 463,
        column: 10,
        span: 12058..12059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 463,
        column: 17,
        span: 12059..12066,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 463,
        column: 18,
        span: 12066..12067,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 463,
        column: 21,
        span: 12068..12070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 463,
        column: 24,
        span: 12070..12073,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 463,
        column: 28,
        span: 12074..12077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 463,
        column: 30,
        span: 12078..12079,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 463,
        column: 31,
        span: 12079..12080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 463,
        column: 38,
        span: 12080..12087,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 463,
        column: 40,
        span: 12088..12089,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 463,
        column: 44,
        span: 12089..12093,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 463,
        column: 45,
        span: 12093..12094,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 463,
        column: 48,
        span: 12095..12097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 463,
        column: 51,
        span: 12097..12100,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 463,
        column: 0,
        span: 12101..12104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 464,
        column: 9,
        span: 12112..12113,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 464,
        column: 10,
        span: 12113..12114,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 464,
        column: 11,
        span: 12114..12115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 464,
        column: 18,
        span: 12115..12122,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 464,
        column: 19,
        span: 12122..12123,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 464,
        column: 22,
        span: 12124..12126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "22",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
        column: 25,
        span: 12126..12129,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 464,
        column: 29,
        span: 12130..12133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 464,
        column: 31,
        span: 12134..12135,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 464,
        column: 32,
        span: 12135..12136,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 464,
        column: 33,
        span: 12136..12137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 464,
        column: 40,
        span: 12137..12144,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 464,
        column: 42,
        span: 12145..12146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 464,
        column: 46,
        span: 12146..12150,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 464,
        column: 47,
        span: 12150..12151,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 464,
        column: 50,
        span: 12152..12154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
        column: 53,
        span: 12154..12157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 54,
        span: 12157..12158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 466,
        column: 2,
        span: 12160..12161,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 466,
        column: 4,
        span: 12162..12163,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 466,
        column: 0,
        span: 12164..12167,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 470,
        column: 0,
        span: 12211..12213,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 471,
        column: 8,
        span: 12216..12221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 471,
        column: 10,
        span: 12222..12223,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 471,
        column: 11,
        span: 12223..12224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 471,
        column: 12,
        span: 12224..12225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 471,
        column: 13,
        span: 12225..12226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 471,
        column: 14,
        span: 12226..12227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 471,
        column: 15,
        span: 12227..12228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 471,
        column: 0,
        span: 12228..12229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 472,
        column: 4,
        span: 12232..12233,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 472,
        column: 6,
        span: 12234..12235,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 472,
        column: 8,
        span: 12236..12237,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 472,
        column: 11,
        span: 12237..12240,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 472,
        column: 12,
        span: 12240..12241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 472,
        column: 16,
        span: 12242..12245,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 472,
        column: 17,
        span: 12245..12246,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 472,
        column: 18,
        span: 12246..12247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 472,
        column: 20,
        span: 12248..12249,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 472,
        column: 21,
        span: 12249..12250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 472,
        column: 22,
        span: 12249..12251,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 472,
        column: 23,
        span: 12251..12252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 472,
        column: 25,
        span: 12253..12254,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 472,
        column: 26,
        span: 12254..12255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 472,
        column: 27,
        span: 12254..12256,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 472,
        column: 28,
        span: 12256..12257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 472,
        column: 30,
        span: 12258..12259,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 472,
        column: 31,
        span: 12259..12260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 472,
        column: 0,
        span: 12260..12261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 473,
        column: 4,
        span: 12264..12265,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 5,
        span: 12265..12266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 473,
        column: 7,
        span: 12267..12268,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 473,
        column: 8,
        span: 12268..12269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 473,
        column: 9,
        span: 12269..12270,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 473,
        column: 10,
        span: 12270..12271,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 11,
        span: 12271..12272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 473,
        column: 13,
        span: 12273..12274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 14,
        span: 12274..12275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 473,
        column: 16,
        span: 12276..12277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 17,
        span: 12277..12278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 473,
        column: 19,
        span: 12279..12280,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 473,
        column: 20,
        span: 12280..12281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 473,
        column: 21,
        span: 12281..12282,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 473,
        column: 22,
        span: 12282..12283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 23,
        span: 12283..12284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 473,
        column: 25,
        span: 12285..12286,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 473,
        column: 26,
        span: 12286..12287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 473,
        column: 27,
        span: 12287..12288,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 473,
        column: 28,
        span: 12288..12289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 473,
        column: 29,
        span: 12289..12290,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 473,
        column: 30,
        span: 12290..12291,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 473,
        column: 32,
        span: 12292..12293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 473,
        column: 34,
        span: 12294..12295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 35,
        span: 12295..12296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 473,
        column: 37,
        span: 12297..12298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 38,
        span: 12298..12299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 473,
        column: 40,
        span: 12300..12301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 41,
        span: 12301..12302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 473,
        column: 43,
        span: 12303..12304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 44,
        span: 12304..12305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 473,
        column: 46,
        span: 12306..12307,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 47,
        span: 12307..12308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 473,
        column: 0,
        span: 12309..12310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 474,
        column: 9,
        span: 12313..12319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 474,
        column: 10,
        span: 12319..12320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 474,
        column: 11,
        span: 12320..12321,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 474,
        column: 14,
        span: 12322..12324,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 16,
        span: 12324..12326,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 474,
        column: 20,
        span: 12327..12330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 474,
        column: 22,
        span: 12331..12332,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 474,
        column: 23,
        span: 12332..12333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 24,
        span: 12332..12334,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 474,
        column: 25,
        span: 12334..12335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 474,
        column: 28,
        span: 12336..12338,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 30,
        span: 12338..12340,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 474,
        column: 34,
        span: 12341..12344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 474,
        column: 36,
        span: 12345..12346,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 474,
        column: 39,
        span: 12347..12349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 41,
        span: 12349..12351,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 474,
        column: 45,
        span: 12352..12355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 474,
        column: 47,
        span: 12356..12357,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 474,
        column: 50,
        span: 12358..12360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 474,
        column: 52,
        span: 12361..12362,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 474,
        column: 56,
        span: 12363..12366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 474,
        column: 58,
        span: 12367..12368,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 474,
        column: 59,
        span: 12368..12369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 60,
        span: 12368..12370,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 474,
        column: 61,
        span: 12370..12371,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 474,
        column: 64,
        span: 12372..12374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 66,
        span: 12374..12376,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 474,
        column: 0,
        span: 12377..12380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 475,
        column: 11,
        span: 12390..12391,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 475,
        column: 12,
        span: 12391..12392,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 475,
        column: 13,
        span: 12391..12393,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 475,
        column: 14,
        span: 12393..12394,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 475,
        column: 17,
        span: 12395..12397,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 475,
        column: 19,
        span: 12397..12399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
        column: 20,
        span: 12399..12400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 476,
        column: 4,
        span: 12403..12404,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 476,
        column: 6,
        span: 12405..12406,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 476,
        column: 8,
        span: 12407..12408,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 476,
        column: 9,
        span: 12408..12409,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 477,
        column: 8,
        span: 12412..12417,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 477,
        column: 17,
        span: 12418..12426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 477,
        column: 21,
        span: 12427..12430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
        column: 23,
        span: 12431..12432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
        column: 24,
        span: 12432..12433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 478,
        column: 6,
        span: 12467..12468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
        column: 7,
        span: 12468..12469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 478,
        column: 9,
        span: 12470..12471,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 478,
        column: 10,
        span: 12471..12472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 478,
        column: 11,
        span: 12472..12473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
        column: 12,
        span: 12473..12474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 478,
        column: 14,
        span: 12475..12476,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 478,
        column: 16,
        span: 12477..12478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 478,
        column: 18,
        span: 12479..12480,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
        column: 19,
        span: 12480..12481,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 22,
        span: 12481..12484,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
        column: 23,
        span: 12484..12485,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 0,
        span: 12485..12488,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 479,
        column: 0,
        span: 12491..12494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 480,
        column: 6,
        span: 12497..12500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 7,
        span: 12500..12501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 8,
        span: 12501..12502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 481,
        column: 9,
        span: 12505..12511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
        column: 10,
        span: 12511..12512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 481,
        column: 11,
        span: 12512..12513,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 481,
        column: 14,
        span: 12514..12516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 481,
        column: 17,
        span: 12516..12519,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 481,
        column: 21,
        span: 12520..12523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 481,
        column: 23,
        span: 12524..12525,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 481,
        column: 24,
        span: 12525..12526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 481,
        column: 25,
        span: 12526..12527,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 481,
        column: 28,
        span: 12528..12530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 481,
        column: 31,
        span: 12530..12533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
        column: 32,
        span: 12533..12534,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 482,
        column: 0,
        span: 12535..12538,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 485,
        column: 0,
        span: 12569..12571,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 486,
        column: 8,
        span: 12574..12579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 486,
        column: 10,
        span: 12580..12581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 486,
        column: 11,
        span: 12581..12582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 486,
        column: 12,
        span: 12582..12583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 486,
        column: 13,
        span: 12583..12584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 486,
        column: 14,
        span: 12584..12585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 486,
        column: 15,
        span: 12585..12586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 486,
        column: 0,
        span: 12586..12587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 487,
        column: 4,
        span: 12590..12591,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 6,
        span: 12592..12593,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 487,
        column: 8,
        span: 12594..12595,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 487,
        column: 11,
        span: 12595..12598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 12,
        span: 12598..12599,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 487,
        column: 16,
        span: 12600..12603,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 487,
        column: 17,
        span: 12603..12604,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 487,
        column: 18,
        span: 12604..12605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 487,
        column: 20,
        span: 12606..12607,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 21,
        span: 12607..12608,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
        column: 22,
        span: 12607..12609,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 487,
        column: 23,
        span: 12609..12610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 487,
        column: 25,
        span: 12611..12612,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 26,
        span: 12612..12613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
        column: 27,
        span: 12612..12614,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 487,
        column: 28,
        span: 12614..12615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 487,
        column: 30,
        span: 12616..12617,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 31,
        span: 12617..12618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 487,
        column: 0,
        span: 12618..12619,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 488,
        column: 8,
        span: 12622..12627,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 488,
        column: 17,
        span: 12628..12636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 488,
        column: 21,
        span: 12637..12640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
        column: 23,
        span: 12641..12642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
        column: 24,
        span: 12642..12643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 489,
        column: 6,
        span: 12648..12649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 7,
        span: 12649..12650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 489,
        column: 9,
        span: 12651..12652,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 489,
        column: 10,
        span: 12652..12653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 489,
        column: 11,
        span: 12653..12654,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 489,
        column: 12,
        span: 12654..12655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 13,
        span: 12655..12656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 489,
        column: 15,
        span: 12657..12658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 16,
        span: 12658..12659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 489,
        column: 18,
        span: 12660..12661,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 19,
        span: 12661..12662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 489,
        column: 21,
        span: 12663..12664,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 489,
        column: 22,
        span: 12664..12665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 489,
        column: 23,
        span: 12665..12666,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 489,
        column: 24,
        span: 12666..12667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 25,
        span: 12667..12668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 489,
        column: 27,
        span: 12669..12670,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 489,
        column: 28,
        span: 12670..12671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 489,
        column: 29,
        span: 12671..12672,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 489,
        column: 30,
        span: 12672..12673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 489,
        column: 31,
        span: 12673..12674,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 489,
        column: 32,
        span: 12674..12675,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 489,
        column: 34,
        span: 12676..12677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 489,
        column: 36,
        span: 12678..12679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 37,
        span: 12679..12680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 489,
        column: 39,
        span: 12681..12682,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 40,
        span: 12682..12683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 489,
        column: 42,
        span: 12684..12685,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 43,
        span: 12685..12686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 489,
        column: 45,
        span: 12687..12688,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 46,
        span: 12688..12689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 489,
        column: 48,
        span: 12690..12691,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 49,
        span: 12691..12692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 489,
        column: 0,
        span: 12693..12694,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 490,
        column: 0,
        span: 12697..12700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 491,
        column: 6,
        span: 12703..12706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
        column: 7,
        span: 12706..12707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
        column: 8,
        span: 12707..12708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 492,
        column: 9,
        span: 12711..12717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 10,
        span: 12717..12718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 492,
        column: 11,
        span: 12718..12719,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
        column: 14,
        span: 12720..12722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 16,
        span: 12722..12724,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 492,
        column: 20,
        span: 12725..12728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 492,
        column: 22,
        span: 12729..12730,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 492,
        column: 23,
        span: 12730..12731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 24,
        span: 12730..12732,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 492,
        column: 25,
        span: 12732..12733,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
        column: 28,
        span: 12734..12736,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 30,
        span: 12736..12738,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 492,
        column: 34,
        span: 12739..12742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 492,
        column: 36,
        span: 12743..12744,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
        column: 39,
        span: 12745..12747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 41,
        span: 12747..12749,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 492,
        column: 45,
        span: 12750..12753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 492,
        column: 47,
        span: 12754..12755,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
        column: 50,
        span: 12756..12758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 492,
        column: 52,
        span: 12759..12760,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 492,
        column: 56,
        span: 12761..12764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 492,
        column: 58,
        span: 12765..12766,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 492,
        column: 59,
        span: 12766..12767,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 60,
        span: 12766..12768,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 492,
        column: 61,
        span: 12768..12769,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
        column: 64,
        span: 12770..12772,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 66,
        span: 12772..12774,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 492,
        column: 0,
        span: 12775..12778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 493,
        column: 11,
        span: 12788..12789,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 493,
        column: 12,
        span: 12789..12790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
        column: 13,
        span: 12789..12791,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 493,
        column: 14,
        span: 12791..12792,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 493,
        column: 17,
        span: 12793..12795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
        column: 19,
        span: 12795..12797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 20,
        span: 12797..12798,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 494,
        column: 8,
        span: 12801..12806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 494,
        column: 10,
        span: 12807..12808,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 494,
        column: 12,
        span: 12809..12810,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 494,
        column: 14,
        span: 12811..12812,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 494,
        column: 15,
        span: 12812..12813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 4,
        span: 12816..12817,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 495,
        column: 12,
        span: 12817..12825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 14,
        span: 12826..12827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 495,
        column: 15,
        span: 12827..12828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 16,
        span: 12828..12829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 495,
        column: 18,
        span: 12830..12831,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 495,
        column: 19,
        span: 12831..12832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 495,
        column: 20,
        span: 12832..12833,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 495,
        column: 21,
        span: 12833..12834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
        column: 22,
        span: 12834..12835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 495,
        column: 24,
        span: 12836..12837,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 495,
        column: 26,
        span: 12838..12839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 29,
        span: 12839..12842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
        column: 30,
        span: 12842..12843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 33,
        span: 12843..12846,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 495,
        column: 38,
        span: 12848..12851,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 39,
        span: 12851..12852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 40,
        span: 12852..12853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 41,
        span: 12852..12854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 42,
        span: 12854..12855,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 495,
        column: 43,
        span: 12855..12856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 496,
        column: 9,
        span: 12859..12865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 10,
        span: 12865..12866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 496,
        column: 11,
        span: 12866..12867,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 496,
        column: 12,
        span: 12867..12868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 13,
        span: 12867..12869,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 496,
        column: 14,
        span: 12869..12870,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 496,
        column: 17,
        span: 12871..12873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 20,
        span: 12873..12876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 21,
        span: 12876..12877,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 497,
        column: 0,
        span: 12878..12881,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 500,
        column: 6,
        span: 12902..12907,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 500,
        column: 15,
        span: 12908..12916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 500,
        column: 19,
        span: 12917..12920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 500,
        column: 21,
        span: 12921..12922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 500,
        column: 22,
        span: 12922..12923,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 501,
        column: 8,
        span: 12926..12931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 501,
        column: 0,
        span: 12932..12933,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 502,
        column: 9,
        span: 12936..12942,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 502,
        column: 18,
        span: 12943..12951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
        column: 20,
        span: 12952..12953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
        column: 21,
        span: 12953..12954,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 503,
        column: 10,
        span: 12959..12964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 503,
        column: 0,
        span: 12965..12966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 504,
        column: 6,
        span: 12971..12972,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 504,
        column: 7,
        span: 12972..12973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 504,
        column: 9,
        span: 12974..12975,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 504,
        column: 11,
        span: 12976..12977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 504,
        column: 13,
        span: 12977..12979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 504,
        column: 14,
        span: 12979..12980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 504,
        column: 17,
        span: 12980..12983,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 505,
        column: 11,
        span: 13028..13034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 505,
        column: 13,
        span: 13035..13036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 505,
        column: 14,
        span: 13036..13037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 505,
        column: 0,
        span: 13038..13039,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 506,
        column: 0,
        span: 13042..13045,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 507,
        column: 0,
        span: 13046..13049,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 509,
        column: 6,
        span: 13051..13056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 509,
        column: 8,
        span: 13057..13058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 509,
        column: 9,
        span: 13058..13059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 509,
        column: 11,
        span: 13060..13061,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 509,
        column: 13,
        span: 13062..13063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 509,
        column: 17,
        span: 13064..13067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 509,
        column: 18,
        span: 13067..13068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 509,
        column: 19,
        span: 13068..13069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 509,
        column: 20,
        span: 13069..13070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 509,
        column: 21,
        span: 13070..13071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 510,
        column: 7,
        span: 13072..13078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 510,
        column: 8,
        span: 13078..13079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 510,
        column: 9,
        span: 13079..13080,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 510,
        column: 12,
        span: 13081..13083,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 510,
        column: 14,
        span: 13083..13085,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 510,
        column: 18,
        span: 13086..13089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 510,
        column: 20,
        span: 13090..13091,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 510,
        column: 23,
        span: 13092..13094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 510,
        column: 26,
        span: 13094..13097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 510,
        column: 27,
        span: 13097..13098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 512,
        column: 6,
        span: 13100..13105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 512,
        column: 7,
        span: 13105..13106,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 512,
        column: 11,
        span: 13106..13110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 512,
        column: 12,
        span: 13110..13111,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 514,
        column: 7,
        span: 13113..13119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 514,
        column: 0,
        span: 13120..13123,
    },
]
