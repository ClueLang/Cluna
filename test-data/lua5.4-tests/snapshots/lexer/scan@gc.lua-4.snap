---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/gc.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 65..70,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 70..71,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing incremental garbage collection'",
        ),
        line: 4,
        column: 47,
        span: 71..111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 48,
        span: 111..112,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 114..119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
        column: 12,
        span: 120..125,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 14,
        span: 126..127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 22,
        span: 128..135,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
        column: 29,
        span: 135..142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 7,
        span: 144..150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 8,
        span: 150..151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 8,
        column: 22,
        span: 151..165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 23,
        span: 165..166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 8,
        column: 34,
        span: 166..177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 35,
        span: 177..178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 36,
        span: 178..179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 10,
        column: 15,
        span: 181..195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 16,
        span: 195..196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 17,
        span: 196..197,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 12,
        column: 6,
        span: 199..204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmode",
        ),
        line: 12,
        column: 14,
        span: 205..212,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 12,
        column: 16,
        span: 213..214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 12,
        column: 31,
        span: 215..229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 32,
        span: 229..230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"incremental\"",
        ),
        line: 12,
        column: 45,
        span: 230..243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 46,
        span: 243..244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
        column: 7,
        span: 292..298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 8,
        span: 298..299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 15,
        column: 22,
        span: 299..313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 23,
        span: 313..314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"generational\"",
        ),
        line: 15,
        column: 37,
        span: 314..328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 38,
        span: 328..329,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 41,
        span: 330..332,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"incremental\"",
        ),
        line: 15,
        column: 55,
        span: 333..346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 56,
        span: 346..347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 7,
        span: 348..354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 354..355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 16,
        column: 22,
        span: 355..369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 23,
        span: 369..370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"generational\"",
        ),
        line: 16,
        column: 37,
        span: 370..384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 38,
        span: 384..385,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 41,
        span: 386..388,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"generational\"",
        ),
        line: 16,
        column: 56,
        span: 389..403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 57,
        span: 403..404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
        column: 7,
        span: 405..411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 8,
        span: 411..412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 17,
        column: 22,
        span: 412..426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 23,
        span: 426..427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"incremental\"",
        ),
        line: 17,
        column: 36,
        span: 427..440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 37,
        span: 440..441,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 17,
        column: 40,
        span: 442..444,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"generational\"",
        ),
        line: 17,
        column: 55,
        span: 445..459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 56,
        span: 459..460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 7,
        span: 461..467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 8,
        span: 467..468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 18,
        column: 22,
        span: 468..482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 23,
        span: 482..483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"incremental\"",
        ),
        line: 18,
        column: 36,
        span: 483..496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 37,
        span: 496..497,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 40,
        span: 498..500,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"incremental\"",
        ),
        line: 18,
        column: 54,
        span: 501..514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 55,
        span: 514..515,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 6,
        span: 518..523,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 21,
        column: 15,
        span: 524..532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nop",
        ),
        line: 21,
        column: 19,
        span: 533..536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 21,
        span: 537..538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 22,
        span: 538..539,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 21,
        column: 0,
        span: 540..543,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 23,
        column: 6,
        span: 545..550,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 23,
        column: 15,
        span: 551..559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 23,
        column: 22,
        span: 560..566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 24,
        span: 567..568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 25,
        span: 568..569,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 24,
        column: 9,
        span: 572..578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 24,
        column: 24,
        span: 579..593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 24,
        column: 31,
        span: 593..600,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 24,
        column: 33,
        span: 601..602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 0,
        span: 602..607,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
        column: 0,
        span: 608..611,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 29,
        column: 0,
        span: 659..661,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 31,
        column: 8,
        span: 694..699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
        column: 10,
        span: 700..701,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 12,
        span: 702..703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 31,
        column: 27,
        span: 704..718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 28,
        span: 718..719,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setpause\"",
        ),
        line: 31,
        column: 38,
        span: 719..729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 39,
        span: 729..730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 43,
        span: 730..734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 44,
        span: 734..735,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 32,
        column: 8,
        span: 738..743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 32,
        column: 10,
        span: 744..745,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 12,
        span: 746..747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 32,
        column: 27,
        span: 748..762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 28,
        span: 762..763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setstepmul\"",
        ),
        line: 32,
        column: 40,
        span: 763..775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 41,
        span: 775..776,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 45,
        span: 776..780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 46,
        span: 780..781,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 33,
        column: 8,
        span: 784..789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 33,
        column: 10,
        span: 790..791,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 12,
        span: 792..793,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 33,
        column: 14,
        span: 794..795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 15,
        span: 794..796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 16,
        span: 796..797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 18,
        span: 797..799,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 19,
        span: 799..800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 22,
        span: 800..803,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 23,
        span: 803..804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 26,
        span: 804..807,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 27,
        span: 807..808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 31,
        span: 808..812,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 32,
        span: 812..813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5000",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 37,
        span: 813..818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 38,
        span: 818..819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 44,
        span: 819..825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 45,
        span: 825..826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7ffffffe",
            ),
        ),
        line: 33,
        column: 56,
        span: 826..837,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 33,
        column: 57,
        span: 837..838,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 34,
        column: 6,
        span: 841..844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 34,
        column: 8,
        span: 845..846,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 10,
        span: 847..848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 12,
        span: 848..850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 13,
        span: 850..851,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 34,
        column: 15,
        span: 852..853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 34,
        column: 16,
        span: 853..854,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 34,
        column: 0,
        span: 855..857,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 35,
        column: 10,
        span: 862..867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 35,
        column: 12,
        span: 868..869,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
        column: 14,
        span: 870..871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 35,
        column: 16,
        span: 872..873,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 35,
        column: 17,
        span: 873..874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 35,
        column: 18,
        span: 874..875,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 35,
        column: 19,
        span: 875..876,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 36,
        column: 8,
        span: 881..884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 36,
        column: 10,
        span: 885..886,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 12,
        span: 887..888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 14,
        span: 888..890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 15,
        span: 890..891,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 36,
        column: 17,
        span: 892..893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 36,
        column: 18,
        span: 893..894,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 36,
        column: 0,
        span: 895..897,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 12,
        span: 904..909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 37,
        column: 14,
        span: 910..911,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 16,
        span: 912..913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 37,
        column: 18,
        span: 914..915,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 37,
        column: 19,
        span: 915..916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 37,
        column: 20,
        span: 916..917,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 37,
        column: 21,
        span: 917..918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 38,
        column: 21,
        span: 925..939,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 22,
        span: 939..940,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setpause\"",
        ),
        line: 38,
        column: 32,
        span: 940..950,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 33,
        span: 950..951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 38,
        column: 35,
        span: 952..953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 36,
        span: 953..954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 39,
        column: 21,
        span: 961..975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 22,
        span: 975..976,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setstepmul\"",
        ),
        line: 39,
        column: 34,
        span: 976..988,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 35,
        span: 988..989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 39,
        column: 37,
        span: 990..991,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 38,
        span: 991..992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 40,
        column: 21,
        span: 999..1013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 22,
        span: 1013..1014,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 40,
        column: 28,
        span: 1014..1020,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 29,
        span: 1020..1021,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 31,
        span: 1021..1023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 32,
        span: 1023..1024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 41,
        column: 21,
        span: 1031..1045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 22,
        span: 1045..1046,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 41,
        column: 28,
        span: 1046..1052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 29,
        span: 1052..1053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 35,
        span: 1053..1059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 36,
        span: 1059..1060,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 42,
        column: 0,
        span: 1065..1068,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 43,
        column: 0,
        span: 1071..1074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 45,
        column: 17,
        span: 1110..1124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 18,
        span: 1124..1125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setpause\"",
        ),
        line: 45,
        column: 28,
        span: 1125..1135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 29,
        span: 1135..1136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
        column: 31,
        span: 1137..1138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 32,
        span: 1138..1139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 46,
        column: 17,
        span: 1142..1156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 18,
        span: 1156..1157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setstepmul\"",
        ),
        line: 46,
        column: 30,
        span: 1157..1169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 31,
        span: 1169..1170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
        column: 33,
        span: 1171..1172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 34,
        span: 1172..1173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 47,
        column: 17,
        span: 1176..1190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 18,
        span: 1190..1191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 19,
        span: 1191..1192,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
        column: 0,
        span: 1193..1196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 51,
        column: 3,
        span: 1199..1201,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 51,
        column: 4,
        span: 1201..1202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while\"",
        ),
        line: 51,
        column: 11,
        span: 1202..1209,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 51,
        column: 12,
        span: 1209..1210,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 14,
        span: 1211..1212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 0,
        span: 1212..1216,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 57,
        column: 6,
        span: 1293..1298,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 57,
        column: 15,
        span: 1299..1307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC1",
        ),
        line: 57,
        column: 19,
        span: 1308..1311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 21,
        span: 1312..1313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 22,
        span: 1313..1314,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 58,
        column: 8,
        span: 1317..1322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 58,
        column: 0,
        span: 1323..1324,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 59,
        column: 8,
        span: 1327..1332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 59,
        column: 10,
        span: 1333..1334,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 60,
        column: 8,
        span: 1372..1377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 60,
        column: 15,
        span: 1378..1384,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
        column: 17,
        span: 1385..1386,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 60,
        column: 0,
        span: 1387..1392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 61,
        column: 4,
        span: 1395..1396,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 6,
        span: 1397..1398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 61,
        column: 19,
        span: 1399..1411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 20,
        span: 1411..1412,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 61,
        column: 21,
        span: 1412..1413,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 61,
        column: 22,
        span: 1413..1414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 23,
        span: 1414..1415,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 61,
        column: 25,
        span: 1416..1417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 61,
        column: 29,
        span: 1417..1421,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 31,
        span: 1422..1423,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 61,
        column: 40,
        span: 1424..1432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 42,
        span: 1433..1434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 43,
        span: 1434..1435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 61,
        column: 50,
        span: 1436..1442,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 52,
        span: 1443..1444,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 61,
        column: 57,
        span: 1445..1449,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 61,
        column: 61,
        span: 1450..1453,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 61,
        column: 62,
        span: 1453..1454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 63,
        span: 1454..1455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 62,
        column: 4,
        span: 1458..1459,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 62,
        column: 6,
        span: 1460..1461,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 62,
        column: 8,
        span: 1462..1463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 10,
        span: 1462..1465,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 62,
        column: 11,
        span: 1465..1466,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 63,
        column: 9,
        span: 1469..1475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 63,
        column: 11,
        span: 1476..1477,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 13,
        span: 1478..1479,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 63,
        column: 15,
        span: 1480..1481,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 63,
        column: 16,
        span: 1481..1482,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 63,
        column: 22,
        span: 1483..1488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 63,
        column: 0,
        span: 1489..1495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 9,
        span: 1498..1504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 10,
        span: 1504..1505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 64,
        column: 11,
        span: 1505..1506,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 64,
        column: 12,
        span: 1506..1507,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 13,
        span: 1506..1508,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 64,
        column: 14,
        span: 1508..1509,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 17,
        span: 1510..1512,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 20,
        span: 1512..1515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 21,
        span: 1515..1516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 66,
        column: 9,
        span: 1560..1566,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 11,
        span: 1567..1568,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 66,
        column: 17,
        span: 1569..1574,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 66,
        column: 18,
        span: 1574..1575,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 66,
        column: 24,
        span: 1576..1581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 66,
        column: 26,
        span: 1582..1583,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 28,
        span: 1584..1585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 0,
        span: 1585..1587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 67,
        column: 4,
        span: 1590..1591,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 6,
        span: 1592..1593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 67,
        column: 19,
        span: 1594..1606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 20,
        span: 1606..1607,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 67,
        column: 21,
        span: 1607..1608,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 67,
        column: 22,
        span: 1608..1609,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 23,
        span: 1609..1610,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 67,
        column: 25,
        span: 1611..1612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 67,
        column: 29,
        span: 1612..1616,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 31,
        span: 1617..1618,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 67,
        column: 40,
        span: 1619..1627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 42,
        span: 1628..1629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 43,
        span: 1629..1630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 67,
        column: 50,
        span: 1631..1637,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 52,
        span: 1638..1639,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 67,
        column: 57,
        span: 1640..1644,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 67,
        column: 61,
        span: 1645..1648,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 67,
        column: 62,
        span: 1648..1649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 63,
        span: 1649..1650,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 68,
        column: 9,
        span: 1653..1659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 11,
        span: 1660..1661,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 13,
        span: 1662..1663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 15,
        span: 1664..1665,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 68,
        column: 17,
        span: 1666..1667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 19,
        span: 1667..1669,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 68,
        column: 20,
        span: 1669..1670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 68,
        column: 22,
        span: 1671..1672,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 24,
        span: 1673..1674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 68,
        column: 33,
        span: 1675..1683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 34,
        span: 1683..1684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 35,
        span: 1684..1685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 36,
        span: 1685..1686,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 68,
        column: 39,
        span: 1687..1689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 68,
        column: 48,
        span: 1690..1698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 49,
        span: 1698..1699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 50,
        span: 1699..1700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 51,
        span: 1700..1701,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 68,
        column: 57,
        span: 1702..1707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 68,
        column: 0,
        span: 1708..1714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 9,
        span: 1717..1723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 10,
        span: 1723..1724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 69,
        column: 11,
        span: 1724..1725,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 69,
        column: 12,
        span: 1725..1726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 13,
        span: 1725..1727,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 69,
        column: 14,
        span: 1727..1728,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 17,
        span: 1729..1731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 20,
        span: 1731..1734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 21,
        span: 1734..1735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 71,
        column: 9,
        span: 1779..1785,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 11,
        span: 1786..1787,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 71,
        column: 0,
        span: 1788..1793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 72,
        column: 4,
        span: 1796..1797,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 6,
        span: 1798..1799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 72,
        column: 19,
        span: 1800..1812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 20,
        span: 1812..1813,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 72,
        column: 21,
        span: 1813..1814,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 72,
        column: 22,
        span: 1814..1815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 23,
        span: 1815..1816,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 72,
        column: 25,
        span: 1817..1818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 72,
        column: 29,
        span: 1818..1822,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 31,
        span: 1823..1824,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 72,
        column: 40,
        span: 1825..1833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 42,
        span: 1834..1835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 43,
        span: 1835..1836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 72,
        column: 50,
        span: 1837..1843,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 52,
        span: 1844..1845,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 72,
        column: 57,
        span: 1846..1850,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 72,
        column: 61,
        span: 1851..1854,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 72,
        column: 62,
        span: 1854..1855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 63,
        span: 1855..1856,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 73,
        column: 9,
        span: 1859..1865,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 73,
        column: 15,
        span: 1866..1871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 73,
        column: 17,
        span: 1872..1873,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 73,
        column: 18,
        span: 1873..1874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 73,
        column: 20,
        span: 1875..1876,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 22,
        span: 1877..1878,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 73,
        column: 31,
        span: 1879..1887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 33,
        span: 1888..1889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 34,
        span: 1889..1890,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 73,
        column: 41,
        span: 1891..1897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 73,
        column: 43,
        span: 1898..1899,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 73,
        column: 47,
        span: 1900..1903,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 73,
        column: 53,
        span: 1904..1909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 73,
        column: 0,
        span: 1910..1916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
        column: 9,
        span: 1919..1925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 10,
        span: 1925..1926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 74,
        column: 11,
        span: 1926..1927,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 74,
        column: 12,
        span: 1927..1928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 13,
        span: 1927..1929,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 74,
        column: 14,
        span: 1929..1930,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 17,
        span: 1931..1933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 20,
        span: 1933..1936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 21,
        span: 1936..1937,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 75,
        column: 0,
        span: 1978..1981,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 77,
        column: 6,
        span: 1983..1988,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 77,
        column: 15,
        span: 1989..1997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC2",
        ),
        line: 77,
        column: 19,
        span: 1998..2001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 21,
        span: 2002..2003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 22,
        span: 2003..2004,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 78,
        column: 8,
        span: 2007..2012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 78,
        column: 0,
        span: 2013..2014,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 79,
        column: 8,
        span: 2017..2022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 79,
        column: 15,
        span: 2023..2029,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 17,
        span: 2030..2031,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 79,
        column: 0,
        span: 2032..2037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 80,
        column: 4,
        span: 2040..2041,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 6,
        span: 2042..2043,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 80,
        column: 8,
        span: 2044..2045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 80,
        column: 20,
        span: 2045..2057,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 21,
        span: 2057..2058,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 80,
        column: 22,
        span: 2058..2059,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 80,
        column: 23,
        span: 2059..2060,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 24,
        span: 2060..2061,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 80,
        column: 26,
        span: 2062..2063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 80,
        column: 30,
        span: 2063..2067,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 32,
        span: 2068..2069,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 80,
        column: 41,
        span: 2070..2078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 43,
        span: 2079..2080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 44,
        span: 2080..2081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 80,
        column: 51,
        span: 2082..2088,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 53,
        span: 2089..2090,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 80,
        column: 58,
        span: 2091..2095,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 80,
        column: 62,
        span: 2096..2099,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 80,
        column: 63,
        span: 2099..2100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 64,
        span: 2100..2101,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 80,
        column: 65,
        span: 2101..2102,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 81,
        column: 8,
        span: 2105..2110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 81,
        column: 10,
        span: 2111..2112,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
        column: 12,
        span: 2113..2114,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 81,
        column: 14,
        span: 2115..2116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 16,
        span: 2115..2118,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 81,
        column: 17,
        span: 2118..2119,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 82,
        column: 9,
        span: 2122..2128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 82,
        column: 11,
        span: 2129..2130,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 13,
        span: 2131..2132,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 82,
        column: 15,
        span: 2133..2134,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 82,
        column: 16,
        span: 2134..2135,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 82,
        column: 17,
        span: 2135..2136,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 82,
        column: 18,
        span: 2136..2137,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 82,
        column: 24,
        span: 2138..2143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 82,
        column: 0,
        span: 2144..2150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 83,
        column: 9,
        span: 2153..2159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 10,
        span: 2159..2160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 83,
        column: 11,
        span: 2160..2161,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 83,
        column: 12,
        span: 2161..2162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 13,
        span: 2161..2163,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 83,
        column: 14,
        span: 2163..2164,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 83,
        column: 17,
        span: 2165..2167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 20,
        span: 2167..2170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 21,
        span: 2170..2171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 85,
        column: 9,
        span: 2215..2221,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 11,
        span: 2222..2223,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 85,
        column: 17,
        span: 2224..2229,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 85,
        column: 18,
        span: 2229..2230,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 85,
        column: 24,
        span: 2231..2236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 85,
        column: 26,
        span: 2237..2238,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 28,
        span: 2239..2240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 0,
        span: 2240..2242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 86,
        column: 4,
        span: 2245..2246,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 6,
        span: 2247..2248,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 86,
        column: 8,
        span: 2249..2250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 86,
        column: 20,
        span: 2250..2262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 21,
        span: 2262..2263,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 86,
        column: 22,
        span: 2263..2264,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 86,
        column: 23,
        span: 2264..2265,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 24,
        span: 2265..2266,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 86,
        column: 26,
        span: 2267..2268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 86,
        column: 30,
        span: 2268..2272,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 32,
        span: 2273..2274,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 86,
        column: 41,
        span: 2275..2283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 43,
        span: 2284..2285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 44,
        span: 2285..2286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 86,
        column: 51,
        span: 2287..2293,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 53,
        span: 2294..2295,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 86,
        column: 58,
        span: 2296..2300,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 86,
        column: 62,
        span: 2301..2304,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 86,
        column: 63,
        span: 2304..2305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 64,
        span: 2305..2306,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 86,
        column: 65,
        span: 2306..2307,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 87,
        column: 9,
        span: 2310..2316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 87,
        column: 11,
        span: 2317..2318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 87,
        column: 13,
        span: 2319..2320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 87,
        column: 15,
        span: 2321..2322,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 87,
        column: 17,
        span: 2323..2324,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 19,
        span: 2324..2326,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 87,
        column: 20,
        span: 2326..2327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 87,
        column: 22,
        span: 2328..2329,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 87,
        column: 24,
        span: 2330..2331,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 87,
        column: 26,
        span: 2332..2333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 87,
        column: 34,
        span: 2333..2341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 35,
        span: 2341..2342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 87,
        column: 36,
        span: 2342..2343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 37,
        span: 2343..2344,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 87,
        column: 40,
        span: 2345..2347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 87,
        column: 49,
        span: 2348..2356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 50,
        span: 2356..2357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 87,
        column: 51,
        span: 2357..2358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 52,
        span: 2358..2359,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 87,
        column: 53,
        span: 2359..2360,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 87,
        column: 59,
        span: 2361..2366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 87,
        column: 0,
        span: 2367..2373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 9,
        span: 2376..2382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 10,
        span: 2382..2383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 88,
        column: 11,
        span: 2383..2384,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 88,
        column: 12,
        span: 2384..2385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 13,
        span: 2384..2386,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 88,
        column: 14,
        span: 2386..2387,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 17,
        span: 2388..2390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 20,
        span: 2390..2393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 21,
        span: 2393..2394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 90,
        column: 9,
        span: 2438..2444,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 90,
        column: 11,
        span: 2445..2446,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 90,
        column: 0,
        span: 2447..2452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 91,
        column: 4,
        span: 2455..2456,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 6,
        span: 2457..2458,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 91,
        column: 8,
        span: 2459..2460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 91,
        column: 20,
        span: 2460..2472,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 21,
        span: 2472..2473,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 91,
        column: 22,
        span: 2473..2474,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 91,
        column: 23,
        span: 2474..2475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 24,
        span: 2475..2476,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 91,
        column: 26,
        span: 2477..2478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 91,
        column: 30,
        span: 2478..2482,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 32,
        span: 2483..2484,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 91,
        column: 41,
        span: 2485..2493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 43,
        span: 2494..2495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 44,
        span: 2495..2496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 91,
        column: 51,
        span: 2497..2503,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 53,
        span: 2504..2505,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 91,
        column: 58,
        span: 2506..2510,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
        column: 62,
        span: 2511..2514,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 91,
        column: 63,
        span: 2514..2515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 64,
        span: 2515..2516,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 91,
        column: 65,
        span: 2516..2517,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 92,
        column: 9,
        span: 2520..2526,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 92,
        column: 15,
        span: 2527..2532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 92,
        column: 17,
        span: 2533..2534,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 92,
        column: 18,
        span: 2534..2535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 92,
        column: 20,
        span: 2536..2537,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 22,
        span: 2538..2539,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 92,
        column: 24,
        span: 2540..2541,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 92,
        column: 32,
        span: 2541..2549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 34,
        span: 2550..2551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 35,
        span: 2551..2552,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 92,
        column: 42,
        span: 2553..2559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 92,
        column: 44,
        span: 2560..2561,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
        column: 48,
        span: 2562..2565,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 92,
        column: 49,
        span: 2565..2566,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 92,
        column: 55,
        span: 2567..2572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 92,
        column: 0,
        span: 2573..2579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 93,
        column: 9,
        span: 2582..2588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 10,
        span: 2588..2589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 93,
        column: 11,
        span: 2589..2590,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 93,
        column: 12,
        span: 2590..2591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
        column: 13,
        span: 2590..2592,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 93,
        column: 14,
        span: 2592..2593,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 93,
        column: 17,
        span: 2594..2596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
        column: 20,
        span: 2596..2599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 21,
        span: 2599..2600,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 94,
        column: 0,
        span: 2641..2644,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 96,
        column: 6,
        span: 2646..2651,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 96,
        column: 15,
        span: 2652..2660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC",
        ),
        line: 96,
        column: 18,
        span: 2661..2663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 19,
        span: 2663..2664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 20,
        span: 2664..2665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC1",
        ),
        line: 96,
        column: 25,
        span: 2667..2670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 26,
        span: 2670..2671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 27,
        span: 2671..2672,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 96,
        column: 28,
        span: 2672..2673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC2",
        ),
        line: 96,
        column: 32,
        span: 2674..2677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 33,
        span: 2677..2678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 34,
        span: 2678..2679,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 96,
        column: 0,
        span: 2680..2683,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 99,
        column: 0,
        span: 2686..2688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 100,
        column: 8,
        span: 2691..2696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 9,
        span: 2696..2697,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"creating many objects\"",
        ),
        line: 100,
        column: 32,
        span: 2697..2720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 33,
        span: 2720..2721,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 102,
        column: 8,
        span: 2725..2730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 102,
        column: 14,
        span: 2731..2736,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
        column: 16,
        span: 2737..2738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5000",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 0,
        span: 2738..2743,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 104,
        column: 6,
        span: 2747..2750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 104,
        column: 8,
        span: 2751..2752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 10,
        span: 2753..2754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 12,
        span: 2754..2756,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 13,
        span: 2756..2757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 104,
        column: 19,
        span: 2758..2763,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 104,
        column: 0,
        span: 2764..2766,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 105,
        column: 10,
        span: 2771..2776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 12,
        span: 2777..2778,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 14,
        span: 2779..2780,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 105,
        column: 16,
        span: 2781..2782,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 105,
        column: 17,
        span: 2782..2783,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 105,
        column: 18,
        span: 2783..2784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 20,
        span: 2785..2786,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 22,
        span: 2787..2788,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 105,
        column: 0,
        span: 2789..2792,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
        column: 0,
        span: 2795..2798,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 108,
        column: 8,
        span: 2802..2807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 10,
        span: 2808..2809,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 12,
        span: 2810..2811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 108,
        column: 16,
        span: 2812..2815,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 110,
        column: 6,
        span: 2819..2822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 110,
        column: 8,
        span: 2823..2824,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 10,
        span: 2825..2826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 12,
        span: 2826..2828,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 13,
        span: 2828..2829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 110,
        column: 19,
        span: 2830..2835,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 110,
        column: 0,
        span: 2836..2838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 6,
        span: 2843..2844,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 8,
        span: 2845..2846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 111,
        column: 10,
        span: 2847..2848,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 111,
        column: 13,
        span: 2849..2851,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 111,
        column: 17,
        span: 2852..2855,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 111,
        column: 18,
        span: 2855..2856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 112,
        column: 6,
        span: 2861..2862,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 112,
        column: 8,
        span: 2863..2864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 112,
        column: 15,
        span: 2865..2871,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 16,
        span: 2871..2872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 112,
        column: 20,
        span: 2872..2876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 21,
        span: 2876..2877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 112,
        column: 22,
        span: 2877..2878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 23,
        span: 2878..2879,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(%d%d*)'",
        ),
        line: 112,
        column: 33,
        span: 2880..2889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 34,
        span: 2889..2890,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1 %1\"",
        ),
        line: 112,
        column: 42,
        span: 2891..2898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 43,
        span: 2898..2899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 113,
        column: 6,
        span: 2904..2905,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 113,
        column: 8,
        span: 2906..2907,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 113,
        column: 12,
        span: 2908..2911,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 114,
        column: 0,
        span: 2914..2917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 4,
        span: 2923..2924,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 6,
        span: 2925..2926,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 118,
        column: 8,
        span: 2927..2928,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 118,
        column: 9,
        span: 2928..2929,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 120,
        column: 11,
        span: 2933..2941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 13,
        span: 2942..2943,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 120,
        column: 14,
        span: 2943..2944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 120,
        column: 18,
        span: 2944..2948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 20,
        span: 2949..2950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 21,
        span: 2950..2951,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 121,
        column: 8,
        span: 2956..2959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 121,
        column: 10,
        span: 2960..2961,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 121,
        column: 12,
        span: 2962..2963,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 14,
        span: 2963..2965,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 15,
        span: 2965..2966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 121,
        column: 21,
        span: 2967..2972,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 121,
        column: 0,
        span: 2973..2975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 122,
        column: 11,
        span: 2982..2986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 12,
        span: 2986..2987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 122,
        column: 18,
        span: 2987..2993,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 122,
        column: 19,
        span: 2993..2994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 122,
        column: 25,
        span: 2994..3000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 26,
        span: 3000..3001,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function temp(a) return 'a%d' end\"",
        ),
        line: 122,
        column: 61,
        span: 3001..3036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 62,
        span: 3036..3037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 122,
        column: 64,
        span: 3038..3039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 65,
        span: 3039..3040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 66,
        span: 3040..3041,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 122,
        column: 69,
        span: 3042..3044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 70,
        span: 3044..3045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 71,
        span: 3045..3046,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 72,
        span: 3046..3047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 123,
        column: 13,
        span: 3054..3060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 14,
        span: 3060..3061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "temp",
        ),
        line: 123,
        column: 18,
        span: 3061..3065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 19,
        span: 3065..3066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 20,
        span: 3066..3067,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 123,
        column: 23,
        span: 3068..3070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 123,
        column: 30,
        span: 3071..3077,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 31,
        span: 3077..3078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 123,
        column: 37,
        span: 3078..3084,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 38,
        span: 3084..3085,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a%d'",
        ),
        line: 123,
        column: 43,
        span: 3085..3090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 44,
        span: 3090..3091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 123,
        column: 46,
        span: 3092..3093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 47,
        span: 3093..3094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 48,
        span: 3094..3095,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 124,
        column: 0,
        span: 3100..3103,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 125,
        column: 0,
        span: 3106..3109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 127,
        column: 4,
        span: 3113..3114,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 127,
        column: 5,
        span: 3114..3115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 127,
        column: 9,
        span: 3115..3119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 10,
        span: 3119..3120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 11,
        span: 3120..3121,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 129,
        column: 0,
        span: 3123..3126,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 133,
        column: 3,
        span: 3186..3188,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 133,
        column: 9,
        span: 3189..3194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 133,
        column: 11,
        span: 3195..3196,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 133,
        column: 13,
        span: 3197..3198,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 133,
        column: 22,
        span: 3199..3207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 24,
        span: 3208..3209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 25,
        span: 3209..3210,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
        column: 29,
        span: 3211..3214,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
        column: 0,
        span: 3215..3218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 136,
        column: 6,
        span: 3221..3226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 7,
        span: 3226..3227,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"functions with errors\"",
        ),
        line: 136,
        column: 30,
        span: 3227..3250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 31,
        span: 3250..3251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 137,
        column: 5,
        span: 3252..3256,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 7,
        span: 3257..3258,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ndo\n  a = 10;\n  function foo(x,y)\n    a = sin(a+0.456-0.23e-12);\n    return function (z) return sin(%x+z) end\n  end\n  local x = function (w) a=a+w; end\nend\n]]",
        ),
        line: 146,
        column: 3,
        span: 3259..3419,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 147,
        column: 0,
        span: 3420..3422,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 148,
        column: 8,
        span: 3425..3430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "step",
        ),
        line: 148,
        column: 13,
        span: 3431..3435,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 148,
        column: 15,
        span: 3436..3437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 0,
        span: 3437..3439,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 149,
        column: 5,
        span: 3442..3444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 149,
        column: 11,
        span: 3445..3450,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 149,
        column: 16,
        span: 3451..3455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "step",
        ),
        line: 149,
        column: 21,
        span: 3456..3460,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 23,
        span: 3461..3462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 26,
        span: 3462..3465,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 149,
        column: 0,
        span: 3466..3469,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 150,
        column: 6,
        span: 3472..3475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 150,
        column: 8,
        span: 3476..3477,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
        column: 9,
        span: 3477..3478,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 10,
        span: 3477..3479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 11,
        span: 3479..3480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 150,
        column: 18,
        span: 3481..3487,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 150,
        column: 19,
        span: 3487..3488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 150,
        column: 22,
        span: 3488..3491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 23,
        span: 3491..3492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 150,
        column: 27,
        span: 3492..3496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 28,
        span: 3496..3497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 29,
        span: 3497..3498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "step",
        ),
        line: 150,
        column: 34,
        span: 3499..3503,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 150,
        column: 0,
        span: 3504..3506,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 151,
        column: 8,
        span: 3511..3514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 151,
        column: 10,
        span: 3515..3516,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
        column: 11,
        span: 3516..3517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 151,
        column: 12,
        span: 3517..3518,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 13,
        span: 3518..3519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 151,
        column: 20,
        span: 3520..3526,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 21,
        span: 3526..3527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 151,
        column: 24,
        span: 3527..3530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 25,
        span: 3530..3531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 151,
        column: 29,
        span: 3531..3535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 30,
        span: 3535..3536,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 31,
        span: 3536..3537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "step",
        ),
        line: 151,
        column: 36,
        span: 3538..3542,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 151,
        column: 0,
        span: 3543..3545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 152,
        column: 12,
        span: 3552..3557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 13,
        span: 3557..3558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 152,
        column: 17,
        span: 3558..3562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 18,
        span: 3562..3563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 152,
        column: 24,
        span: 3563..3569,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 152,
        column: 25,
        span: 3569..3570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 152,
        column: 28,
        span: 3570..3573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 29,
        span: 3573..3574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 152,
        column: 33,
        span: 3574..3578,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 34,
        span: 3578..3579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 152,
        column: 36,
        span: 3580..3581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 37,
        span: 3581..3582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 152,
        column: 39,
        span: 3583..3584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 40,
        span: 3584..3585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 41,
        span: 3585..3586,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 152,
        column: 44,
        span: 3587..3589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 45,
        span: 3589..3590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 46,
        span: 3590..3591,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 153,
        column: 0,
        span: 3596..3599,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 154,
        column: 0,
        span: 3602..3605,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 155,
        column: 0,
        span: 3606..3609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 157,
        column: 4,
        span: 3611..3614,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 157,
        column: 6,
        span: 3615..3616,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 157,
        column: 0,
        span: 3617..3620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 158,
        column: 6,
        span: 3621..3626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 7,
        span: 3626..3627,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'long strings'",
        ),
        line: 158,
        column: 21,
        span: 3627..3641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 22,
        span: 3641..3642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 159,
        column: 2,
        span: 3643..3644,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 159,
        column: 4,
        span: 3645..3646,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01234567890123456789012345678901234567890123456789012345678901234567890123456789\"",
        ),
        line: 159,
        column: 87,
        span: 3647..3729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 160,
        column: 7,
        span: 3730..3736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 8,
        span: 3736..3737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 160,
        column: 14,
        span: 3737..3743,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 160,
        column: 15,
        span: 3743..3744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 160,
        column: 18,
        span: 3744..3747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 19,
        span: 3747..3748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 160,
        column: 20,
        span: 3748..3749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 21,
        span: 3749..3750,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 160,
        column: 23,
        span: 3750..3752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 25,
        span: 3751..3754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 26,
        span: 3754..3755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 161,
        column: 2,
        span: 3756..3757,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 4,
        span: 3758..3759,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 161,
        column: 7,
        span: 3760..3762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 162,
        column: 2,
        span: 3763..3764,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 162,
        column: 4,
        span: 3765..3766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 162,
        column: 9,
        span: 3767..3771,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
        column: 10,
        span: 3771..3772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 162,
        column: 13,
        span: 3772..3775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 14,
        span: 3775..3776,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 17,
        span: 3775..3779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 18,
        span: 3779..3780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 20,
        span: 3781..3782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 162,
        column: 24,
        span: 3782..3786,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
        column: 25,
        span: 3786..3787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 162,
        column: 35,
        span: 3787..3797,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 162,
        column: 38,
        span: 3798..3800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 41,
        span: 3800..3803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 42,
        span: 3803..3804,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 162,
        column: 45,
        span: 3805..3807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 47,
        span: 3807..3809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 48,
        span: 3809..3810,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 163,
        column: 4,
        span: 3811..3814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 163,
        column: 6,
        span: 3815..3816,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 163,
        column: 8,
        span: 3817..3818,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 10,
        span: 3818..3820,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 11,
        span: 3820..3821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 163,
        column: 13,
        span: 3822..3823,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 163,
        column: 16,
        span: 3824..3826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 163,
        column: 18,
        span: 3827..3828,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 163,
        column: 20,
        span: 3829..3830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 163,
        column: 22,
        span: 3831..3832,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 163,
        column: 24,
        span: 3832..3834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 163,
        column: 25,
        span: 3834..3835,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 163,
        column: 26,
        span: 3835..3836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 163,
        column: 28,
        span: 3837..3838,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 163,
        column: 29,
        span: 3838..3839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 163,
        column: 37,
        span: 3839..3847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 38,
        span: 3847..3848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 163,
        column: 39,
        span: 3848..3849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 40,
        span: 3849..3850,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 163,
        column: 0,
        span: 3852..3855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 164,
        column: 7,
        span: 3856..3862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 8,
        span: 3862..3863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 164,
        column: 14,
        span: 3863..3869,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 164,
        column: 15,
        span: 3869..3870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 164,
        column: 18,
        span: 3870..3873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 19,
        span: 3873..3874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 164,
        column: 20,
        span: 3874..3875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 21,
        span: 3875..3876,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 164,
        column: 24,
        span: 3877..3879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 164,
        column: 26,
        span: 3880..3881,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 164,
        column: 27,
        span: 3881..3882,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 29,
        span: 3881..3884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 30,
        span: 3884..3885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 165,
        column: 2,
        span: 3886..3887,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 4,
        span: 3888..3889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 165,
        column: 11,
        span: 3890..3896,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 165,
        column: 12,
        span: 3896..3897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 165,
        column: 15,
        span: 3897..3900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 16,
        span: 3900..3901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 165,
        column: 17,
        span: 3901..3902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 18,
        span: 3902..3903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 20,
        span: 3903..3905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 21,
        span: 3905..3906,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 27,
        span: 3906..3912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 28,
        span: 3912..3913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 166,
        column: 2,
        span: 3914..3915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 3,
        span: 3915..3916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 166,
        column: 5,
        span: 3917..3918,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 166,
        column: 7,
        span: 3919..3920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 166,
        column: 14,
        span: 3921..3927,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 166,
        column: 15,
        span: 3927..3928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 166,
        column: 19,
        span: 3928..3932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 20,
        span: 3932..3933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 166,
        column: 21,
        span: 3933..3934,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 22,
        span: 3934..3935,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(%d%d%d%d)'",
        ),
        line: 166,
        column: 35,
        span: 3936..3948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 36,
        span: 3948..3949,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 166,
        column: 39,
        span: 3950..3952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 40,
        span: 3952..3953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 7,
        span: 3954..3960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 8,
        span: 3960..3961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 167,
        column: 9,
        span: 3961..3962,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 167,
        column: 11,
        span: 3962..3964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 16,
        span: 3963..3969,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 167,
        column: 19,
        span: 3970..3972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 21,
        span: 3972..3974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 22,
        span: 3974..3975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 168,
        column: 2,
        span: 3976..3977,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 168,
        column: 4,
        span: 3978..3979,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 168,
        column: 0,
        span: 3980..3983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 169,
        column: 2,
        span: 3984..3985,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 169,
        column: 4,
        span: 3986..3987,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 169,
        column: 0,
        span: 3988..3991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 7,
        span: 3993..3999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 8,
        span: 3999..4000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 171,
        column: 10,
        span: 4000..4002,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 171,
        column: 11,
        span: 4002..4003,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while\"",
        ),
        line: 171,
        column: 18,
        span: 4003..4010,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 171,
        column: 19,
        span: 4010..4011,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
        column: 22,
        span: 4012..4014,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 26,
        span: 4014..4018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 27,
        span: 4018..4019,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 177,
        column: 0,
        span: 4089..4091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 178,
        column: 6,
        span: 4092..4097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 7,
        span: 4097..4098,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"steps\"",
        ),
        line: 178,
        column: 14,
        span: 4098..4105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 15,
        span: 4105..4106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 180,
        column: 8,
        span: 4110..4115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 9,
        span: 4115..4116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"steps (2)\"",
        ),
        line: 180,
        column: 20,
        span: 4116..4127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 21,
        span: 4127..4128,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 182,
        column: 8,
        span: 4132..4137,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 182,
        column: 17,
        span: 4138..4146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dosteps",
        ),
        line: 182,
        column: 25,
        span: 4147..4154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 27,
        span: 4155..4156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "siz",
        ),
        line: 182,
        column: 30,
        span: 4156..4159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 31,
        span: 4159..4160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 183,
        column: 19,
        span: 4165..4179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 20,
        span: 4179..4180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 21,
        span: 4180..4181,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 184,
        column: 10,
        span: 4186..4191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 184,
        column: 12,
        span: 4192..4193,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 14,
        span: 4194..4195,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 184,
        column: 16,
        span: 4196..4197,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 184,
        column: 17,
        span: 4197..4198,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 185,
        column: 8,
        span: 4203..4206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 185,
        column: 10,
        span: 4207..4208,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 11,
        span: 4208..4209,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 12,
        span: 4208..4210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 13,
        span: 4210..4211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 16,
        span: 4210..4214,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 185,
        column: 19,
        span: 4215..4217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 185,
        column: 21,
        span: 4218..4219,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 185,
        column: 22,
        span: 4219..4220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 185,
        column: 23,
        span: 4220..4221,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 185,
        column: 24,
        span: 4221..4222,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 26,
        span: 4223..4224,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 185,
        column: 28,
        span: 4225..4226,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 185,
        column: 29,
        span: 4226..4227,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 185,
        column: 30,
        span: 4227..4228,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 185,
        column: 31,
        span: 4228..4229,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 185,
        column: 32,
        span: 4229..4230,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 185,
        column: 38,
        span: 4231..4236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 185,
        column: 40,
        span: 4237..4238,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 42,
        span: 4239..4240,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 185,
        column: 44,
        span: 4241..4242,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 185,
        column: 45,
        span: 4242..4243,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 185,
        column: 0,
        span: 4244..4247,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 186,
        column: 10,
        span: 4252..4257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 186,
        column: 12,
        span: 4258..4259,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 14,
        span: 4260..4261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 186,
        column: 21,
        span: 4262..4268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 22,
        span: 4268..4269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 23,
        span: 4269..4270,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 187,
        column: 10,
        span: 4275..4280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 187,
        column: 12,
        span: 4281..4282,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 187,
        column: 14,
        span: 4283..4284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 0,
        span: 4284..4286,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 188,
        column: 11,
        span: 4291..4297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 189,
        column: 8,
        span: 4356..4357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 10,
        span: 4358..4359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 189,
        column: 12,
        span: 4360..4361,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 189,
        column: 13,
        span: 4361..4362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 0,
        span: 4361..4363,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 190,
        column: 10,
        span: 4368..4373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 190,
        column: 25,
        span: 4374..4388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 26,
        span: 4388..4389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 190,
        column: 32,
        span: 4389..4395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 33,
        span: 4395..4396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "siz",
        ),
        line: 190,
        column: 37,
        span: 4397..4400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 38,
        span: 4400..4401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 11,
        span: 4406..4412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 12,
        span: 4412..4413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 191,
        column: 18,
        span: 4413..4419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 19,
        span: 4419..4420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 20,
        span: 4420..4421,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 191,
        column: 22,
        span: 4422..4423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 191,
        column: 24,
        span: 4424..4425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 25,
        span: 4425..4426,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 192,
        column: 11,
        span: 4431..4437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 192,
        column: 13,
        span: 4438..4439,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 193,
        column: 0,
        span: 4464..4467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 195,
        column: 17,
        span: 4471..4485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 195,
        column: 23,
        span: 4485..4491,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 197,
        column: 5,
        span: 4495..4497,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 197,
        column: 9,
        span: 4498..4501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 197,
        column: 15,
        span: 4502..4507,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 197,
        column: 0,
        span: 4508..4512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 198,
        column: 11,
        span: 4517..4523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 12,
        span: 4523..4524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dosteps",
        ),
        line: 198,
        column: 19,
        span: 4524..4531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 20,
        span: 4531..4532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 22,
        span: 4531..4534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 23,
        span: 4534..4535,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 198,
        column: 25,
        span: 4536..4537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dosteps",
        ),
        line: 198,
        column: 33,
        span: 4538..4545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 34,
        span: 4545..4546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 35,
        span: 4545..4547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 36,
        span: 4547..4548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 37,
        span: 4548..4549,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 199,
        column: 0,
        span: 4552..4555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 9,
        span: 4621..4627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 10,
        span: 4627..4628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dosteps",
        ),
        line: 202,
        column: 17,
        span: 4628..4635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 18,
        span: 4635..4636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
        column: 23,
        span: 4635..4641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 24,
        span: 4641..4642,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 202,
        column: 27,
        span: 4643..4645,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
        column: 29,
        span: 4645..4647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 30,
        span: 4647..4648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 9,
        span: 4651..4657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 10,
        span: 4657..4658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 203,
        column: 24,
        span: 4658..4672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 25,
        span: 4672..4673,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 203,
        column: 31,
        span: 4673..4679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 32,
        span: 4679..4680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 38,
        span: 4680..4686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 39,
        span: 4686..4687,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 203,
        column: 42,
        span: 4688..4690,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 203,
        column: 47,
        span: 4691..4695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 48,
        span: 4695..4696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 9,
        span: 4699..4705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 10,
        span: 4705..4706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 204,
        column: 24,
        span: 4706..4720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 25,
        span: 4720..4721,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 204,
        column: 31,
        span: 4721..4727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 32,
        span: 4727..4728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 38,
        span: 4728..4734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 39,
        span: 4734..4735,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 42,
        span: 4736..4738,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 204,
        column: 47,
        span: 4739..4743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 48,
        span: 4743..4744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
        column: 9,
        span: 4748..4754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 10,
        span: 4754..4755,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 206,
        column: 13,
        span: 4755..4758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 206,
        column: 28,
        span: 4759..4773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 29,
        span: 4773..4774,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 206,
        column: 40,
        span: 4774..4785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 41,
        span: 4785..4786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 42,
        span: 4786..4787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 207,
        column: 17,
        span: 4790..4804,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 207,
        column: 26,
        span: 4804..4813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 9,
        span: 4816..4822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 10,
        span: 4822..4823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 208,
        column: 24,
        span: 4823..4837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 25,
        span: 4837..4838,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 208,
        column: 36,
        span: 4838..4849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 37,
        span: 4849..4850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 38,
        span: 4850..4851,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 210,
        column: 0,
        span: 4853..4856,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 213,
        column: 3,
        span: 4859..4861,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 213,
        column: 7,
        span: 4862..4865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 213,
        column: 13,
        span: 4866..4871,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 213,
        column: 0,
        span: 4872..4876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 215,
        column: 17,
        span: 4915..4929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 18,
        span: 4929..4930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 19,
        span: 4930..4931,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 215,
        column: 20,
        span: 4931..4932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 215,
        column: 35,
        span: 4933..4947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 36,
        span: 4947..4948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 37,
        span: 4948..4949,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 216,
        column: 8,
        span: 4952..4957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 216,
        column: 10,
        span: 4958..4959,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 216,
        column: 12,
        span: 4960..4961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 216,
        column: 19,
        span: 4962..4968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 20,
        span: 4968..4969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 21,
        span: 4969..4970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 217,
        column: 17,
        span: 4973..4987,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 217,
        column: 23,
        span: 4987..4993,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 218,
        column: 0,
        span: 4996..5002,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 219,
        column: 10,
        span: 5007..5012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 219,
        column: 12,
        span: 5013..5014,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 219,
        column: 14,
        span: 5015..5016,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 219,
        column: 16,
        span: 5017..5018,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 219,
        column: 17,
        span: 5018..5019,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 220,
        column: 8,
        span: 5022..5027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 220,
        column: 15,
        span: 5028..5034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 16,
        span: 5034..5035,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 17,
        span: 5035..5036,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 220,
        column: 19,
        span: 5037..5038,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
        column: 21,
        span: 5038..5040,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 220,
        column: 23,
        span: 5041..5042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 220,
        column: 0,
        span: 5043..5044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 221,
        column: 17,
        span: 5047..5061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 221,
        column: 26,
        span: 5061..5070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 222,
        column: 9,
        span: 5073..5079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 10,
        span: 5079..5080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 222,
        column: 24,
        span: 5080..5094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 25,
        span: 5094..5095,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 222,
        column: 36,
        span: 5095..5106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 37,
        span: 5106..5107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 38,
        span: 5107..5108,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 223,
        column: 0,
        span: 5111..5117,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 224,
        column: 10,
        span: 5122..5127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 224,
        column: 12,
        span: 5128..5129,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 14,
        span: 5130..5131,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 224,
        column: 16,
        span: 5132..5133,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 224,
        column: 17,
        span: 5133..5134,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 225,
        column: 8,
        span: 5137..5142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 225,
        column: 15,
        span: 5143..5149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 16,
        span: 5149..5150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 17,
        span: 5150..5151,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 225,
        column: 20,
        span: 5152..5154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 225,
        column: 22,
        span: 5155..5156,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 225,
        column: 24,
        span: 5157..5158,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 0,
        span: 5158..5160,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 226,
        column: 0,
        span: 5161..5164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 229,
        column: 6,
        span: 5167..5172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 7,
        span: 5172..5173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"clearing tables\"",
        ),
        line: 229,
        column: 24,
        span: 5173..5190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 25,
        span: 5190..5191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 230,
        column: 4,
        span: 5192..5195,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 6,
        span: 5196..5197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 0,
        span: 5197..5200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 231,
        column: 2,
        span: 5201..5202,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 231,
        column: 4,
        span: 5203..5204,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 231,
        column: 6,
        span: 5205..5206,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 231,
        column: 7,
        span: 5206..5207,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 233,
        column: 4,
        span: 5245..5248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 233,
        column: 6,
        span: 5249..5250,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 7,
        span: 5250..5251,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 8,
        span: 5250..5252,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 9,
        span: 5252..5253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 233,
        column: 12,
        span: 5253..5256,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 233,
        column: 15,
        span: 5257..5259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 233,
        column: 17,
        span: 5260..5261,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 233,
        column: 18,
        span: 5261..5262,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 233,
        column: 19,
        span: 5262..5263,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 233,
        column: 20,
        span: 5263..5264,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 233,
        column: 21,
        span: 5264..5265,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 23,
        span: 5266..5267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 233,
        column: 25,
        span: 5268..5269,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 233,
        column: 0,
        span: 5270..5273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 234,
        column: 2,
        span: 5274..5275,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 234,
        column: 4,
        span: 5276..5277,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 234,
        column: 6,
        span: 5278..5279,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 234,
        column: 7,
        span: 5279..5280,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 235,
        column: 4,
        span: 5281..5284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 235,
        column: 6,
        span: 5285..5286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 7,
        span: 5286..5287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 235,
        column: 8,
        span: 5287..5288,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 235,
        column: 11,
        span: 5289..5291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 235,
        column: 17,
        span: 5292..5297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 18,
        span: 5297..5298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 235,
        column: 19,
        span: 5298..5299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 20,
        span: 5299..5300,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 235,
        column: 23,
        span: 5301..5303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 235,
        column: 25,
        span: 5304..5305,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 235,
        column: 26,
        span: 5305..5306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 235,
        column: 27,
        span: 5306..5307,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 235,
        column: 28,
        span: 5307..5308,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 235,
        column: 29,
        span: 5308..5309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 235,
        column: 30,
        span: 5309..5310,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 235,
        column: 0,
        span: 5311..5314,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 237,
        column: 4,
        span: 5354..5357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 237,
        column: 6,
        span: 5358..5359,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 237,
        column: 9,
        span: 5360..5362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 237,
        column: 15,
        span: 5363..5368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 16,
        span: 5368..5369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 237,
        column: 17,
        span: 5369..5370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 18,
        span: 5370..5371,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 237,
        column: 0,
        span: 5372..5374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 238,
        column: 4,
        span: 5377..5378,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 238,
        column: 5,
        span: 5378..5379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 238,
        column: 6,
        span: 5379..5380,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 238,
        column: 7,
        span: 5380..5381,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 238,
        column: 9,
        span: 5382..5383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 238,
        column: 0,
        span: 5384..5389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 9,
        span: 5392..5398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 10,
        span: 5398..5399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 239,
        column: 14,
        span: 5399..5403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 15,
        span: 5403..5404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 239,
        column: 16,
        span: 5404..5405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 17,
        span: 5405..5406,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
        column: 20,
        span: 5407..5409,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 239,
        column: 28,
        span: 5410..5417,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 239,
        column: 32,
        span: 5418..5421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 239,
        column: 37,
        span: 5422..5426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 38,
        span: 5426..5427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 239,
        column: 39,
        span: 5427..5428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 40,
        span: 5428..5429,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
        column: 43,
        span: 5430..5432,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 239,
        column: 47,
        span: 5433..5436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 48,
        span: 5436..5437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 240,
        column: 17,
        span: 5440..5454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 18,
        span: 5454..5455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 19,
        span: 5455..5456,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 241,
        column: 0,
        span: 5457..5460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 242,
        column: 2,
        span: 5461..5462,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 242,
        column: 4,
        span: 5463..5464,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 242,
        column: 0,
        span: 5465..5468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 243,
        column: 15,
        span: 5469..5483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 16,
        span: 5483..5484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 17,
        span: 5484..5485,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 244,
        column: 4,
        span: 5486..5489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 244,
        column: 6,
        span: 5490..5491,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 244,
        column: 9,
        span: 5492..5494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 244,
        column: 15,
        span: 5495..5500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 16,
        span: 5500..5501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 244,
        column: 17,
        span: 5501..5502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 18,
        span: 5502..5503,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 244,
        column: 21,
        span: 5504..5506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 244,
        column: 27,
        span: 5507..5512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cannot be here'",
        ),
        line: 244,
        column: 43,
        span: 5512..5528,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 244,
        column: 0,
        span: 5529..5532,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 245,
        column: 4,
        span: 5533..5536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 245,
        column: 6,
        span: 5537..5538,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 7,
        span: 5538..5539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 8,
        span: 5538..5540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 9,
        span: 5540..5541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 245,
        column: 12,
        span: 5541..5544,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 245,
        column: 15,
        span: 5545..5547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 245,
        column: 17,
        span: 5548..5549,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 245,
        column: 18,
        span: 5549..5550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 245,
        column: 19,
        span: 5550..5551,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 245,
        column: 20,
        span: 5551..5552,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 22,
        span: 5553..5554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 245,
        column: 24,
        span: 5555..5556,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 245,
        column: 0,
        span: 5557..5560,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 246,
        column: 4,
        span: 5561..5564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 246,
        column: 6,
        span: 5565..5566,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 7,
        span: 5566..5567,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 8,
        span: 5566..5568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 9,
        span: 5568..5569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 246,
        column: 12,
        span: 5569..5572,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 246,
        column: 15,
        span: 5573..5575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
        column: 22,
        span: 5576..5582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 23,
        span: 5582..5583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 246,
        column: 24,
        span: 5583..5584,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 246,
        column: 25,
        span: 5584..5585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 246,
        column: 26,
        span: 5585..5586,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 246,
        column: 27,
        span: 5586..5587,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 30,
        span: 5588..5590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 246,
        column: 32,
        span: 5591..5592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 33,
        span: 5592..5593,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 246,
        column: 0,
        span: 5594..5597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 249,
        column: 6,
        span: 5600..5605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 7,
        span: 5605..5606,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'weak tables'",
        ),
        line: 249,
        column: 20,
        span: 5606..5619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 21,
        span: 5619..5620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 250,
        column: 2,
        span: 5621..5622,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 250,
        column: 4,
        span: 5623..5624,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 250,
        column: 6,
        span: 5625..5626,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 250,
        column: 7,
        span: 5626..5627,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 250,
        column: 8,
        span: 5627..5628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 250,
        column: 21,
        span: 5629..5641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 22,
        span: 5641..5642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 250,
        column: 23,
        span: 5642..5643,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 24,
        span: 5643..5644,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 250,
        column: 26,
        span: 5645..5646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 250,
        column: 32,
        span: 5646..5652,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 250,
        column: 34,
        span: 5653..5654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 250,
        column: 38,
        span: 5655..5658,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 250,
        column: 39,
        span: 5658..5659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 40,
        span: 5659..5660,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 250,
        column: 41,
        span: 5660..5661,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 252,
        column: 4,
        span: 5704..5707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 252,
        column: 6,
        span: 5708..5709,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 7,
        span: 5709..5710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 8,
        span: 5709..5711,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 9,
        span: 5711..5712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 252,
        column: 12,
        span: 5712..5715,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 252,
        column: 15,
        span: 5716..5718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 252,
        column: 17,
        span: 5719..5720,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 252,
        column: 18,
        span: 5720..5721,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 252,
        column: 19,
        span: 5721..5722,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 252,
        column: 20,
        span: 5722..5723,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 252,
        column: 21,
        span: 5723..5724,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 23,
        span: 5725..5726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 252,
        column: 25,
        span: 5727..5728,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
        column: 0,
        span: 5729..5732,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 254,
        column: 4,
        span: 5766..5769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 254,
        column: 6,
        span: 5770..5771,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 7,
        span: 5771..5772,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 8,
        span: 5771..5773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 9,
        span: 5773..5774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 254,
        column: 12,
        span: 5774..5777,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 254,
        column: 15,
        span: 5778..5780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 254,
        column: 17,
        span: 5781..5782,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 254,
        column: 18,
        span: 5782..5783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 254,
        column: 19,
        span: 5783..5784,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 254,
        column: 20,
        span: 5784..5785,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 22,
        span: 5786..5787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 254,
        column: 24,
        span: 5788..5789,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 254,
        column: 0,
        span: 5790..5793,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 255,
        column: 4,
        span: 5794..5797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 255,
        column: 6,
        span: 5798..5799,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 7,
        span: 5799..5800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 8,
        span: 5799..5801,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 9,
        span: 5801..5802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 255,
        column: 12,
        span: 5802..5805,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 255,
        column: 15,
        span: 5806..5808,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 255,
        column: 21,
        span: 5809..5814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 255,
        column: 23,
        span: 5815..5816,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 24,
        span: 5816..5817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 255,
        column: 30,
        span: 5817..5823,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 255,
        column: 31,
        span: 5823..5824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 255,
        column: 34,
        span: 5824..5827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 35,
        span: 5827..5828,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'@'",
        ),
        line: 255,
        column: 38,
        span: 5828..5831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 39,
        span: 5831..5832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 255,
        column: 41,
        span: 5833..5834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 42,
        span: 5834..5835,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 255,
        column: 43,
        span: 5835..5836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 255,
        column: 45,
        span: 5837..5838,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 255,
        column: 46,
        span: 5838..5839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 255,
        column: 47,
        span: 5839..5840,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 255,
        column: 48,
        span: 5840..5841,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 50,
        span: 5842..5843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 255,
        column: 52,
        span: 5844..5845,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 255,
        column: 54,
        span: 5845..5847,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 255,
        column: 57,
        span: 5847..5850,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
        column: 0,
        span: 5851..5854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 256,
        column: 15,
        span: 5855..5869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 16,
        span: 5869..5870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 17,
        span: 5870..5871,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 257,
        column: 6,
        span: 5872..5877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 257,
        column: 8,
        span: 5878..5879,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 257,
        column: 10,
        span: 5880..5881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 0,
        span: 5881..5883,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 258,
        column: 4,
        span: 5884..5887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 258,
        column: 6,
        span: 5888..5889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 7,
        span: 5889..5890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 258,
        column: 8,
        span: 5890..5891,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 258,
        column: 11,
        span: 5892..5894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 258,
        column: 17,
        span: 5895..5900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 18,
        span: 5900..5901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 258,
        column: 19,
        span: 5901..5902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 20,
        span: 5902..5903,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 258,
        column: 23,
        span: 5904..5906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 30,
        span: 5907..5913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 31,
        span: 5913..5914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 258,
        column: 32,
        span: 5914..5915,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 34,
        span: 5915..5917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 258,
        column: 35,
        span: 5917..5918,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 258,
        column: 38,
        span: 5919..5921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 258,
        column: 40,
        span: 5922..5923,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 258,
        column: 42,
        span: 5923..5925,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 258,
        column: 45,
        span: 5925..5928,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 47,
        span: 5928..5930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 258,
        column: 48,
        span: 5930..5931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 49,
        span: 5931..5932,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 258,
        column: 50,
        span: 5932..5933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 258,
        column: 52,
        span: 5934..5935,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
        column: 53,
        span: 5935..5936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 258,
        column: 54,
        span: 5936..5937,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 258,
        column: 55,
        span: 5937..5938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 56,
        span: 5937..5939,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 258,
        column: 0,
        span: 5940..5943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 7,
        span: 5944..5950,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 8,
        span: 5950..5951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 259,
        column: 9,
        span: 5951..5952,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 259,
        column: 12,
        span: 5953..5955,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 14,
        span: 5955..5957,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 259,
        column: 15,
        span: 5957..5958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 259,
        column: 18,
        span: 5958..5961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 19,
        span: 5961..5962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 261,
        column: 2,
        span: 5964..5965,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 4,
        span: 5966..5967,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 261,
        column: 6,
        span: 5968..5969,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 261,
        column: 7,
        span: 5969..5970,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 261,
        column: 8,
        span: 5970..5971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 261,
        column: 21,
        span: 5972..5984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 22,
        span: 5984..5985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 261,
        column: 23,
        span: 5985..5986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 24,
        span: 5986..5987,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 261,
        column: 26,
        span: 5988..5989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 261,
        column: 32,
        span: 5989..5995,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 34,
        span: 5996..5997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'v'",
        ),
        line: 261,
        column: 38,
        span: 5998..6001,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 261,
        column: 39,
        span: 6001..6002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 40,
        span: 6002..6003,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 261,
        column: 41,
        span: 6003..6004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 262,
        column: 2,
        span: 6005..6006,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 262,
        column: 3,
        span: 6006..6007,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 4,
        span: 6006..6008,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 262,
        column: 5,
        span: 6008..6009,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 7,
        span: 6010..6011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 262,
        column: 14,
        span: 6012..6018,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 262,
        column: 15,
        span: 6018..6019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 262,
        column: 18,
        span: 6019..6022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 19,
        span: 6022..6023,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 262,
        column: 22,
        span: 6023..6026,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 23,
        span: 6026..6027,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "21",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 26,
        span: 6027..6030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 27,
        span: 6030..6031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 263,
        column: 15,
        span: 6032..6046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 16,
        span: 6046..6047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 17,
        span: 6047..6048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 264,
        column: 7,
        span: 6049..6055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 8,
        span: 6055..6056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 264,
        column: 9,
        span: 6056..6057,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 264,
        column: 10,
        span: 6057..6058,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 11,
        span: 6057..6059,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 264,
        column: 12,
        span: 6059..6060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 13,
        span: 6060..6061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
        column: 2,
        span: 6088..6089,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 265,
        column: 3,
        span: 6089..6090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 4,
        span: 6089..6091,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 265,
        column: 5,
        span: 6091..6092,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 7,
        span: 6093..6094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 265,
        column: 0,
        span: 6095..6100,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 267,
        column: 4,
        span: 6171..6174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 267,
        column: 6,
        span: 6175..6176,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 267,
        column: 7,
        span: 6176..6177,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 8,
        span: 6176..6178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 9,
        span: 6178..6179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 267,
        column: 12,
        span: 6179..6182,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 267,
        column: 15,
        span: 6183..6185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 267,
        column: 17,
        span: 6186..6187,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 267,
        column: 18,
        span: 6187..6188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 267,
        column: 19,
        span: 6188..6189,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 267,
        column: 20,
        span: 6189..6190,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 267,
        column: 22,
        span: 6191..6192,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 267,
        column: 24,
        span: 6193..6194,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 267,
        column: 25,
        span: 6194..6195,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 267,
        column: 0,
        span: 6196..6199,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 268,
        column: 4,
        span: 6200..6203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 268,
        column: 6,
        span: 6204..6205,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
        column: 7,
        span: 6205..6206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 8,
        span: 6205..6207,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 9,
        span: 6207..6208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 268,
        column: 12,
        span: 6208..6211,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 268,
        column: 15,
        span: 6212..6214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 268,
        column: 17,
        span: 6215..6216,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 268,
        column: 18,
        span: 6216..6217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 268,
        column: 19,
        span: 6217..6218,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 268,
        column: 21,
        span: 6218..6220,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 268,
        column: 24,
        span: 6220..6223,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 268,
        column: 25,
        span: 6223..6224,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
        column: 27,
        span: 6225..6226,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 268,
        column: 29,
        span: 6227..6228,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 268,
        column: 30,
        span: 6228..6229,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 268,
        column: 0,
        span: 6230..6233,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 270,
        column: 4,
        span: 6267..6270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 270,
        column: 6,
        span: 6271..6272,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
        column: 7,
        span: 6272..6273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 8,
        span: 6272..6274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 9,
        span: 6274..6275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 270,
        column: 12,
        span: 6275..6278,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 270,
        column: 15,
        span: 6279..6281,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 270,
        column: 21,
        span: 6282..6287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 270,
        column: 23,
        span: 6288..6289,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
        column: 24,
        span: 6289..6290,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 270,
        column: 25,
        span: 6290..6291,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 270,
        column: 26,
        span: 6291..6292,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 270,
        column: 27,
        span: 6292..6293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
        column: 29,
        span: 6294..6295,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 270,
        column: 30,
        span: 6295..6296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 270,
        column: 31,
        span: 6296..6297,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 270,
        column: 32,
        span: 6297..6298,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
        column: 33,
        span: 6298..6299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 270,
        column: 34,
        span: 6299..6300,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 270,
        column: 0,
        span: 6301..6304,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 271,
        column: 4,
        span: 6305..6308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 271,
        column: 6,
        span: 6309..6310,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 271,
        column: 7,
        span: 6310..6311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 8,
        span: 6310..6312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 9,
        span: 6312..6313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 271,
        column: 12,
        span: 6313..6316,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 271,
        column: 15,
        span: 6317..6319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 271,
        column: 17,
        span: 6320..6321,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 271,
        column: 18,
        span: 6321..6322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 271,
        column: 19,
        span: 6322..6323,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 271,
        column: 20,
        span: 6323..6324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 271,
        column: 23,
        span: 6324..6327,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 271,
        column: 24,
        span: 6327..6328,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 271,
        column: 25,
        span: 6328..6329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 271,
        column: 26,
        span: 6329..6330,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 271,
        column: 28,
        span: 6330..6332,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 271,
        column: 31,
        span: 6332..6335,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 271,
        column: 0,
        span: 6336..6339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 272,
        column: 15,
        span: 6340..6354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 16,
        span: 6354..6355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 17,
        span: 6355..6356,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 273,
        column: 6,
        span: 6357..6362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 273,
        column: 8,
        span: 6363..6364,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 273,
        column: 10,
        span: 6365..6366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 0,
        span: 6366..6368,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 274,
        column: 4,
        span: 6369..6372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 274,
        column: 6,
        span: 6373..6374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 7,
        span: 6374..6375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 274,
        column: 8,
        span: 6375..6376,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 274,
        column: 11,
        span: 6377..6379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 274,
        column: 17,
        span: 6380..6385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 18,
        span: 6385..6386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 274,
        column: 19,
        span: 6386..6387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 20,
        span: 6387..6388,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 274,
        column: 23,
        span: 6389..6391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 274,
        column: 30,
        span: 6392..6398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 31,
        span: 6398..6399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 274,
        column: 32,
        span: 6399..6400,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 274,
        column: 34,
        span: 6400..6402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 274,
        column: 35,
        span: 6402..6403,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 274,
        column: 38,
        span: 6404..6406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 274,
        column: 40,
        span: 6407..6408,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 274,
        column: 41,
        span: 6408..6409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 274,
        column: 44,
        span: 6409..6412,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 274,
        column: 46,
        span: 6412..6414,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 274,
        column: 49,
        span: 6414..6417,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 274,
        column: 52,
        span: 6418..6420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 274,
        column: 54,
        span: 6421..6422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 55,
        span: 6422..6423,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 274,
        column: 56,
        span: 6423..6424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 274,
        column: 58,
        span: 6425..6426,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 274,
        column: 59,
        span: 6426..6427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 274,
        column: 60,
        span: 6427..6428,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 274,
        column: 61,
        span: 6428..6429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 62,
        span: 6428..6430,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 274,
        column: 0,
        span: 6431..6434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
        column: 7,
        span: 6435..6441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 8,
        span: 6441..6442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 275,
        column: 9,
        span: 6442..6443,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 275,
        column: 12,
        span: 6444..6446,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 14,
        span: 6446..6448,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 275,
        column: 15,
        span: 6448..6449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 275,
        column: 18,
        span: 6449..6452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 19,
        span: 6452..6453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 277,
        column: 2,
        span: 6455..6456,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 4,
        span: 6457..6458,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 277,
        column: 6,
        span: 6459..6460,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 277,
        column: 7,
        span: 6460..6461,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 277,
        column: 8,
        span: 6461..6462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 277,
        column: 21,
        span: 6463..6475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 22,
        span: 6475..6476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 277,
        column: 23,
        span: 6476..6477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 24,
        span: 6477..6478,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 277,
        column: 26,
        span: 6479..6480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 277,
        column: 32,
        span: 6480..6486,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 34,
        span: 6487..6488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'kv'",
        ),
        line: 277,
        column: 39,
        span: 6489..6493,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 277,
        column: 40,
        span: 6493..6494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 41,
        span: 6494..6495,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 277,
        column: 42,
        span: 6495..6496,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 278,
        column: 6,
        span: 6497..6502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 278,
        column: 8,
        span: 6503..6504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 9,
        span: 6504..6505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 278,
        column: 11,
        span: 6506..6507,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 12,
        span: 6507..6508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 278,
        column: 14,
        span: 6509..6510,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 278,
        column: 16,
        span: 6511..6512,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 278,
        column: 18,
        span: 6513..6514,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 278,
        column: 19,
        span: 6514..6515,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 20,
        span: 6515..6516,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 278,
        column: 22,
        span: 6517..6518,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 278,
        column: 23,
        span: 6518..6519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 24,
        span: 6519..6520,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 278,
        column: 26,
        span: 6521..6522,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 278,
        column: 27,
        span: 6522..6523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 280,
        column: 2,
        span: 6548..6549,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 280,
        column: 3,
        span: 6549..6550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 4,
        span: 6549..6551,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 280,
        column: 5,
        span: 6551..6552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 6,
        span: 6552..6553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 280,
        column: 8,
        span: 6554..6555,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 280,
        column: 9,
        span: 6555..6556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 10,
        span: 6555..6557,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 280,
        column: 11,
        span: 6557..6558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 12,
        span: 6558..6559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 280,
        column: 14,
        span: 6560..6561,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 280,
        column: 15,
        span: 6561..6562,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 16,
        span: 6561..6563,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 280,
        column: 17,
        span: 6563..6564,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 280,
        column: 19,
        span: 6565..6566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 280,
        column: 21,
        span: 6567..6568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 22,
        span: 6568..6569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 280,
        column: 24,
        span: 6570..6571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 25,
        span: 6571..6572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 280,
        column: 0,
        span: 6573..6574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 281,
        column: 2,
        span: 6575..6576,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 281,
        column: 3,
        span: 6576..6577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 281,
        column: 9,
        span: 6577..6583,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 281,
        column: 10,
        span: 6583..6584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 281,
        column: 13,
        span: 6584..6587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 14,
        span: 6587..6588,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 281,
        column: 17,
        span: 6588..6591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 18,
        span: 6591..6592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 21,
        span: 6592..6595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 22,
        span: 6595..6596,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 281,
        column: 23,
        span: 6596..6597,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 281,
        column: 25,
        span: 6598..6599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 281,
        column: 32,
        span: 6600..6606,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 281,
        column: 33,
        span: 6606..6607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 281,
        column: 36,
        span: 6607..6610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 37,
        span: 6610..6611,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 281,
        column: 40,
        span: 6611..6614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 41,
        span: 6614..6615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 44,
        span: 6615..6618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 45,
        span: 6618..6619,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 283,
        column: 4,
        span: 6661..6664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 283,
        column: 6,
        span: 6665..6666,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 283,
        column: 7,
        span: 6666..6667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 283,
        column: 8,
        span: 6666..6668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 9,
        span: 6668..6669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 283,
        column: 12,
        span: 6669..6672,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 283,
        column: 15,
        span: 6673..6675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 283,
        column: 17,
        span: 6676..6677,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 283,
        column: 18,
        span: 6677..6678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 283,
        column: 19,
        span: 6678..6679,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 283,
        column: 20,
        span: 6679..6680,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 283,
        column: 22,
        span: 6681..6682,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 283,
        column: 24,
        span: 6683..6684,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 283,
        column: 25,
        span: 6684..6685,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 283,
        column: 0,
        span: 6686..6689,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 284,
        column: 4,
        span: 6690..6693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 284,
        column: 6,
        span: 6694..6695,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 284,
        column: 7,
        span: 6695..6696,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 284,
        column: 8,
        span: 6695..6697,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
        column: 9,
        span: 6697..6698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 284,
        column: 12,
        span: 6698..6701,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 284,
        column: 15,
        span: 6702..6704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 284,
        column: 17,
        span: 6705..6706,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 284,
        column: 18,
        span: 6706..6707,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 284,
        column: 19,
        span: 6707..6708,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 284,
        column: 20,
        span: 6708..6709,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 284,
        column: 21,
        span: 6709..6710,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 284,
        column: 23,
        span: 6711..6712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 284,
        column: 25,
        span: 6713..6714,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 284,
        column: 0,
        span: 6715..6718,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 285,
        column: 4,
        span: 6719..6722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 285,
        column: 6,
        span: 6723..6724,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
        column: 7,
        span: 6724..6725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 8,
        span: 6724..6726,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 9,
        span: 6726..6727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 285,
        column: 12,
        span: 6727..6730,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 285,
        column: 15,
        span: 6731..6733,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 285,
        column: 21,
        span: 6734..6739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 285,
        column: 23,
        span: 6740..6741,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
        column: 24,
        span: 6741..6742,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 285,
        column: 25,
        span: 6742..6743,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 285,
        column: 26,
        span: 6743..6744,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 285,
        column: 27,
        span: 6744..6745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 285,
        column: 29,
        span: 6746..6747,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 285,
        column: 30,
        span: 6747..6748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 285,
        column: 31,
        span: 6748..6749,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 285,
        column: 32,
        span: 6749..6750,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
        column: 33,
        span: 6750..6751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 285,
        column: 34,
        span: 6751..6752,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 285,
        column: 0,
        span: 6753..6756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 286,
        column: 15,
        span: 6757..6771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 16,
        span: 6771..6772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 17,
        span: 6772..6773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 287,
        column: 7,
        span: 6774..6780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 8,
        span: 6780..6781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 287,
        column: 12,
        span: 6781..6785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 13,
        span: 6785..6786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 287,
        column: 14,
        span: 6786..6787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 15,
        span: 6787..6788,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 287,
        column: 18,
        span: 6789..6791,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 287,
        column: 22,
        span: 6792..6795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 23,
        span: 6795..6796,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 288,
        column: 6,
        span: 6797..6802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
        column: 8,
        span: 6803..6804,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
        column: 10,
        span: 6805..6806,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 0,
        span: 6806..6808,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 289,
        column: 4,
        span: 6809..6812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 289,
        column: 6,
        span: 6813..6814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
        column: 7,
        span: 6814..6815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 289,
        column: 8,
        span: 6815..6816,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 289,
        column: 11,
        span: 6817..6819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 289,
        column: 17,
        span: 6820..6825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 18,
        span: 6825..6826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 289,
        column: 19,
        span: 6826..6827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 20,
        span: 6827..6828,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 289,
        column: 0,
        span: 6829..6831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 290,
        column: 9,
        span: 6834..6840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 10,
        span: 6840..6841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 11,
        span: 6841..6842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 290,
        column: 12,
        span: 6842..6843,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 290,
        column: 15,
        span: 6844..6846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 17,
        span: 6846..6848,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 290,
        column: 21,
        span: 6849..6852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 290,
        column: 23,
        span: 6853..6854,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 290,
        column: 26,
        span: 6855..6857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 290,
        column: 28,
        span: 6858..6859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 29,
        span: 6859..6860,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 290,
        column: 0,
        span: 6861..6863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 11,
        span: 6873..6874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 291,
        column: 12,
        span: 6874..6875,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 291,
        column: 15,
        span: 6876..6878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 17,
        span: 6878..6880,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 291,
        column: 21,
        span: 6881..6884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 291,
        column: 23,
        span: 6885..6886,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 291,
        column: 26,
        span: 6887..6889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 291,
        column: 28,
        span: 6890..6891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 29,
        span: 6891..6892,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 291,
        column: 0,
        span: 6893..6895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 11,
        span: 6905..6906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 292,
        column: 12,
        span: 6906..6907,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 292,
        column: 15,
        span: 6908..6910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 17,
        span: 6910..6912,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 292,
        column: 21,
        span: 6913..6916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 292,
        column: 23,
        span: 6917..6918,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 292,
        column: 26,
        span: 6919..6921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 292,
        column: 28,
        span: 6922..6923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 29,
        span: 6923..6924,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 292,
        column: 32,
        span: 6925..6927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 292,
        column: 34,
        span: 6928..6929,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 292,
        column: 36,
        span: 6929..6931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 292,
        column: 37,
        span: 6931..6932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 38,
        span: 6932..6933,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 292,
        column: 39,
        span: 6933..6934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 293,
        column: 4,
        span: 6937..6938,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 6,
        span: 6939..6940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 293,
        column: 8,
        span: 6941..6942,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 293,
        column: 9,
        span: 6942..6943,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 0,
        span: 6942..6944,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 294,
        column: 0,
        span: 6945..6948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 295,
        column: 7,
        span: 6949..6955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 8,
        span: 6955..6956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 295,
        column: 9,
        span: 6956..6957,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 12,
        span: 6958..6960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 14,
        span: 6960..6962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 15,
        span: 6962..6963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 296,
        column: 2,
        span: 6964..6965,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
        column: 3,
        span: 6965..6966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 296,
        column: 4,
        span: 6966..6967,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
        column: 5,
        span: 6967..6968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 296,
        column: 6,
        span: 6968..6969,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 296,
        column: 7,
        span: 6969..6970,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 296,
        column: 0,
        span: 6970..6973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 297,
        column: 15,
        span: 6974..6988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 16,
        span: 6988..6989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 17,
        span: 6989..6990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 7,
        span: 6991..6997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 8,
        span: 6997..6998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 298,
        column: 12,
        span: 6998..7002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 13,
        span: 7002..7003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 298,
        column: 14,
        span: 7003..7004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 15,
        span: 7004..7005,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 18,
        span: 7006..7008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 298,
        column: 25,
        span: 7009..7015,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 26,
        span: 7015..7016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 298,
        column: 29,
        span: 7016..7019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 30,
        span: 7019..7020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 298,
        column: 33,
        span: 7020..7023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 34,
        span: 7023..7024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 37,
        span: 7024..7027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 38,
        span: 7027..7028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 39,
        span: 7028..7029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 302,
        column: 2,
        span: 7048..7049,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 302,
        column: 4,
        span: 7050..7051,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 302,
        column: 6,
        span: 7052..7053,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 302,
        column: 7,
        span: 7053..7054,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 303,
        column: 6,
        span: 7055..7060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 303,
        column: 8,
        span: 7061..7062,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 303,
        column: 10,
        span: 7063..7064,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 303,
        column: 12,
        span: 7065..7066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 303,
        column: 13,
        span: 7066..7067,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 303,
        column: 15,
        span: 7068..7069,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 303,
        column: 18,
        span: 7069..7072,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 303,
        column: 19,
        span: 7072..7073,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 304,
        column: 6,
        span: 7074..7079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 304,
        column: 8,
        span: 7080..7081,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 304,
        column: 10,
        span: 7082..7083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 304,
        column: 23,
        span: 7084..7096,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 24,
        span: 7096..7097,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 304,
        column: 25,
        span: 7097..7098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 304,
        column: 28,
        span: 7098..7101,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 304,
        column: 30,
        span: 7102..7103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 304,
        column: 32,
        span: 7104..7105,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 304,
        column: 33,
        span: 7105..7106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 304,
        column: 34,
        span: 7106..7107,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 304,
        column: 36,
        span: 7108..7109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 304,
        column: 42,
        span: 7109..7115,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 304,
        column: 44,
        span: 7116..7117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'v'",
        ),
        line: 304,
        column: 48,
        span: 7118..7121,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 304,
        column: 49,
        span: 7121..7122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 50,
        span: 7122..7123,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 305,
        column: 6,
        span: 7124..7129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C1",
        ),
        line: 305,
        column: 9,
        span: 7130..7132,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
        column: 11,
        span: 7133..7134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 305,
        column: 24,
        span: 7135..7147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 25,
        span: 7147..7148,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 305,
        column: 26,
        span: 7148..7149,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 305,
        column: 27,
        span: 7149..7150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 305,
        column: 28,
        span: 7150..7151,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 305,
        column: 29,
        span: 7151..7152,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
        column: 31,
        span: 7153..7154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 305,
        column: 33,
        span: 7154..7156,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 305,
        column: 34,
        span: 7156..7157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 35,
        span: 7157..7158,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 305,
        column: 37,
        span: 7159..7160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 305,
        column: 43,
        span: 7160..7166,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
        column: 45,
        span: 7167..7168,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 305,
        column: 49,
        span: 7169..7172,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 305,
        column: 50,
        span: 7172..7173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 51,
        span: 7173..7174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 2,
        span: 7175..7176,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 306,
        column: 3,
        span: 7176..7177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 306,
        column: 4,
        span: 7177..7178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 306,
        column: 6,
        span: 7179..7180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 306,
        column: 8,
        span: 7181..7182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 309,
        column: 13,
        span: 7296..7308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 14,
        span: 7308..7309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 309,
        column: 15,
        span: 7309..7310,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 16,
        span: 7310..7311,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 309,
        column: 18,
        span: 7312..7313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 309,
        column: 22,
        span: 7313..7317,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 309,
        column: 24,
        span: 7318..7319,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 309,
        column: 33,
        span: 7320..7328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 35,
        span: 7329..7330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 309,
        column: 36,
        span: 7330..7331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 37,
        span: 7331..7332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 310,
        column: 33,
        span: 7359..7365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 34,
        span: 7365..7366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 310,
        column: 35,
        span: 7366..7367,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 310,
        column: 36,
        span: 7367..7368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 310,
        column: 39,
        span: 7368..7371,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 310,
        column: 42,
        span: 7372..7374,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 310,
        column: 46,
        span: 7375..7378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 47,
        span: 7378..7379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 311,
        column: 33,
        span: 7406..7412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 34,
        span: 7412..7413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 311,
        column: 38,
        span: 7413..7417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 39,
        span: 7417..7418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 311,
        column: 43,
        span: 7418..7422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 44,
        span: 7422..7423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C1",
        ),
        line: 311,
        column: 46,
        span: 7423..7425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 47,
        span: 7425..7426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 48,
        span: 7426..7427,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 311,
        column: 51,
        span: 7428..7430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 311,
        column: 59,
        span: 7431..7438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 60,
        span: 7438..7439,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 312,
        column: 30,
        span: 7466..7469,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 312,
        column: 31,
        span: 7469..7470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 32,
        span: 7470..7471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 314,
        column: 2,
        span: 7473..7474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 314,
        column: 3,
        span: 7474..7475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 314,
        column: 5,
        span: 7476..7477,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 314,
        column: 7,
        span: 7478..7479,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 314,
        column: 0,
        span: 7480..7483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 315,
        column: 15,
        span: 7484..7498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 16,
        span: 7498..7499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 17,
        span: 7499..7500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 316,
        column: 15,
        span: 7501..7515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 16,
        span: 7515..7516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 17,
        span: 7516..7517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 317,
        column: 7,
        span: 7518..7524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 8,
        span: 7524..7525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 317,
        column: 12,
        span: 7525..7529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 13,
        span: 7529..7530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 317,
        column: 14,
        span: 7530..7531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 15,
        span: 7531..7532,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 317,
        column: 18,
        span: 7533..7535,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 317,
        column: 22,
        span: 7536..7539,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 317,
        column: 26,
        span: 7540..7543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 317,
        column: 31,
        span: 7544..7548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 32,
        span: 7548..7549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C1",
        ),
        line: 317,
        column: 34,
        span: 7549..7551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 35,
        span: 7551..7552,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 317,
        column: 38,
        span: 7553..7555,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 317,
        column: 42,
        span: 7556..7559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 43,
        span: 7559..7560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 318,
        column: 2,
        span: 7561..7562,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 3,
        span: 7562..7563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C1",
        ),
        line: 318,
        column: 6,
        span: 7564..7566,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 318,
        column: 8,
        span: 7567..7568,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 318,
        column: 0,
        span: 7569..7572,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 322,
        column: 6,
        span: 7589..7594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 322,
        column: 9,
        span: 7595..7597,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 322,
        column: 11,
        span: 7598..7599,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 322,
        column: 13,
        span: 7600..7601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 322,
        column: 19,
        span: 7601..7607,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 322,
        column: 21,
        span: 7608..7609,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 322,
        column: 25,
        span: 7610..7613,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 322,
        column: 26,
        span: 7613..7614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 323,
        column: 2,
        span: 7615..7616,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 323,
        column: 4,
        span: 7617..7618,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 323,
        column: 6,
        span: 7619..7620,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 323,
        column: 7,
        span: 7620..7621,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 9,
        span: 7620..7623,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 323,
        column: 10,
        span: 7623..7624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 11,
        span: 7624..7625,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 323,
        column: 12,
        span: 7625..7626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 14,
        span: 7625..7628,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 323,
        column: 15,
        span: 7628..7629,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 16,
        span: 7629..7630,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 323,
        column: 17,
        span: 7630..7631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 19,
        span: 7630..7633,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 323,
        column: 20,
        span: 7633..7634,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 21,
        span: 7634..7635,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 323,
        column: 22,
        span: 7635..7636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 24,
        span: 7635..7638,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 323,
        column: 25,
        span: 7638..7639,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 323,
        column: 26,
        span: 7639..7640,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 323,
        column: 27,
        span: 7640..7641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 323,
        column: 40,
        span: 7642..7654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 41,
        span: 7654..7655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 323,
        column: 42,
        span: 7655..7656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 43,
        span: 7656..7657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 323,
        column: 46,
        span: 7658..7660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 47,
        span: 7660..7661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 324,
        column: 2,
        span: 7662..7663,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 324,
        column: 4,
        span: 7664..7665,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 324,
        column: 0,
        span: 7666..7669,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 325,
        column: 4,
        span: 7670..7673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 325,
        column: 6,
        span: 7674..7675,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 8,
        span: 7676..7677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 325,
        column: 10,
        span: 7677..7679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 325,
        column: 11,
        span: 7679..7680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 325,
        column: 15,
        span: 7680..7684,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 325,
        column: 18,
        span: 7685..7687,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 325,
        column: 24,
        span: 7688..7693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 325,
        column: 26,
        span: 7694..7695,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 28,
        span: 7696..7697,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 325,
        column: 30,
        span: 7698..7699,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 325,
        column: 31,
        span: 7699..7700,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 325,
        column: 32,
        span: 7700..7701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 325,
        column: 34,
        span: 7702..7703,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 325,
        column: 35,
        span: 7703..7704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 325,
        column: 36,
        span: 7704..7705,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 325,
        column: 37,
        span: 7705..7706,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 39,
        span: 7707..7708,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 325,
        column: 41,
        span: 7709..7710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 325,
        column: 42,
        span: 7710..7711,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 44,
        span: 7712..7713,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 325,
        column: 46,
        span: 7714..7715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 325,
        column: 47,
        span: 7715..7716,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 325,
        column: 48,
        span: 7716..7717,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 325,
        column: 49,
        span: 7717..7718,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 325,
        column: 50,
        span: 7718..7719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 325,
        column: 52,
        span: 7720..7721,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 54,
        span: 7722..7723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 325,
        column: 56,
        span: 7724..7725,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 325,
        column: 0,
        span: 7726..7729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC",
        ),
        line: 326,
        column: 3,
        span: 7730..7732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 4,
        span: 7732..7733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 5,
        span: 7733..7734,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 327,
        column: 6,
        span: 7735..7740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 327,
        column: 8,
        span: 7741..7742,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 327,
        column: 10,
        span: 7743..7744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 327,
        column: 0,
        span: 7745..7746,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 328,
        column: 6,
        span: 7747..7752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 328,
        column: 8,
        span: 7753..7754,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 328,
        column: 10,
        span: 7755..7756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 328,
        column: 0,
        span: 7756..7758,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 329,
        column: 6,
        span: 7759..7764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 329,
        column: 8,
        span: 7765..7766,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 329,
        column: 11,
        span: 7767..7769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 329,
        column: 13,
        span: 7770..7771,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
        column: 15,
        span: 7772..7773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 329,
        column: 17,
        span: 7774..7775,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 329,
        column: 18,
        span: 7775..7776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 329,
        column: 19,
        span: 7776..7777,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 329,
        column: 20,
        span: 7777..7778,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
        column: 21,
        span: 7778..7779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 329,
        column: 22,
        span: 7779..7780,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 329,
        column: 23,
        span: 7780..7781,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 24,
        span: 7780..7782,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 329,
        column: 25,
        span: 7782..7783,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 329,
        column: 26,
        span: 7783..7784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 329,
        column: 28,
        span: 7785..7786,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
        column: 30,
        span: 7787..7788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 329,
        column: 32,
        span: 7789..7790,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 329,
        column: 34,
        span: 7791..7792,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 36,
        span: 7792..7794,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 329,
        column: 0,
        span: 7795..7798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 330,
        column: 7,
        span: 7799..7805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 8,
        span: 7805..7806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 330,
        column: 9,
        span: 7806..7807,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 330,
        column: 12,
        span: 7808..7810,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 16,
        span: 7810..7814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 17,
        span: 7814..7815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 331,
        column: 2,
        span: 7816..7817,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 331,
        column: 4,
        span: 7818..7819,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 331,
        column: 0,
        span: 7820..7823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC",
        ),
        line: 332,
        column: 3,
        span: 7824..7826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 4,
        span: 7826..7827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 5,
        span: 7827..7828,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 333,
        column: 4,
        span: 7829..7832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 333,
        column: 6,
        span: 7833..7834,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 333,
        column: 8,
        span: 7835..7836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 10,
        span: 7836..7838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
        column: 11,
        span: 7838..7839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 13,
        span: 7839..7841,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 333,
        column: 16,
        span: 7842..7844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 333,
        column: 23,
        span: 7845..7851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 24,
        span: 7851..7852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 333,
        column: 25,
        span: 7852..7853,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 333,
        column: 26,
        span: 7853..7854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 333,
        column: 27,
        span: 7854..7855,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 333,
        column: 28,
        span: 7855..7856,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 333,
        column: 29,
        span: 7856..7857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 30,
        span: 7856..7858,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 333,
        column: 31,
        span: 7858..7859,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 333,
        column: 34,
        span: 7860..7862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 333,
        column: 36,
        span: 7863..7864,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 333,
        column: 38,
        span: 7865..7866,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 41,
        span: 7866..7869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 42,
        span: 7869..7870,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 333,
        column: 43,
        span: 7870..7871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 333,
        column: 45,
        span: 7872..7873,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 333,
        column: 46,
        span: 7873..7874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 333,
        column: 47,
        span: 7874..7875,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 333,
        column: 48,
        span: 7875..7876,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 333,
        column: 50,
        span: 7877..7878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 333,
        column: 56,
        span: 7879..7884,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 333,
        column: 0,
        span: 7885..7888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 334,
        column: 7,
        span: 7889..7895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 8,
        span: 7895..7896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 334,
        column: 12,
        span: 7896..7900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 13,
        span: 7900..7901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 334,
        column: 14,
        span: 7901..7902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
        column: 15,
        span: 7902..7903,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 334,
        column: 18,
        span: 7904..7906,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 334,
        column: 22,
        span: 7907..7910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
        column: 23,
        span: 7910..7911,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 336,
        column: 6,
        span: 7913..7918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 336,
        column: 8,
        span: 7919..7920,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 336,
        column: 10,
        span: 7921..7922,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 336,
        column: 12,
        span: 7923..7924,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 336,
        column: 13,
        span: 7924..7925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 337,
        column: 2,
        span: 7926..7927,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 337,
        column: 3,
        span: 7927..7928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 337,
        column: 4,
        span: 7928..7929,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 337,
        column: 5,
        span: 7929..7930,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 337,
        column: 7,
        span: 7931..7932,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 337,
        column: 9,
        span: 7933..7934,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 337,
        column: 10,
        span: 7934..7935,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 338,
        column: 4,
        span: 7936..7939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 338,
        column: 6,
        span: 7940..7941,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 338,
        column: 7,
        span: 7941..7942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
        column: 8,
        span: 7941..7943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
        column: 9,
        span: 7943..7944,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
        column: 11,
        span: 7943..7946,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 338,
        column: 14,
        span: 7947..7949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 338,
        column: 16,
        span: 7950..7951,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 338,
        column: 17,
        span: 7951..7952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 338,
        column: 18,
        span: 7952..7953,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 338,
        column: 19,
        span: 7953..7954,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 338,
        column: 20,
        span: 7954..7955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 338,
        column: 21,
        span: 7955..7956,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 338,
        column: 22,
        span: 7956..7957,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 338,
        column: 24,
        span: 7958..7959,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 338,
        column: 26,
        span: 7960..7961,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 338,
        column: 27,
        span: 7961..7962,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 338,
        column: 28,
        span: 7962..7963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 338,
        column: 30,
        span: 7964..7965,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 338,
        column: 31,
        span: 7965..7966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 338,
        column: 32,
        span: 7966..7967,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 338,
        column: 33,
        span: 7967..7968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 338,
        column: 34,
        span: 7968..7969,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 338,
        column: 35,
        span: 7969..7970,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 338,
        column: 36,
        span: 7970..7971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 338,
        column: 37,
        span: 7971..7972,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 338,
        column: 38,
        span: 7972..7973,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 338,
        column: 39,
        span: 7973..7974,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 338,
        column: 41,
        span: 7975..7976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 338,
        column: 54,
        span: 7977..7989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 55,
        span: 7989..7990,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 338,
        column: 56,
        span: 7990..7991,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 338,
        column: 57,
        span: 7991..7992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
        column: 58,
        span: 7992..7993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 338,
        column: 61,
        span: 7994..7996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 62,
        span: 7996..7997,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 338,
        column: 0,
        span: 7998..8001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 339,
        column: 2,
        span: 8002..8003,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 339,
        column: 4,
        span: 8004..8005,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 339,
        column: 0,
        span: 8006..8009,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 340,
        column: 6,
        span: 8010..8015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 340,
        column: 8,
        span: 8016..8017,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 340,
        column: 10,
        span: 8018..8019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
        column: 0,
        span: 8019..8021,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 341,
        column: 4,
        span: 8022..8025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 341,
        column: 6,
        span: 8026..8027,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 341,
        column: 8,
        span: 8028..8029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 10,
        span: 8029..8031,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 11,
        span: 8031..8032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 14,
        span: 8031..8035,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 341,
        column: 0,
        span: 8036..8038,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 342,
        column: 8,
        span: 8041..8046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 342,
        column: 10,
        span: 8047..8048,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 342,
        column: 12,
        span: 8049..8050,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 342,
        column: 14,
        span: 8051..8052,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 342,
        column: 15,
        span: 8052..8053,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 342,
        column: 16,
        span: 8053..8054,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 342,
        column: 22,
        span: 8055..8060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nk",
        ),
        line: 342,
        column: 25,
        span: 8061..8063,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 342,
        column: 27,
        span: 8064..8065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 342,
        column: 29,
        span: 8066..8067,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 342,
        column: 30,
        span: 8067..8068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 32,
        span: 8067..8070,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 342,
        column: 34,
        span: 8071..8072,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 0,
        span: 8072..8074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 343,
        column: 4,
        span: 8077..8078,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 343,
        column: 5,
        span: 8078..8079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 343,
        column: 6,
        span: 8079..8080,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 343,
        column: 7,
        span: 8080..8081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 343,
        column: 8,
        span: 8081..8082,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 343,
        column: 9,
        span: 8082..8083,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 343,
        column: 10,
        span: 8083..8084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nk",
        ),
        line: 343,
        column: 12,
        span: 8084..8086,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 343,
        column: 13,
        span: 8086..8087,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 343,
        column: 14,
        span: 8087..8088,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 343,
        column: 15,
        span: 8088..8089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 343,
        column: 16,
        span: 8089..8090,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 343,
        column: 17,
        span: 8090..8091,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 19,
        span: 8092..8093,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 343,
        column: 21,
        span: 8094..8095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 343,
        column: 22,
        span: 8095..8096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
        column: 23,
        span: 8096..8097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 343,
        column: 25,
        span: 8098..8099,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 27,
        span: 8100..8101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 343,
        column: 29,
        span: 8102..8103,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 343,
        column: 30,
        span: 8103..8104,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 343,
        column: 31,
        span: 8104..8105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 343,
        column: 33,
        span: 8106..8107,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 35,
        span: 8108..8109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 343,
        column: 37,
        span: 8110..8111,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 343,
        column: 38,
        span: 8111..8112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 343,
        column: 40,
        span: 8113..8114,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 42,
        span: 8115..8116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nk",
        ),
        line: 343,
        column: 0,
        span: 8117..8119,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 344,
        column: 0,
        span: 8120..8123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC",
        ),
        line: 345,
        column: 3,
        span: 8124..8126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 4,
        span: 8126..8127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 5,
        span: 8127..8128,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 346,
        column: 6,
        span: 8129..8134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 346,
        column: 8,
        span: 8135..8136,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 346,
        column: 10,
        span: 8137..8138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 346,
        column: 0,
        span: 8139..8140,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 347,
        column: 6,
        span: 8141..8146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 347,
        column: 8,
        span: 8147..8148,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 347,
        column: 10,
        span: 8149..8150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 0,
        span: 8150..8152,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 348,
        column: 6,
        span: 8153..8158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 348,
        column: 8,
        span: 8159..8160,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 348,
        column: 11,
        span: 8161..8163,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 348,
        column: 17,
        span: 8164..8169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 348,
        column: 19,
        span: 8170..8171,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 348,
        column: 21,
        span: 8172..8173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 348,
        column: 23,
        span: 8174..8175,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 348,
        column: 24,
        span: 8175..8176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 348,
        column: 25,
        span: 8176..8177,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 348,
        column: 26,
        span: 8177..8178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 348,
        column: 27,
        span: 8178..8179,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 348,
        column: 28,
        span: 8179..8180,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 348,
        column: 29,
        span: 8180..8181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 348,
        column: 30,
        span: 8181..8182,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 348,
        column: 31,
        span: 8182..8183,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 348,
        column: 32,
        span: 8183..8184,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 348,
        column: 33,
        span: 8184..8185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 348,
        column: 34,
        span: 8185..8186,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 348,
        column: 35,
        span: 8186..8187,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 348,
        column: 36,
        span: 8187..8188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 348,
        column: 38,
        span: 8189..8190,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 348,
        column: 40,
        span: 8191..8192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 348,
        column: 42,
        span: 8193..8194,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 348,
        column: 43,
        span: 8194..8195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 44,
        span: 8194..8196,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 348,
        column: 45,
        span: 8196..8197,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 348,
        column: 46,
        span: 8197..8198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 348,
        column: 48,
        span: 8199..8200,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 348,
        column: 50,
        span: 8201..8202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 348,
        column: 52,
        span: 8203..8204,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 348,
        column: 53,
        span: 8204..8205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 348,
        column: 54,
        span: 8205..8206,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 348,
        column: 55,
        span: 8206..8207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 348,
        column: 57,
        span: 8208..8209,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 348,
        column: 59,
        span: 8210..8211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 348,
        column: 61,
        span: 8212..8213,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 348,
        column: 63,
        span: 8214..8215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 65,
        span: 8215..8217,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 348,
        column: 0,
        span: 8218..8221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 349,
        column: 7,
        span: 8222..8228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 8,
        span: 8228..8229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 349,
        column: 9,
        span: 8229..8230,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 349,
        column: 12,
        span: 8231..8233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 349,
        column: 16,
        span: 8233..8237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 17,
        span: 8237..8238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 350,
        column: 2,
        span: 8239..8240,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 350,
        column: 4,
        span: 8241..8242,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 350,
        column: 0,
        span: 8243..8246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC",
        ),
        line: 351,
        column: 3,
        span: 8247..8249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 4,
        span: 8249..8250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 5,
        span: 8250..8251,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 356,
        column: 3,
        span: 8308..8310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 356,
        column: 5,
        span: 8311..8312,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 356,
        column: 0,
        span: 8313..8317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 357,
        column: 17,
        span: 8320..8334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 18,
        span: 8334..8335,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 357,
        column: 24,
        span: 8335..8341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 25,
        span: 8341..8342,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 358,
        column: 8,
        span: 8366..8371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 358,
        column: 10,
        span: 8372..8373,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
        column: 12,
        span: 8374..8375,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 358,
        column: 14,
        span: 8376..8377,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 358,
        column: 15,
        span: 8377..8378,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 359,
        column: 8,
        span: 8381..8386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 359,
        column: 10,
        span: 8387..8388,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 359,
        column: 12,
        span: 8389..8390,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 359,
        column: 14,
        span: 8391..8392,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 359,
        column: 15,
        span: 8392..8393,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 359,
        column: 16,
        span: 8393..8394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 359,
        column: 29,
        span: 8395..8407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 30,
        span: 8407..8408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 359,
        column: 31,
        span: 8408..8409,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 32,
        span: 8409..8410,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 359,
        column: 34,
        span: 8411..8412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 359,
        column: 40,
        span: 8412..8418,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 359,
        column: 42,
        span: 8419..8420,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 359,
        column: 46,
        span: 8421..8424,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 359,
        column: 47,
        span: 8424..8425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 48,
        span: 8425..8426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 360,
        column: 15,
        span: 8429..8441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 16,
        span: 8441..8442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 360,
        column: 17,
        span: 8442..8443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 18,
        span: 8443..8444,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 360,
        column: 20,
        span: 8445..8446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 360,
        column: 24,
        span: 8446..8450,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
        column: 26,
        span: 8451..8452,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 360,
        column: 35,
        span: 8453..8461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 37,
        span: 8462..8463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 360,
        column: 38,
        span: 8463..8464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 39,
        span: 8464..8465,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 361,
        column: 10,
        span: 8470..8475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 361,
        column: 12,
        span: 8476..8477,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 361,
        column: 14,
        span: 8478..8479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 361,
        column: 16,
        span: 8480..8481,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 361,
        column: 17,
        span: 8481..8482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 361,
        column: 18,
        span: 8482..8483,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 361,
        column: 19,
        span: 8483..8484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 362,
        column: 6,
        span: 8489..8490,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 362,
        column: 7,
        span: 8490..8491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 362,
        column: 8,
        span: 8491..8492,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 362,
        column: 9,
        span: 8492..8493,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
        column: 11,
        span: 8494..8495,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 362,
        column: 0,
        span: 8496..8500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 363,
        column: 11,
        span: 8505..8511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 12,
        span: 8511..8512,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 363,
        column: 15,
        span: 8512..8515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 363,
        column: 17,
        span: 8516..8517,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 363,
        column: 18,
        span: 8517..8518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 363,
        column: 19,
        span: 8518..8519,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 363,
        column: 21,
        span: 8520..8521,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 23,
        span: 8521..8523,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 363,
        column: 24,
        span: 8523..8524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 25,
        span: 8524..8525,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 364,
        column: 7,
        span: 8567..8569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 364,
        column: 9,
        span: 8570..8571,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 364,
        column: 12,
        span: 8572..8574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 14,
        span: 8574..8576,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 364,
        column: 19,
        span: 8577..8581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 364,
        column: 25,
        span: 8582..8587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 26,
        span: 8587..8588,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@expected@\"",
        ),
        line: 364,
        column: 38,
        span: 8588..8600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 39,
        span: 8600..8601,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 364,
        column: 43,
        span: 8602..8605,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 365,
        column: 6,
        span: 8629..8632,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 365,
        column: 7,
        span: 8632..8633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 8,
        span: 8633..8634,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 367,
        column: 6,
        span: 8638..8641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 367,
        column: 8,
        span: 8642..8643,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
        column: 10,
        span: 8644..8645,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 12,
        span: 8645..8647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
        column: 13,
        span: 8647..8648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 16,
        span: 8648..8651,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 367,
        column: 0,
        span: 8652..8654,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 368,
        column: 10,
        span: 8659..8664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 368,
        column: 12,
        span: 8665..8666,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 14,
        span: 8667..8668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 368,
        column: 27,
        span: 8669..8681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 28,
        span: 8681..8682,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 368,
        column: 29,
        span: 8682..8683,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 368,
        column: 30,
        span: 8683..8684,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 31,
        span: 8684..8685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 368,
        column: 44,
        span: 8686..8698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 45,
        span: 8698..8699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 368,
        column: 46,
        span: 8699..8700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 47,
        span: 8700..8701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 48,
        span: 8701..8702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 369,
        column: 6,
        span: 8707..8708,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 369,
        column: 7,
        span: 8708..8709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 369,
        column: 8,
        span: 8709..8710,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 369,
        column: 9,
        span: 8710..8711,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 369,
        column: 11,
        span: 8712..8713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 369,
        column: 0,
        span: 8714..8715,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 370,
        column: 0,
        span: 8718..8721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 372,
        column: 7,
        span: 8725..8729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 8,
        span: 8729..8730,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@on\"",
        ),
        line: 372,
        column: 13,
        span: 8730..8735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 14,
        span: 8735..8736,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 372,
        column: 15,
        span: 8736..8737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 372,
        column: 20,
        span: 8738..8742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 21,
        span: 8742..8743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@store\"",
        ),
        line: 372,
        column: 29,
        span: 8743..8751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 30,
        span: 8751..8752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 373,
        column: 17,
        span: 8755..8769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 18,
        span: 8769..8770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 19,
        span: 8770..8771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 374,
        column: 9,
        span: 8774..8780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 10,
        span: 8780..8781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 374,
        column: 16,
        span: 8781..8787,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 374,
        column: 17,
        span: 8787..8788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 374,
        column: 21,
        span: 8788..8792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 22,
        span: 8792..8793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 374,
        column: 27,
        span: 8793..8798,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 374,
        column: 28,
        span: 8798..8799,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error in __gc\"",
        ),
        line: 374,
        column: 44,
        span: 8800..8815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 45,
        span: 8815..8816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 46,
        span: 8816..8817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 375,
        column: 9,
        span: 8820..8826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 10,
        span: 8826..8827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 375,
        column: 16,
        span: 8827..8833,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 375,
        column: 17,
        span: 8833..8834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 375,
        column: 22,
        span: 8834..8839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 23,
        span: 8839..8840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 375,
        column: 28,
        span: 8840..8845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
        column: 29,
        span: 8845..8846,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@(.-)@\"",
        ),
        line: 375,
        column: 38,
        span: 8847..8855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 39,
        span: 8855..8856,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 375,
        column: 42,
        span: 8857..8859,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"expected\"",
        ),
        line: 375,
        column: 53,
        span: 8860..8870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 54,
        span: 8870..8871,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 375,
        column: 55,
        span: 8871..8872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 375,
        column: 61,
        span: 8873..8878,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 375,
        column: 63,
        span: 8879..8880,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 375,
        column: 0,
        span: 8881..8886,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 376,
        column: 6,
        span: 8889..8892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 376,
        column: 8,
        span: 8893..8894,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
        column: 10,
        span: 8895..8896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 12,
        span: 8896..8898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 13,
        span: 8898..8899,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 16,
        span: 8899..8902,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 376,
        column: 19,
        span: 8903..8905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 376,
        column: 26,
        span: 8906..8912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 27,
        span: 8912..8913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 376,
        column: 28,
        span: 8913..8914,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 376,
        column: 29,
        span: 8914..8915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 376,
        column: 30,
        span: 8915..8916,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 376,
        column: 31,
        span: 8916..8917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 32,
        span: 8917..8918,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 376,
        column: 0,
        span: 8919..8922,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 378,
        column: 6,
        span: 8926..8929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 378,
        column: 8,
        span: 8930..8931,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 10,
        span: 8932..8933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 12,
        span: 8933..8935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 13,
        span: 8935..8936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 15,
        span: 8936..8938,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 378,
        column: 0,
        span: 8939..8941,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 379,
        column: 10,
        span: 8946..8951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 379,
        column: 12,
        span: 8952..8953,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 379,
        column: 14,
        span: 8954..8955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 379,
        column: 27,
        span: 8956..8968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 28,
        span: 8968..8969,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 379,
        column: 29,
        span: 8969..8970,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 379,
        column: 30,
        span: 8970..8971,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 31,
        span: 8971..8972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 379,
        column: 44,
        span: 8973..8985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 45,
        span: 8985..8986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 379,
        column: 46,
        span: 8986..8987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 47,
        span: 8987..8988,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 48,
        span: 8988..8989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 380,
        column: 6,
        span: 8994..8995,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 380,
        column: 7,
        span: 8995..8996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 380,
        column: 8,
        span: 8996..8997,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 380,
        column: 9,
        span: 8997..8998,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 11,
        span: 8999..9000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 380,
        column: 0,
        span: 9001..9002,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 381,
        column: 0,
        span: 9005..9008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 383,
        column: 17,
        span: 9012..9026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 18,
        span: 9026..9027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 19,
        span: 9027..9028,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 384,
        column: 6,
        span: 9031..9034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 384,
        column: 8,
        span: 9035..9036,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 10,
        span: 9037..9038,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 384,
        column: 12,
        span: 9038..9040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 13,
        span: 9040..9041,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 384,
        column: 16,
        span: 9041..9044,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 384,
        column: 19,
        span: 9045..9047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 384,
        column: 26,
        span: 9048..9054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 27,
        span: 9054..9055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 384,
        column: 28,
        span: 9055..9056,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 384,
        column: 29,
        span: 9056..9057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 384,
        column: 30,
        span: 9057..9058,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 384,
        column: 31,
        span: 9058..9059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 32,
        span: 9059..9060,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 384,
        column: 0,
        span: 9061..9064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 386,
        column: 15,
        span: 9068..9080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 16,
        span: 9080..9081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 386,
        column: 17,
        span: 9081..9082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 18,
        span: 9082..9083,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 386,
        column: 19,
        span: 9083..9084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 386,
        column: 23,
        span: 9084..9088,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 386,
        column: 25,
        span: 9089..9090,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 386,
        column: 0,
        span: 9091..9094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 387,
        column: 7,
        span: 9097..9101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 8,
        span: 9101..9102,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@normal\"",
        ),
        line: 387,
        column: 17,
        span: 9102..9111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 18,
        span: 9111..9112,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 389,
        column: 0,
        span: 9114..9117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 390,
        column: 6,
        span: 9118..9123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 390,
        column: 10,
        span: 9124..9127,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 394,
        column: 3,
        span: 9150..9152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 394,
        column: 5,
        span: 9153..9154,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 394,
        column: 7,
        span: 9154..9156,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 394,
        column: 10,
        span: 9156..9159,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 394,
        column: 0,
        span: 9160..9164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 4,
        span: 9167..9168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 395,
        column: 11,
        span: 9168..9175,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 395,
        column: 14,
        span: 9176..9178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 395,
        column: 20,
        span: 9179..9184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 21,
        span: 9184..9185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 22,
        span: 9185..9186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping userdata GC tests <<<\\n'",
        ),
        line: 395,
        column: 81,
        span: 9186..9245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 82,
        span: 9245..9246,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 397,
        column: 0,
        span: 9248..9252,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 399,
        column: 8,
        span: 9256..9261,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 399,
        column: 17,
        span: 9262..9270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        line: 399,
        column: 26,
        span: 9271..9279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 27,
        span: 9279..9280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 399,
        column: 28,
        span: 9280..9281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 29,
        span: 9281..9282,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 400,
        column: 11,
        span: 9287..9293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 400,
        column: 17,
        span: 9294..9299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 400,
        column: 18,
        span: 9299..9300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 400,
        column: 30,
        span: 9300..9312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 31,
        span: 9312..9313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 400,
        column: 32,
        span: 9313..9314,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 400,
        column: 33,
        span: 9314..9315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 400,
        column: 44,
        span: 9315..9326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 45,
        span: 9326..9327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
        column: 46,
        span: 9326..9328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 47,
        span: 9328..9329,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 400,
        column: 48,
        span: 9329..9330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 400,
        column: 54,
        span: 9331..9336,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 400,
        column: 55,
        span: 9336..9337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 400,
        column: 67,
        span: 9337..9349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 68,
        span: 9349..9350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 400,
        column: 69,
        span: 9350..9351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 70,
        span: 9351..9352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 71,
        span: 9352..9353,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 401,
        column: 0,
        span: 9356..9359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 403,
        column: 17,
        span: 9363..9377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 18,
        span: 9377..9378,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 403,
        column: 24,
        span: 9378..9384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 25,
        span: 9384..9385,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 404,
        column: 8,
        span: 9409..9414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 404,
        column: 10,
        span: 9415..9416,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 404,
        column: 12,
        span: 9417..9418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        line: 404,
        column: 21,
        span: 9419..9427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
        column: 22,
        span: 9427..9428,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 404,
        column: 25,
        span: 9428..9431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
        column: 26,
        span: 9431..9432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 405,
        column: 8,
        span: 9435..9440,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 405,
        column: 9,
        span: 9440..9441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 405,
        column: 21,
        span: 9441..9453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 22,
        span: 9453..9454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 405,
        column: 23,
        span: 9454..9455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 405,
        column: 24,
        span: 9455..9456,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 405,
        column: 26,
        span: 9457..9458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 405,
        column: 30,
        span: 9458..9462,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 405,
        column: 32,
        span: 9463..9464,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 405,
        column: 37,
        span: 9465..9469,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 405,
        column: 38,
        span: 9469..9470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 39,
        span: 9470..9471,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 406,
        column: 8,
        span: 9474..9479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 406,
        column: 10,
        span: 9480..9481,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
        column: 12,
        span: 9482..9483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
        column: 0,
        span: 9483..9485,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 407,
        column: 8,
        span: 9488..9493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 407,
        column: 10,
        span: 9494..9495,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
        column: 12,
        span: 9496..9497,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 407,
        column: 14,
        span: 9498..9499,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 407,
        column: 15,
        span: 9499..9500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 407,
        column: 16,
        span: 9500..9501,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 407,
        column: 17,
        span: 9501..9502,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
        column: 19,
        span: 9503..9504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 21,
        span: 9504..9506,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 407,
        column: 22,
        span: 9506..9507,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 407,
        column: 23,
        span: 9507..9508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 407,
        column: 36,
        span: 9509..9521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 37,
        span: 9521..9522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 407,
        column: 38,
        span: 9522..9523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 407,
        column: 39,
        span: 9523..9524,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 407,
        column: 41,
        span: 9525..9526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 407,
        column: 47,
        span: 9526..9532,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
        column: 49,
        span: 9533..9534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'vk'",
        ),
        line: 407,
        column: 54,
        span: 9535..9539,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 407,
        column: 55,
        span: 9539..9540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 56,
        span: 9540..9541,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 408,
        column: 6,
        span: 9544..9547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 408,
        column: 8,
        span: 9548..9549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 408,
        column: 9,
        span: 9549..9550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 10,
        span: 9549..9551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 11,
        span: 9551..9552,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 13,
        span: 9551..9554,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 408,
        column: 16,
        span: 9555..9557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 408,
        column: 18,
        span: 9558..9559,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 408,
        column: 19,
        span: 9559..9560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        line: 408,
        column: 27,
        span: 9560..9568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 28,
        span: 9568..9569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 408,
        column: 29,
        span: 9569..9570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 30,
        span: 9570..9571,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 408,
        column: 31,
        span: 9571..9572,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 408,
        column: 33,
        span: 9573..9574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 408,
        column: 35,
        span: 9575..9576,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 408,
        column: 0,
        span: 9577..9580,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 409,
        column: 6,
        span: 9583..9586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 409,
        column: 8,
        span: 9587..9588,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 409,
        column: 11,
        span: 9589..9591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 409,
        column: 17,
        span: 9592..9597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 18,
        span: 9597..9598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 409,
        column: 19,
        span: 9598..9599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 20,
        span: 9599..9600,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 409,
        column: 23,
        span: 9601..9603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 409,
        column: 30,
        span: 9604..9610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 31,
        span: 9610..9611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 409,
        column: 43,
        span: 9611..9623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 44,
        span: 9623..9624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 409,
        column: 45,
        span: 9624..9625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 46,
        span: 9625..9626,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 409,
        column: 49,
        span: 9627..9629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 409,
        column: 62,
        span: 9630..9642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 63,
        span: 9642..9643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 409,
        column: 64,
        span: 9643..9644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 65,
        span: 9644..9645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 66,
        span: 9645..9646,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 409,
        column: 0,
        span: 9647..9650,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 410,
        column: 8,
        span: 9653..9658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 410,
        column: 11,
        span: 9659..9661,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 410,
        column: 13,
        span: 9662..9663,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 410,
        column: 15,
        span: 9664..9665,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 410,
        column: 16,
        span: 9665..9666,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 410,
        column: 17,
        span: 9666..9667,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 410,
        column: 21,
        span: 9668..9671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 410,
        column: 23,
        span: 9672..9673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 410,
        column: 24,
        span: 9673..9674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 410,
        column: 25,
        span: 9674..9675,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 410,
        column: 28,
        span: 9676..9678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 410,
        column: 34,
        span: 9679..9684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 35,
        span: 9684..9685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 410,
        column: 36,
        span: 9685..9686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 37,
        span: 9686..9687,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 410,
        column: 40,
        span: 9688..9690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 410,
        column: 43,
        span: 9691..9693,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 410,
        column: 44,
        span: 9693..9694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 410,
        column: 45,
        span: 9694..9695,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 410,
        column: 46,
        span: 9695..9696,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 410,
        column: 48,
        span: 9697..9698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 410,
        column: 50,
        span: 9699..9700,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 410,
        column: 0,
        span: 9701..9704,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 411,
        column: 6,
        span: 9707..9710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 411,
        column: 8,
        span: 9711..9712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 9,
        span: 9712..9713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 411,
        column: 10,
        span: 9713..9714,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 411,
        column: 13,
        span: 9715..9717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 411,
        column: 19,
        span: 9718..9723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 20,
        span: 9723..9724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 411,
        column: 22,
        span: 9724..9726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 23,
        span: 9726..9727,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 411,
        column: 26,
        span: 9728..9730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 411,
        column: 28,
        span: 9731..9732,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 411,
        column: 29,
        span: 9732..9733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 411,
        column: 30,
        span: 9733..9734,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 411,
        column: 31,
        span: 9734..9735,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 411,
        column: 33,
        span: 9736..9737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 411,
        column: 35,
        span: 9738..9739,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 411,
        column: 0,
        span: 9740..9743,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 412,
        column: 6,
        span: 9746..9749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 412,
        column: 8,
        span: 9750..9751,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 412,
        column: 10,
        span: 9752..9753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 11,
        span: 9752..9754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 12,
        span: 9754..9755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 14,
        span: 9754..9757,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 412,
        column: 17,
        span: 9758..9760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
        column: 24,
        span: 9761..9767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 25,
        span: 9767..9768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 412,
        column: 26,
        span: 9768..9769,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 412,
        column: 27,
        span: 9769..9770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 412,
        column: 28,
        span: 9770..9771,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 412,
        column: 29,
        span: 9771..9772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 30,
        span: 9772..9773,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 412,
        column: 0,
        span: 9774..9777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 413,
        column: 15,
        span: 9780..9792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 16,
        span: 9792..9793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 413,
        column: 17,
        span: 9793..9794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 18,
        span: 9794..9795,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 413,
        column: 19,
        span: 9795..9796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 413,
        column: 20,
        span: 9796..9797,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 413,
        column: 22,
        span: 9798..9799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 413,
        column: 0,
        span: 9800..9802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 414,
        column: 15,
        span: 9805..9817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 16,
        span: 9817..9818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 414,
        column: 17,
        span: 9818..9819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 18,
        span: 9819..9820,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 414,
        column: 19,
        span: 9820..9821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 414,
        column: 20,
        span: 9821..9822,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
        column: 22,
        span: 9823..9824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 414,
        column: 0,
        span: 9825..9826,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 415,
        column: 0,
        span: 9829..9831,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 416,
        column: 10,
        span: 9836..9841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 416,
        column: 12,
        span: 9842..9843,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 416,
        column: 14,
        span: 9844..9845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 416,
        column: 0,
        span: 9846..9847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 417,
        column: 17,
        span: 9852..9864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 18,
        span: 9864..9865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 417,
        column: 19,
        span: 9865..9866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 20,
        span: 9866..9867,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 417,
        column: 21,
        span: 9867..9868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 417,
        column: 25,
        span: 9868..9872,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 417,
        column: 27,
        span: 9873..9874,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 417,
        column: 36,
        span: 9875..9883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 38,
        span: 9884..9885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 417,
        column: 39,
        span: 9885..9886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 40,
        span: 9886..9887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 13,
        span: 9894..9900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 14,
        span: 9900..9901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 418,
        column: 15,
        span: 9901..9902,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 418,
        column: 16,
        span: 9902..9903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 418,
        column: 17,
        span: 9903..9904,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 418,
        column: 18,
        span: 9904..9905,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
        column: 21,
        span: 9906..9908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 24,
        span: 9908..9911,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 418,
        column: 25,
        span: 9911..9912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 418,
        column: 26,
        span: 9912..9913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 27,
        span: 9913..9914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 419,
        column: 13,
        span: 9921..9927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 14,
        span: 9927..9928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 419,
        column: 15,
        span: 9928..9929,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 419,
        column: 16,
        span: 9929..9930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 419,
        column: 18,
        span: 9929..9932,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 419,
        column: 19,
        span: 9932..9933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 419,
        column: 20,
        span: 9933..9934,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 419,
        column: 21,
        span: 9934..9935,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
        column: 24,
        span: 9936..9938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 419,
        column: 30,
        span: 9939..9944,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 31,
        span: 9944..9945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 420,
        column: 13,
        span: 9993..9999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 14,
        span: 9999..10000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 420,
        column: 26,
        span: 10000..10012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 27,
        span: 10012..10013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 420,
        column: 28,
        span: 10013..10014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 29,
        span: 10014..10015,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 420,
        column: 32,
        span: 10016..10018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 420,
        column: 45,
        span: 10019..10031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 46,
        span: 10031..10032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 420,
        column: 47,
        span: 10032..10033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 48,
        span: 10033..10034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 49,
        span: 10034..10035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 421,
        column: 11,
        span: 10040..10046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 12,
        span: 10046..10047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 421,
        column: 24,
        span: 10047..10059,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 25,
        span: 10059..10060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 421,
        column: 26,
        span: 10060..10061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 27,
        span: 10061..10062,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 421,
        column: 28,
        span: 10062..10063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 421,
        column: 29,
        span: 10063..10064,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 421,
        column: 30,
        span: 10064..10065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 421,
        column: 31,
        span: 10065..10066,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 421,
        column: 32,
        span: 10066..10067,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 421,
        column: 35,
        span: 10068..10070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 421,
        column: 38,
        span: 10070..10073,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 421,
        column: 39,
        span: 10073..10074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 421,
        column: 40,
        span: 10074..10075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 41,
        span: 10075..10076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 422,
        column: 8,
        span: 10083..10084,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
        column: 9,
        span: 10084..10085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 422,
        column: 10,
        span: 10085..10086,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 422,
        column: 11,
        span: 10086..10087,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 0,
        span: 10086..10088,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 423,
        column: 0,
        span: 10093..10096,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 424,
        column: 0,
        span: 10099..10102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 425,
        column: 5,
        span: 10105..10107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 6,
        span: 10107..10108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 425,
        column: 8,
        span: 10109..10110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 425,
        column: 10,
        span: 10111..10112,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 425,
        column: 0,
        span: 10113..10116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 426,
        column: 9,
        span: 10119..10125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 10,
        span: 10125..10126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 426,
        column: 14,
        span: 10126..10130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 15,
        span: 10130..10131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 426,
        column: 16,
        span: 10131..10132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 17,
        span: 10132..10133,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 426,
        column: 20,
        span: 10134..10136,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 426,
        column: 24,
        span: 10137..10140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 25,
        span: 10140..10141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 427,
        column: 17,
        span: 10144..10158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 18,
        span: 10158..10159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 19,
        span: 10159..10160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 428,
        column: 9,
        span: 10163..10169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 10,
        span: 10169..10170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 428,
        column: 11,
        span: 10170..10171,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
        column: 13,
        span: 10171..10173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
        column: 15,
        span: 10172..10175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 16,
        span: 10175..10176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 429,
        column: 17,
        span: 10179..10193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 18,
        span: 10193..10194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 19,
        span: 10194..10195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 430,
        column: 9,
        span: 10198..10204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 10,
        span: 10204..10205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 430,
        column: 14,
        span: 10205..10209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 15,
        span: 10209..10210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 430,
        column: 16,
        span: 10210..10211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 17,
        span: 10211..10212,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 430,
        column: 20,
        span: 10213..10215,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 430,
        column: 24,
        span: 10216..10219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 25,
        span: 10219..10220,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 431,
        column: 0,
        span: 10266..10269,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 435,
        column: 6,
        span: 10294..10299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 435,
        column: 8,
        span: 10300..10301,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 435,
        column: 10,
        span: 10302..10303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 435,
        column: 23,
        span: 10304..10316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 24,
        span: 10316..10317,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 435,
        column: 25,
        span: 10317..10318,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 435,
        column: 26,
        span: 10318..10319,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 435,
        column: 27,
        span: 10319..10320,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 435,
        column: 29,
        span: 10321..10322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 435,
        column: 33,
        span: 10322..10326,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 435,
        column: 35,
        span: 10327..10328,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 435,
        column: 40,
        span: 10329..10333,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 435,
        column: 41,
        span: 10333..10334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 42,
        span: 10334..10335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 437,
        column: 13,
        span: 10390..10402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
        column: 14,
        span: 10402..10403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 437,
        column: 26,
        span: 10403..10415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
        column: 27,
        span: 10415..10416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 437,
        column: 28,
        span: 10416..10417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
        column: 29,
        span: 10417..10418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 437,
        column: 30,
        span: 10418..10419,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 437,
        column: 32,
        span: 10420..10421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 437,
        column: 38,
        span: 10421..10427,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 437,
        column: 40,
        span: 10428..10429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"v\"",
        ),
        line: 437,
        column: 44,
        span: 10430..10433,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 437,
        column: 45,
        span: 10433..10434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
        column: 46,
        span: 10434..10435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 438,
        column: 13,
        span: 10436..10448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 14,
        span: 10448..10449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 438,
        column: 15,
        span: 10449..10450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 16,
        span: 10450..10451,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 438,
        column: 17,
        span: 10451..10452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 438,
        column: 21,
        span: 10452..10456,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 438,
        column: 23,
        span: 10457..10458,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 438,
        column: 32,
        span: 10459..10467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 34,
        span: 10468..10469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 438,
        column: 35,
        span: 10469..10470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 36,
        span: 10470..10471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 438,
        column: 39,
        span: 10472..10474,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 438,
        column: 40,
        span: 10474..10475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        line: 438,
        column: 44,
        span: 10475..10479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 45,
        span: 10479..10480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 438,
        column: 46,
        span: 10479..10481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 47,
        span: 10481..10482,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 438,
        column: 51,
        span: 10483..10486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 439,
        column: 2,
        span: 10505..10506,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 439,
        column: 4,
        span: 10507..10508,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 439,
        column: 0,
        span: 10509..10512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 440,
        column: 15,
        span: 10513..10527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 16,
        span: 10527..10528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 17,
        span: 10528..10529,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 442,
        column: 6,
        span: 10531..10536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 442,
        column: 8,
        span: 10537..10538,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 10,
        span: 10539..10540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 442,
        column: 23,
        span: 10541..10553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 24,
        span: 10553..10554,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 442,
        column: 25,
        span: 10554..10555,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 442,
        column: 26,
        span: 10555..10556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 442,
        column: 27,
        span: 10556..10557,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 442,
        column: 29,
        span: 10558..10559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 442,
        column: 33,
        span: 10559..10563,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 35,
        span: 10564..10565,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 442,
        column: 40,
        span: 10566..10570,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 442,
        column: 41,
        span: 10570..10571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 42,
        span: 10571..10572,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 443,
        column: 6,
        span: 10573..10578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 443,
        column: 8,
        span: 10579..10580,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 443,
        column: 10,
        span: 10581..10582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 443,
        column: 23,
        span: 10583..10595,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 24,
        span: 10595..10596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 443,
        column: 25,
        span: 10596..10597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 26,
        span: 10597..10598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 444,
        column: 2,
        span: 10599..10600,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 444,
        column: 3,
        span: 10600..10601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 444,
        column: 4,
        span: 10601..10602,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 444,
        column: 6,
        span: 10603..10604,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 444,
        column: 8,
        span: 10605..10606,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 444,
        column: 9,
        span: 10606..10607,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 444,
        column: 10,
        span: 10607..10608,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
        column: 11,
        span: 10607..10609,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 444,
        column: 12,
        span: 10609..10610,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 444,
        column: 13,
        span: 10610..10611,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 444,
        column: 15,
        span: 10612..10613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
        column: 17,
        span: 10613..10615,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 444,
        column: 18,
        span: 10615..10616,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 444,
        column: 20,
        span: 10617..10618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
        column: 21,
        span: 10617..10619,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 444,
        column: 22,
        span: 10619..10620,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 444,
        column: 24,
        span: 10621..10622,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 444,
        column: 26,
        span: 10623..10624,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
        column: 27,
        span: 10623..10625,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 444,
        column: 28,
        span: 10625..10626,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 444,
        column: 29,
        span: 10626..10627,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 444,
        column: 30,
        span: 10627..10628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 444,
        column: 43,
        span: 10629..10641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
        column: 44,
        span: 10641..10642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 444,
        column: 45,
        span: 10642..10643,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 444,
        column: 46,
        span: 10643..10644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 444,
        column: 47,
        span: 10644..10645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 48,
        span: 10645..10646,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 444,
        column: 50,
        span: 10647..10648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 444,
        column: 56,
        span: 10648..10654,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 444,
        column: 58,
        span: 10655..10656,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kv\"",
        ),
        line: 444,
        column: 63,
        span: 10657..10661,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 444,
        column: 64,
        span: 10661..10662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
        column: 65,
        span: 10662..10663,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 444,
        column: 66,
        span: 10663..10664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 445,
        column: 2,
        span: 10665..10666,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 445,
        column: 3,
        span: 10666..10667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 445,
        column: 7,
        span: 10667..10671,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 445,
        column: 9,
        span: 10672..10673,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 445,
        column: 18,
        span: 10674..10682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 20,
        span: 10683..10684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 445,
        column: 21,
        span: 10684..10685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 22,
        span: 10685..10686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 446,
        column: 9,
        span: 10689..10695,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 10,
        span: 10695..10696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 446,
        column: 14,
        span: 10696..10700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 15,
        span: 10700..10701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 446,
        column: 27,
        span: 10701..10713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 28,
        span: 10713..10714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 446,
        column: 29,
        span: 10714..10715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 30,
        span: 10715..10716,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 446,
        column: 31,
        span: 10716..10717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 446,
        column: 32,
        span: 10717..10718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 33,
        span: 10718..10719,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 446,
        column: 36,
        span: 10720..10722,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 446,
        column: 40,
        span: 10723..10726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 41,
        span: 10726..10727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 447,
        column: 4,
        span: 10730..10731,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 447,
        column: 6,
        span: 10732..10733,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 447,
        column: 0,
        span: 10733..10736,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 448,
        column: 0,
        span: 10737..10740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 449,
        column: 2,
        span: 10741..10742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 449,
        column: 3,
        span: 10742..10743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 449,
        column: 5,
        span: 10744..10745,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
        column: 7,
        span: 10746..10747,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 449,
        column: 0,
        span: 10748..10751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 450,
        column: 15,
        span: 10752..10766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 16,
        span: 10766..10767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 17,
        span: 10767..10768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 451,
        column: 7,
        span: 10769..10775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 8,
        span: 10775..10776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 451,
        column: 9,
        span: 10776..10777,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 451,
        column: 11,
        span: 10777..10779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 13,
        span: 10778..10781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 14,
        span: 10781..10782,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 453,
        column: 3,
        span: 10784..10786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 454,
        column: 17,
        span: 10831..10845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 18,
        span: 10845..10846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 19,
        span: 10846..10847,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 454,
        column: 20,
        span: 10847..10848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 454,
        column: 35,
        span: 10849..10863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 36,
        span: 10863..10864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 37,
        span: 10864..10865,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 455,
        column: 8,
        span: 10868..10873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 455,
        column: 10,
        span: 10874..10875,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 455,
        column: 12,
        span: 10876..10877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 455,
        column: 27,
        span: 10878..10892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 28,
        span: 10892..10893,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 455,
        column: 35,
        span: 10893..10900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 36,
        span: 10900..10901,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 456,
        column: 8,
        span: 10930..10935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 456,
        column: 10,
        span: 10936..10937,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 456,
        column: 12,
        span: 10938..10939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 456,
        column: 25,
        span: 10940..10952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 26,
        span: 10952..10953,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 456,
        column: 27,
        span: 10953..10954,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 456,
        column: 28,
        span: 10954..10955,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 456,
        column: 29,
        span: 10955..10956,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 456,
        column: 31,
        span: 10957..10958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 456,
        column: 37,
        span: 10958..10964,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 456,
        column: 39,
        span: 10965..10966,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kv\"",
        ),
        line: 456,
        column: 44,
        span: 10967..10971,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 456,
        column: 45,
        span: 10971..10972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 46,
        span: 10972..10973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 457,
        column: 4,
        span: 10976..10977,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 457,
        column: 5,
        span: 10977..10978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 457,
        column: 11,
        span: 10978..10984,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 457,
        column: 12,
        span: 10984..10985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 457,
        column: 15,
        span: 10985..10988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 16,
        span: 10988..10989,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 457,
        column: 19,
        span: 10989..10992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 457,
        column: 20,
        span: 10992..10993,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 457,
        column: 22,
        span: 10993..10995,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 457,
        column: 23,
        span: 10995..10996,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "22",
                    after_decimal: "",
                },
            ),
        ),
        line: 457,
        column: 25,
        span: 10995..10998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 26,
        span: 10998..10999,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 457,
        column: 27,
        span: 10999..11000,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 457,
        column: 29,
        span: 11001..11002,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 457,
        column: 32,
        span: 11002..11005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 458,
        column: 4,
        span: 11045..11046,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 458,
        column: 5,
        span: 11046..11047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 458,
        column: 11,
        span: 11047..11053,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 458,
        column: 12,
        span: 11053..11054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 458,
        column: 15,
        span: 11054..11057,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 16,
        span: 11057..11058,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 458,
        column: 19,
        span: 11058..11061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
        column: 20,
        span: 11061..11062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 458,
        column: 22,
        span: 11062..11064,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 458,
        column: 23,
        span: 11064..11065,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "22",
                    after_decimal: "",
                },
            ),
        ),
        line: 458,
        column: 25,
        span: 11064..11067,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 26,
        span: 11067..11068,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 458,
        column: 27,
        span: 11068..11069,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 458,
        column: 29,
        span: 11070..11071,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 458,
        column: 31,
        span: 11072..11073,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 458,
        column: 32,
        span: 11073..11074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 459,
        column: 4,
        span: 11118..11119,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 459,
        column: 5,
        span: 11119..11120,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 459,
        column: 6,
        span: 11120..11121,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 459,
        column: 7,
        span: 11121..11122,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 459,
        column: 8,
        span: 11122..11123,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 459,
        column: 10,
        span: 11124..11125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 459,
        column: 13,
        span: 11125..11128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 460,
        column: 9,
        span: 11169..11175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
        column: 10,
        span: 11175..11176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 460,
        column: 24,
        span: 11176..11190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
        column: 25,
        span: 11190..11191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 460,
        column: 32,
        span: 11191..11198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
        column: 33,
        span: 11198..11199,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 460,
        column: 35,
        span: 11200..11201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 460,
        column: 37,
        span: 11202..11203,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 460,
        column: 39,
        span: 11204..11205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 460,
        column: 41,
        span: 11205..11207,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 460,
        column: 42,
        span: 11207..11208,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 460,
        column: 44,
        span: 11207..11210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
        column: 45,
        span: 11210..11211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 461,
        column: 17,
        span: 11243..11257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 18,
        span: 11257..11258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 19,
        span: 11258..11259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 462,
        column: 9,
        span: 11262..11268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 10,
        span: 11268..11269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 462,
        column: 24,
        span: 11269..11283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 25,
        span: 11283..11284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 462,
        column: 32,
        span: 11284..11291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 33,
        span: 11291..11292,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 462,
        column: 36,
        span: 11293..11295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 462,
        column: 38,
        span: 11296..11297,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 462,
        column: 40,
        span: 11298..11299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 462,
        column: 42,
        span: 11299..11301,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 462,
        column: 43,
        span: 11301..11302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 462,
        column: 45,
        span: 11301..11304,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 462,
        column: 0,
        span: 11305..11308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 463,
        column: 23,
        span: 11317..11331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 24,
        span: 11331..11332,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 463,
        column: 31,
        span: 11332..11339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 32,
        span: 11339..11340,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 463,
        column: 34,
        span: 11341..11342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 463,
        column: 36,
        span: 11343..11344,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 463,
        column: 38,
        span: 11345..11346,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 463,
        column: 40,
        span: 11346..11348,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 463,
        column: 41,
        span: 11348..11349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 463,
        column: 43,
        span: 11348..11351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 44,
        span: 11351..11352,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 464,
        column: 8,
        span: 11383..11388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 464,
        column: 10,
        span: 11389..11390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 464,
        column: 11,
        span: 11390..11391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 464,
        column: 13,
        span: 11392..11393,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 464,
        column: 15,
        span: 11394..11395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 464,
        column: 20,
        span: 11396..11400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 21,
        span: 11400..11401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 464,
        column: 22,
        span: 11401..11402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 23,
        span: 11402..11403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 465,
        column: 9,
        span: 11450..11456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 10,
        span: 11456..11457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 465,
        column: 11,
        span: 11457..11458,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 465,
        column: 14,
        span: 11459..11461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 465,
        column: 21,
        span: 11462..11468,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 465,
        column: 22,
        span: 11468..11469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 465,
        column: 25,
        span: 11469..11472,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 26,
        span: 11472..11473,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 465,
        column: 29,
        span: 11473..11476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 465,
        column: 30,
        span: 11476..11477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 465,
        column: 32,
        span: 11477..11479,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 465,
        column: 33,
        span: 11479..11480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "22",
                    after_decimal: "",
                },
            ),
        ),
        line: 465,
        column: 35,
        span: 11479..11482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 36,
        span: 11482..11483,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 465,
        column: 40,
        span: 11484..11487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 465,
        column: 42,
        span: 11488..11489,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 465,
        column: 45,
        span: 11490..11492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 465,
        column: 48,
        span: 11492..11495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 49,
        span: 11495..11496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 466,
        column: 9,
        span: 11499..11505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 10,
        span: 11505..11506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 466,
        column: 14,
        span: 11506..11510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 15,
        span: 11510..11511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 466,
        column: 16,
        span: 11511..11512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 466,
        column: 17,
        span: 11512..11513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 466,
        column: 19,
        span: 11514..11515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 20,
        span: 11515..11516,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 466,
        column: 23,
        span: 11517..11519,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 466,
        column: 27,
        span: 11520..11523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 28,
        span: 11523..11524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 467,
        column: 9,
        span: 11555..11561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 10,
        span: 11561..11562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 467,
        column: 11,
        span: 11562..11563,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 467,
        column: 12,
        span: 11563..11564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 467,
        column: 18,
        span: 11564..11570,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 467,
        column: 19,
        span: 11570..11571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 467,
        column: 22,
        span: 11571..11574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 23,
        span: 11574..11575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 467,
        column: 26,
        span: 11575..11578,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 467,
        column: 27,
        span: 11578..11579,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 467,
        column: 29,
        span: 11579..11581,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 467,
        column: 30,
        span: 11581..11582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "22",
                    after_decimal: "",
                },
            ),
        ),
        line: 467,
        column: 32,
        span: 11581..11584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 33,
        span: 11584..11585,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 467,
        column: 34,
        span: 11585..11586,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 467,
        column: 37,
        span: 11587..11589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 467,
        column: 43,
        span: 11590..11595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 44,
        span: 11595..11596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 468,
        column: 4,
        span: 11599..11600,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 468,
        column: 5,
        span: 11600..11601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 468,
        column: 6,
        span: 11601..11602,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 468,
        column: 7,
        span: 11602..11603,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 468,
        column: 9,
        span: 11604..11605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 468,
        column: 15,
        span: 11606..11611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 469,
        column: 4,
        span: 11646..11647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 469,
        column: 6,
        span: 11648..11649,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 469,
        column: 0,
        span: 11650..11653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 470,
        column: 17,
        span: 11656..11670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 18,
        span: 11670..11671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 19,
        span: 11671..11672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 471,
        column: 9,
        span: 11675..11681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
        column: 10,
        span: 11681..11682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 471,
        column: 14,
        span: 11682..11686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
        column: 15,
        span: 11686..11687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 471,
        column: 16,
        span: 11687..11688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
        column: 17,
        span: 11688..11689,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 471,
        column: 20,
        span: 11690..11692,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 471,
        column: 24,
        span: 11693..11696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
        column: 25,
        span: 11696..11697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 473,
        column: 9,
        span: 11753..11759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 473,
        column: 10,
        span: 11759..11760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 473,
        column: 11,
        span: 11760..11761,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 473,
        column: 12,
        span: 11761..11762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 473,
        column: 18,
        span: 11762..11768,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 473,
        column: 19,
        span: 11768..11769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 473,
        column: 22,
        span: 11769..11772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 473,
        column: 23,
        span: 11772..11773,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 473,
        column: 26,
        span: 11773..11776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 27,
        span: 11776..11777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 473,
        column: 31,
        span: 11777..11781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 473,
        column: 32,
        span: 11781..11782,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 473,
        column: 33,
        span: 11782..11783,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 473,
        column: 36,
        span: 11784..11786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 473,
        column: 42,
        span: 11787..11792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 473,
        column: 43,
        span: 11792..11793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 474,
        column: 9,
        span: 11796..11802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 474,
        column: 10,
        span: 11802..11803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 474,
        column: 24,
        span: 11803..11817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 474,
        column: 25,
        span: 11817..11818,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 474,
        column: 32,
        span: 11818..11825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 474,
        column: 33,
        span: 11825..11826,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 474,
        column: 36,
        span: 11827..11829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 474,
        column: 38,
        span: 11830..11831,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 474,
        column: 40,
        span: 11832..11833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 42,
        span: 11833..11835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 474,
        column: 43,
        span: 11835..11836,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 475,
        column: 0,
        span: 11862..11865,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 479,
        column: 3,
        span: 11896..11898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 479,
        column: 5,
        span: 11899..11900,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 479,
        column: 0,
        span: 11901..11905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 480,
        column: 7,
        span: 11908..11912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 8,
        span: 11912..11913,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@store\"",
        ),
        line: 480,
        column: 16,
        span: 11913..11921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 17,
        span: 11921..11922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 481,
        column: 4,
        span: 11925..11926,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 481,
        column: 6,
        span: 11927..11928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 481,
        column: 19,
        span: 11929..11941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
        column: 20,
        span: 11941..11942,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 481,
        column: 21,
        span: 11942..11943,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 481,
        column: 22,
        span: 11943..11944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 481,
        column: 23,
        span: 11944..11945,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 481,
        column: 25,
        span: 11946..11947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 481,
        column: 29,
        span: 11947..11951,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 481,
        column: 31,
        span: 11952..11953,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 481,
        column: 40,
        span: 11954..11962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
        column: 42,
        span: 11963..11964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
        column: 43,
        span: 11964..11965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 481,
        column: 49,
        span: 11966..11971,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@expected error\"",
        ),
        line: 481,
        column: 67,
        span: 11972..11989,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 481,
        column: 71,
        span: 11990..11993,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 481,
        column: 72,
        span: 11993..11994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
        column: 73,
        span: 11994..11995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 482,
        column: 4,
        span: 11998..11999,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 482,
        column: 6,
        span: 12000..12001,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 482,
        column: 0,
        span: 12002..12005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 483,
        column: 17,
        span: 12008..12022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 18,
        span: 12022..12023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 19,
        span: 12023..12024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 484,
        column: 9,
        span: 12027..12033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
        column: 10,
        span: 12033..12034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 484,
        column: 16,
        span: 12034..12040,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 484,
        column: 17,
        span: 12040..12041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 484,
        column: 21,
        span: 12041..12045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
        column: 22,
        span: 12045..12046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 484,
        column: 27,
        span: 12046..12051,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 484,
        column: 28,
        span: 12051..12052,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@expected error\"",
        ),
        line: 484,
        column: 46,
        span: 12053..12070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
        column: 47,
        span: 12070..12071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
        column: 48,
        span: 12071..12072,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 484,
        column: 49,
        span: 12072..12073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 484,
        column: 55,
        span: 12074..12079,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 484,
        column: 57,
        span: 12080..12081,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 484,
        column: 0,
        span: 12082..12087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 485,
        column: 7,
        span: 12090..12094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
        column: 8,
        span: 12094..12095,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@normal\"",
        ),
        line: 485,
        column: 17,
        span: 12095..12104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
        column: 18,
        span: 12104..12105,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 486,
        column: 0,
        span: 12106..12109,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 489,
        column: 3,
        span: 12112..12114,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 489,
        column: 7,
        span: 12115..12118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 489,
        column: 13,
        span: 12119..12124,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 489,
        column: 0,
        span: 12125..12129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 490,
        column: 8,
        span: 12132..12137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 9,
        span: 12137..12138,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"long list\"",
        ),
        line: 490,
        column: 20,
        span: 12138..12149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 21,
        span: 12149..12150,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 491,
        column: 8,
        span: 12153..12158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 491,
        column: 10,
        span: 12159..12160,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 491,
        column: 12,
        span: 12161..12162,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 491,
        column: 14,
        span: 12163..12164,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 491,
        column: 15,
        span: 12164..12165,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 492,
        column: 6,
        span: 12168..12171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 492,
        column: 8,
        span: 12172..12173,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 492,
        column: 10,
        span: 12174..12175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 12,
        span: 12175..12177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
        column: 13,
        span: 12177..12178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200000",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 19,
        span: 12177..12184,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 492,
        column: 0,
        span: 12185..12187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 493,
        column: 6,
        span: 12192..12193,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 493,
        column: 8,
        span: 12194..12195,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 493,
        column: 10,
        span: 12196..12197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 493,
        column: 14,
        span: 12197..12201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 493,
        column: 16,
        span: 12202..12203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 493,
        column: 18,
        span: 12204..12205,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 493,
        column: 19,
        span: 12205..12206,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 494,
        column: 0,
        span: 12209..12212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 495,
        column: 4,
        span: 12215..12216,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 495,
        column: 6,
        span: 12217..12218,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 495,
        column: 0,
        span: 12219..12222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 496,
        column: 17,
        span: 12225..12239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 18,
        span: 12239..12240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 19,
        span: 12240..12241,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 497,
        column: 0,
        span: 12242..12245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 500,
        column: 6,
        span: 12309..12314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 500,
        column: 7,
        span: 12314..12315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"self-referenced threads\"",
        ),
        line: 500,
        column: 32,
        span: 12315..12340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 500,
        column: 33,
        span: 12340..12341,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 501,
        column: 6,
        span: 12342..12347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread_id",
        ),
        line: 501,
        column: 16,
        span: 12348..12357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 501,
        column: 18,
        span: 12358..12359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 501,
        column: 0,
        span: 12359..12361,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 502,
        column: 6,
        span: 12362..12367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "threads",
        ),
        line: 502,
        column: 14,
        span: 12368..12375,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 502,
        column: 16,
        span: 12376..12377,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 502,
        column: 18,
        span: 12378..12379,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 502,
        column: 19,
        span: 12379..12380,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 504,
        column: 6,
        span: 12382..12387,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 504,
        column: 15,
        span: 12388..12396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fn",
        ),
        line: 504,
        column: 18,
        span: 12397..12399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 20,
        span: 12400..12401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread",
        ),
        line: 504,
        column: 26,
        span: 12401..12407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 27,
        span: 12407..12408,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 505,
        column: 10,
        span: 12413..12418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 505,
        column: 12,
        span: 12419..12420,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 505,
        column: 14,
        span: 12421..12422,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 505,
        column: 16,
        span: 12423..12424,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 505,
        column: 17,
        span: 12424..12425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "threads",
        ),
        line: 506,
        column: 12,
        span: 12430..12437,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 506,
        column: 13,
        span: 12437..12438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread_id",
        ),
        line: 506,
        column: 22,
        span: 12438..12447,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 506,
        column: 23,
        span: 12447..12448,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 506,
        column: 25,
        span: 12449..12450,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 506,
        column: 34,
        span: 12451..12459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 35,
        span: 12459..12460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 36,
        span: 12460..12461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread",
        ),
        line: 507,
        column: 36,
        span: 12491..12497,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 507,
        column: 38,
        span: 12498..12499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 507,
        column: 0,
        span: 12500..12501,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 508,
        column: 0,
        span: 12527..12530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 509,
        column: 14,
        span: 12535..12544,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 509,
        column: 15,
        span: 12544..12545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 509,
        column: 20,
        span: 12545..12550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 509,
        column: 21,
        span: 12550..12551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 509,
        column: 22,
        span: 12551..12552,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 510,
        column: 0,
        span: 12553..12556,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 512,
        column: 6,
        span: 12558..12563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread_id",
        ),
        line: 512,
        column: 16,
        span: 12564..12573,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 512,
        column: 18,
        span: 12574..12575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 512,
        column: 23,
        span: 12575..12580,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 512,
        column: 0,
        span: 12581..12583,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 513,
        column: 10,
        span: 12588..12593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread",
        ),
        line: 513,
        column: 17,
        span: 12594..12600,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 513,
        column: 19,
        span: 12601..12602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 513,
        column: 29,
        span: 12603..12612,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 513,
        column: 30,
        span: 12612..12613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 513,
        column: 36,
        span: 12613..12619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 513,
        column: 37,
        span: 12619..12620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fn",
        ),
        line: 513,
        column: 39,
        span: 12620..12622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 513,
        column: 40,
        span: 12622..12623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 514,
        column: 14,
        span: 12628..12637,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 514,
        column: 15,
        span: 12637..12638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 514,
        column: 21,
        span: 12638..12644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 514,
        column: 22,
        span: 12644..12645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread",
        ),
        line: 514,
        column: 28,
        span: 12645..12651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 514,
        column: 29,
        span: 12651..12652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread",
        ),
        line: 514,
        column: 36,
        span: 12653..12659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 514,
        column: 37,
        span: 12659..12660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread_id",
        ),
        line: 515,
        column: 14,
        span: 12665..12674,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 515,
        column: 16,
        span: 12675..12676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread_id",
        ),
        line: 515,
        column: 26,
        span: 12677..12686,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 515,
        column: 28,
        span: 12687..12688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 515,
        column: 0,
        span: 12688..12690,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 516,
        column: 0,
        span: 12691..12694,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 524,
        column: 0,
        span: 12988..12990,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 525,
        column: 8,
        span: 12993..12998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collected",
        ),
        line: 525,
        column: 18,
        span: 12999..13008,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 525,
        column: 20,
        span: 13009..13010,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 525,
        column: 26,
        span: 13011..13016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 526,
        column: 17,
        span: 13045..13059,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 526,
        column: 18,
        span: 13059..13060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
        column: 19,
        span: 13060..13061,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 526,
        column: 20,
        span: 13061..13062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 526,
        column: 35,
        span: 13063..13077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 526,
        column: 36,
        span: 13077..13078,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 526,
        column: 42,
        span: 13078..13084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
        column: 43,
        span: 13084..13085,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 527,
        column: 0,
        span: 13088..13090,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 528,
        column: 10,
        span: 13095..13100,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 528,
        column: 19,
        span: 13101..13109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 528,
        column: 21,
        span: 13110..13111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 528,
        column: 23,
        span: 13112..13113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "param",
        ),
        line: 528,
        column: 28,
        span: 13113..13118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 528,
        column: 29,
        span: 13118..13119,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 529,
        column: 8,
        span: 13126..13127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 9,
        span: 13127..13128,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 529,
        column: 17,
        span: 13128..13136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 19,
        span: 13137..13138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 20,
        span: 13138..13139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 530,
        column: 15,
        span: 13148..13154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 16,
        span: 13154..13155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 530,
        column: 20,
        span: 13155..13159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 21,
        span: 13159..13160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 530,
        column: 22,
        span: 13160..13161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 23,
        span: 13161..13162,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 530,
        column: 26,
        span: 13163..13165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        line: 530,
        column: 37,
        span: 13166..13176,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 530,
        column: 41,
        span: 13177..13180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 530,
        column: 46,
        span: 13181..13185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 47,
        span: 13185..13186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "param",
        ),
        line: 530,
        column: 52,
        span: 13186..13191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 53,
        span: 13191..13192,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 530,
        column: 56,
        span: 13193..13195,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'thread'",
        ),
        line: 530,
        column: 65,
        span: 13196..13204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 66,
        span: 13204..13205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "param",
        ),
        line: 531,
        column: 14,
        span: 13214..13219,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 531,
        column: 16,
        span: 13220..13221,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 531,
        column: 18,
        span: 13222..13223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "param",
        ),
        line: 531,
        column: 23,
        span: 13223..13228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 531,
        column: 24,
        span: 13228..13229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 531,
        column: 26,
        span: 13230..13231,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 531,
        column: 27,
        span: 13231..13232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 532,
        column: 21,
        span: 13241..13253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 22,
        span: 13253..13254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "param",
        ),
        line: 532,
        column: 27,
        span: 13254..13259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 532,
        column: 28,
        span: 13259..13260,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 532,
        column: 30,
        span: 13261..13262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 532,
        column: 34,
        span: 13262..13266,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 532,
        column: 36,
        span: 13267..13268,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 532,
        column: 45,
        span: 13269..13277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 47,
        span: 13278..13279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 48,
        span: 13279..13280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collected",
        ),
        line: 532,
        column: 58,
        span: 13281..13290,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 532,
        column: 60,
        span: 13291..13292,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 532,
        column: 65,
        span: 13293..13297,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 532,
        column: 69,
        span: 13298..13301,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 532,
        column: 70,
        span: 13301..13302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 71,
        span: 13302..13303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 533,
        column: 18,
        span: 13312..13321,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 533,
        column: 19,
        span: 13321..13322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 533,
        column: 24,
        span: 13322..13327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 25,
        span: 13327..13328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 533,
        column: 28,
        span: 13327..13331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 29,
        span: 13331..13332,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 534,
        column: 10,
        span: 13339..13342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 11,
        span: 13342..13343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 12,
        span: 13343..13344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 13,
        span: 13344..13345,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 535,
        column: 0,
        span: 13350..13353,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 536,
        column: 10,
        span: 13358..13363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 536,
        column: 13,
        span: 13364..13366,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 536,
        column: 15,
        span: 13367..13368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 536,
        column: 25,
        span: 13369..13378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 536,
        column: 26,
        span: 13378..13379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 536,
        column: 32,
        span: 13379..13385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
        column: 33,
        span: 13385..13386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 536,
        column: 34,
        span: 13386..13387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
        column: 35,
        span: 13387..13388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 537,
        column: 11,
        span: 13393..13399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
        column: 12,
        span: 13399..13400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 537,
        column: 21,
        span: 13400..13409,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 537,
        column: 22,
        span: 13409..13410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 537,
        column: 28,
        span: 13410..13416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
        column: 29,
        span: 13416..13417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 537,
        column: 31,
        span: 13417..13419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 537,
        column: 32,
        span: 13419..13420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 537,
        column: 35,
        span: 13421..13423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
        column: 36,
        span: 13423..13424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
        column: 37,
        span: 13424..13425,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 538,
        column: 0,
        span: 13428..13431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 540,
        column: 17,
        span: 13492..13506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
        column: 18,
        span: 13506..13507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
        column: 19,
        span: 13507..13508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 541,
        column: 9,
        span: 13511..13517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 541,
        column: 10,
        span: 13517..13518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collected",
        ),
        line: 541,
        column: 19,
        span: 13518..13527,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 541,
        column: 20,
        span: 13527..13528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 542,
        column: 17,
        span: 13531..13545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
        column: 18,
        span: 13545..13546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 542,
        column: 27,
        span: 13546..13555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
        column: 28,
        span: 13555..13556,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 543,
        column: 0,
        span: 13557..13560,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 546,
        column: 0,
        span: 13563..13565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 547,
        column: 17,
        span: 13568..13582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 18,
        span: 13582..13583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 19,
        span: 13583..13584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 548,
        column: 17,
        span: 13587..13601,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 548,
        column: 23,
        span: 13601..13607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 549,
        column: 17,
        span: 13610..13624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 549,
        column: 18,
        span: 13624..13625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 549,
        column: 24,
        span: 13625..13631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 549,
        column: 25,
        span: 13631..13632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 549,
        column: 27,
        span: 13632..13634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 549,
        column: 28,
        span: 13634..13635,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 550,
        column: 8,
        span: 13682..13687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 550,
        column: 10,
        span: 13688..13689,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 550,
        column: 12,
        span: 13690..13691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 550,
        column: 19,
        span: 13692..13698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 550,
        column: 20,
        span: 13698..13699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 550,
        column: 21,
        span: 13699..13700,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 551,
        column: 0,
        span: 13703..13709,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 552,
        column: 8,
        span: 13714..13717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 552,
        column: 10,
        span: 13718..13719,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 552,
        column: 11,
        span: 13719..13720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 552,
        column: 12,
        span: 13719..13721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 552,
        column: 13,
        span: 13721..13722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 552,
        column: 17,
        span: 13721..13726,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 552,
        column: 20,
        span: 13727..13729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 552,
        column: 25,
        span: 13730..13734,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 552,
        column: 26,
        span: 13734..13735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 552,
        column: 27,
        span: 13735..13736,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 552,
        column: 29,
        span: 13737..13738,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 552,
        column: 31,
        span: 13739..13740,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 552,
        column: 32,
        span: 13740..13741,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 552,
        column: 36,
        span: 13742..13745,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 553,
        column: 8,
        span: 13783..13788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 553,
        column: 15,
        span: 13789..13795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 16,
        span: 13795..13796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 17,
        span: 13796..13797,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 553,
        column: 19,
        span: 13798..13799,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 553,
        column: 21,
        span: 13799..13801,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 553,
        column: 23,
        span: 13802..13803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 553,
        column: 0,
        span: 13804..13805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 554,
        column: 17,
        span: 13808..13822,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 554,
        column: 26,
        span: 13822..13831,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 555,
        column: 0,
        span: 13832..13835,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 558,
        column: 3,
        span: 13838..13840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 558,
        column: 5,
        span: 13841..13842,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 558,
        column: 10,
        span: 13843..13847,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 560,
        column: 8,
        span: 13898..13903,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 560,
        column: 17,
        span: 13904..13912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 560,
        column: 21,
        span: 13913..13916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 560,
        column: 23,
        span: 13917..13918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 560,
        column: 24,
        span: 13918..13919,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 561,
        column: 10,
        span: 13924..13929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 561,
        column: 12,
        span: 13930..13931,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 561,
        column: 14,
        span: 13932..13933,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 561,
        column: 16,
        span: 13934..13935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 561,
        column: 17,
        span: 13935..13936,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 561,
        column: 19,
        span: 13937..13938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 561,
        column: 22,
        span: 13938..13941,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 561,
        column: 23,
        span: 13941..13942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 562,
        column: 14,
        span: 13947..13956,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 562,
        column: 15,
        span: 13956..13957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 562,
        column: 20,
        span: 13957..13962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
        column: 21,
        span: 13962..13963,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 562,
        column: 29,
        span: 13963..13971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
        column: 31,
        span: 13972..13973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
        column: 32,
        span: 13973..13974,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 562,
        column: 39,
        span: 13975..13981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 562,
        column: 41,
        span: 13982..13983,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 562,
        column: 42,
        span: 13983..13984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 562,
        column: 43,
        span: 13984..13985,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 562,
        column: 47,
        span: 13986..13989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
        column: 48,
        span: 13989..13990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 563,
        column: 11,
        span: 14018..14024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 12,
        span: 14024..14025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 563,
        column: 13,
        span: 14025..14026,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 563,
        column: 14,
        span: 14026..14027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 563,
        column: 15,
        span: 14027..14028,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 563,
        column: 18,
        span: 14029..14031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 563,
        column: 21,
        span: 14031..14034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 22,
        span: 14034..14035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 564,
        column: 6,
        span: 14057..14058,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 564,
        column: 8,
        span: 14059..14060,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 564,
        column: 10,
        span: 14061..14062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 564,
        column: 11,
        span: 14062..14063,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 564,
        column: 13,
        span: 14064..14065,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 564,
        column: 16,
        span: 14065..14068,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 564,
        column: 17,
        span: 14068..14069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 565,
        column: 11,
        span: 14099..14105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 12,
        span: 14105..14106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 565,
        column: 13,
        span: 14106..14107,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 565,
        column: 14,
        span: 14107..14108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 565,
        column: 21,
        span: 14108..14115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 22,
        span: 14115..14116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 565,
        column: 23,
        span: 14116..14117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 24,
        span: 14117..14118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 565,
        column: 27,
        span: 14119..14121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"white\"",
        ),
        line: 565,
        column: 35,
        span: 14122..14129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 36,
        span: 14129..14130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 566,
        column: 14,
        span: 14163..14172,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 566,
        column: 15,
        span: 14172..14173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 566,
        column: 20,
        span: 14173..14178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 21,
        span: 14178..14179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 566,
        column: 24,
        span: 14178..14182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 25,
        span: 14182..14183,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 567,
        column: 0,
        span: 14225..14228,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 569,
        column: 8,
        span: 14232..14237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 569,
        column: 10,
        span: 14238..14239,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 569,
        column: 12,
        span: 14240..14241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 569,
        column: 25,
        span: 14242..14254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
        column: 26,
        span: 14254..14255,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 569,
        column: 27,
        span: 14255..14256,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 569,
        column: 28,
        span: 14256..14257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 569,
        column: 29,
        span: 14257..14258,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 569,
        column: 31,
        span: 14259..14260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 569,
        column: 37,
        span: 14260..14266,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 569,
        column: 39,
        span: 14267..14268,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kv\"",
        ),
        line: 569,
        column: 44,
        span: 14269..14273,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 569,
        column: 45,
        span: 14273..14274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
        column: 46,
        span: 14274..14275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 570,
        column: 17,
        span: 14278..14292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
        column: 18,
        span: 14292..14293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
        column: 19,
        span: 14293..14294,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 570,
        column: 20,
        span: 14294..14295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 570,
        column: 35,
        span: 14296..14310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
        column: 36,
        span: 14310..14311,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'stop'",
        ),
        line: 570,
        column: 42,
        span: 14311..14317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
        column: 43,
        span: 14317..14318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 572,
        column: 4,
        span: 14387..14388,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 572,
        column: 5,
        span: 14388..14389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 572,
        column: 7,
        span: 14389..14391,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 572,
        column: 9,
        span: 14392..14393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 572,
        column: 19,
        span: 14394..14403,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 572,
        column: 20,
        span: 14403..14404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 572,
        column: 24,
        span: 14404..14408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 25,
        span: 14408..14409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 572,
        column: 28,
        span: 14409..14412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 29,
        span: 14412..14413,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 573,
        column: 8,
        span: 14416..14421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 573,
        column: 10,
        span: 14422..14423,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 573,
        column: 12,
        span: 14424..14425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 573,
        column: 14,
        span: 14426..14427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 573,
        column: 15,
        span: 14427..14428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 573,
        column: 17,
        span: 14428..14430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 18,
        span: 14430..14431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 19,
        span: 14431..14432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 574,
        column: 4,
        span: 14476..14477,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 574,
        column: 5,
        span: 14477..14478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        line: 574,
        column: 12,
        span: 14478..14485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 13,
        span: 14485..14486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"atomic\"",
        ),
        line: 574,
        column: 21,
        span: 14486..14494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 22,
        span: 14494..14495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 575,
        column: 9,
        span: 14536..14542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 10,
        span: 14542..14543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 575,
        column: 11,
        span: 14543..14544,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 575,
        column: 12,
        span: 14544..14545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        line: 575,
        column: 19,
        span: 14545..14552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 20,
        span: 14552..14553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 21,
        span: 14553..14554,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 575,
        column: 24,
        span: 14555..14557,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"atomic\"",
        ),
        line: 575,
        column: 33,
        span: 14558..14566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 34,
        span: 14566..14567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 576,
        column: 9,
        span: 14570..14576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 10,
        span: 14576..14577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 576,
        column: 11,
        span: 14577..14578,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 576,
        column: 12,
        span: 14578..14579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 576,
        column: 14,
        span: 14579..14581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 15,
        span: 14581..14582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 16,
        span: 14582..14583,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 576,
        column: 19,
        span: 14584..14586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 576,
        column: 23,
        span: 14586..14590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 24,
        span: 14590..14591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 577,
        column: 9,
        span: 14644..14650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
        column: 10,
        span: 14650..14651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 577,
        column: 11,
        span: 14651..14652,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 577,
        column: 12,
        span: 14652..14653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 577,
        column: 19,
        span: 14653..14660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
        column: 20,
        span: 14660..14661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 577,
        column: 21,
        span: 14661..14662,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 577,
        column: 22,
        span: 14662..14663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 577,
        column: 24,
        span: 14663..14665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
        column: 25,
        span: 14665..14666,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 577,
        column: 28,
        span: 14667..14669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"white\"",
        ),
        line: 577,
        column: 36,
        span: 14670..14677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
        column: 37,
        span: 14677..14678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 578,
        column: 4,
        span: 14710..14711,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 578,
        column: 5,
        span: 14711..14712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        line: 578,
        column: 12,
        span: 14712..14719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 578,
        column: 13,
        span: 14719..14720,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pause\"",
        ),
        line: 578,
        column: 20,
        span: 14720..14727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 21,
        span: 14727..14728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 579,
        column: 9,
        span: 14784..14790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 10,
        span: 14790..14791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 579,
        column: 11,
        span: 14791..14792,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 579,
        column: 12,
        span: 14792..14793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 579,
        column: 14,
        span: 14793..14795,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 579,
        column: 17,
        span: 14796..14798,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 579,
        column: 21,
        span: 14799..14802,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 579,
        column: 25,
        span: 14803..14806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 579,
        column: 27,
        span: 14807..14808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 28,
        span: 14808..14809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 29,
        span: 14809..14810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 579,
        column: 32,
        span: 14811..14813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 579,
        column: 35,
        span: 14813..14816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 36,
        span: 14816..14817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 581,
        column: 17,
        span: 14855..14869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
        column: 18,
        span: 14869..14870,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 581,
        column: 27,
        span: 14870..14879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
        column: 28,
        span: 14879..14880,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 584,
        column: 8,
        span: 14944..14949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 584,
        column: 10,
        span: 14950..14951,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 584,
        column: 12,
        span: 14952..14953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 584,
        column: 14,
        span: 14954..14955,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 584,
        column: 15,
        span: 14955..14956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 584,
        column: 26,
        span: 14956..14967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
        column: 27,
        span: 14967..14968,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 584,
        column: 28,
        span: 14967..14969,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 584,
        column: 29,
        span: 14969..14970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 584,
        column: 31,
        span: 14970..14972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
        column: 32,
        span: 14972..14973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 585,
        column: 17,
        span: 14999..15013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
        column: 18,
        span: 15013..15014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
        column: 19,
        span: 15014..15015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 586,
        column: 17,
        span: 15018..15032,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 586,
        column: 23,
        span: 15032..15038,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 587,
        column: 8,
        span: 15041..15046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 587,
        column: 10,
        span: 15047..15048,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 587,
        column: 12,
        span: 15049..15050,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 587,
        column: 14,
        span: 15051..15052,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 587,
        column: 15,
        span: 15052..15053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 588,
        column: 4,
        span: 15101..15102,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 588,
        column: 5,
        span: 15102..15103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        line: 588,
        column: 12,
        span: 15103..15110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"atomic\"",
        ),
        line: 588,
        column: 20,
        span: 15110..15118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 589,
        column: 4,
        span: 15121..15122,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 5,
        span: 15122..15123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        line: 589,
        column: 12,
        span: 15123..15130,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sweepallgc\"",
        ),
        line: 589,
        column: 24,
        span: 15130..15142,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 590,
        column: 8,
        span: 15145..15150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 590,
        column: 10,
        span: 15151..15152,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 590,
        column: 12,
        span: 15153..15154,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 590,
        column: 14,
        span: 15155..15156,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 590,
        column: 15,
        span: 15156..15157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 591,
        column: 9,
        span: 15160..15166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
        column: 10,
        span: 15166..15167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 591,
        column: 11,
        span: 15167..15168,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 591,
        column: 12,
        span: 15168..15169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 591,
        column: 19,
        span: 15169..15176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
        column: 20,
        span: 15176..15177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 591,
        column: 21,
        span: 15177..15178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
        column: 22,
        span: 15178..15179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 591,
        column: 25,
        span: 15180..15182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"black\"",
        ),
        line: 591,
        column: 33,
        span: 15183..15190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
        column: 34,
        span: 15190..15191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 592,
        column: 9,
        span: 15225..15231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 10,
        span: 15231..15232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 592,
        column: 11,
        span: 15232..15233,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 592,
        column: 12,
        span: 15233..15234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 592,
        column: 19,
        span: 15234..15241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 20,
        span: 15241..15242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 592,
        column: 21,
        span: 15242..15243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 22,
        span: 15243..15244,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 592,
        column: 25,
        span: 15245..15247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"white\"",
        ),
        line: 592,
        column: 33,
        span: 15248..15255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 34,
        span: 15255..15256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 593,
        column: 8,
        span: 15287..15292,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 593,
        column: 9,
        span: 15292..15293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 593,
        column: 21,
        span: 15293..15305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
        column: 22,
        span: 15305..15306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 593,
        column: 23,
        span: 15306..15307,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 593,
        column: 24,
        span: 15307..15308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 593,
        column: 26,
        span: 15309..15310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
        column: 27,
        span: 15310..15311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 594,
        column: 9,
        span: 15342..15348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 594,
        column: 10,
        span: 15348..15349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 594,
        column: 11,
        span: 15349..15350,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 594,
        column: 12,
        span: 15350..15351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 594,
        column: 19,
        span: 15351..15358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 594,
        column: 20,
        span: 15358..15359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 594,
        column: 21,
        span: 15359..15360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 594,
        column: 22,
        span: 15360..15361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 594,
        column: 25,
        span: 15362..15364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gray\"",
        ),
        line: 594,
        column: 32,
        span: 15365..15371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 594,
        column: 33,
        span: 15371..15372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 595,
        column: 17,
        span: 15410..15424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 595,
        column: 26,
        span: 15424..15433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 597,
        column: 8,
        span: 15437..15442,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 597,
        column: 11,
        span: 15442..15445,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 598,
        column: 0,
        span: 15446..15449,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 601,
        column: 3,
        span: 15452..15454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 601,
        column: 5,
        span: 15455..15456,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 601,
        column: 0,
        span: 15457..15461,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 602,
        column: 8,
        span: 15464..15469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 602,
        column: 14,
        span: 15470..15475,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 602,
        column: 16,
        span: 15476..15477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 602,
        column: 24,
        span: 15478..15485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 602,
        column: 32,
        span: 15486..15493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 603,
        column: 17,
        span: 15496..15510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 603,
        column: 18,
        span: 15510..15511,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 603,
        column: 24,
        span: 15511..15517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 603,
        column: 25,
        span: 15517..15518,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 604,
        column: 8,
        span: 15521..15526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 604,
        column: 10,
        span: 15527..15528,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 604,
        column: 12,
        span: 15529..15530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 604,
        column: 14,
        span: 15531..15532,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 604,
        column: 15,
        span: 15532..15533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 604,
        column: 26,
        span: 15533..15544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
        column: 27,
        span: 15544..15545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 604,
        column: 28,
        span: 15544..15546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
        column: 29,
        span: 15546..15547,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 605,
        column: 8,
        span: 15550..15555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 605,
        column: 10,
        span: 15556..15557,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 605,
        column: 12,
        span: 15558..15559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 605,
        column: 14,
        span: 15560..15561,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 605,
        column: 15,
        span: 15561..15562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 605,
        column: 26,
        span: 15562..15573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 605,
        column: 27,
        span: 15573..15574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 605,
        column: 28,
        span: 15573..15575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 605,
        column: 29,
        span: 15575..15576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 606,
        column: 8,
        span: 15579..15584,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 606,
        column: 9,
        span: 15584..15585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 606,
        column: 21,
        span: 15585..15597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 22,
        span: 15597..15598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 606,
        column: 23,
        span: 15598..15599,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 606,
        column: 24,
        span: 15599..15600,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 606,
        column: 26,
        span: 15601..15602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 606,
        column: 30,
        span: 15602..15606,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 606,
        column: 32,
        span: 15607..15608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nop",
        ),
        line: 606,
        column: 36,
        span: 15609..15612,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 606,
        column: 37,
        span: 15612..15613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 38,
        span: 15613..15614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 607,
        column: 8,
        span: 15652..15657,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 607,
        column: 9,
        span: 15657..15658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 607,
        column: 21,
        span: 15658..15670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
        column: 22,
        span: 15670..15671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 607,
        column: 23,
        span: 15671..15672,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 607,
        column: 24,
        span: 15672..15673,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 607,
        column: 26,
        span: 15674..15675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 607,
        column: 30,
        span: 15675..15679,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 607,
        column: 32,
        span: 15680..15681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nop",
        ),
        line: 607,
        column: 36,
        span: 15682..15685,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 607,
        column: 37,
        span: 15685..15686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
        column: 38,
        span: 15686..15687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 608,
        column: 9,
        span: 15710..15716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 608,
        column: 10,
        span: 15716..15717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 608,
        column: 11,
        span: 15717..15718,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 608,
        column: 12,
        span: 15718..15719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 608,
        column: 19,
        span: 15719..15726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 608,
        column: 20,
        span: 15726..15727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 608,
        column: 21,
        span: 15727..15728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 608,
        column: 22,
        span: 15728..15729,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 608,
        column: 25,
        span: 15730..15732,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"white\"",
        ),
        line: 608,
        column: 33,
        span: 15733..15740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 608,
        column: 34,
        span: 15740..15741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 609,
        column: 4,
        span: 15744..15745,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 609,
        column: 5,
        span: 15745..15746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        line: 609,
        column: 16,
        span: 15746..15757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
        column: 17,
        span: 15757..15758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
        column: 18,
        span: 15758..15759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 610,
        column: 17,
        span: 15762..15776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 610,
        column: 18,
        span: 15776..15777,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 610,
        column: 27,
        span: 15777..15786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 610,
        column: 28,
        span: 15786..15787,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 611,
        column: 0,
        span: 15788..15791,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 614,
        column: 3,
        span: 15794..15796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 614,
        column: 5,
        span: 15797..15798,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 614,
        column: 0,
        span: 15799..15803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 615,
        column: 8,
        span: 15806..15811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
        column: 9,
        span: 15811..15812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"emergency collections\"",
        ),
        line: 615,
        column: 32,
        span: 15812..15835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
        column: 33,
        span: 15835..15836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 616,
        column: 17,
        span: 15839..15853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 616,
        column: 18,
        span: 15853..15854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 616,
        column: 19,
        span: 15854..15855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 617,
        column: 17,
        span: 15858..15872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 617,
        column: 18,
        span: 15872..15873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 617,
        column: 19,
        span: 15873..15874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 618,
        column: 4,
        span: 15877..15878,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 618,
        column: 5,
        span: 15878..15879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 618,
        column: 13,
        span: 15879..15887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 14,
        span: 15887..15888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 618,
        column: 15,
        span: 15888..15889,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 618,
        column: 16,
        span: 15889..15890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 618,
        column: 24,
        span: 15890..15898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 25,
        span: 15898..15899,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
        column: 26,
        span: 15899..15900,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 618,
        column: 28,
        span: 15901..15902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 618,
        column: 32,
        span: 15902..15906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
        column: 33,
        span: 15906..15907,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 619,
        column: 6,
        span: 15910..15913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 619,
        column: 8,
        span: 15914..15915,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 619,
        column: 9,
        span: 15915..15916,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
        column: 10,
        span: 15915..15917,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 619,
        column: 11,
        span: 15917..15918,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
        column: 14,
        span: 15917..15921,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 619,
        column: 17,
        span: 15922..15924,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 619,
        column: 23,
        span: 15925..15930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 619,
        column: 25,
        span: 15931..15932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 619,
        column: 27,
        span: 15933..15934,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 619,
        column: 29,
        span: 15935..15936,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 619,
        column: 30,
        span: 15936..15937,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 619,
        column: 0,
        span: 15938..15941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 620,
        column: 4,
        span: 15944..15945,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 620,
        column: 5,
        span: 15945..15946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 620,
        column: 13,
        span: 15946..15954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 620,
        column: 14,
        span: 15954..15955,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 620,
        column: 15,
        span: 15954..15956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 620,
        column: 16,
        span: 15956..15957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 621,
        column: 17,
        span: 15960..15974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 621,
        column: 18,
        span: 15974..15975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 621,
        column: 19,
        span: 15975..15976,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 622,
        column: 8,
        span: 15979..15984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 622,
        column: 10,
        span: 15985..15986,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 622,
        column: 12,
        span: 15987..15988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 622,
        column: 14,
        span: 15989..15990,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 622,
        column: 15,
        span: 15990..15991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 622,
        column: 23,
        span: 15991..15999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 622,
        column: 24,
        span: 15999..16000,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 622,
        column: 31,
        span: 16000..16007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 622,
        column: 32,
        span: 16007..16008,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 623,
        column: 8,
        span: 16011..16016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 623,
        column: 10,
        span: 16017..16018,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 623,
        column: 12,
        span: 16019..16020,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 623,
        column: 14,
        span: 16021..16022,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 623,
        column: 15,
        span: 16022..16023,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 623,
        column: 16,
        span: 16023..16024,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 623,
        column: 17,
        span: 16024..16025,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 623,
        column: 19,
        span: 16026..16027,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 623,
        column: 20,
        span: 16027..16028,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 623,
        column: 21,
        span: 16028..16029,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 623,
        column: 23,
        span: 16030..16031,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 623,
        column: 24,
        span: 16031..16032,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 623,
        column: 25,
        span: 16032..16033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 624,
        column: 9,
        span: 16061..16067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
        column: 10,
        span: 16067..16068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 624,
        column: 11,
        span: 16068..16069,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 624,
        column: 12,
        span: 16069..16070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 624,
        column: 20,
        span: 16070..16078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
        column: 21,
        span: 16078..16079,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 624,
        column: 28,
        span: 16079..16086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
        column: 29,
        span: 16086..16087,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 624,
        column: 32,
        span: 16088..16090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 624,
        column: 34,
        span: 16091..16092,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 624,
        column: 36,
        span: 16093..16094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 624,
        column: 38,
        span: 16094..16096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
        column: 39,
        span: 16096..16097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 625,
        column: 4,
        span: 16100..16101,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 625,
        column: 6,
        span: 16102..16103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 625,
        column: 8,
        span: 16104..16105,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 625,
        column: 9,
        span: 16105..16106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 625,
        column: 17,
        span: 16106..16114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 625,
        column: 18,
        span: 16114..16115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 625,
        column: 28,
        span: 16115..16125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 625,
        column: 29,
        span: 16125..16126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 626,
        column: 4,
        span: 16129..16130,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 626,
        column: 6,
        span: 16131..16132,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 626,
        column: 15,
        span: 16133..16141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 17,
        span: 16142..16143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 18,
        span: 16143..16144,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 626,
        column: 22,
        span: 16145..16148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 627,
        column: 9,
        span: 16177..16183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 627,
        column: 10,
        span: 16183..16184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 627,
        column: 11,
        span: 16184..16185,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 627,
        column: 12,
        span: 16185..16186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 627,
        column: 20,
        span: 16186..16194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 627,
        column: 21,
        span: 16194..16195,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 627,
        column: 31,
        span: 16195..16205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 627,
        column: 32,
        span: 16205..16206,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 627,
        column: 35,
        span: 16207..16209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 627,
        column: 37,
        span: 16210..16211,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 627,
        column: 39,
        span: 16212..16213,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 627,
        column: 41,
        span: 16213..16215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 627,
        column: 42,
        span: 16215..16216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 628,
        column: 4,
        span: 16219..16220,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 628,
        column: 6,
        span: 16221..16222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 628,
        column: 8,
        span: 16223..16224,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 628,
        column: 9,
        span: 16224..16225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 628,
        column: 17,
        span: 16225..16233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 628,
        column: 18,
        span: 16233..16234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        line: 628,
        column: 26,
        span: 16234..16242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 628,
        column: 27,
        span: 16242..16243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 629,
        column: 4,
        span: 16246..16247,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 629,
        column: 6,
        span: 16248..16249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 629,
        column: 16,
        span: 16250..16259,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 629,
        column: 17,
        span: 16259..16260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 629,
        column: 23,
        span: 16260..16266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
        column: 24,
        span: 16266..16267,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 629,
        column: 32,
        span: 16267..16275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
        column: 34,
        span: 16276..16277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
        column: 35,
        span: 16277..16278,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 629,
        column: 39,
        span: 16279..16282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
        column: 40,
        span: 16282..16283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 630,
        column: 9,
        span: 16314..16320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 630,
        column: 10,
        span: 16320..16321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 630,
        column: 11,
        span: 16321..16322,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 630,
        column: 12,
        span: 16322..16323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 630,
        column: 20,
        span: 16323..16331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 630,
        column: 21,
        span: 16331..16332,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        line: 630,
        column: 29,
        span: 16332..16340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 630,
        column: 30,
        span: 16340..16341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 630,
        column: 33,
        span: 16342..16344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 630,
        column: 35,
        span: 16345..16346,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 630,
        column: 37,
        span: 16347..16348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 630,
        column: 39,
        span: 16348..16350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 630,
        column: 40,
        span: 16350..16351,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 631,
        column: 0,
        span: 16352..16355,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 635,
        column: 0,
        span: 16415..16417,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 636,
        column: 8,
        span: 16420..16425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 636,
        column: 21,
        span: 16426..16438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 636,
        column: 22,
        span: 16438..16439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 636,
        column: 28,
        span: 16439..16445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 636,
        column: 29,
        span: 16445..16446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 636,
        column: 33,
        span: 16446..16450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 636,
        column: 34,
        span: 16450..16451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 636,
        column: 39,
        span: 16451..16456,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 636,
        column: 40,
        span: 16456..16457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 636,
        column: 52,
        span: 16457..16469,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 636,
        column: 54,
        span: 16470..16471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 637,
        column: 21,
        span: 16480..16492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 637,
        column: 22,
        span: 16492..16493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 637,
        column: 28,
        span: 16493..16499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 637,
        column: 29,
        span: 16499..16500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 637,
        column: 33,
        span: 16500..16504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 637,
        column: 34,
        span: 16504..16505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 637,
        column: 39,
        span: 16505..16510,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 637,
        column: 40,
        span: 16510..16511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 637,
        column: 0,
        span: 16511..16523,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 638,
        column: 8,
        span: 16526..16531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 638,
        column: 11,
        span: 16532..16534,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 638,
        column: 13,
        span: 16535..16536,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 638,
        column: 15,
        span: 16537..16538,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 638,
        column: 16,
        span: 16538..16539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 639,
        column: 5,
        span: 16542..16544,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 639,
        column: 6,
        span: 16544..16545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 639,
        column: 10,
        span: 16545..16549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 639,
        column: 12,
        span: 16550..16551,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 639,
        column: 21,
        span: 16552..16560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 639,
        column: 23,
        span: 16561..16562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 639,
        column: 24,
        span: 16562..16563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 639,
        column: 25,
        span: 16563..16564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 640,
        column: 11,
        span: 16569..16575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
        column: 12,
        span: 16575..16576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 640,
        column: 24,
        span: 16576..16588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
        column: 25,
        span: 16588..16589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 640,
        column: 26,
        span: 16589..16590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
        column: 27,
        span: 16590..16591,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 640,
        column: 30,
        span: 16592..16594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 640,
        column: 33,
        span: 16595..16597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
        column: 34,
        span: 16597..16598,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 642,
        column: 10,
        span: 16639..16644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 642,
        column: 12,
        span: 16645..16646,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 642,
        column: 14,
        span: 16647..16648,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 642,
        column: 21,
        span: 16649..16655,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 642,
        column: 23,
        span: 16655..16657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 24,
        span: 16657..16658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 642,
        column: 26,
        span: 16657..16660,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 642,
        column: 27,
        span: 16660..16661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 642,
        column: 28,
        span: 16660..16662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 29,
        span: 16662..16663,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 642,
        column: 31,
        span: 16663..16665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'joao'",
        ),
        line: 642,
        column: 37,
        span: 16665..16671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 642,
        column: 38,
        span: 16671..16672,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 642,
        column: 40,
        span: 16673..16674,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 642,
        column: 41,
        span: 16674..16675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        line: 643,
        column: 12,
        span: 16680..16687,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 643,
        column: 14,
        span: 16688..16689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 643,
        column: 16,
        span: 16690..16691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 644,
        column: 17,
        span: 16719..16731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 644,
        column: 18,
        span: 16731..16732,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 644,
        column: 19,
        span: 16732..16733,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 644,
        column: 20,
        span: 16733..16734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 644,
        column: 21,
        span: 16734..16735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 644,
        column: 24,
        span: 16736..16738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 644,
        column: 25,
        span: 16738..16739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 645,
        column: 10,
        span: 16786..16791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 645,
        column: 11,
        span: 16791..16792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">>> closing state \"",
        ),
        line: 645,
        column: 31,
        span: 16792..16812,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 645,
        column: 34,
        span: 16813..16815,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<<<\\n\"",
        ),
        line: 645,
        column: 42,
        span: 16816..16823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 645,
        column: 43,
        span: 16823..16824,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 646,
        column: 0,
        span: 16827..16830,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 647,
        column: 8,
        span: 16833..16838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 647,
        column: 10,
        span: 16839..16840,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 647,
        column: 12,
        span: 16841..16842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 647,
        column: 25,
        span: 16843..16855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 647,
        column: 26,
        span: 16855..16856,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 647,
        column: 27,
        span: 16856..16857,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 647,
        column: 28,
        span: 16857..16858,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 647,
        column: 29,
        span: 16858..16859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 647,
        column: 32,
        span: 16860..16862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 647,
        column: 33,
        span: 16862..16863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        line: 648,
        column: 10,
        span: 16866..16873,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 648,
        column: 12,
        span: 16874..16875,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 648,
        column: 14,
        span: 16876..16877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 648,
        column: 15,
        span: 16877..16878,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 648,
        column: 16,
        span: 16878..16879,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 649,
        column: 0,
        span: 16933..16936,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 652,
        column: 3,
        span: 17015..17017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 652,
        column: 5,
        span: 17018..17019,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 652,
        column: 0,
        span: 17020..17024,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 653,
        column: 8,
        span: 17027..17032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 653,
        column: 14,
        span: 17033..17038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 653,
        column: 15,
        span: 17038..17039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 653,
        column: 22,
        span: 17040..17046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 653,
        column: 23,
        span: 17046..17047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 653,
        column: 28,
        span: 17048..17052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 653,
        column: 29,
        span: 17052..17053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 653,
        column: 34,
        span: 17054..17058,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 653,
        column: 36,
        span: 17059..17060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 653,
        column: 42,
        span: 17061..17066,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 653,
        column: 43,
        span: 17066..17067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 653,
        column: 50,
        span: 17068..17074,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 653,
        column: 51,
        span: 17074..17075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 653,
        column: 58,
        span: 17076..17082,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 653,
        column: 59,
        span: 17082..17083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 653,
        column: 63,
        span: 17083..17087,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 653,
        column: 64,
        span: 17087..17088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 653,
        column: 0,
        span: 17089..17093,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 654,
        column: 8,
        span: 17096..17101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 654,
        column: 10,
        span: 17102..17103,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 654,
        column: 12,
        span: 17104..17105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
        column: 0,
        span: 17105..17107,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 655,
        column: 8,
        span: 17110..17115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastmsg",
        ),
        line: 655,
        column: 0,
        span: 17116..17123,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 656,
        column: 8,
        span: 17126..17131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 656,
        column: 11,
        span: 17132..17134,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 656,
        column: 13,
        span: 17135..17136,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 656,
        column: 15,
        span: 17137..17138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 656,
        column: 19,
        span: 17138..17142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 656,
        column: 21,
        span: 17143..17144,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 656,
        column: 30,
        span: 17145..17153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 32,
        span: 17154..17155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 656,
        column: 33,
        span: 17155..17156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 34,
        span: 17156..17157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 657,
        column: 6,
        span: 17162..17163,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 657,
        column: 8,
        span: 17164..17165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 657,
        column: 10,
        span: 17166..17167,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 657,
        column: 12,
        span: 17168..17169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 657,
        column: 0,
        span: 17169..17171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 658,
        column: 11,
        span: 17176..17182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
        column: 12,
        span: 17182..17183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 658,
        column: 13,
        span: 17183..17184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 658,
        column: 16,
        span: 17185..17187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 658,
        column: 18,
        span: 17188..17189,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 658,
        column: 19,
        span: 17189..17190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 658,
        column: 20,
        span: 17189..17191,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 658,
        column: 21,
        span: 17191..17192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
        column: 22,
        span: 17192..17193,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 659,
        column: 7,
        span: 17198..17200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 659,
        column: 9,
        span: 17201..17202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 659,
        column: 12,
        span: 17203..17205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 659,
        column: 14,
        span: 17205..17207,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 659,
        column: 0,
        span: 17208..17212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 660,
        column: 12,
        span: 17219..17224,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 660,
        column: 14,
        span: 17225..17226,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 660,
        column: 0,
        span: 17227..17232,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 661,
        column: 11,
        span: 17237..17243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 661,
        column: 13,
        span: 17244..17245,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 661,
        column: 16,
        span: 17246..17248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 661,
        column: 18,
        span: 17248..17250,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 661,
        column: 0,
        span: 17251..17255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 662,
        column: 13,
        span: 17262..17268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
        column: 14,
        span: 17268..17269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 662,
        column: 18,
        span: 17269..17273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
        column: 19,
        span: 17273..17274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 662,
        column: 24,
        span: 17274..17279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 662,
        column: 25,
        span: 17279..17280,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@expected warning\"",
        ),
        line: 662,
        column: 45,
        span: 17281..17300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
        column: 46,
        span: 17300..17301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
        column: 47,
        span: 17301..17302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastmsg",
        ),
        line: 663,
        column: 14,
        span: 17309..17316,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 663,
        column: 16,
        span: 17317..17318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 663,
        column: 22,
        span: 17319..17324,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 664,
        column: 0,
        span: 17379..17383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 665,
        column: 13,
        span: 17390..17396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 665,
        column: 14,
        span: 17396..17397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastmsg",
        ),
        line: 665,
        column: 21,
        span: 17397..17404,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 665,
        column: 24,
        span: 17405..17407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 665,
        column: 30,
        span: 17408..17413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 665,
        column: 31,
        span: 17413..17414,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 666,
        column: 0,
        span: 17459..17462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 667,
        column: 9,
        span: 17467..17471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 667,
        column: 10,
        span: 17471..17472,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@store\"",
        ),
        line: 667,
        column: 18,
        span: 17472..17480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 667,
        column: 19,
        span: 17480..17481,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 667,
        column: 20,
        span: 17481..17482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 667,
        column: 26,
        span: 17483..17488,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 667,
        column: 28,
        span: 17489..17490,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 667,
        column: 0,
        span: 17491..17496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 668,
        column: 10,
        span: 17501..17506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@expected warning\"",
        ),
        line: 668,
        column: 29,
        span: 17506..17525,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 669,
        column: 6,
        span: 17528..17531,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 669,
        column: 7,
        span: 17531..17532,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 670,
        column: 6,
        span: 17535..17538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 670,
        column: 8,
        span: 17539..17540,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 670,
        column: 10,
        span: 17541..17542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 670,
        column: 13,
        span: 17542..17545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 670,
        column: 14,
        span: 17545..17546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 670,
        column: 16,
        span: 17546..17548,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 670,
        column: 17,
        span: 17548..17549,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 670,
        column: 19,
        span: 17550..17551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 670,
        column: 20,
        span: 17550..17552,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 670,
        column: 0,
        span: 17553..17555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 672,
        column: 10,
        span: 17611..17616,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 672,
        column: 11,
        span: 17616..17617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 672,
        column: 17,
        span: 17617..17623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 18,
        span: 17623..17624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        line: 672,
        column: 25,
        span: 17624..17631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 672,
        column: 26,
        span: 17631..17632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 672,
        column: 39,
        span: 17633..17645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 40,
        span: 17645..17646,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 672,
        column: 41,
        span: 17646..17647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 672,
        column: 42,
        span: 17647..17648,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 672,
        column: 43,
        span: 17648..17649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 672,
        column: 44,
        span: 17649..17650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 672,
        column: 47,
        span: 17651..17653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 48,
        span: 17653..17654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 49,
        span: 17654..17655,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 673,
        column: 0,
        span: 17658..17661,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 674,
        column: 0,
        span: 17662..17665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 677,
        column: 7,
        span: 17688..17694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 677,
        column: 8,
        span: 17694..17695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 677,
        column: 22,
        span: 17695..17709,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'isrunning'",
        ),
        line: 677,
        column: 33,
        span: 17709..17720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 677,
        column: 34,
        span: 17720..17721,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 679,
        column: 3,
        span: 17723..17725,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 680,
        column: 8,
        span: 17796..17801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 680,
        column: 12,
        span: 17802..17805,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 680,
        column: 14,
        span: 17806..17807,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 680,
        column: 0,
        span: 17808..17812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 681,
        column: 15,
        span: 17815..17827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 16,
        span: 17827..17828,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 681,
        column: 17,
        span: 17828..17829,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 681,
        column: 18,
        span: 17829..17830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 681,
        column: 19,
        span: 17830..17831,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 681,
        column: 21,
        span: 17832..17833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 681,
        column: 25,
        span: 17833..17837,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 681,
        column: 27,
        span: 17838..17839,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 681,
        column: 36,
        span: 17840..17848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 38,
        span: 17849..17850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 39,
        span: 17850..17851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 682,
        column: 8,
        span: 17856..17859,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 682,
        column: 10,
        span: 17860..17861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 682,
        column: 25,
        span: 17862..17876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 26,
        span: 17876..17877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 27,
        span: 17877..17878,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 683,
        column: 6,
        span: 17881..17884,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 683,
        column: 7,
        span: 17884..17885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
        column: 8,
        span: 17885..17886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 684,
        column: 17,
        span: 17889..17903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
        column: 18,
        span: 17903..17904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
        column: 19,
        span: 17904..17905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 685,
        column: 9,
        span: 17908..17914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 685,
        column: 10,
        span: 17914..17915,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 685,
        column: 13,
        span: 17915..17918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 685,
        column: 17,
        span: 17919..17922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 685,
        column: 18,
        span: 17922..17923,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 686,
        column: 0,
        span: 17924..17927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 689,
        column: 15,
        span: 17930..17944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 689,
        column: 16,
        span: 17944..17945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmode",
        ),
        line: 689,
        column: 23,
        span: 17945..17952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 689,
        column: 24,
        span: 17952..17953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 691,
        column: 6,
        span: 17955..17960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 691,
        column: 7,
        span: 17960..17961,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 691,
        column: 11,
        span: 17961..17965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 691,
        column: 12,
        span: 17965..17966,
    },
]
