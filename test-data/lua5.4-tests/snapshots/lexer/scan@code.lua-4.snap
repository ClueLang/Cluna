---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/code.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 4,
            column: 3,
            span: 67..69,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 4,
            column: 5,
            span: 70..71,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 71..73,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 4,
            column: 10,
            span: 73..76,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 4,
            column: 0,
            span: 77..81,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 4,
            span: 84..85,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 5,
            column: 11,
            span: 85..92,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 5,
            column: 14,
            span: 93..95,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 5,
            column: 20,
            span: 96..101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 21,
            span: 101..102,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 22,
            span: 102..103,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping opcode tests <<<\\n'",
        ),
        position: Position {
            line: 5,
            column: 76,
            span: 103..157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 77,
            span: 157..158,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 6,
            column: 0,
            span: 161..167,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 7,
            column: 0,
            span: 168..171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 8,
            column: 6,
            span: 172..177,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing code generation and optimizations\"",
        ),
        position: Position {
            line: 8,
            column: 50,
            span: 178..221,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 11,
            column: 6,
            span: 255..260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k0aux",
        ),
        position: Position {
            line: 11,
            column: 12,
            span: 261..266,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 11,
            column: 14,
            span: 267..268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 11,
            column: 19,
            span: 268..273,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 11,
            column: 20,
            span: 273..274,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 11,
            column: 22,
            span: 275..276,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 11,
            column: 0,
            span: 276..278,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 12,
            column: 6,
            span: 279..284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k0",
        ),
        position: Position {
            line: 12,
            column: 9,
            span: 285..287,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 12,
            column: 11,
            span: 288..289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 12,
            column: 16,
            span: 289..294,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 12,
            column: 17,
            span: 294..295,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 12,
            column: 19,
            span: 296..297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k0aux",
        ),
        position: Position {
            line: 12,
            column: 0,
            span: 298..303,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 13,
            column: 6,
            span: 304..309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k1",
        ),
        position: Position {
            line: 13,
            column: 9,
            span: 310..312,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 13,
            column: 11,
            span: 313..314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 13,
            column: 16,
            span: 314..319,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 13,
            column: 17,
            span: 319..320,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 13,
            column: 19,
            span: 321..322,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 13,
            column: 0,
            span: 322..324,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 14,
            column: 6,
            span: 325..330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3",
        ),
        position: Position {
            line: 14,
            column: 9,
            span: 331..333,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 14,
            column: 11,
            span: 334..335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 14,
            column: 16,
            span: 335..340,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 14,
            column: 17,
            span: 340..341,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 14,
            column: 19,
            span: 342..343,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 14,
            column: 0,
            span: 343..345,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 15,
            column: 6,
            span: 346..351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k6",
        ),
        position: Position {
            line: 15,
            column: 9,
            span: 352..354,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 15,
            column: 11,
            span: 355..356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 15,
            column: 16,
            span: 356..361,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 15,
            column: 17,
            span: 361..362,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 15,
            column: 19,
            span: 363..364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3",
        ),
        position: Position {
            line: 15,
            column: 22,
            span: 365..367,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 15,
            column: 24,
            span: 368..369,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 26,
            span: 370..371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3",
        ),
        position: Position {
            line: 15,
            column: 28,
            span: 371..373,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 15,
            column: 31,
            span: 374..376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k0",
        ),
        position: Position {
            line: 15,
            column: 34,
            span: 377..379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 35,
            span: 379..380,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 16,
            column: 6,
            span: 381..386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kFF0",
        ),
        position: Position {
            line: 16,
            column: 11,
            span: 387..391,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 16,
            column: 13,
            span: 392..393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 16,
            column: 18,
            span: 393..398,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 16,
            column: 19,
            span: 398..399,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 400..401,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFF0",
            ),
        ),
        position: Position {
            line: 16,
            column: 0,
            span: 401..407,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 17,
            column: 6,
            span: 408..413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3_78",
        ),
        position: Position {
            line: 17,
            column: 12,
            span: 414..419,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 17,
            column: 14,
            span: 420..421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 17,
            column: 19,
            span: 421..426,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 17,
            column: 20,
            span: 426..427,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 17,
            column: 22,
            span: 428..429,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 0,
            span: 429..434,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 18,
            column: 6,
            span: 435..440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 18,
            column: 8,
            span: 441..442,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 18,
            column: 9,
            span: 442..443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3_78_4",
        ),
        position: Position {
            line: 18,
            column: 17,
            span: 444..451,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 18,
            column: 19,
            span: 452..453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 18,
            column: 24,
            span: 453..458,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 18,
            column: 25,
            span: 458..459,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 18,
            column: 27,
            span: 460..461,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 30,
            span: 461..464,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 18,
            column: 31,
            span: 464..465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3_78",
        ),
        position: Position {
            line: 18,
            column: 37,
            span: 466..471,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 18,
            column: 39,
            span: 472..473,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 0,
            span: 473..475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 19,
            column: 7,
            span: 476..482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 8,
            span: 482..483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 19,
            column: 9,
            span: 483..484,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 19,
            column: 12,
            span: 485..487,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 15,
            span: 487..490,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 16,
            span: 490..491,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 21,
            column: 6,
            span: 493..498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kx",
        ),
        position: Position {
            line: 21,
            column: 9,
            span: 499..501,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 21,
            column: 11,
            span: 502..503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 21,
            column: 16,
            span: 503..508,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 21,
            column: 17,
            span: 508..509,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 19,
            span: 510..511,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 21,
            column: 23,
            span: 512..515,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 23,
            column: 6,
            span: 517..522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kTrue",
        ),
        position: Position {
            line: 23,
            column: 12,
            span: 523..528,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 23,
            column: 14,
            span: 529..530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 23,
            column: 19,
            span: 530..535,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 23,
            column: 20,
            span: 535..536,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 23,
            column: 22,
            span: 537..538,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 23,
            column: 0,
            span: 539..543,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 24,
            column: 6,
            span: 544..549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kFalse",
        ),
        position: Position {
            line: 24,
            column: 13,
            span: 550..556,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 24,
            column: 15,
            span: 557..558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 24,
            column: 20,
            span: 558..563,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 24,
            column: 21,
            span: 563..564,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 24,
            column: 23,
            span: 565..566,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 24,
            column: 0,
            span: 567..572,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 26,
            column: 6,
            span: 574..579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kNil",
        ),
        position: Position {
            line: 26,
            column: 11,
            span: 580..584,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 26,
            column: 13,
            span: 585..586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 26,
            column: 18,
            span: 586..591,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 26,
            column: 19,
            span: 591..592,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 26,
            column: 21,
            span: 593..594,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 26,
            column: 0,
            span: 595..598,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 29,
            column: 0,
            span: 648..650,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 30,
            column: 8,
            span: 653..658,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 30,
            column: 17,
            span: 659..667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 30,
            column: 19,
            span: 668..669,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 21,
            span: 670..671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 30,
            column: 22,
            span: 671..672,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 23,
            span: 672..673,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 31,
            column: 6,
            span: 676..679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 31,
            column: 8,
            span: 680..681,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 9,
            span: 681..682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 31,
            column: 10,
            span: 682..683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 11,
            span: 683..684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 31,
            column: 12,
            span: 684..685,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 31,
            column: 15,
            span: 686..688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 31,
            column: 17,
            span: 689..690,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 31,
            column: 20,
            span: 691..693,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 31,
            column: 0,
            span: 694..697,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 32,
            column: 0,
            span: 700..703,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 33,
            column: 0,
            span: 704..707,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 37,
            column: 6,
            span: 745..750,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 37,
            column: 15,
            span: 751..759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkKlist",
        ),
        position: Position {
            line: 37,
            column: 26,
            span: 760..770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 28,
            span: 771..772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 37,
            column: 32,
            span: 772..776,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 33,
            span: 776..777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "list",
        ),
        position: Position {
            line: 37,
            column: 38,
            span: 778..782,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 39,
            span: 782..783,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 38,
            column: 8,
            span: 786..791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 38,
            column: 10,
            span: 792..793,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 12,
            span: 794..795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 38,
            column: 14,
            span: 796..797,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 15,
            span: 797..798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listk",
        ),
        position: Position {
            line: 38,
            column: 20,
            span: 798..803,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 21,
            span: 803..804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 38,
            column: 25,
            span: 804..808,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 26,
            span: 808..809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 39,
            column: 9,
            span: 812..818,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 10,
            span: 818..819,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 39,
            column: 11,
            span: 819..820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 39,
            column: 12,
            span: 820..821,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 39,
            column: 15,
            span: 822..824,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 39,
            column: 17,
            span: 825..826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "list",
        ),
        position: Position {
            line: 39,
            column: 21,
            span: 826..830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 22,
            span: 830..831,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 40,
            column: 6,
            span: 834..837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 838..839,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 10,
            span: 840..841,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 841..843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 13,
            span: 843..844,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 40,
            column: 15,
            span: 845..846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 40,
            column: 16,
            span: 846..847,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 40,
            column: 0,
            span: 848..850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 11,
            span: 855..861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 12,
            span: 861..862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 862..863,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 41,
            column: 14,
            span: 863..864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 41,
            column: 15,
            span: 864..865,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 41,
            column: 16,
            span: 865..866,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 19,
            span: 867..869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "list",
        ),
        position: Position {
            line: 41,
            column: 24,
            span: 870..874,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 41,
            column: 25,
            span: 874..875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 41,
            column: 26,
            span: 875..876,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 41,
            column: 27,
            span: 876..877,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 41,
            column: 31,
            span: 878..881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 41,
            column: 36,
            span: 882..886,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 37,
            span: 886..887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 41,
            column: 41,
            span: 887..891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 42,
            span: 891..892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 41,
            column: 43,
            span: 892..893,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 41,
            column: 44,
            span: 893..894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 41,
            column: 45,
            span: 894..895,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 41,
            column: 46,
            span: 895..896,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 47,
            span: 896..897,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 50,
            span: 898..900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 41,
            column: 55,
            span: 901..905,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 56,
            span: 905..906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 41,
            column: 60,
            span: 906..910,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 61,
            span: 910..911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "list",
        ),
        position: Position {
            line: 41,
            column: 65,
            span: 911..915,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 41,
            column: 66,
            span: 915..916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 41,
            column: 67,
            span: 916..917,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 41,
            column: 68,
            span: 917..918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 69,
            span: 918..919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 70,
            span: 919..920,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 923..926,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 43,
            column: 0,
            span: 927..930,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 45,
            column: 6,
            span: 932..937,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 45,
            column: 15,
            span: 938..946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 45,
            column: 19,
            span: 947..950,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 21,
            span: 951..952,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 22,
            span: 952..953,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 956..961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 46,
            column: 0,
            span: 962..963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 47,
            column: 4,
            span: 966..967,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 47,
            column: 6,
            span: 968..969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3",
        ),
        position: Position {
            line: 47,
            column: 9,
            span: 970..972,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 47,
            column: 10,
            span: 972..973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 48,
            column: 4,
            span: 976..977,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 6,
            span: 978..979,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 8,
            span: 979..981,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 48,
            column: 9,
            span: 981..982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 48,
            column: 11,
            span: 983..984,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 13,
            span: 985..986,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 17,
            span: 986..990,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 48,
            column: 18,
            span: 990..991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 48,
            column: 20,
            span: 992..993,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 22,
            span: 994..995,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 48,
            column: 24,
            span: 996..997,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 25,
            span: 996..998,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 48,
            column: 27,
            span: 999..1000,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 0,
            span: 1000..1002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 49,
            column: 4,
            span: 1005..1006,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 49,
            column: 6,
            span: 1007..1008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3_78",
        ),
        position: Position {
            line: 49,
            column: 12,
            span: 1009..1014,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 49,
            column: 13,
            span: 1014..1015,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 1014..1016,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 49,
            column: 15,
            span: 1016..1017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 49,
            column: 17,
            span: 1018..1019,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 49,
            column: 19,
            span: 1020..1021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3_78_4",
        ),
        position: Position {
            line: 49,
            column: 0,
            span: 1022..1029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 50,
            column: 4,
            span: 1032..1033,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 50,
            column: 6,
            span: 1034..1035,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1036..1037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3_78",
        ),
        position: Position {
            line: 50,
            column: 13,
            span: 1037..1042,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 50,
            column: 14,
            span: 1042..1043,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 15,
            span: 1042..1044,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 50,
            column: 16,
            span: 1044..1045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 50,
            column: 18,
            span: 1046..1047,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 50,
            column: 20,
            span: 1048..1049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3_78",
        ),
        position: Position {
            line: 50,
            column: 26,
            span: 1050..1055,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 50,
            column: 27,
            span: 1055..1056,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 28,
            span: 1055..1057,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 50,
            column: 29,
            span: 1057..1058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 50,
            column: 31,
            span: 1059..1060,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 50,
            column: 33,
            span: 1061..1062,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 50,
            column: 35,
            span: 1063..1064,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 39,
            span: 1063..1068,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 50,
            column: 40,
            span: 1068..1069,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 0,
            span: 1068..1070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 51,
            column: 4,
            span: 1073..1074,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 51,
            column: 6,
            span: 1075..1076,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1077..1078,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".79",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 12,
            span: 1077..1082,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 51,
            column: 13,
            span: 1082..1083,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 14,
            span: 1082..1084,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 51,
            column: 15,
            span: 1084..1085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 51,
            column: 17,
            span: 1086..1087,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 51,
            column: 19,
            span: 1088..1089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 23,
            span: 1089..1093,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 51,
            column: 24,
            span: 1093..1094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 51,
            column: 26,
            span: 1095..1096,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 51,
            column: 28,
            span: 1097..1098,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 51,
            column: 30,
            span: 1099..1100,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 31,
            span: 1099..1101,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 51,
            column: 32,
            span: 1101..1102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 4,
            span: 1105..1106,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 52,
            column: 6,
            span: 1107..1108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3",
        ),
        position: Position {
            line: 52,
            column: 9,
            span: 1109..1111,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 52,
            column: 10,
            span: 1111..1112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 12,
            span: 1113..1114,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 52,
            column: 14,
            span: 1115..1116,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 18,
            span: 1116..1120,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 52,
            column: 19,
            span: 1120..1121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 21,
            span: 1122..1123,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 52,
            column: 23,
            span: 1124..1125,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 25,
            span: 1125..1127,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 52,
            column: 26,
            span: 1127..1128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 28,
            span: 1129..1130,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 52,
            column: 30,
            span: 1131..1132,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 0,
            span: 1132..1136,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 53,
            column: 0,
            span: 1137..1140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkKlist",
        ),
        position: Position {
            line: 55,
            column: 11,
            span: 1142..1152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 12,
            span: 1152..1153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 55,
            column: 15,
            span: 1153..1156,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 16,
            span: 1156..1157,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 55,
            column: 18,
            span: 1158..1159,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 22,
            span: 1158..1163,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 55,
            column: 23,
            span: 1163..1164,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 24,
            span: 1163..1165,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 25,
            span: 1165..1166,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 55,
            column: 27,
            span: 1167..1168,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 31,
            span: 1167..1172,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 55,
            column: 32,
            span: 1172..1173,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 33,
            span: 1172..1174,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 34,
            span: 1174..1175,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 55,
            column: 36,
            span: 1176..1177,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".79",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 40,
            span: 1176..1181,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 55,
            column: 41,
            span: 1181..1182,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 42,
            span: 1181..1183,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 55,
            column: 43,
            span: 1183..1184,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 44,
            span: 1184..1185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 58,
            column: 4,
            span: 1188..1191,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 58,
            column: 6,
            span: 1192..1193,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 58,
            column: 15,
            span: 1194..1202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 17,
            span: 1203..1204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 58,
            column: 18,
            span: 1204..1205,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 19,
            span: 1205..1206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 58,
            column: 21,
            span: 1207..1208,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 22,
            span: 1208..1209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 59,
            column: 10,
            span: 1218..1219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 11,
            span: 1219..1220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 59,
            column: 14,
            span: 1219..1223,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 59,
            column: 16,
            span: 1224..1225,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 59,
            column: 21,
            span: 1225..1230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 22,
            span: 1230..1231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 1240..1241,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 11,
            span: 1241..1242,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 16,
            span: 1241..1247,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 60,
            column: 18,
            span: 1248..1249,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 23,
            span: 1249..1254,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 1254..1255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 1264..1265,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 11,
            span: 1265..1266,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 61,
            column: 12,
            span: 1266..1267,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 15,
            span: 1266..1270,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 61,
            column: 17,
            span: 1271..1272,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 22,
            span: 1272..1277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 23,
            span: 1277..1278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 1287..1288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 11,
            span: 1288..1289,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 62,
            column: 12,
            span: 1289..1290,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 15,
            span: 1289..1293,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 62,
            column: 17,
            span: 1294..1295,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 24,
            span: 1295..1302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 25,
            span: 1302..1303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 1312..1313,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 11,
            span: 1313..1314,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 63,
            column: 17,
            span: 1313..1320,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 18,
            span: 1320..1321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 64,
            column: 10,
            span: 1330..1331,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 11,
            span: 1331..1332,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100000",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 19,
            span: 1331..1340,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 20,
            span: 1340..1341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 1350..1351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 11,
            span: 1351..1352,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 65,
            column: 12,
            span: 1352..1353,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 18,
            span: 1352..1359,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 19,
            span: 1359..1360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 66,
            column: 10,
            span: 1369..1370,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 11,
            span: 1370..1371,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 66,
            column: 12,
            span: 1371..1372,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100000",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 20,
            span: 1371..1380,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 21,
            span: 1380..1381,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 67,
            column: 0,
            span: 1388..1391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkKlist",
        ),
        position: Position {
            line: 69,
            column: 11,
            span: 1393..1403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 12,
            span: 1403..1404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 69,
            column: 15,
            span: 1404..1407,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 16,
            span: 1407..1408,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 69,
            column: 18,
            span: 1409..1410,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 24,
            span: 1409..1416,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 25,
            span: 1416..1417,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100000",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 34,
            span: 1417..1426,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 35,
            span: 1426..1427,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 69,
            column: 37,
            span: 1428..1429,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 43,
            span: 1428..1435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 44,
            span: 1435..1436,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 69,
            column: 46,
            span: 1437..1438,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100000",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 54,
            span: 1437..1446,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 69,
            column: 55,
            span: 1446..1447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 56,
            span: 1447..1448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 73,
            column: 4,
            span: 1472..1475,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 73,
            column: 6,
            span: 1476..1477,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 73,
            column: 15,
            span: 1478..1486,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 17,
            span: 1487..1488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 73,
            column: 18,
            span: 1488..1489,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 19,
            span: 1489..1490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 73,
            column: 21,
            span: 1491..1492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 22,
            span: 1492..1493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 74,
            column: 4,
            span: 1496..1497,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 74,
            column: 5,
            span: 1497..1498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 6,
            span: 1498..1499,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 74,
            column: 7,
            span: 1499..1500,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 1501..1502,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 11,
            span: 1502..1504,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 1504..1505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 74,
            column: 14,
            span: 1506..1507,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 1507..1508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 16,
            span: 1508..1509,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 74,
            column: 17,
            span: 1509..1510,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 19,
            span: 1511..1512,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 1512..1516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 75,
            column: 4,
            span: 1519..1520,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 75,
            column: 5,
            span: 1520..1521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 75,
            column: 6,
            span: 1521..1522,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 75,
            column: 7,
            span: 1522..1523,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 1524..1525,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 11,
            span: 1525..1527,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 75,
            column: 12,
            span: 1527..1528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 75,
            column: 14,
            span: 1529..1530,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 75,
            column: 15,
            span: 1530..1531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 75,
            column: 16,
            span: 1531..1532,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 75,
            column: 17,
            span: 1532..1533,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 75,
            column: 19,
            span: 1534..1535,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 0,
            span: 1535..1539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 76,
            column: 4,
            span: 1542..1543,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 76,
            column: 5,
            span: 1543..1544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 76,
            column: 6,
            span: 1544..1545,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 76,
            column: 7,
            span: 1545..1546,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 1547..1548,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 11,
            span: 1548..1550,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 76,
            column: 12,
            span: 1550..1551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 76,
            column: 14,
            span: 1552..1553,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 76,
            column: 15,
            span: 1553..1554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 76,
            column: 16,
            span: 1554..1555,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 76,
            column: 17,
            span: 1555..1556,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 76,
            column: 19,
            span: 1557..1558,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 0,
            span: 1558..1562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 77,
            column: 4,
            span: 1565..1566,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 77,
            column: 5,
            span: 1566..1567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 77,
            column: 6,
            span: 1567..1568,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 77,
            column: 7,
            span: 1568..1569,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 1570..1571,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 11,
            span: 1571..1573,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 77,
            column: 12,
            span: 1573..1574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 77,
            column: 14,
            span: 1575..1576,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 77,
            column: 15,
            span: 1576..1577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 77,
            column: 16,
            span: 1577..1578,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 77,
            column: 17,
            span: 1578..1579,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 77,
            column: 19,
            span: 1580..1581,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 0,
            span: 1581..1585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 78,
            column: 4,
            span: 1588..1589,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 78,
            column: 5,
            span: 1589..1590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 78,
            column: 6,
            span: 1590..1591,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 78,
            column: 7,
            span: 1591..1592,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 78,
            column: 9,
            span: 1593..1594,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 78,
            column: 11,
            span: 1594..1596,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 78,
            column: 12,
            span: 1596..1597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 78,
            column: 14,
            span: 1598..1599,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 78,
            column: 15,
            span: 1599..1600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 78,
            column: 16,
            span: 1600..1601,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 78,
            column: 17,
            span: 1601..1602,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 78,
            column: 19,
            span: 1603..1604,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 78,
            column: 0,
            span: 1604..1608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 79,
            column: 4,
            span: 1611..1612,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 79,
            column: 5,
            span: 1612..1613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 79,
            column: 6,
            span: 1613..1614,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 79,
            column: 7,
            span: 1614..1615,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 9,
            span: 1616..1617,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 11,
            span: 1617..1619,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 79,
            column: 12,
            span: 1619..1620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 79,
            column: 14,
            span: 1621..1622,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 79,
            column: 15,
            span: 1622..1623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 79,
            column: 16,
            span: 1623..1624,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 79,
            column: 17,
            span: 1624..1625,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 19,
            span: 1626..1627,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 0,
            span: 1627..1631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 80,
            column: 4,
            span: 1634..1635,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 80,
            column: 5,
            span: 1635..1636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 80,
            column: 6,
            span: 1636..1637,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 80,
            column: 7,
            span: 1637..1638,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 9,
            span: 1639..1640,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 11,
            span: 1640..1642,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 80,
            column: 12,
            span: 1642..1643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 80,
            column: 14,
            span: 1644..1645,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 1645..1646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 80,
            column: 16,
            span: 1646..1647,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 1647..1648,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 19,
            span: 1649..1650,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 0,
            span: 1650..1654,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 81,
            column: 0,
            span: 1655..1658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkKlist",
        ),
        position: Position {
            line: 83,
            column: 11,
            span: 1660..1670,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 12,
            span: 1670..1671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 83,
            column: 15,
            span: 1671..1674,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 16,
            span: 1674..1675,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 83,
            column: 18,
            span: 1676..1677,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 19,
            span: 1676..1678,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 20,
            span: 1678..1679,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 24,
            span: 1679..1683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 25,
            span: 1683..1684,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 27,
            span: 1684..1686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 28,
            span: 1686..1687,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 32,
            span: 1687..1691,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 33,
            span: 1691..1692,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 35,
            span: 1692..1694,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 36,
            span: 1694..1695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 40,
            span: 1695..1699,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 83,
            column: 41,
            span: 1699..1700,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 42,
            span: 1700..1701,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 89,
            column: 9,
            span: 1762..1770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 89,
            column: 15,
            span: 1771..1776,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 17,
            span: 1777..1778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 89,
            column: 18,
            span: 1778..1779,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 19,
            span: 1779..1780,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 89,
            column: 23,
            span: 1781..1784,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 24,
            span: 1784..1785,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 90,
            column: 8,
            span: 1788..1793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 90,
            column: 12,
            span: 1794..1797,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 90,
            column: 14,
            span: 1798..1799,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 90,
            column: 16,
            span: 1800..1801,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 90,
            column: 19,
            span: 1801..1804,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 90,
            column: 20,
            span: 1804..1805,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 91,
            column: 8,
            span: 1808..1813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 91,
            column: 10,
            span: 1814..1815,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 91,
            column: 12,
            span: 1816..1817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 91,
            column: 14,
            span: 1818..1819,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 91,
            column: 15,
            span: 1819..1820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        position: Position {
            line: 91,
            column: 23,
            span: 1820..1828,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 24,
            span: 1828..1829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 91,
            column: 25,
            span: 1829..1830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 91,
            column: 26,
            span: 1830..1831,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 92,
            column: 6,
            span: 1834..1837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 92,
            column: 8,
            span: 1838..1839,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 92,
            column: 9,
            span: 1839..1840,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 10,
            span: 1839..1841,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 11,
            span: 1841..1842,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 92,
            column: 13,
            span: 1843..1844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 92,
            column: 16,
            span: 1844..1847,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 92,
            column: 0,
            span: 1848..1850,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 93,
            column: 10,
            span: 1855..1860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "opcode",
        ),
        position: Position {
            line: 93,
            column: 17,
            span: 1861..1867,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 93,
            column: 19,
            span: 1868..1869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 93,
            column: 26,
            span: 1870..1876,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 93,
            column: 27,
            span: 1876..1877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 93,
            column: 32,
            span: 1877..1882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 33,
            span: 1882..1883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 93,
            column: 34,
            span: 1883..1884,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 93,
            column: 35,
            span: 1884..1885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 93,
            column: 36,
            span: 1885..1886,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 93,
            column: 37,
            span: 1886..1887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 38,
            span: 1887..1888,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%u%w+\"",
        ),
        position: Position {
            line: 93,
            column: 46,
            span: 1889..1896,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 47,
            span: 1896..1897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 95,
            column: 11,
            span: 1931..1937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 12,
            span: 1937..1938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 95,
            column: 15,
            span: 1938..1941,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 95,
            column: 16,
            span: 1941..1942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 95,
            column: 17,
            span: 1942..1943,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 95,
            column: 18,
            span: 1943..1944,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 95,
            column: 21,
            span: 1945..1947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "opcode",
        ),
        position: Position {
            line: 95,
            column: 28,
            span: 1948..1954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 29,
            span: 1954..1955,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 1958..1961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 97,
            column: 9,
            span: 1964..1970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 1970..1971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 97,
            column: 11,
            span: 1971..1972,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 97,
            column: 12,
            span: 1972..1973,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 97,
            column: 13,
            span: 1973..1974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 97,
            column: 16,
            span: 1974..1977,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 97,
            column: 17,
            span: 1977..1978,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 18,
            span: 1977..1979,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 97,
            column: 19,
            span: 1979..1980,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 97,
            column: 22,
            span: 1981..1983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        position: Position {
            line: 97,
            column: 28,
            span: 1984..1989,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 29,
            span: 1989..1990,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 98,
            column: 0,
            span: 1991..1994,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 102,
            column: 9,
            span: 2057..2065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 102,
            column: 16,
            span: 2066..2072,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 18,
            span: 2073..2074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 102,
            column: 19,
            span: 2074..2075,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 20,
            span: 2075..2076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 102,
            column: 22,
            span: 2077..2078,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 23,
            span: 2078..2079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 102,
            column: 25,
            span: 2080..2081,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 26,
            span: 2081..2082,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 102,
            column: 30,
            span: 2083..2086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 31,
            span: 2086..2087,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 103,
            column: 8,
            span: 2090..2095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r1",
        ),
        position: Position {
            line: 103,
            column: 11,
            span: 2096..2098,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 103,
            column: 13,
            span: 2099..2100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 103,
            column: 15,
            span: 2101..2102,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 16,
            span: 2102..2103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 103,
            column: 17,
            span: 2103..2104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 18,
            span: 2104..2105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 104,
            column: 9,
            span: 2108..2114,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 10,
            span: 2114..2115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 104,
            column: 11,
            span: 2115..2116,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 104,
            column: 14,
            span: 2117..2119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r1",
        ),
        position: Position {
            line: 104,
            column: 17,
            span: 2120..2122,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 104,
            column: 21,
            span: 2123..2126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 104,
            column: 26,
            span: 2127..2131,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 104,
            column: 27,
            span: 2131..2132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 104,
            column: 31,
            span: 2132..2136,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 32,
            span: 2136..2137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 104,
            column: 33,
            span: 2137..2138,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 34,
            span: 2138..2139,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 104,
            column: 37,
            span: 2140..2142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 104,
            column: 42,
            span: 2143..2147,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 104,
            column: 43,
            span: 2147..2148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 104,
            column: 47,
            span: 2148..2152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 48,
            span: 2152..2153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r1",
        ),
        position: Position {
            line: 104,
            column: 50,
            span: 2153..2155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 51,
            span: 2155..2156,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 52,
            span: 2156..2157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 105,
            column: 8,
            span: 2160..2165,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 9,
            span: 2165..2166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 105,
            column: 10,
            span: 2166..2167,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 11,
            span: 2167..2168,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 105,
            column: 15,
            span: 2169..2172,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 105,
            column: 16,
            span: 2172..2173,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 106,
            column: 0,
            span: 2174..2177,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 110,
            column: 9,
            span: 2227..2235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        position: Position {
            line: 110,
            column: 20,
            span: 2236..2246,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 22,
            span: 2247..2248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 110,
            column: 23,
            span: 2248..2249,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 24,
            span: 2249..2250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 110,
            column: 26,
            span: 2251..2252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 27,
            span: 2252..2253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 111,
            column: 4,
            span: 2256..2257,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 111,
            column: 6,
            span: 2258..2259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 111,
            column: 8,
            span: 2260..2261,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 111,
            column: 9,
            span: 2261..2262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        position: Position {
            line: 111,
            column: 17,
            span: 2262..2270,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 18,
            span: 2270..2271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 111,
            column: 19,
            span: 2271..2272,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 20,
            span: 2272..2273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 112,
            column: 4,
            span: 2276..2277,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 112,
            column: 6,
            span: 2278..2279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 112,
            column: 8,
            span: 2280..2281,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 112,
            column: 9,
            span: 2281..2282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        position: Position {
            line: 112,
            column: 17,
            span: 2282..2290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 18,
            span: 2290..2291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 112,
            column: 19,
            span: 2291..2292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 20,
            span: 2292..2293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 113,
            column: 9,
            span: 2296..2302,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 10,
            span: 2302..2303,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 113,
            column: 11,
            span: 2303..2304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 113,
            column: 12,
            span: 2304..2305,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 113,
            column: 15,
            span: 2306..2308,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 113,
            column: 17,
            span: 2309..2310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 113,
            column: 18,
            span: 2310..2311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 19,
            span: 2311..2312,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 114,
            column: 6,
            span: 2315..2318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 114,
            column: 8,
            span: 2319..2320,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 114,
            column: 10,
            span: 2321..2322,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 12,
            span: 2322..2324,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 13,
            span: 2324..2325,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 114,
            column: 15,
            span: 2326..2327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 114,
            column: 16,
            span: 2327..2328,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 114,
            column: 0,
            span: 2329..2331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 115,
            column: 6,
            span: 2336..2337,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 115,
            column: 7,
            span: 2337..2338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 115,
            column: 8,
            span: 2338..2339,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 115,
            column: 9,
            span: 2339..2340,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 115,
            column: 11,
            span: 2341..2342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 115,
            column: 18,
            span: 2343..2349,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 115,
            column: 19,
            span: 2349..2350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 115,
            column: 23,
            span: 2350..2354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 115,
            column: 24,
            span: 2354..2355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 115,
            column: 25,
            span: 2355..2356,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 115,
            column: 26,
            span: 2356..2357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 115,
            column: 27,
            span: 2357..2358,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 115,
            column: 28,
            span: 2358..2359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 29,
            span: 2359..2360,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%b()'",
        ),
        position: Position {
            line: 115,
            column: 36,
            span: 2361..2367,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 37,
            span: 2367..2368,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 115,
            column: 40,
            span: 2369..2371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 41,
            span: 2371..2372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 116,
            column: 6,
            span: 2401..2402,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 116,
            column: 7,
            span: 2402..2403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 2403..2404,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 116,
            column: 9,
            span: 2404..2405,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 116,
            column: 11,
            span: 2406..2407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 116,
            column: 18,
            span: 2408..2414,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 116,
            column: 19,
            span: 2414..2415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 116,
            column: 23,
            span: 2415..2419,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 24,
            span: 2419..2420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 116,
            column: 25,
            span: 2420..2421,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 116,
            column: 26,
            span: 2421..2422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 116,
            column: 27,
            span: 2422..2423,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 116,
            column: 28,
            span: 2423..2424,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 29,
            span: 2424..2425,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%b()'",
        ),
        position: Position {
            line: 116,
            column: 36,
            span: 2426..2432,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 37,
            span: 2432..2433,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 116,
            column: 40,
            span: 2434..2436,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 41,
            span: 2436..2437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 117,
            column: 11,
            span: 2466..2472,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 12,
            span: 2472..2473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 117,
            column: 13,
            span: 2473..2474,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 117,
            column: 14,
            span: 2474..2475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 117,
            column: 15,
            span: 2475..2476,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 117,
            column: 16,
            span: 2476..2477,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 117,
            column: 19,
            span: 2478..2480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 117,
            column: 21,
            span: 2481..2482,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 117,
            column: 22,
            span: 2482..2483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 117,
            column: 23,
            span: 2483..2484,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 117,
            column: 24,
            span: 2484..2485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 25,
            span: 2485..2486,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 118,
            column: 0,
            span: 2489..2492,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 119,
            column: 0,
            span: 2493..2496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 123,
            column: 6,
            span: 2526..2531,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 7,
            span: 2531..2532,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 123,
            column: 15,
            span: 2532..2540,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 17,
            span: 2541..2542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 18,
            span: 2542..2543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 4,
            span: 2585..2586,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 124,
            column: 12,
            span: 2586..2594,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 14,
            span: 2595..2596,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 15,
            span: 2596..2597,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 124,
            column: 19,
            span: 2598..2601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 20,
            span: 2601..2602,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 124,
            column: 21,
            span: 2602..2603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 124,
            column: 22,
            span: 2603..2604,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 23,
            span: 2604..2605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 24,
            span: 2605..2606,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 124,
            column: 25,
            span: 2606..2607,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 125,
            column: 4,
            span: 2608..2611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 5,
            span: 2611..2612,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CLOSURE'",
        ),
        position: Position {
            line: 125,
            column: 15,
            span: 2613..2622,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 16,
            span: 2622..2623,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'NEWTABLE'",
        ),
        position: Position {
            line: 125,
            column: 27,
            span: 2624..2634,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 28,
            span: 2634..2635,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EXTRAARG'",
        ),
        position: Position {
            line: 125,
            column: 39,
            span: 2636..2646,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 40,
            span: 2646..2647,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABUP'",
        ),
        position: Position {
            line: 125,
            column: 51,
            span: 2648..2658,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 52,
            span: 2658..2659,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        position: Position {
            line: 125,
            column: 59,
            span: 2660..2666,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 60,
            span: 2666..2667,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETLIST'",
        ),
        position: Position {
            line: 126,
            column: 15,
            span: 2673..2682,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 16,
            span: 2682..2683,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        position: Position {
            line: 126,
            column: 23,
            span: 2684..2690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 24,
            span: 2690..2691,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 126,
            column: 34,
            span: 2692..2701,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 35,
            span: 2701..2702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 128,
            column: 6,
            span: 2704..2709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 7,
            span: 2709..2710,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 128,
            column: 15,
            span: 2710..2718,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 17,
            span: 2719..2720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 128,
            column: 18,
            span: 2720..2721,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 19,
            span: 2721..2722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 4,
            span: 2756..2757,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 129,
            column: 12,
            span: 2757..2765,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 14,
            span: 2766..2767,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 15,
            span: 2767..2768,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 129,
            column: 22,
            span: 2769..2775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 129,
            column: 24,
            span: 2776..2777,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 129,
            column: 28,
            span: 2778..2781,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 29,
            span: 2781..2782,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 129,
            column: 30,
            span: 2782..2783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 129,
            column: 31,
            span: 2783..2784,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 32,
            span: 2784..2785,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 33,
            span: 2785..2786,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 129,
            column: 34,
            span: 2786..2787,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 130,
            column: 4,
            span: 2788..2791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 5,
            span: 2791..2792,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CLOSURE'",
        ),
        position: Position {
            line: 130,
            column: 15,
            span: 2793..2802,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 16,
            span: 2802..2803,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'NEWTABLE'",
        ),
        position: Position {
            line: 130,
            column: 27,
            span: 2804..2814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 28,
            span: 2814..2815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EXTRAARG'",
        ),
        position: Position {
            line: 130,
            column: 39,
            span: 2816..2826,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 40,
            span: 2826..2827,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABUP'",
        ),
        position: Position {
            line: 130,
            column: 51,
            span: 2828..2838,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 52,
            span: 2838..2839,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        position: Position {
            line: 130,
            column: 59,
            span: 2840..2846,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 60,
            span: 2846..2847,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETLIST'",
        ),
        position: Position {
            line: 131,
            column: 15,
            span: 2853..2862,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 16,
            span: 2862..2863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        position: Position {
            line: 131,
            column: 23,
            span: 2864..2870,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 24,
            span: 2870..2871,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 131,
            column: 33,
            span: 2872..2880,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 34,
            span: 2880..2881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 135,
            column: 6,
            span: 2908..2913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 7,
            span: 2913..2914,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 135,
            column: 15,
            span: 2914..2922,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 17,
            span: 2923..2924,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 18,
            span: 2924..2925,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 136,
            column: 8,
            span: 2928..2933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kNil",
        ),
        position: Position {
            line: 136,
            column: 13,
            span: 2934..2938,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 136,
            column: 15,
            span: 2939..2940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 136,
            column: 20,
            span: 2940..2945,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 136,
            column: 21,
            span: 2945..2946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 136,
            column: 23,
            span: 2947..2948,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 136,
            column: 0,
            span: 2949..2952,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 137,
            column: 8,
            span: 2955..2960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 137,
            column: 10,
            span: 2961..2962,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 11,
            span: 2962..2963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 137,
            column: 12,
            span: 2963..2964,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 13,
            span: 2964..2965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 137,
            column: 0,
            span: 2965..2966,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 138,
            column: 8,
            span: 2969..2974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 138,
            column: 10,
            span: 2975..2976,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 138,
            column: 11,
            span: 2976..2977,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 138,
            column: 17,
            span: 2978..2983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 138,
            column: 19,
            span: 2984..2985,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 138,
            column: 20,
            span: 2985..2986,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 139,
            column: 8,
            span: 2989..2994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 139,
            column: 10,
            span: 2995..2996,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 11,
            span: 2996..2997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 139,
            column: 12,
            span: 2997..2998,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 13,
            span: 2998..2999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 139,
            column: 14,
            span: 2999..3000,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 139,
            column: 15,
            span: 3000..3001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 140,
            column: 4,
            span: 3004..3005,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 6,
            span: 3006..3007,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 140,
            column: 10,
            span: 3008..3011,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 140,
            column: 11,
            span: 3011..3012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 140,
            column: 13,
            span: 3013..3014,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 14,
            span: 3014..3015,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 140,
            column: 17,
            span: 3015..3018,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 140,
            column: 18,
            span: 3018..3019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 140,
            column: 20,
            span: 3020..3021,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 21,
            span: 3021..3022,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 140,
            column: 24,
            span: 3022..3025,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 140,
            column: 25,
            span: 3025..3026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 140,
            column: 27,
            span: 3027..3028,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 28,
            span: 3028..3029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kNil",
        ),
        position: Position {
            line: 140,
            column: 32,
            span: 3029..3033,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 140,
            column: 33,
            span: 3033..3034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 140,
            column: 35,
            span: 3035..3036,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 36,
            span: 3036..3037,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 140,
            column: 39,
            span: 3037..3040,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 140,
            column: 40,
            span: 3040..3041,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 141,
            column: 4,
            span: 3042..3045,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 5,
            span: 3045..3046,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        position: Position {
            line: 141,
            column: 15,
            span: 3047..3056,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 16,
            span: 3056..3057,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 141,
            column: 26,
            span: 3058..3067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 27,
            span: 3067..3068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 143,
            column: 6,
            span: 3070..3075,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 7,
            span: 3075..3076,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 143,
            column: 15,
            span: 3076..3084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 17,
            span: 3085..3086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 18,
            span: 3086..3087,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 144,
            column: 8,
            span: 3090..3095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 3096..3097,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 11,
            span: 3097..3098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 144,
            column: 12,
            span: 3098..3099,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 13,
            span: 3099..3100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 144,
            column: 14,
            span: 3100..3101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 15,
            span: 3101..3102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 144,
            column: 16,
            span: 3102..3103,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 144,
            column: 18,
            span: 3104..3105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 144,
            column: 20,
            span: 3105..3107,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 21,
            span: 3107..3108,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 144,
            column: 22,
            span: 3107..3109,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 23,
            span: 3109..3110,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 144,
            column: 24,
            span: 3109..3111,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 25,
            span: 3111..3112,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 144,
            column: 0,
            span: 3111..3113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 145,
            column: 4,
            span: 3116..3117,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 5,
            span: 3117..3118,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 145,
            column: 8,
            span: 3118..3121,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 145,
            column: 9,
            span: 3121..3122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 145,
            column: 10,
            span: 3122..3123,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 11,
            span: 3123..3124,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 145,
            column: 14,
            span: 3124..3127,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 145,
            column: 15,
            span: 3127..3128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 145,
            column: 16,
            span: 3128..3129,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 17,
            span: 3129..3130,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 145,
            column: 20,
            span: 3130..3133,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 145,
            column: 21,
            span: 3133..3134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 145,
            column: 22,
            span: 3134..3135,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 23,
            span: 3135..3136,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 145,
            column: 0,
            span: 3136..3139,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 146,
            column: 4,
            span: 3140..3143,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 5,
            span: 3143..3144,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 146,
            column: 13,
            span: 3145..3152,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 14,
            span: 3152..3153,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 146,
            column: 22,
            span: 3154..3161,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 23,
            span: 3161..3162,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 146,
            column: 31,
            span: 3163..3170,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 32,
            span: 3170..3171,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 146,
            column: 40,
            span: 3172..3179,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 41,
            span: 3179..3180,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        position: Position {
            line: 146,
            column: 51,
            span: 3181..3190,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 52,
            span: 3190..3191,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 146,
            column: 62,
            span: 3192..3201,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 63,
            span: 3201..3202,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 148,
            column: 0,
            span: 3204..3206,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 3209..3214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 149,
            column: 10,
            span: 3215..3216,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 11,
            span: 3216..3217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 149,
            column: 12,
            span: 3217..3218,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 13,
            span: 3218..3219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 149,
            column: 14,
            span: 3219..3220,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 15,
            span: 3220..3221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 149,
            column: 16,
            span: 3221..3222,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 18,
            span: 3223..3224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 20,
            span: 3224..3226,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 21,
            span: 3226..3227,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 22,
            span: 3226..3228,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 23,
            span: 3228..3229,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 24,
            span: 3228..3230,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 25,
            span: 3230..3231,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 0,
            span: 3230..3232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 150,
            column: 4,
            span: 3235..3236,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 5,
            span: 3236..3237,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 150,
            column: 8,
            span: 3237..3240,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 150,
            column: 9,
            span: 3240..3241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 150,
            column: 10,
            span: 3241..3242,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 11,
            span: 3242..3243,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 3243..3246,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 150,
            column: 15,
            span: 3246..3247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 150,
            column: 16,
            span: 3247..3248,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 17,
            span: 3248..3249,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 150,
            column: 20,
            span: 3249..3252,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 150,
            column: 21,
            span: 3252..3253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 3253..3254,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 23,
            span: 3254..3255,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 150,
            column: 0,
            span: 3255..3258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 151,
            column: 9,
            span: 3261..3267,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 10,
            span: 3267..3268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 151,
            column: 11,
            span: 3268..3269,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 151,
            column: 14,
            span: 3270..3272,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 151,
            column: 18,
            span: 3273..3276,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 151,
            column: 22,
            span: 3277..3280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 151,
            column: 24,
            span: 3281..3282,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 151,
            column: 27,
            span: 3283..3285,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 151,
            column: 31,
            span: 3286..3289,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 151,
            column: 35,
            span: 3290..3293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 151,
            column: 37,
            span: 3294..3295,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 151,
            column: 40,
            span: 3296..3298,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 151,
            column: 44,
            span: 3299..3302,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 151,
            column: 48,
            span: 3303..3306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 151,
            column: 50,
            span: 3307..3308,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 151,
            column: 53,
            span: 3309..3311,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 151,
            column: 57,
            span: 3312..3315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 58,
            span: 3315..3316,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 152,
            column: 0,
            span: 3317..3320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 156,
            column: 6,
            span: 3340..3345,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 8,
            span: 3346..3347,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 156,
            column: 16,
            span: 3347..3355,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 18,
            span: 3356..3357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 156,
            column: 19,
            span: 3357..3358,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 20,
            span: 3358..3359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 156,
            column: 21,
            span: 3359..3360,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 22,
            span: 3360..3361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 156,
            column: 23,
            span: 3361..3362,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 24,
            span: 3362..3363,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 156,
            column: 31,
            span: 3364..3370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 156,
            column: 33,
            span: 3371..3372,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 156,
            column: 37,
            span: 3373..3376,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 38,
            span: 3376..3377,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 156,
            column: 48,
            span: 3378..3387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 49,
            span: 3387..3388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 160,
            column: 6,
            span: 3409..3414,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 7,
            span: 3414..3415,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 160,
            column: 15,
            span: 3415..3423,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 17,
            span: 3424..3425,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 18,
            span: 3425..3426,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 160,
            column: 24,
            span: 3427..3432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kTrue",
        ),
        position: Position {
            line: 160,
            column: 30,
            span: 3433..3438,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 160,
            column: 33,
            span: 3439..3441,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 160,
            column: 39,
            span: 3442..3447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 160,
            column: 41,
            span: 3448..3449,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 160,
            column: 43,
            span: 3450..3451,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 160,
            column: 45,
            span: 3452..3453,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 160,
            column: 46,
            span: 3452..3454,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 160,
            column: 50,
            span: 3455..3458,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 160,
            column: 54,
            span: 3459..3462,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 55,
            span: 3462..3463,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 161,
            column: 8,
            span: 3464..3471,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 161,
            column: 9,
            span: 3471..3472,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 161,
            column: 15,
            span: 3473..3478,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 161,
            column: 16,
            span: 3478..3479,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 161,
            column: 26,
            span: 3480..3489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 27,
            span: 3489..3490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 163,
            column: 6,
            span: 3492..3497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 7,
            span: 3497..3498,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 163,
            column: 15,
            span: 3498..3506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 17,
            span: 3507..3508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 18,
            span: 3508..3509,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 163,
            column: 24,
            span: 3510..3515,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 26,
            span: 3515..3517,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 163,
            column: 29,
            span: 3518..3520,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 163,
            column: 35,
            span: 3521..3526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 37,
            span: 3527..3528,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 163,
            column: 39,
            span: 3529..3530,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 163,
            column: 41,
            span: 3531..3532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 42,
            span: 3531..3533,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 163,
            column: 46,
            span: 3534..3537,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 163,
            column: 50,
            span: 3538..3541,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 51,
            span: 3541..3542,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 164,
            column: 8,
            span: 3543..3550,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 164,
            column: 9,
            span: 3550..3551,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 164,
            column: 15,
            span: 3552..3557,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 164,
            column: 16,
            span: 3557..3558,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 164,
            column: 26,
            span: 3559..3568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 27,
            span: 3568..3569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 166,
            column: 6,
            span: 3571..3576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 7,
            span: 3576..3577,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 166,
            column: 15,
            span: 3577..3585,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 17,
            span: 3586..3587,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 18,
            span: 3587..3588,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 166,
            column: 25,
            span: 3589..3595,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 166,
            column: 31,
            span: 3596..3601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 166,
            column: 33,
            span: 3602..3603,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 166,
            column: 35,
            span: 3604..3605,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 37,
            span: 3605..3607,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 166,
            column: 43,
            span: 3608..3613,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 166,
            column: 48,
            span: 3614..3618,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 166,
            column: 52,
            span: 3619..3622,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 53,
            span: 3622..3623,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 167,
            column: 8,
            span: 3624..3631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 9,
            span: 3631..3632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 167,
            column: 19,
            span: 3633..3642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 20,
            span: 3642..3643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 171,
            column: 6,
            span: 3669..3674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 7,
            span: 3674..3675,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 171,
            column: 15,
            span: 3675..3683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 17,
            span: 3684..3685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 171,
            column: 18,
            span: 3685..3686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 19,
            span: 3686..3687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 171,
            column: 20,
            span: 3687..3688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 21,
            span: 3688..3689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 171,
            column: 22,
            span: 3689..3690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 23,
            span: 3690..3691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 171,
            column: 24,
            span: 3691..3692,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 25,
            span: 3692..3693,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 171,
            column: 32,
            span: 3694..3700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 171,
            column: 34,
            span: 3701..3702,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 171,
            column: 36,
            span: 3702..3704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 171,
            column: 37,
            span: 3704..3705,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 171,
            column: 39,
            span: 3705..3707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 171,
            column: 40,
            span: 3707..3708,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 171,
            column: 42,
            span: 3708..3710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 171,
            column: 43,
            span: 3710..3711,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 171,
            column: 47,
            span: 3712..3715,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 48,
            span: 3715..3716,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 172,
            column: 9,
            span: 3719..3725,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 10,
            span: 3725..3726,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 172,
            column: 17,
            span: 3727..3733,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 18,
            span: 3733..3734,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 172,
            column: 25,
            span: 3735..3741,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 26,
            span: 3741..3742,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 172,
            column: 33,
            span: 3743..3749,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 34,
            span: 3749..3750,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CONCAT'",
        ),
        position: Position {
            line: 172,
            column: 43,
            span: 3751..3759,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 44,
            span: 3759..3760,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 172,
            column: 54,
            span: 3761..3770,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 55,
            span: 3770..3771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 175,
            column: 6,
            span: 3780..3785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 7,
            span: 3785..3786,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 175,
            column: 15,
            span: 3786..3794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 17,
            span: 3795..3796,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 18,
            span: 3796..3797,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 175,
            column: 25,
            span: 3798..3804,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 175,
            column: 29,
            span: 3805..3808,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 175,
            column: 33,
            span: 3809..3812,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 175,
            column: 37,
            span: 3813..3816,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 175,
            column: 41,
            span: 3817..3820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 175,
            column: 42,
            span: 3820..3821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADFALSE'",
        ),
        position: Position {
            line: 175,
            column: 54,
            span: 3822..3833,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 175,
            column: 55,
            span: 3833..3834,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 175,
            column: 65,
            span: 3835..3844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 66,
            span: 3844..3845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 176,
            column: 6,
            span: 3846..3851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 7,
            span: 3851..3852,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 176,
            column: 15,
            span: 3852..3860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 17,
            span: 3861..3862,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 18,
            span: 3862..3863,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 176,
            column: 25,
            span: 3864..3870,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 176,
            column: 29,
            span: 3871..3874,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 176,
            column: 33,
            span: 3875..3878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kFalse",
        ),
        position: Position {
            line: 176,
            column: 40,
            span: 3879..3885,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 176,
            column: 44,
            span: 3886..3889,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 176,
            column: 45,
            span: 3889..3890,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADFALSE'",
        ),
        position: Position {
            line: 176,
            column: 57,
            span: 3891..3902,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 176,
            column: 58,
            span: 3902..3903,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 176,
            column: 68,
            span: 3904..3913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 69,
            span: 3913..3914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 177,
            column: 6,
            span: 3915..3920,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 7,
            span: 3920..3921,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 177,
            column: 15,
            span: 3921..3929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 17,
            span: 3930..3931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 18,
            span: 3931..3932,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 177,
            column: 25,
            span: 3933..3939,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 177,
            column: 29,
            span: 3940..3943,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 177,
            column: 33,
            span: 3944..3947,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 177,
            column: 38,
            span: 3948..3952,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 177,
            column: 42,
            span: 3953..3956,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 177,
            column: 43,
            span: 3956..3957,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADTRUE'",
        ),
        position: Position {
            line: 177,
            column: 54,
            span: 3958..3968,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 177,
            column: 55,
            span: 3968..3969,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 177,
            column: 65,
            span: 3970..3979,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 66,
            span: 3979..3980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 178,
            column: 6,
            span: 3981..3986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 7,
            span: 3986..3987,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 178,
            column: 15,
            span: 3987..3995,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 17,
            span: 3996..3997,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 178,
            column: 18,
            span: 3997..3998,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 178,
            column: 25,
            span: 3999..4005,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 178,
            column: 29,
            span: 4006..4009,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 178,
            column: 33,
            span: 4010..4013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3",
        ),
        position: Position {
            line: 178,
            column: 36,
            span: 4014..4016,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 178,
            column: 40,
            span: 4017..4020,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 41,
            span: 4020..4021,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADTRUE'",
        ),
        position: Position {
            line: 178,
            column: 52,
            span: 4022..4032,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 53,
            span: 4032..4033,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 178,
            column: 63,
            span: 4034..4043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 178,
            column: 64,
            span: 4043..4044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 181,
            column: 6,
            span: 4073..4078,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 7,
            span: 4078..4079,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 181,
            column: 15,
            span: 4079..4087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 17,
            span: 4088..4089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 18,
            span: 4089..4090,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 182,
            column: 8,
            span: 4093..4098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 182,
            column: 10,
            span: 4099..4100,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 11,
            span: 4100..4101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 182,
            column: 12,
            span: 4101..4102,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 13,
            span: 4102..4103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 182,
            column: 14,
            span: 4103..4104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 15,
            span: 4104..4105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 182,
            column: 0,
            span: 4105..4106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 183,
            column: 4,
            span: 4109..4110,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 183,
            column: 6,
            span: 4111..4112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 183,
            column: 8,
            span: 4113..4114,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 183,
            column: 9,
            span: 4114..4115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 183,
            column: 0,
            span: 4115..4116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 184,
            column: 4,
            span: 4119..4120,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 184,
            column: 5,
            span: 4120..4121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 184,
            column: 6,
            span: 4121..4122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 184,
            column: 7,
            span: 4122..4123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 184,
            column: 9,
            span: 4124..4125,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 184,
            column: 10,
            span: 4125..4126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 184,
            column: 11,
            span: 4126..4127,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 184,
            column: 12,
            span: 4127..4128,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 184,
            column: 14,
            span: 4129..4130,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 184,
            column: 16,
            span: 4131..4132,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 17,
            span: 4132..4133,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 18,
            span: 4133..4134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 184,
            column: 19,
            span: 4134..4135,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 184,
            column: 21,
            span: 4136..4137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 184,
            column: 23,
            span: 4138..4139,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 184,
            column: 24,
            span: 4139..4140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 184,
            column: 25,
            span: 4140..4141,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 184,
            column: 27,
            span: 4142..4143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 184,
            column: 29,
            span: 4144..4145,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 184,
            column: 30,
            span: 4145..4146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 184,
            column: 31,
            span: 4146..4147,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 184,
            column: 32,
            span: 4147..4148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 33,
            span: 4148..4149,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 184,
            column: 35,
            span: 4150..4151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 184,
            column: 37,
            span: 4152..4153,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 184,
            column: 38,
            span: 4153..4154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 184,
            column: 39,
            span: 4154..4155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 40,
            span: 4155..4156,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 184,
            column: 41,
            span: 4156..4157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 184,
            column: 0,
            span: 4158..4159,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 185,
            column: 4,
            span: 4160..4163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 185,
            column: 5,
            span: 4163..4164,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        position: Position {
            line: 186,
            column: 12,
            span: 4167..4176,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 186,
            column: 13,
            span: 4176..4177,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MUL'",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 4180..4185,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 9,
            span: 4185..4186,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBIN'",
        ),
        position: Position {
            line: 187,
            column: 17,
            span: 4187..4194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 18,
            span: 4194..4195,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIV'",
        ),
        position: Position {
            line: 188,
            column: 8,
            span: 4198..4203,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 9,
            span: 4203..4204,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBIN'",
        ),
        position: Position {
            line: 188,
            column: 17,
            span: 4205..4212,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 18,
            span: 4212..4213,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ADD'",
        ),
        position: Position {
            line: 188,
            column: 24,
            span: 4214..4219,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 25,
            span: 4219..4220,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBIN'",
        ),
        position: Position {
            line: 188,
            column: 33,
            span: 4221..4228,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 34,
            span: 4228..4229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABLE'",
        ),
        position: Position {
            line: 188,
            column: 45,
            span: 4230..4240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 46,
            span: 4240..4241,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SUB'",
        ),
        position: Position {
            line: 188,
            column: 52,
            span: 4242..4247,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 53,
            span: 4247..4248,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBIN'",
        ),
        position: Position {
            line: 188,
            column: 61,
            span: 4249..4256,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 62,
            span: 4256..4257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETFIELD'",
        ),
        position: Position {
            line: 189,
            column: 13,
            span: 4260..4270,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 14,
            span: 4270..4271,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'POW'",
        ),
        position: Position {
            line: 189,
            column: 20,
            span: 4272..4277,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 21,
            span: 4277..4278,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBIN'",
        ),
        position: Position {
            line: 189,
            column: 29,
            span: 4279..4286,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 30,
            span: 4286..4287,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'UNM'",
        ),
        position: Position {
            line: 189,
            column: 36,
            span: 4288..4293,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 37,
            span: 4293..4294,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 189,
            column: 48,
            span: 4295..4305,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 49,
            span: 4305..4306,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETFIELD'",
        ),
        position: Position {
            line: 189,
            column: 60,
            span: 4307..4317,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 61,
            span: 4317..4318,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 189,
            column: 71,
            span: 4319..4328,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 72,
            span: 4328..4329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 193,
            column: 6,
            span: 4362..4367,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 7,
            span: 4367..4368,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 193,
            column: 15,
            span: 4368..4376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 17,
            span: 4377..4378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 18,
            span: 4378..4379,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 194,
            column: 8,
            span: 4382..4387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 194,
            column: 10,
            span: 4388..4389,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 11,
            span: 4389..4390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 194,
            column: 0,
            span: 4390..4391,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 195,
            column: 8,
            span: 4394..4399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 195,
            column: 10,
            span: 4400..4401,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 195,
            column: 12,
            span: 4402..4403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kNil",
        ),
        position: Position {
            line: 195,
            column: 0,
            span: 4404..4408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 196,
            column: 4,
            span: 4411..4412,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 196,
            column: 5,
            span: 4412..4413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kx",
        ),
        position: Position {
            line: 196,
            column: 7,
            span: 4413..4415,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 196,
            column: 8,
            span: 4415..4416,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 196,
            column: 10,
            span: 4417..4418,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".2",
                },
            ),
        ),
        position: Position {
            line: 196,
            column: 0,
            span: 4418..4422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 197,
            column: 4,
            span: 4425..4426,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 5,
            span: 4426..4427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 197,
            column: 6,
            span: 4427..4428,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 197,
            column: 8,
            span: 4429..4430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 197,
            column: 0,
            span: 4431..4432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 198,
            column: 4,
            span: 4435..4436,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 198,
            column: 5,
            span: 4436..4437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 198,
            column: 6,
            span: 4437..4438,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 198,
            column: 7,
            span: 4438..4439,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 198,
            column: 9,
            span: 4440..4441,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 198,
            column: 13,
            span: 4442..4445,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 199,
            column: 4,
            span: 4446..4449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 199,
            column: 5,
            span: 4449..4450,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        position: Position {
            line: 200,
            column: 12,
            span: 4453..4462,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 13,
            span: 4462..4463,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETFIELD'",
        ),
        position: Position {
            line: 200,
            column: 24,
            span: 4464..4474,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 25,
            span: 4474..4475,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETFIELD'",
        ),
        position: Position {
            line: 200,
            column: 36,
            span: 4476..4486,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 37,
            span: 4486..4487,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 200,
            column: 48,
            span: 4488..4498,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 49,
            span: 4498..4499,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 200,
            column: 59,
            span: 4500..4509,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 60,
            span: 4509..4510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 203,
            column: 6,
            span: 4552..4557,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 7,
            span: 4557..4558,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 203,
            column: 15,
            span: 4558..4566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 17,
            span: 4567..4568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 203,
            column: 18,
            span: 4568..4569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 19,
            span: 4569..4570,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 204,
            column: 8,
            span: 4573..4578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k255",
        ),
        position: Position {
            line: 204,
            column: 13,
            span: 4579..4583,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 204,
            column: 15,
            span: 4584..4585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 204,
            column: 20,
            span: 4585..4590,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 204,
            column: 21,
            span: 4590..4591,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 204,
            column: 23,
            span: 4592..4593,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 0,
            span: 4593..4597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 205,
            column: 4,
            span: 4600..4601,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 205,
            column: 5,
            span: 4601..4602,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 205,
            column: 6,
            span: 4601..4603,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 205,
            column: 7,
            span: 4603..4604,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 205,
            column: 9,
            span: 4605..4606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 205,
            column: 11,
            span: 4607..4608,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 205,
            column: 12,
            span: 4608..4609,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 205,
            column: 15,
            span: 4608..4612,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 205,
            column: 16,
            span: 4612..4613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 206,
            column: 4,
            span: 4616..4617,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 206,
            column: 5,
            span: 4617..4618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k255",
        ),
        position: Position {
            line: 206,
            column: 9,
            span: 4618..4622,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 206,
            column: 10,
            span: 4622..4623,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 206,
            column: 12,
            span: 4624..4625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 206,
            column: 14,
            span: 4626..4627,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 206,
            column: 15,
            span: 4627..4628,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 18,
            span: 4627..4631,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 206,
            column: 19,
            span: 4631..4632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 207,
            column: 4,
            span: 4635..4636,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 207,
            column: 5,
            span: 4636..4637,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 207,
            column: 8,
            span: 4636..4640,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 207,
            column: 9,
            span: 4640..4641,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 207,
            column: 11,
            span: 4642..4643,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 207,
            column: 0,
            span: 4643..4645,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 208,
            column: 4,
            span: 4646..4649,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 5,
            span: 4649..4650,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETI'",
        ),
        position: Position {
            line: 209,
            column: 9,
            span: 4653..4659,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 10,
            span: 4659..4660,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETI'",
        ),
        position: Position {
            line: 209,
            column: 17,
            span: 4661..4667,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 18,
            span: 4667..4668,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 210,
            column: 10,
            span: 4671..4678,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 11,
            span: 4678..4679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABLE'",
        ),
        position: Position {
            line: 210,
            column: 22,
            span: 4680..4690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 23,
            span: 4690..4691,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETI'",
        ),
        position: Position {
            line: 210,
            column: 30,
            span: 4692..4698,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 31,
            span: 4698..4699,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 211,
            column: 10,
            span: 4702..4709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 11,
            span: 4709..4710,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 211,
            column: 22,
            span: 4711..4721,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 23,
            span: 4721..4722,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 211,
            column: 34,
            span: 4724..4733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 35,
            span: 4733..4734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 213,
            column: 6,
            span: 4736..4741,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 213,
            column: 7,
            span: 4741..4742,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 213,
            column: 15,
            span: 4742..4750,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 213,
            column: 17,
            span: 4751..4752,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 213,
            column: 18,
            span: 4752..4753,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 214,
            column: 8,
            span: 4756..4761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 214,
            column: 10,
            span: 4762..4763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 11,
            span: 4763..4764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 214,
            column: 0,
            span: 4764..4765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 215,
            column: 4,
            span: 4768..4769,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 215,
            column: 6,
            span: 4770..4771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 215,
            column: 8,
            span: 4772..4773,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 215,
            column: 10,
            span: 4774..4775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 215,
            column: 0,
            span: 4776..4777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 216,
            column: 4,
            span: 4780..4781,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 216,
            column: 6,
            span: 4782..4783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 216,
            column: 8,
            span: 4784..4785,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 216,
            column: 9,
            span: 4785..4786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 216,
            column: 0,
            span: 4786..4787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 217,
            column: 4,
            span: 4790..4791,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 217,
            column: 6,
            span: 4792..4793,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 217,
            column: 8,
            span: 4793..4795,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 217,
            column: 9,
            span: 4795..4796,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 217,
            column: 0,
            span: 4795..4797,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 218,
            column: 4,
            span: 4798..4801,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 5,
            span: 4801..4802,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        position: Position {
            line: 219,
            column: 12,
            span: 4805..4814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 13,
            span: 4814..4815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SUB'",
        ),
        position: Position {
            line: 219,
            column: 19,
            span: 4816..4821,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 20,
            span: 4821..4822,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBIN'",
        ),
        position: Position {
            line: 219,
            column: 28,
            span: 4823..4830,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 29,
            span: 4830..4831,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIV'",
        ),
        position: Position {
            line: 219,
            column: 35,
            span: 4832..4837,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 36,
            span: 4837..4838,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBIN'",
        ),
        position: Position {
            line: 219,
            column: 44,
            span: 4839..4846,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 45,
            span: 4846..4847,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 219,
            column: 53,
            span: 4848..4855,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 54,
            span: 4855..4856,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 219,
            column: 64,
            span: 4857..4866,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 65,
            span: 4866..4867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 221,
            column: 6,
            span: 4869..4874,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 7,
            span: 4874..4875,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 221,
            column: 15,
            span: 4875..4883,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 17,
            span: 4884..4885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 18,
            span: 4885..4886,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 222,
            column: 8,
            span: 4889..4894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 4895..4896,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 11,
            span: 4896..4897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 222,
            column: 0,
            span: 4897..4898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 223,
            column: 4,
            span: 4901..4902,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 223,
            column: 5,
            span: 4902..4903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kTrue",
        ),
        position: Position {
            line: 223,
            column: 10,
            span: 4903..4908,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 223,
            column: 11,
            span: 4908..4909,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 223,
            column: 13,
            span: 4910..4911,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 223,
            column: 0,
            span: 4912..4917,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 224,
            column: 4,
            span: 4918..4921,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 5,
            span: 4921..4922,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        position: Position {
            line: 225,
            column: 12,
            span: 4925..4934,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 13,
            span: 4934..4935,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADTRUE'",
        ),
        position: Position {
            line: 225,
            column: 24,
            span: 4936..4946,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 25,
            span: 4946..4947,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 225,
            column: 36,
            span: 4948..4958,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 37,
            span: 4958..4959,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 225,
            column: 47,
            span: 4960..4969,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 48,
            span: 4969..4970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 229,
            column: 7,
            span: 4987..4993,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 8,
            span: 4993..4994,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 229,
            column: 16,
            span: 4994..5002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 18,
            span: 5003..5004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 229,
            column: 19,
            span: 5004..5005,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 20,
            span: 5005..5006,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 229,
            column: 23,
            span: 5007..5009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 229,
            column: 25,
            span: 5010..5011,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 229,
            column: 28,
            span: 5012..5014,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 30,
            span: 5014..5016,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 229,
            column: 35,
            span: 5017..5021,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 229,
            column: 42,
            span: 5022..5028,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 44,
            span: 5028..5030,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 229,
            column: 48,
            span: 5031..5034,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 229,
            column: 52,
            span: 5035..5038,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 53,
            span: 5038..5039,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 55,
            span: 5039..5041,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 56,
            span: 5041..5042,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 58,
            span: 5042..5044,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 59,
            span: 5044..5045,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQI'",
        ),
        position: Position {
            line: 230,
            column: 8,
            span: 5048..5053,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 9,
            span: 5053..5054,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 230,
            column: 15,
            span: 5055..5060,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 16,
            span: 5060..5061,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 230,
            column: 24,
            span: 5062..5069,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 25,
            span: 5069..5070,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 230,
            column: 35,
            span: 5071..5080,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 36,
            span: 5080..5081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 232,
            column: 7,
            span: 5083..5089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 8,
            span: 5089..5090,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 232,
            column: 16,
            span: 5090..5098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 18,
            span: 5099..5100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 232,
            column: 19,
            span: 5100..5101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 20,
            span: 5101..5102,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 232,
            column: 23,
            span: 5103..5105,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 232,
            column: 25,
            span: 5106..5107,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 232,
            column: 28,
            span: 5106..5110,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 232,
            column: 31,
            span: 5111..5113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 232,
            column: 33,
            span: 5114..5115,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 232,
            column: 38,
            span: 5116..5120,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 232,
            column: 45,
            span: 5121..5127,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 232,
            column: 47,
            span: 5127..5129,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 232,
            column: 51,
            span: 5130..5133,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 232,
            column: 55,
            span: 5134..5137,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 56,
            span: 5137..5138,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 232,
            column: 58,
            span: 5139..5140,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 232,
            column: 59,
            span: 5139..5141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 60,
            span: 5141..5142,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 232,
            column: 62,
            span: 5142..5144,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 63,
            span: 5144..5145,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQI'",
        ),
        position: Position {
            line: 233,
            column: 8,
            span: 5148..5153,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 9,
            span: 5153..5154,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 233,
            column: 15,
            span: 5155..5160,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 16,
            span: 5160..5161,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 233,
            column: 24,
            span: 5162..5169,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 25,
            span: 5169..5170,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 233,
            column: 35,
            span: 5171..5180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 36,
            span: 5180..5181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 235,
            column: 7,
            span: 5183..5189,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 8,
            span: 5189..5190,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 235,
            column: 16,
            span: 5190..5198,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 18,
            span: 5199..5200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 235,
            column: 19,
            span: 5200..5201,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 20,
            span: 5201..5202,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 235,
            column: 23,
            span: 5203..5205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 235,
            column: 25,
            span: 5206..5207,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 235,
            column: 28,
            span: 5208..5210,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 235,
            column: 33,
            span: 5211..5215,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 235,
            column: 38,
            span: 5216..5220,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 235,
            column: 45,
            span: 5221..5227,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 235,
            column: 47,
            span: 5227..5229,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 235,
            column: 51,
            span: 5230..5233,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 235,
            column: 55,
            span: 5234..5237,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 56,
            span: 5237..5238,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 235,
            column: 59,
            span: 5238..5241,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 60,
            span: 5241..5242,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 235,
            column: 64,
            span: 5243..5246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 65,
            span: 5246..5247,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQK'",
        ),
        position: Position {
            line: 236,
            column: 8,
            span: 5250..5255,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 9,
            span: 5255..5256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 236,
            column: 15,
            span: 5257..5262,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 16,
            span: 5262..5263,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 236,
            column: 24,
            span: 5264..5271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 25,
            span: 5271..5272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 236,
            column: 35,
            span: 5273..5282,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 36,
            span: 5282..5283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 238,
            column: 7,
            span: 5285..5291,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 8,
            span: 5291..5292,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 238,
            column: 16,
            span: 5292..5300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 18,
            span: 5301..5302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 19,
            span: 5302..5303,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 20,
            span: 5303..5304,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 238,
            column: 23,
            span: 5305..5307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 25,
            span: 5308..5309,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 238,
            column: 28,
            span: 5310..5312,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 34,
            span: 5312..5318,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 238,
            column: 39,
            span: 5319..5323,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 238,
            column: 46,
            span: 5324..5330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 48,
            span: 5330..5332,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 238,
            column: 52,
            span: 5333..5336,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 238,
            column: 56,
            span: 5337..5340,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 57,
            span: 5340..5341,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 59,
            span: 5341..5343,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 60,
            span: 5343..5344,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 238,
            column: 64,
            span: 5345..5348,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 65,
            span: 5348..5349,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQK'",
        ),
        position: Position {
            line: 239,
            column: 8,
            span: 5352..5357,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 9,
            span: 5357..5358,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 239,
            column: 15,
            span: 5359..5364,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 16,
            span: 5364..5365,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 239,
            column: 24,
            span: 5366..5373,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 25,
            span: 5373..5374,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 239,
            column: 35,
            span: 5375..5384,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 36,
            span: 5384..5385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 241,
            column: 7,
            span: 5409..5415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 8,
            span: 5415..5416,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 241,
            column: 16,
            span: 5416..5424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 18,
            span: 5425..5426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 241,
            column: 19,
            span: 5426..5427,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 20,
            span: 5427..5428,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 241,
            column: 23,
            span: 5429..5431,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 241,
            column: 25,
            span: 5432..5433,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 30,
            span: 5432..5438,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 241,
            column: 33,
            span: 5439..5441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 241,
            column: 35,
            span: 5442..5443,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 241,
            column: 40,
            span: 5444..5448,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 241,
            column: 47,
            span: 5449..5455,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 49,
            span: 5455..5457,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 241,
            column: 53,
            span: 5458..5461,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 241,
            column: 57,
            span: 5462..5465,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 241,
            column: 58,
            span: 5465..5466,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 241,
            column: 60,
            span: 5467..5468,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 65,
            span: 5467..5473,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 241,
            column: 66,
            span: 5473..5474,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 68,
            span: 5474..5476,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 241,
            column: 69,
            span: 5476..5477,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQK'",
        ),
        position: Position {
            line: 242,
            column: 8,
            span: 5480..5485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 9,
            span: 5485..5486,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 242,
            column: 15,
            span: 5487..5492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 16,
            span: 5492..5493,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 242,
            column: 24,
            span: 5494..5501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 25,
            span: 5501..5502,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 242,
            column: 35,
            span: 5503..5512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 36,
            span: 5512..5513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 246,
            column: 7,
            span: 5553..5559,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 8,
            span: 5559..5560,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 246,
            column: 16,
            span: 5560..5568,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 18,
            span: 5569..5570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 246,
            column: 19,
            span: 5570..5571,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 20,
            span: 5571..5572,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 246,
            column: 23,
            span: 5573..5575,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 246,
            column: 25,
            span: 5576..5577,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 27,
            span: 5576..5579,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 246,
            column: 30,
            span: 5580..5582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 246,
            column: 32,
            span: 5583..5584,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 246,
            column: 37,
            span: 5585..5589,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 246,
            column: 44,
            span: 5590..5596,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 46,
            span: 5596..5598,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 246,
            column: 50,
            span: 5599..5602,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 246,
            column: 54,
            span: 5603..5606,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 55,
            span: 5606..5607,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 246,
            column: 57,
            span: 5608..5609,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 59,
            span: 5608..5611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 60,
            span: 5611..5612,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 62,
            span: 5612..5614,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 63,
            span: 5614..5615,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GEI'",
        ),
        position: Position {
            line: 247,
            column: 8,
            span: 5618..5623,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 9,
            span: 5623..5624,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 247,
            column: 15,
            span: 5625..5630,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 16,
            span: 5630..5631,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 247,
            column: 24,
            span: 5632..5639,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 25,
            span: 5639..5640,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 247,
            column: 35,
            span: 5641..5650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 36,
            span: 5650..5651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 249,
            column: 7,
            span: 5653..5659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 8,
            span: 5659..5660,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 249,
            column: 16,
            span: 5660..5668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 18,
            span: 5669..5670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 249,
            column: 19,
            span: 5670..5671,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 20,
            span: 5671..5672,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 249,
            column: 23,
            span: 5673..5675,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "128",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 29,
            span: 5675..5681,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 249,
            column: 31,
            span: 5682..5683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 249,
            column: 33,
            span: 5684..5685,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 249,
            column: 38,
            span: 5686..5690,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 249,
            column: 45,
            span: 5691..5697,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 47,
            span: 5697..5699,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 249,
            column: 51,
            span: 5700..5703,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 249,
            column: 55,
            span: 5704..5707,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 56,
            span: 5707..5708,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "129",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 60,
            span: 5708..5712,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 61,
            span: 5712..5713,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 249,
            column: 65,
            span: 5714..5717,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 66,
            span: 5717..5718,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LTI'",
        ),
        position: Position {
            line: 250,
            column: 8,
            span: 5721..5726,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 9,
            span: 5726..5727,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 250,
            column: 15,
            span: 5728..5733,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 16,
            span: 5733..5734,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 250,
            column: 24,
            span: 5735..5742,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 25,
            span: 5742..5743,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 250,
            column: 35,
            span: 5744..5753,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 36,
            span: 5753..5754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 252,
            column: 7,
            span: 5756..5762,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 8,
            span: 5762..5763,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 252,
            column: 16,
            span: 5763..5771,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 18,
            span: 5772..5773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 252,
            column: 19,
            span: 5773..5774,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 20,
            span: 5774..5775,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 252,
            column: 23,
            span: 5776..5778,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 252,
            column: 25,
            span: 5779..5780,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 30,
            span: 5779..5785,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 252,
            column: 32,
            span: 5786..5787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 252,
            column: 34,
            span: 5788..5789,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 252,
            column: 39,
            span: 5790..5794,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 252,
            column: 46,
            span: 5795..5801,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 48,
            span: 5801..5803,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 252,
            column: 52,
            span: 5804..5807,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 252,
            column: 56,
            span: 5808..5811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 57,
            span: 5811..5812,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 252,
            column: 59,
            span: 5813..5814,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 62,
            span: 5813..5817,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 63,
            span: 5817..5818,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 252,
            column: 67,
            span: 5819..5822,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 68,
            span: 5822..5823,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GTI'",
        ),
        position: Position {
            line: 253,
            column: 8,
            span: 5826..5831,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 9,
            span: 5831..5832,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 253,
            column: 15,
            span: 5833..5838,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 16,
            span: 5838..5839,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 253,
            column: 24,
            span: 5840..5847,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 25,
            span: 5847..5848,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 253,
            column: 35,
            span: 5849..5858,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 36,
            span: 5858..5859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 255,
            column: 7,
            span: 5861..5867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 8,
            span: 5867..5868,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 255,
            column: 16,
            span: 5868..5876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 18,
            span: 5877..5878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 255,
            column: 19,
            span: 5878..5879,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 20,
            span: 5879..5880,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 255,
            column: 23,
            span: 5881..5883,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 26,
            span: 5883..5886,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 255,
            column: 28,
            span: 5887..5888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 255,
            column: 30,
            span: 5889..5890,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 255,
            column: 35,
            span: 5891..5895,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 255,
            column: 42,
            span: 5896..5902,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 44,
            span: 5902..5904,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 255,
            column: 48,
            span: 5905..5908,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 255,
            column: 52,
            span: 5909..5912,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 53,
            span: 5912..5913,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 56,
            span: 5913..5916,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 57,
            span: 5916..5917,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 59,
            span: 5917..5919,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 60,
            span: 5919..5920,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GTI'",
        ),
        position: Position {
            line: 256,
            column: 8,
            span: 5923..5928,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 9,
            span: 5928..5929,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 256,
            column: 15,
            span: 5930..5935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 16,
            span: 5935..5936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 256,
            column: 24,
            span: 5937..5944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 25,
            span: 5944..5945,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 256,
            column: 35,
            span: 5946..5955,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 36,
            span: 5955..5956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 258,
            column: 7,
            span: 5958..5964,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 8,
            span: 5964..5965,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 258,
            column: 16,
            span: 5965..5973,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 18,
            span: 5974..5975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 258,
            column: 19,
            span: 5975..5976,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 20,
            span: 5976..5977,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 258,
            column: 23,
            span: 5978..5980,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "129",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 27,
            span: 5980..5984,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 258,
            column: 29,
            span: 5985..5986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 258,
            column: 31,
            span: 5987..5988,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 258,
            column: 36,
            span: 5989..5993,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 258,
            column: 43,
            span: 5994..6000,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 45,
            span: 6000..6002,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 258,
            column: 49,
            span: 6003..6006,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 258,
            column: 53,
            span: 6007..6010,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 54,
            span: 6010..6011,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "130",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 58,
            span: 6011..6015,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 59,
            span: 6015..6016,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 61,
            span: 6016..6018,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 62,
            span: 6018..6019,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 259,
            column: 10,
            span: 6022..6029,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 11,
            span: 6029..6030,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LT'",
        ),
        position: Position {
            line: 259,
            column: 16,
            span: 6031..6035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 17,
            span: 6035..6036,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 259,
            column: 23,
            span: 6037..6042,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 24,
            span: 6042..6043,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 259,
            column: 32,
            span: 6044..6051,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 33,
            span: 6051..6052,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 259,
            column: 43,
            span: 6053..6062,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 44,
            span: 6062..6063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 261,
            column: 7,
            span: 6065..6071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 8,
            span: 6071..6072,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 261,
            column: 16,
            span: 6072..6080,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 18,
            span: 6081..6082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 261,
            column: 19,
            span: 6082..6083,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 20,
            span: 6083..6084,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 261,
            column: 23,
            span: 6085..6087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 261,
            column: 25,
            span: 6088..6089,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 261,
            column: 28,
            span: 6090..6092,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 33,
            span: 6092..6097,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 261,
            column: 38,
            span: 6098..6102,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 261,
            column: 45,
            span: 6103..6109,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 47,
            span: 6109..6111,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 261,
            column: 51,
            span: 6112..6115,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 261,
            column: 55,
            span: 6116..6119,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 261,
            column: 56,
            span: 6119..6120,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 59,
            span: 6120..6123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 261,
            column: 60,
            span: 6123..6124,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 62,
            span: 6124..6126,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 261,
            column: 63,
            span: 6126..6127,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GEI'",
        ),
        position: Position {
            line: 262,
            column: 8,
            span: 6130..6135,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 9,
            span: 6135..6136,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 262,
            column: 15,
            span: 6137..6142,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 16,
            span: 6142..6143,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 262,
            column: 24,
            span: 6144..6151,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 25,
            span: 6151..6152,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 262,
            column: 35,
            span: 6153..6162,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 36,
            span: 6162..6163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 264,
            column: 7,
            span: 6165..6171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 8,
            span: 6171..6172,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 264,
            column: 16,
            span: 6172..6180,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 18,
            span: 6181..6182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 264,
            column: 19,
            span: 6182..6183,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 20,
            span: 6183..6184,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 264,
            column: 23,
            span: 6185..6187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 264,
            column: 25,
            span: 6188..6189,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 264,
            column: 28,
            span: 6190..6192,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: ".1",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 33,
            span: 6192..6197,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 264,
            column: 38,
            span: 6198..6202,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 264,
            column: 45,
            span: 6203..6209,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 47,
            span: 6209..6211,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 264,
            column: 51,
            span: 6212..6215,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 264,
            column: 55,
            span: 6216..6219,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 56,
            span: 6219..6220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 58,
            span: 6220..6222,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 59,
            span: 6222..6223,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 264,
            column: 63,
            span: 6224..6227,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 64,
            span: 6227..6228,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 265,
            column: 10,
            span: 6231..6238,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 11,
            span: 6238..6239,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LE'",
        ),
        position: Position {
            line: 265,
            column: 16,
            span: 6240..6244,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 17,
            span: 6244..6245,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 265,
            column: 23,
            span: 6246..6251,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 24,
            span: 6251..6252,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 265,
            column: 32,
            span: 6253..6260,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 33,
            span: 6260..6261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 265,
            column: 43,
            span: 6262..6271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 44,
            span: 6271..6272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 267,
            column: 7,
            span: 6274..6280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 8,
            span: 6280..6281,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 267,
            column: 16,
            span: 6281..6289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 18,
            span: 6290..6291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 267,
            column: 19,
            span: 6291..6292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 20,
            span: 6292..6293,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 267,
            column: 23,
            span: 6294..6296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 267,
            column: 25,
            span: 6297..6298,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 267,
            column: 27,
            span: 6299..6300,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2300",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 34,
            span: 6300..6307,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 267,
            column: 39,
            span: 6308..6312,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 267,
            column: 46,
            span: 6313..6319,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 48,
            span: 6319..6321,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 267,
            column: 52,
            span: 6322..6325,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 267,
            column: 56,
            span: 6326..6329,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 267,
            column: 57,
            span: 6329..6330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 59,
            span: 6330..6332,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 267,
            column: 60,
            span: 6332..6333,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 267,
            column: 64,
            span: 6334..6337,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 267,
            column: 65,
            span: 6337..6338,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADF'",
        ),
        position: Position {
            line: 268,
            column: 10,
            span: 6341..6348,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 11,
            span: 6348..6349,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LT'",
        ),
        position: Position {
            line: 268,
            column: 16,
            span: 6350..6354,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 17,
            span: 6354..6355,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 268,
            column: 23,
            span: 6356..6361,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 24,
            span: 6361..6362,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 268,
            column: 32,
            span: 6363..6370,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 33,
            span: 6370..6371,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 268,
            column: 43,
            span: 6372..6381,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 44,
            span: 6381..6382,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 272,
            column: 6,
            span: 6405..6410,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 272,
            column: 15,
            span: 6411..6419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        position: Position {
            line: 272,
            column: 22,
            span: 6420..6426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 24,
            span: 6427..6428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 272,
            column: 28,
            span: 6428..6432,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 272,
            column: 29,
            span: 6432..6433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 272,
            column: 33,
            span: 6434..6437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 34,
            span: 6437..6438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 273,
            column: 8,
            span: 6441..6446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 9,
            span: 6446..6447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 273,
            column: 13,
            span: 6447..6451,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 273,
            column: 14,
            span: 6451..6452,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 273,
            column: 22,
            span: 6453..6460,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 273,
            column: 23,
            span: 6460..6461,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 273,
            column: 33,
            span: 6462..6471,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 34,
            span: 6471..6472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkKlist",
        ),
        position: Position {
            line: 274,
            column: 13,
            span: 6475..6485,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 14,
            span: 6485..6486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 274,
            column: 18,
            span: 6486..6490,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 19,
            span: 6490..6491,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 274,
            column: 21,
            span: 6492..6493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 274,
            column: 24,
            span: 6493..6496,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 274,
            column: 25,
            span: 6496..6497,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 26,
            span: 6497..6498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 275,
            column: 9,
            span: 6501..6507,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 10,
            span: 6507..6508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 275,
            column: 14,
            span: 6508..6512,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 15,
            span: 6512..6513,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 16,
            span: 6513..6514,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 275,
            column: 19,
            span: 6515..6517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 275,
            column: 23,
            span: 6518..6521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 24,
            span: 6521..6522,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 276,
            column: 0,
            span: 6523..6526,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 278,
            column: 6,
            span: 6528..6533,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 278,
            column: 15,
            span: 6534..6542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 278,
            column: 22,
            span: 6543..6549,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 24,
            span: 6550..6551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 278,
            column: 28,
            span: 6551..6555,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 29,
            span: 6555..6556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 278,
            column: 33,
            span: 6557..6560,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 34,
            span: 6560..6561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 279,
            column: 8,
            span: 6564..6569,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 9,
            span: 6569..6570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 279,
            column: 13,
            span: 6570..6574,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 14,
            span: 6574..6575,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 279,
            column: 22,
            span: 6576..6583,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 23,
            span: 6583..6584,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 279,
            column: 33,
            span: 6585..6594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 34,
            span: 6594..6595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkKlist",
        ),
        position: Position {
            line: 280,
            column: 13,
            span: 6598..6608,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 14,
            span: 6608..6609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 280,
            column: 18,
            span: 6609..6613,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 280,
            column: 19,
            span: 6613..6614,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 280,
            column: 21,
            span: 6615..6616,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 280,
            column: 22,
            span: 6616..6617,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 23,
            span: 6617..6618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 6621..6627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 10,
            span: 6627..6628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 281,
            column: 14,
            span: 6628..6632,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 15,
            span: 6632..6633,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 16,
            span: 6633..6634,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 19,
            span: 6635..6637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 281,
            column: 23,
            span: 6638..6641,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 24,
            span: 6641..6642,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 282,
            column: 0,
            span: 6643..6646,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 284,
            column: 6,
            span: 6648..6653,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 284,
            column: 15,
            span: 6654..6662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkF",
        ),
        position: Position {
            line: 284,
            column: 22,
            span: 6663..6669,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 24,
            span: 6670..6671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 284,
            column: 28,
            span: 6671..6675,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 284,
            column: 29,
            span: 6675..6676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 284,
            column: 33,
            span: 6677..6680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 34,
            span: 6680..6681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 285,
            column: 8,
            span: 6684..6689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 285,
            column: 9,
            span: 6689..6690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 285,
            column: 13,
            span: 6690..6694,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 285,
            column: 14,
            span: 6694..6695,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADF'",
        ),
        position: Position {
            line: 285,
            column: 22,
            span: 6696..6703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 285,
            column: 23,
            span: 6703..6704,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 285,
            column: 33,
            span: 6705..6714,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 285,
            column: 34,
            span: 6714..6715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkKlist",
        ),
        position: Position {
            line: 286,
            column: 13,
            span: 6718..6728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 14,
            span: 6728..6729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 286,
            column: 18,
            span: 6729..6733,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 19,
            span: 6733..6734,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 286,
            column: 21,
            span: 6735..6736,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 286,
            column: 22,
            span: 6736..6737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 286,
            column: 23,
            span: 6737..6738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 287,
            column: 9,
            span: 6741..6747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 10,
            span: 6747..6748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 287,
            column: 14,
            span: 6748..6752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 15,
            span: 6752..6753,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 16,
            span: 6753..6754,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 287,
            column: 19,
            span: 6755..6757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 287,
            column: 23,
            span: 6758..6761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 24,
            span: 6761..6762,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 288,
            column: 0,
            span: 6763..6766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkF",
        ),
        position: Position {
            line: 290,
            column: 7,
            span: 6768..6774,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 290,
            column: 8,
            span: 6774..6775,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 290,
            column: 16,
            span: 6775..6783,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 290,
            column: 18,
            span: 6784..6785,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 290,
            column: 19,
            span: 6785..6786,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 290,
            column: 26,
            span: 6787..6793,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 290,
            column: 30,
            span: 6793..6797,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 290,
            column: 34,
            span: 6798..6801,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 290,
            column: 35,
            span: 6801..6802,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 290,
            column: 39,
            span: 6802..6806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 290,
            column: 40,
            span: 6806..6807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 291,
            column: 7,
            span: 6808..6814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 8,
            span: 6814..6815,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 291,
            column: 16,
            span: 6815..6823,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 18,
            span: 6824..6825,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 19,
            span: 6825..6826,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 291,
            column: 26,
            span: 6827..6833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k0",
        ),
        position: Position {
            line: 291,
            column: 29,
            span: 6834..6836,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 291,
            column: 33,
            span: 6837..6840,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 291,
            column: 34,
            span: 6840..6841,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 291,
            column: 36,
            span: 6841..6843,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 37,
            span: 6843..6844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 292,
            column: 7,
            span: 6845..6851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 292,
            column: 8,
            span: 6851..6852,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 292,
            column: 16,
            span: 6852..6860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 292,
            column: 18,
            span: 6861..6862,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 292,
            column: 19,
            span: 6862..6863,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 292,
            column: 26,
            span: 6864..6870,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 292,
            column: 28,
            span: 6871..6872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k0",
        ),
        position: Position {
            line: 292,
            column: 30,
            span: 6872..6874,
        },
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        position: Position {
            line: 292,
            column: 32,
            span: 6874..6876,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 292,
            column: 33,
            span: 6875..6877,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 292,
            column: 37,
            span: 6878..6881,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 292,
            column: 38,
            span: 6881..6882,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 292,
            column: 40,
            span: 6882..6884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 292,
            column: 41,
            span: 6884..6885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        position: Position {
            line: 293,
            column: 7,
            span: 6886..6892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 8,
            span: 6892..6893,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 293,
            column: 16,
            span: 6893..6901,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 18,
            span: 6902..6903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 19,
            span: 6903..6904,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 293,
            column: 26,
            span: 6905..6911,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 28,
            span: 6911..6913,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 293,
            column: 29,
            span: 6913..6914,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 293,
            column: 30,
            span: 6914..6915,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 31,
            span: 6914..6916,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 293,
            column: 35,
            span: 6917..6920,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 36,
            span: 6920..6921,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 38,
            span: 6921..6923,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 293,
            column: 39,
            span: 6923..6924,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 40,
            span: 6923..6925,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 41,
            span: 6925..6926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        position: Position {
            line: 294,
            column: 7,
            span: 6927..6933,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 8,
            span: 6933..6934,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 294,
            column: 16,
            span: 6934..6942,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 18,
            span: 6943..6944,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 19,
            span: 6944..6945,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 294,
            column: 26,
            span: 6946..6952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 28,
            span: 6953..6954,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 29,
            span: 6953..6955,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 294,
            column: 31,
            span: 6956..6957,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 33,
            span: 6957..6959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 34,
            span: 6959..6960,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 294,
            column: 35,
            span: 6960..6961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 36,
            span: 6961..6962,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 38,
            span: 6961..6964,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 294,
            column: 40,
            span: 6965..6966,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 43,
            span: 6966..6969,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 44,
            span: 6969..6970,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 294,
            column: 48,
            span: 6971..6974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 294,
            column: 49,
            span: 6974..6975,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 51,
            span: 6975..6977,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 294,
            column: 52,
            span: 6977..6978,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 55,
            span: 6977..6981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 56,
            span: 6981..6982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        position: Position {
            line: 295,
            column: 7,
            span: 6983..6989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 8,
            span: 6989..6990,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 295,
            column: 16,
            span: 6990..6998,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 18,
            span: 6999..7000,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 19,
            span: 7000..7001,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 295,
            column: 26,
            span: 7002..7008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 28,
            span: 7009..7010,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 295,
            column: 29,
            span: 7010..7011,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 30,
            span: 7010..7012,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 31,
            span: 7012..7013,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 295,
            column: 32,
            span: 7013..7014,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 33,
            span: 7014..7015,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 35,
            span: 7014..7017,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 295,
            column: 37,
            span: 7018..7019,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 39,
            span: 7019..7021,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 40,
            span: 7021..7022,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 295,
            column: 44,
            span: 7023..7026,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 45,
            span: 7026..7027,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 295,
            column: 47,
            span: 7028..7029,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x20000000",
            ),
        ),
        position: Position {
            line: 295,
            column: 57,
            span: 7028..7039,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 295,
            column: 59,
            span: 7040..7041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 63,
            span: 7041..7045,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 64,
            span: 7045..7046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkF",
        ),
        position: Position {
            line: 296,
            column: 7,
            span: 7047..7053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 8,
            span: 7053..7054,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 296,
            column: 16,
            span: 7054..7062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 18,
            span: 7063..7064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 19,
            span: 7064..7065,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 296,
            column: 26,
            span: 7066..7072,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 28,
            span: 7073..7074,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 296,
            column: 29,
            span: 7074..7075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3",
        ),
        position: Position {
            line: 296,
            column: 31,
            span: 7075..7077,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 296,
            column: 32,
            span: 7077..7078,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 33,
            span: 7077..7079,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 296,
            column: 35,
            span: 7080..7081,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 37,
            span: 7081..7083,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 38,
            span: 7083..7084,
        },
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        position: Position {
            line: 296,
            column: 41,
            span: 7085..7087,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 45,
            span: 7087..7091,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 296,
            column: 49,
            span: 7092..7095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 296,
            column: 50,
            span: 7095..7096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 54,
            span: 7096..7100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 55,
            span: 7100..7101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 297,
            column: 7,
            span: 7102..7108,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 8,
            span: 7108..7109,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 297,
            column: 16,
            span: 7109..7117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 18,
            span: 7118..7119,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 297,
            column: 19,
            span: 7119..7120,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 297,
            column: 26,
            span: 7121..7127,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 297,
            column: 28,
            span: 7128..7129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3",
        ),
        position: Position {
            line: 297,
            column: 30,
            span: 7129..7131,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 297,
            column: 32,
            span: 7132..7133,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 34,
            span: 7133..7135,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 297,
            column: 38,
            span: 7136..7139,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 297,
            column: 39,
            span: 7139..7140,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 41,
            span: 7140..7142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 297,
            column: 42,
            span: 7142..7143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkF",
        ),
        position: Position {
            line: 298,
            column: 7,
            span: 7144..7150,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 8,
            span: 7150..7151,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 298,
            column: 16,
            span: 7151..7159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 18,
            span: 7160..7161,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 19,
            span: 7161..7162,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 298,
            column: 26,
            span: 7163..7169,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 298,
            column: 28,
            span: 7170..7171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 29,
            span: 7171..7172,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 30,
            span: 7172..7173,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 33,
            span: 7172..7176,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 298,
            column: 34,
            span: 7176..7177,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 35,
            span: 7176..7178,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 298,
            column: 37,
            span: 7179..7180,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 298,
            column: 39,
            span: 7181..7182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 40,
            span: 7182..7183,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 298,
            column: 41,
            span: 7183..7184,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 42,
            span: 7183..7185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 43,
            span: 7185..7186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 44,
            span: 7186..7187,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 298,
            column: 46,
            span: 7188..7189,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 48,
            span: 7189..7191,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 49,
            span: 7191..7192,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 298,
            column: 50,
            span: 7192..7193,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 51,
            span: 7192..7194,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 298,
            column: 53,
            span: 7195..7196,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 55,
            span: 7196..7198,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 298,
            column: 57,
            span: 7199..7200,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 59,
            span: 7200..7202,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 298,
            column: 63,
            span: 7203..7206,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 298,
            column: 64,
            span: 7206..7207,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 298,
            column: 66,
            span: 7208..7209,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 69,
            span: 7208..7212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 70,
            span: 7212..7213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkF",
        ),
        position: Position {
            line: 299,
            column: 7,
            span: 7214..7220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 8,
            span: 7220..7221,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 299,
            column: 16,
            span: 7221..7229,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 18,
            span: 7230..7231,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 19,
            span: 7231..7232,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 299,
            column: 26,
            span: 7233..7239,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 299,
            column: 28,
            span: 7240..7241,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 29,
            span: 7241..7242,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 30,
            span: 7242..7243,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 299,
            column: 31,
            span: 7242..7244,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 299,
            column: 32,
            span: 7244..7245,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 299,
            column: 33,
            span: 7244..7246,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 299,
            column: 35,
            span: 7247..7248,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 299,
            column: 37,
            span: 7249..7250,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 38,
            span: 7250..7251,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 299,
            column: 39,
            span: 7251..7252,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 299,
            column: 40,
            span: 7251..7253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 41,
            span: 7253..7254,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 42,
            span: 7254..7255,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 299,
            column: 44,
            span: 7256..7257,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 299,
            column: 46,
            span: 7257..7259,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 47,
            span: 7259..7260,
        },
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        position: Position {
            line: 299,
            column: 49,
            span: 7260..7262,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 299,
            column: 50,
            span: 7261..7263,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 299,
            column: 52,
            span: 7264..7265,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 299,
            column: 54,
            span: 7265..7267,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 299,
            column: 56,
            span: 7268..7269,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 299,
            column: 58,
            span: 7269..7271,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 299,
            column: 62,
            span: 7272..7275,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 299,
            column: 63,
            span: 7275..7276,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 299,
            column: 65,
            span: 7277..7278,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 299,
            column: 68,
            span: 7277..7281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 69,
            span: 7281..7282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 300,
            column: 7,
            span: 7283..7289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 300,
            column: 8,
            span: 7289..7290,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 300,
            column: 16,
            span: 7290..7298,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 300,
            column: 18,
            span: 7299..7300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 300,
            column: 19,
            span: 7300..7301,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 300,
            column: 26,
            span: 7302..7308,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "F0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 300,
            column: 33,
            span: 7308..7315,
        },
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        position: Position {
            line: 300,
            column: 35,
            span: 7316..7317,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "CC",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 300,
            column: 42,
            span: 7317..7324,
        },
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        position: Position {
            line: 300,
            column: 44,
            span: 7325..7326,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        position: Position {
            line: 300,
            column: 49,
            span: 7326..7331,
        },
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        position: Position {
            line: 300,
            column: 51,
            span: 7332..7333,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFD",
            ),
        ),
        position: Position {
            line: 300,
            column: 56,
            span: 7333..7338,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 300,
            column: 60,
            span: 7339..7342,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 300,
            column: 61,
            span: 7342..7343,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xF4",
            ),
        ),
        position: Position {
            line: 300,
            column: 66,
            span: 7343..7348,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 300,
            column: 67,
            span: 7348..7349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 301,
            column: 7,
            span: 7350..7356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 8,
            span: 7356..7357,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 301,
            column: 16,
            span: 7357..7365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 18,
            span: 7366..7367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 19,
            span: 7367..7368,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 301,
            column: 26,
            span: 7369..7375,
        },
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        position: Position {
            line: 301,
            column: 28,
            span: 7376..7377,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 29,
            span: 7377..7378,
        },
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        position: Position {
            line: 301,
            column: 30,
            span: 7378..7379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kFF0",
        ),
        position: Position {
            line: 301,
            column: 34,
            span: 7379..7383,
        },
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        position: Position {
            line: 301,
            column: 36,
            span: 7384..7385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kFF0",
        ),
        position: Position {
            line: 301,
            column: 41,
            span: 7386..7390,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 42,
            span: 7390..7391,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 301,
            column: 46,
            span: 7392..7395,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 301,
            column: 47,
            span: 7395..7396,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 301,
            column: 49,
            span: 7396..7398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 50,
            span: 7398..7399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 302,
            column: 7,
            span: 7400..7406,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 8,
            span: 7406..7407,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 302,
            column: 16,
            span: 7407..7415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 18,
            span: 7416..7417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 19,
            span: 7417..7418,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 302,
            column: 26,
            span: 7419..7425,
        },
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        position: Position {
            line: 302,
            column: 28,
            span: 7426..7427,
        },
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        position: Position {
            line: 302,
            column: 29,
            span: 7427..7428,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 302,
            column: 30,
            span: 7428..7429,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 36,
            span: 7428..7435,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 302,
            column: 40,
            span: 7436..7439,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 41,
            span: 7439..7440,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 302,
            column: 43,
            span: 7441..7442,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 47,
            span: 7441..7446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 48,
            span: 7446..7447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 303,
            column: 7,
            span: 7448..7454,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 8,
            span: 7454..7455,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 303,
            column: 16,
            span: 7455..7463,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 18,
            span: 7464..7465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 19,
            span: 7465..7466,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 303,
            column: 26,
            span: 7467..7473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 28,
            span: 7474..7475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 29,
            span: 7475..7476,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 32,
            span: 7475..7479,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 303,
            column: 35,
            span: 7480..7482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k6",
        ),
        position: Position {
            line: 303,
            column: 38,
            span: 7483..7485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 39,
            span: 7485..7486,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 303,
            column: 42,
            span: 7487..7489,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 303,
            column: 44,
            span: 7490..7491,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 45,
            span: 7490..7492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 46,
            span: 7492..7493,
        },
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        position: Position {
            line: 303,
            column: 49,
            span: 7494..7496,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 51,
            span: 7496..7498,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 303,
            column: 55,
            span: 7499..7502,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 56,
            span: 7502..7503,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 60,
            span: 7503..7507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 61,
            span: 7507..7508,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 306,
            column: 6,
            span: 7573..7578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 306,
            column: 8,
            span: 7579..7580,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 306,
            column: 10,
            span: 7581..7582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 13,
            span: 7582..7585,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 306,
            column: 14,
            span: 7585..7586,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 306,
            column: 20,
            span: 7587..7592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 306,
            column: 24,
            span: 7593..7596,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 306,
            column: 26,
            span: 7597..7598,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 28,
            span: 7599..7600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 29,
            span: 7600..7601,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 30,
            span: 7600..7602,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 306,
            column: 33,
            span: 7603..7605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 306,
            column: 35,
            span: 7606..7607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 36,
            span: 7607..7608,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 306,
            column: 38,
            span: 7609..7610,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 40,
            span: 7610..7612,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 41,
            span: 7612..7613,
        },
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        position: Position {
            line: 306,
            column: 44,
            span: 7614..7616,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 46,
            span: 7616..7618,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 307,
            column: 6,
            span: 7638..7643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 307,
            column: 13,
            span: 7644..7650,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 307,
            column: 15,
            span: 7651..7652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 307,
            column: 20,
            span: 7652..7657,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 307,
            column: 21,
            span: 7657..7658,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 307,
            column: 23,
            span: 7659..7660,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "65535",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 307,
            column: 0,
            span: 7660..7666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 308,
            column: 7,
            span: 7667..7673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 8,
            span: 7673..7674,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 308,
            column: 16,
            span: 7674..7682,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 18,
            span: 7683..7684,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 19,
            span: 7684..7685,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 308,
            column: 26,
            span: 7686..7692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 308,
            column: 33,
            span: 7693..7699,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 308,
            column: 37,
            span: 7700..7703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 38,
            span: 7703..7704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 308,
            column: 42,
            span: 7705..7708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 43,
            span: 7708..7709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 309,
            column: 7,
            span: 7710..7716,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 8,
            span: 7716..7717,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 309,
            column: 16,
            span: 7717..7725,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 18,
            span: 7726..7727,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 19,
            span: 7727..7728,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 309,
            column: 26,
            span: 7729..7735,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 309,
            column: 28,
            span: 7736..7737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 309,
            column: 34,
            span: 7737..7743,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 309,
            column: 38,
            span: 7744..7747,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 309,
            column: 39,
            span: 7747..7748,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 309,
            column: 41,
            span: 7749..7750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 309,
            column: 44,
            span: 7750..7753,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 45,
            span: 7753..7754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkI",
        ),
        position: Position {
            line: 310,
            column: 7,
            span: 7755..7761,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 310,
            column: 8,
            span: 7761..7762,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 310,
            column: 16,
            span: 7762..7770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 310,
            column: 18,
            span: 7771..7772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 310,
            column: 19,
            span: 7772..7773,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 310,
            column: 26,
            span: 7774..7780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 310,
            column: 33,
            span: 7781..7787,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 310,
            column: 35,
            span: 7788..7789,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 310,
            column: 37,
            span: 7789..7791,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 310,
            column: 41,
            span: 7792..7795,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 310,
            column: 42,
            span: 7795..7796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 310,
            column: 46,
            span: 7797..7800,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 310,
            column: 48,
            span: 7801..7802,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 310,
            column: 50,
            span: 7802..7804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 310,
            column: 51,
            span: 7804..7805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        position: Position {
            line: 311,
            column: 7,
            span: 7806..7812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 311,
            column: 8,
            span: 7812..7813,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 311,
            column: 16,
            span: 7813..7821,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 311,
            column: 18,
            span: 7822..7823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 311,
            column: 19,
            span: 7823..7824,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 311,
            column: 26,
            span: 7825..7831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 311,
            column: 33,
            span: 7832..7838,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 311,
            column: 35,
            span: 7839..7840,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 311,
            column: 37,
            span: 7840..7842,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 311,
            column: 41,
            span: 7843..7846,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 311,
            column: 42,
            span: 7846..7847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 311,
            column: 46,
            span: 7848..7851,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 311,
            column: 48,
            span: 7852..7853,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 311,
            column: 50,
            span: 7853..7855,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 311,
            column: 51,
            span: 7855..7856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        position: Position {
            line: 312,
            column: 7,
            span: 7857..7863,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 8,
            span: 7863..7864,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 312,
            column: 16,
            span: 7864..7872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 18,
            span: 7873..7874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 312,
            column: 19,
            span: 7874..7875,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 312,
            column: 26,
            span: 7876..7882,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 312,
            column: 28,
            span: 7883..7884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 29,
            span: 7884..7885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 312,
            column: 35,
            span: 7885..7891,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 312,
            column: 37,
            span: 7892..7893,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 312,
            column: 39,
            span: 7893..7895,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 312,
            column: 40,
            span: 7895..7896,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 312,
            column: 44,
            span: 7897..7900,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 312,
            column: 45,
            span: 7900..7901,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 312,
            column: 47,
            span: 7902..7903,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 48,
            span: 7903..7904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 312,
            column: 51,
            span: 7904..7907,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 312,
            column: 53,
            span: 7908..7909,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 312,
            column: 55,
            span: 7909..7911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 312,
            column: 56,
            span: 7911..7912,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 312,
            column: 57,
            span: 7912..7913,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 314,
            column: 6,
            span: 7915..7920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 314,
            column: 13,
            span: 7921..7927,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 314,
            column: 15,
            span: 7928..7929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 314,
            column: 20,
            span: 7929..7934,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 314,
            column: 21,
            span: 7934..7935,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 314,
            column: 23,
            span: 7936..7937,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "65535",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 314,
            column: 0,
            span: 7937..7945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkF",
        ),
        position: Position {
            line: 315,
            column: 7,
            span: 7946..7952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 8,
            span: 7952..7953,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 315,
            column: 16,
            span: 7953..7961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 18,
            span: 7962..7963,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 19,
            span: 7963..7964,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 315,
            column: 26,
            span: 7965..7971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 315,
            column: 33,
            span: 7972..7978,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 315,
            column: 37,
            span: 7979..7982,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 38,
            span: 7982..7983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 315,
            column: 42,
            span: 7984..7987,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 315,
            column: 44,
            span: 7988..7989,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 48,
            span: 7989..7993,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 49,
            span: 7993..7994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkF",
        ),
        position: Position {
            line: 316,
            column: 7,
            span: 7995..8001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 316,
            column: 8,
            span: 8001..8002,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 316,
            column: 16,
            span: 8002..8010,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 316,
            column: 18,
            span: 8011..8012,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 19,
            span: 8012..8013,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 316,
            column: 26,
            span: 8014..8020,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 316,
            column: 28,
            span: 8021..8022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 316,
            column: 34,
            span: 8022..8028,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 316,
            column: 38,
            span: 8029..8032,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 39,
            span: 8032..8033,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 316,
            column: 41,
            span: 8034..8035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 316,
            column: 44,
            span: 8035..8038,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 316,
            column: 46,
            span: 8039..8040,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 50,
            span: 8040..8044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 51,
            span: 8044..8045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkF",
        ),
        position: Position {
            line: 317,
            column: 7,
            span: 8046..8052,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 8,
            span: 8052..8053,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 317,
            column: 16,
            span: 8053..8061,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 18,
            span: 8062..8063,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 19,
            span: 8063..8064,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 317,
            column: 26,
            span: 8065..8071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 317,
            column: 33,
            span: 8072..8078,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 317,
            column: 35,
            span: 8079..8080,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 37,
            span: 8080..8082,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 317,
            column: 41,
            span: 8083..8086,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 42,
            span: 8086..8087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 44,
            span: 8088..8089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 317,
            column: 47,
            span: 8089..8092,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 317,
            column: 49,
            span: 8093..8094,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 53,
            span: 8094..8098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 54,
            span: 8098..8099,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 55,
            span: 8099..8100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        position: Position {
            line: 318,
            column: 7,
            span: 8101..8107,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 318,
            column: 8,
            span: 8107..8108,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 318,
            column: 16,
            span: 8108..8116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 318,
            column: 18,
            span: 8117..8118,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 318,
            column: 19,
            span: 8118..8119,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 318,
            column: 26,
            span: 8120..8126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 318,
            column: 33,
            span: 8127..8133,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 318,
            column: 35,
            span: 8134..8135,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 318,
            column: 37,
            span: 8135..8137,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 318,
            column: 41,
            span: 8138..8141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 318,
            column: 42,
            span: 8141..8142,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 318,
            column: 44,
            span: 8143..8144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 318,
            column: 47,
            span: 8144..8147,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 318,
            column: 49,
            span: 8148..8149,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 318,
            column: 53,
            span: 8149..8153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 318,
            column: 54,
            span: 8153..8154,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 318,
            column: 55,
            span: 8154..8155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        position: Position {
            line: 319,
            column: 7,
            span: 8156..8162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 8,
            span: 8162..8163,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 319,
            column: 16,
            span: 8163..8171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 18,
            span: 8172..8173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 19,
            span: 8173..8174,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 319,
            column: 26,
            span: 8175..8181,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 319,
            column: 28,
            span: 8182..8183,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 29,
            span: 8183..8184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "border",
        ),
        position: Position {
            line: 319,
            column: 35,
            span: 8184..8190,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 319,
            column: 37,
            span: 8191..8192,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 39,
            span: 8192..8194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 40,
            span: 8194..8195,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 319,
            column: 44,
            span: 8196..8199,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 319,
            column: 45,
            span: 8199..8200,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 319,
            column: 47,
            span: 8201..8202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 48,
            span: 8202..8203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sbx",
        ),
        position: Position {
            line: 319,
            column: 51,
            span: 8203..8206,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 319,
            column: 53,
            span: 8207..8208,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 57,
            span: 8208..8212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 58,
            span: 8212..8213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 59,
            span: 8213..8214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 323,
            column: 7,
            span: 8239..8245,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 323,
            column: 8,
            span: 8245..8246,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 323,
            column: 16,
            span: 8246..8254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 323,
            column: 18,
            span: 8255..8256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 323,
            column: 19,
            span: 8256..8257,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 323,
            column: 20,
            span: 8257..8258,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 323,
            column: 27,
            span: 8259..8265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 323,
            column: 29,
            span: 8266..8267,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 323,
            column: 31,
            span: 8268..8269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k1",
        ),
        position: Position {
            line: 323,
            column: 34,
            span: 8270..8272,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 323,
            column: 38,
            span: 8273..8276,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 323,
            column: 39,
            span: 8276..8277,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 42,
            span: 8277..8280,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 323,
            column: 43,
            span: 8280..8281,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 46,
            span: 8281..8284,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 323,
            column: 47,
            span: 8284..8285,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ADDI'",
        ),
        position: Position {
            line: 323,
            column: 54,
            span: 8286..8292,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 323,
            column: 55,
            span: 8292..8293,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINI'",
        ),
        position: Position {
            line: 323,
            column: 64,
            span: 8294..8302,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 323,
            column: 65,
            span: 8302..8303,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 323,
            column: 75,
            span: 8304..8313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 323,
            column: 76,
            span: 8313..8314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 324,
            column: 7,
            span: 8315..8321,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 324,
            column: 8,
            span: 8321..8322,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 324,
            column: 16,
            span: 8322..8330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 324,
            column: 18,
            span: 8331..8332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 324,
            column: 19,
            span: 8332..8333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 324,
            column: 20,
            span: 8333..8334,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 324,
            column: 27,
            span: 8335..8341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 324,
            column: 29,
            span: 8342..8343,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 324,
            column: 31,
            span: 8344..8345,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 324,
            column: 35,
            span: 8345..8349,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 324,
            column: 39,
            span: 8350..8353,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 324,
            column: 40,
            span: 8353..8354,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 324,
            column: 43,
            span: 8354..8357,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 324,
            column: 44,
            span: 8357..8358,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 324,
            column: 46,
            span: 8359..8360,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "117",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 324,
            column: 49,
            span: 8359..8363,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 324,
            column: 50,
            span: 8363..8364,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ADDI'",
        ),
        position: Position {
            line: 324,
            column: 57,
            span: 8365..8371,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 324,
            column: 58,
            span: 8371..8372,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINI'",
        ),
        position: Position {
            line: 324,
            column: 67,
            span: 8373..8381,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 324,
            column: 68,
            span: 8381..8382,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 324,
            column: 78,
            span: 8383..8392,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 324,
            column: 79,
            span: 8392..8393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 325,
            column: 7,
            span: 8394..8400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 8,
            span: 8400..8401,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 325,
            column: 16,
            span: 8401..8409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 18,
            span: 8410..8411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 325,
            column: 19,
            span: 8411..8412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 325,
            column: 20,
            span: 8412..8413,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 325,
            column: 27,
            span: 8414..8420,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "128",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 325,
            column: 31,
            span: 8420..8424,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 325,
            column: 33,
            span: 8425..8426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 325,
            column: 35,
            span: 8427..8428,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 325,
            column: 39,
            span: 8429..8432,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 325,
            column: 40,
            span: 8432..8433,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 325,
            column: 44,
            span: 8433..8437,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 325,
            column: 45,
            span: 8437..8438,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "128",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 325,
            column: 51,
            span: 8438..8444,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 325,
            column: 52,
            span: 8444..8445,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ADDI'",
        ),
        position: Position {
            line: 326,
            column: 16,
            span: 8455..8461,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 326,
            column: 17,
            span: 8461..8462,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINI'",
        ),
        position: Position {
            line: 326,
            column: 26,
            span: 8463..8471,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 326,
            column: 27,
            span: 8471..8472,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 326,
            column: 37,
            span: 8473..8482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 38,
            span: 8482..8483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 327,
            column: 7,
            span: 8484..8490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 327,
            column: 8,
            span: 8490..8491,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 327,
            column: 16,
            span: 8491..8499,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 327,
            column: 18,
            span: 8500..8501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 327,
            column: 19,
            span: 8501..8502,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 327,
            column: 20,
            span: 8502..8503,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 327,
            column: 27,
            span: 8504..8510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 327,
            column: 29,
            span: 8511..8512,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 327,
            column: 31,
            span: 8513..8514,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 327,
            column: 33,
            span: 8515..8516,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 327,
            column: 36,
            span: 8515..8519,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 327,
            column: 40,
            span: 8520..8523,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 327,
            column: 41,
            span: 8523..8524,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 327,
            column: 43,
            span: 8525..8526,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 327,
            column: 46,
            span: 8525..8529,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 327,
            column: 47,
            span: 8529..8530,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 327,
            column: 53,
            span: 8530..8536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 327,
            column: 54,
            span: 8536..8537,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MULK'",
        ),
        position: Position {
            line: 328,
            column: 16,
            span: 8547..8553,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 328,
            column: 17,
            span: 8553..8554,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 328,
            column: 26,
            span: 8555..8563,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 328,
            column: 27,
            span: 8563..8564,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 328,
            column: 37,
            span: 8565..8574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 328,
            column: 38,
            span: 8574..8575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 329,
            column: 7,
            span: 8576..8582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 8,
            span: 8582..8583,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 329,
            column: 16,
            span: 8583..8591,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 18,
            span: 8592..8593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 329,
            column: 19,
            span: 8593..8594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 20,
            span: 8594..8595,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 329,
            column: 27,
            span: 8596..8602,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 329,
            column: 30,
            span: 8602..8605,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 329,
            column: 32,
            span: 8606..8607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 329,
            column: 34,
            span: 8608..8609,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 329,
            column: 38,
            span: 8610..8613,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 329,
            column: 39,
            span: 8613..8614,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 329,
            column: 41,
            span: 8614..8616,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 329,
            column: 42,
            span: 8616..8617,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 329,
            column: 45,
            span: 8617..8620,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 329,
            column: 46,
            span: 8620..8621,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MULK'",
        ),
        position: Position {
            line: 329,
            column: 53,
            span: 8622..8628,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 329,
            column: 54,
            span: 8628..8629,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 329,
            column: 63,
            span: 8630..8638,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 329,
            column: 64,
            span: 8638..8639,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 329,
            column: 74,
            span: 8640..8649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 75,
            span: 8649..8650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 330,
            column: 7,
            span: 8651..8657,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 8,
            span: 8657..8658,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 330,
            column: 16,
            span: 8658..8666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 18,
            span: 8667..8668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 330,
            column: 19,
            span: 8668..8669,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 20,
            span: 8669..8670,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 330,
            column: 27,
            span: 8671..8677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 330,
            column: 29,
            span: 8678..8679,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 330,
            column: 31,
            span: 8680..8681,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 330,
            column: 33,
            span: 8682..8683,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 330,
            column: 34,
            span: 8682..8684,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 330,
            column: 38,
            span: 8685..8688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 39,
            span: 8688..8689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 330,
            column: 41,
            span: 8689..8691,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 42,
            span: 8691..8692,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".25",
                },
            ),
        ),
        position: Position {
            line: 330,
            column: 47,
            span: 8692..8697,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 48,
            span: 8697..8698,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'POWK'",
        ),
        position: Position {
            line: 330,
            column: 55,
            span: 8699..8705,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 56,
            span: 8705..8706,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 330,
            column: 65,
            span: 8707..8715,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 66,
            span: 8715..8716,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 330,
            column: 76,
            span: 8717..8726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 77,
            span: 8726..8727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 331,
            column: 7,
            span: 8728..8734,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 8,
            span: 8734..8735,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 331,
            column: 16,
            span: 8735..8743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 18,
            span: 8744..8745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 331,
            column: 19,
            span: 8745..8746,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 20,
            span: 8746..8747,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 331,
            column: 27,
            span: 8748..8754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 331,
            column: 29,
            span: 8755..8756,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 331,
            column: 31,
            span: 8757..8758,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 331,
            column: 34,
            span: 8758..8761,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 331,
            column: 38,
            span: 8762..8765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 39,
            span: 8765..8766,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 331,
            column: 42,
            span: 8766..8769,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 43,
            span: 8769..8770,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 331,
            column: 47,
            span: 8770..8774,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 48,
            span: 8774..8775,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIVK'",
        ),
        position: Position {
            line: 331,
            column: 55,
            span: 8776..8782,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 56,
            span: 8782..8783,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 331,
            column: 65,
            span: 8784..8792,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 66,
            span: 8792..8793,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 331,
            column: 76,
            span: 8794..8803,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 77,
            span: 8803..8804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 332,
            column: 7,
            span: 8805..8811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 8811..8812,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 332,
            column: 16,
            span: 8812..8820,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 18,
            span: 8821..8822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 332,
            column: 19,
            span: 8822..8823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 20,
            span: 8823..8824,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 332,
            column: 27,
            span: 8825..8831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 332,
            column: 29,
            span: 8832..8833,
        },
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        position: Position {
            line: 332,
            column: 32,
            span: 8834..8836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 34,
            span: 8836..8838,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 332,
            column: 38,
            span: 8839..8842,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 39,
            span: 8842..8843,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 44,
            span: 8843..8848,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 45,
            span: 8848..8849,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 50,
            span: 8849..8854,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 51,
            span: 8854..8855,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'IDIVK'",
        ),
        position: Position {
            line: 333,
            column: 17,
            span: 8865..8872,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 18,
            span: 8872..8873,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 333,
            column: 27,
            span: 8874..8882,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 28,
            span: 8882..8883,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 333,
            column: 38,
            span: 8884..8893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 39,
            span: 8893..8894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 334,
            column: 7,
            span: 8895..8901,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 8,
            span: 8901..8902,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 334,
            column: 16,
            span: 8902..8910,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 18,
            span: 8911..8912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 334,
            column: 19,
            span: 8912..8913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 20,
            span: 8913..8914,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 334,
            column: 27,
            span: 8915..8921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 334,
            column: 29,
            span: 8922..8923,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 334,
            column: 31,
            span: 8924..8925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 33,
            span: 8926..8927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 36,
            span: 8926..8930,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 334,
            column: 38,
            span: 8931..8932,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 41,
            span: 8932..8935,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 42,
            span: 8935..8936,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 334,
            column: 46,
            span: 8937..8940,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 47,
            span: 8940..8941,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "91",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 50,
            span: 8941..8944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 51,
            span: 8944..8945,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 53,
            span: 8945..8947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 54,
            span: 8947..8948,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MODK'",
        ),
        position: Position {
            line: 335,
            column: 16,
            span: 8958..8964,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 335,
            column: 17,
            span: 8964..8965,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 335,
            column: 26,
            span: 8966..8974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 335,
            column: 27,
            span: 8974..8975,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 335,
            column: 37,
            span: 8976..8985,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 38,
            span: 8985..8986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 336,
            column: 7,
            span: 8987..8993,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 8,
            span: 8993..8994,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 336,
            column: 16,
            span: 8994..9002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 18,
            span: 9003..9004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 336,
            column: 19,
            span: 9004..9005,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 20,
            span: 9005..9006,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 336,
            column: 27,
            span: 9007..9013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k1",
        ),
        position: Position {
            line: 336,
            column: 30,
            span: 9014..9016,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 336,
            column: 33,
            span: 9017..9019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 336,
            column: 35,
            span: 9020..9021,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 336,
            column: 39,
            span: 9022..9025,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 40,
            span: 9025..9026,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 336,
            column: 42,
            span: 9026..9028,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 43,
            span: 9028..9029,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 336,
            column: 45,
            span: 9029..9031,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 46,
            span: 9031..9032,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SHLI'",
        ),
        position: Position {
            line: 336,
            column: 53,
            span: 9033..9039,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 54,
            span: 9039..9040,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINI'",
        ),
        position: Position {
            line: 336,
            column: 63,
            span: 9041..9049,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 64,
            span: 9049..9050,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 336,
            column: 74,
            span: 9051..9060,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 75,
            span: 9060..9061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 337,
            column: 7,
            span: 9062..9068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 8,
            span: 9068..9069,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 337,
            column: 16,
            span: 9069..9077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 18,
            span: 9078..9079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 337,
            column: 19,
            span: 9079..9080,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 20,
            span: 9080..9081,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 337,
            column: 27,
            span: 9082..9088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 337,
            column: 29,
            span: 9089..9090,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 337,
            column: 32,
            span: 9091..9093,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 337,
            column: 36,
            span: 9093..9097,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 337,
            column: 40,
            span: 9098..9101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 41,
            span: 9101..9102,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 337,
            column: 44,
            span: 9102..9105,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 45,
            span: 9105..9106,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 337,
            column: 47,
            span: 9106..9108,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 48,
            span: 9108..9109,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SHRI'",
        ),
        position: Position {
            line: 337,
            column: 55,
            span: 9110..9116,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 56,
            span: 9116..9117,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINI'",
        ),
        position: Position {
            line: 337,
            column: 65,
            span: 9118..9126,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 66,
            span: 9126..9127,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 337,
            column: 76,
            span: 9128..9137,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 77,
            span: 9137..9138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 338,
            column: 7,
            span: 9139..9145,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 8,
            span: 9145..9146,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 338,
            column: 16,
            span: 9146..9154,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 18,
            span: 9155..9156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 338,
            column: 19,
            span: 9156..9157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 20,
            span: 9157..9158,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 338,
            column: 27,
            span: 9159..9165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 338,
            column: 29,
            span: 9166..9167,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 338,
            column: 32,
            span: 9168..9170,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 338,
            column: 34,
            span: 9171..9172,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 37,
            span: 9171..9175,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 338,
            column: 41,
            span: 9176..9179,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 42,
            span: 9179..9180,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 45,
            span: 9180..9183,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 46,
            span: 9183..9184,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 48,
            span: 9184..9186,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 49,
            span: 9186..9187,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SHRI'",
        ),
        position: Position {
            line: 338,
            column: 56,
            span: 9188..9194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 57,
            span: 9194..9195,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINI'",
        ),
        position: Position {
            line: 338,
            column: 66,
            span: 9196..9204,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 67,
            span: 9204..9205,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 338,
            column: 77,
            span: 9206..9215,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 78,
            span: 9215..9216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 339,
            column: 7,
            span: 9217..9223,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 8,
            span: 9223..9224,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 339,
            column: 16,
            span: 9224..9232,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 18,
            span: 9233..9234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 339,
            column: 19,
            span: 9234..9235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 20,
            span: 9235..9236,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 339,
            column: 27,
            span: 9237..9243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 339,
            column: 29,
            span: 9244..9245,
        },
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        position: Position {
            line: 339,
            column: 32,
            span: 9246..9248,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "128",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 36,
            span: 9248..9252,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 339,
            column: 40,
            span: 9253..9256,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 339,
            column: 41,
            span: 9256..9257,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 43,
            span: 9257..9259,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 339,
            column: 44,
            span: 9259..9260,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 46,
            span: 9260..9262,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 339,
            column: 47,
            span: 9262..9263,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SHRI'",
        ),
        position: Position {
            line: 339,
            column: 54,
            span: 9264..9270,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 339,
            column: 55,
            span: 9270..9271,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINI'",
        ),
        position: Position {
            line: 339,
            column: 64,
            span: 9272..9280,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 339,
            column: 65,
            span: 9280..9281,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 339,
            column: 75,
            span: 9282..9291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 76,
            span: 9291..9292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 340,
            column: 7,
            span: 9293..9299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 8,
            span: 9299..9300,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 340,
            column: 16,
            span: 9300..9308,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 18,
            span: 9309..9310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 340,
            column: 19,
            span: 9310..9311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 20,
            span: 9311..9312,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 340,
            column: 27,
            span: 9313..9319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 340,
            column: 29,
            span: 9320..9321,
        },
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        position: Position {
            line: 340,
            column: 32,
            span: 9322..9324,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 340,
            column: 34,
            span: 9325..9326,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 37,
            span: 9325..9329,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 340,
            column: 41,
            span: 9330..9333,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 42,
            span: 9333..9334,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 44,
            span: 9334..9336,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 45,
            span: 9336..9337,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 47,
            span: 9337..9339,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 48,
            span: 9339..9340,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SHRI'",
        ),
        position: Position {
            line: 340,
            column: 55,
            span: 9341..9347,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 56,
            span: 9347..9348,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINI'",
        ),
        position: Position {
            line: 340,
            column: 65,
            span: 9349..9357,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 66,
            span: 9357..9358,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 340,
            column: 76,
            span: 9359..9368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 77,
            span: 9368..9369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 341,
            column: 7,
            span: 9370..9376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 8,
            span: 9376..9377,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 341,
            column: 16,
            span: 9377..9385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 18,
            span: 9386..9387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 341,
            column: 19,
            span: 9387..9388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 20,
            span: 9388..9389,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 341,
            column: 27,
            span: 9390..9396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 341,
            column: 29,
            span: 9397..9398,
        },
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        position: Position {
            line: 341,
            column: 31,
            span: 9399..9400,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 33,
            span: 9400..9402,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 341,
            column: 37,
            span: 9403..9406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 38,
            span: 9406..9407,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 40,
            span: 9407..9409,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 41,
            span: 9409..9410,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 43,
            span: 9410..9412,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 44,
            span: 9412..9413,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'BANDK'",
        ),
        position: Position {
            line: 341,
            column: 52,
            span: 9414..9421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 53,
            span: 9421..9422,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 341,
            column: 62,
            span: 9423..9431,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 63,
            span: 9431..9432,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 341,
            column: 73,
            span: 9433..9442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 74,
            span: 9442..9443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 342,
            column: 7,
            span: 9444..9450,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 8,
            span: 9450..9451,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 342,
            column: 16,
            span: 9451..9459,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 18,
            span: 9460..9461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 342,
            column: 19,
            span: 9461..9462,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 20,
            span: 9462..9463,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 342,
            column: 27,
            span: 9464..9470,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 30,
            span: 9470..9473,
        },
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        position: Position {
            line: 342,
            column: 32,
            span: 9474..9475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 342,
            column: 34,
            span: 9476..9477,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 342,
            column: 38,
            span: 9478..9481,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 342,
            column: 39,
            span: 9481..9482,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 41,
            span: 9482..9484,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 342,
            column: 42,
            span: 9484..9485,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 45,
            span: 9485..9488,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 342,
            column: 46,
            span: 9488..9489,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'BORK'",
        ),
        position: Position {
            line: 342,
            column: 53,
            span: 9490..9496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 342,
            column: 54,
            span: 9496..9497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 342,
            column: 63,
            span: 9498..9506,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 342,
            column: 64,
            span: 9506..9507,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 342,
            column: 74,
            span: 9508..9517,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 75,
            span: 9517..9518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 343,
            column: 7,
            span: 9519..9525,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 8,
            span: 9525..9526,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 343,
            column: 16,
            span: 9526..9534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 18,
            span: 9535..9536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 343,
            column: 19,
            span: 9536..9537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 20,
            span: 9537..9538,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 343,
            column: 27,
            span: 9539..9545,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 343,
            column: 29,
            span: 9546..9547,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 31,
            span: 9546..9549,
        },
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        position: Position {
            line: 343,
            column: 33,
            span: 9550..9551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 343,
            column: 35,
            span: 9552..9553,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 343,
            column: 39,
            span: 9554..9557,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 40,
            span: 9557..9558,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 343,
            column: 42,
            span: 9559..9560,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 43,
            span: 9559..9561,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 44,
            span: 9561..9562,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 46,
            span: 9562..9564,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 47,
            span: 9564..9565,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'BXORK'",
        ),
        position: Position {
            line: 343,
            column: 55,
            span: 9566..9573,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 56,
            span: 9573..9574,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 343,
            column: 65,
            span: 9575..9583,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 66,
            span: 9583..9584,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 343,
            column: 76,
            span: 9585..9594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 77,
            span: 9594..9595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 346,
            column: 7,
            span: 9636..9642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 346,
            column: 8,
            span: 9642..9643,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 346,
            column: 16,
            span: 9643..9651,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 346,
            column: 18,
            span: 9652..9653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 346,
            column: 19,
            span: 9653..9654,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 346,
            column: 20,
            span: 9654..9655,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 346,
            column: 27,
            span: 9656..9662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 346,
            column: 29,
            span: 9663..9664,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 346,
            column: 31,
            span: 9665..9666,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 346,
            column: 35,
            span: 9666..9670,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 346,
            column: 39,
            span: 9671..9674,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 346,
            column: 40,
            span: 9674..9675,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 346,
            column: 42,
            span: 9675..9677,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 346,
            column: 43,
            span: 9677..9678,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 346,
            column: 47,
            span: 9678..9682,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 346,
            column: 48,
            span: 9682..9683,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ADDK'",
        ),
        position: Position {
            line: 346,
            column: 55,
            span: 9684..9690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 346,
            column: 56,
            span: 9690..9691,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 346,
            column: 65,
            span: 9692..9700,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 346,
            column: 66,
            span: 9700..9701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 346,
            column: 76,
            span: 9702..9711,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 346,
            column: 77,
            span: 9711..9712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 348,
            column: 7,
            span: 9785..9791,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 348,
            column: 8,
            span: 9791..9792,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 348,
            column: 16,
            span: 9792..9800,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 348,
            column: 18,
            span: 9801..9802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 348,
            column: 19,
            span: 9802..9803,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 348,
            column: 20,
            span: 9803..9804,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 348,
            column: 27,
            span: 9805..9811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 348,
            column: 29,
            span: 9812..9813,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 348,
            column: 31,
            span: 9814..9815,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 348,
            column: 33,
            span: 9816..9817,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 348,
            column: 38,
            span: 9816..9822,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 348,
            column: 42,
            span: 9823..9826,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 348,
            column: 43,
            span: 9826..9827,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 348,
            column: 45,
            span: 9827..9829,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 348,
            column: 46,
            span: 9829..9830,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 348,
            column: 48,
            span: 9831..9832,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 348,
            column: 53,
            span: 9831..9837,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 348,
            column: 54,
            span: 9837..9838,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MULK'",
        ),
        position: Position {
            line: 349,
            column: 16,
            span: 9848..9854,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 349,
            column: 17,
            span: 9854..9855,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 349,
            column: 26,
            span: 9856..9864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 349,
            column: 27,
            span: 9864..9865,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 349,
            column: 37,
            span: 9866..9875,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 349,
            column: 38,
            span: 9875..9876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 351,
            column: 7,
            span: 9948..9954,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 8,
            span: 9954..9955,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 351,
            column: 16,
            span: 9955..9963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 18,
            span: 9964..9965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 351,
            column: 19,
            span: 9965..9966,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 20,
            span: 9966..9967,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 351,
            column: 27,
            span: 9968..9974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 351,
            column: 29,
            span: 9975..9976,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 351,
            column: 31,
            span: 9977..9978,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 35,
            span: 9978..9982,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 351,
            column: 39,
            span: 9983..9986,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 40,
            span: 9986..9987,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 42,
            span: 9987..9989,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 43,
            span: 9989..9990,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 47,
            span: 9990..9994,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 48,
            span: 9994..9995,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'POWK'",
        ),
        position: Position {
            line: 351,
            column: 55,
            span: 9996..10002,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 56,
            span: 10002..10003,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 351,
            column: 65,
            span: 10004..10012,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 66,
            span: 10012..10013,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 351,
            column: 76,
            span: 10014..10023,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 77,
            span: 10023..10024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 352,
            column: 7,
            span: 10025..10031,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 352,
            column: 8,
            span: 10031..10032,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 352,
            column: 16,
            span: 10032..10040,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 352,
            column: 18,
            span: 10041..10042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 352,
            column: 19,
            span: 10042..10043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 352,
            column: 20,
            span: 10043..10044,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 352,
            column: 27,
            span: 10045..10051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 352,
            column: 29,
            span: 10052..10053,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 352,
            column: 31,
            span: 10054..10055,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 352,
            column: 35,
            span: 10055..10059,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 352,
            column: 39,
            span: 10060..10063,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 352,
            column: 40,
            span: 10063..10064,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 352,
            column: 42,
            span: 10064..10066,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 352,
            column: 43,
            span: 10066..10067,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 352,
            column: 47,
            span: 10067..10071,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 352,
            column: 48,
            span: 10071..10072,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIVK'",
        ),
        position: Position {
            line: 352,
            column: 55,
            span: 10073..10079,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 352,
            column: 56,
            span: 10079..10080,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 352,
            column: 65,
            span: 10081..10089,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 352,
            column: 66,
            span: 10089..10090,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 352,
            column: 76,
            span: 10091..10100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 352,
            column: 77,
            span: 10100..10101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 353,
            column: 7,
            span: 10102..10108,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 8,
            span: 10108..10109,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 353,
            column: 16,
            span: 10109..10117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 18,
            span: 10118..10119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 353,
            column: 19,
            span: 10119..10120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 20,
            span: 10120..10121,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 353,
            column: 27,
            span: 10122..10128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 353,
            column: 29,
            span: 10129..10130,
        },
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        position: Position {
            line: 353,
            column: 32,
            span: 10131..10133,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 38,
            span: 10133..10139,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 353,
            column: 42,
            span: 10140..10143,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 353,
            column: 43,
            span: 10143..10144,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 49,
            span: 10144..10150,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 353,
            column: 50,
            span: 10150..10151,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 52,
            span: 10151..10153,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 353,
            column: 53,
            span: 10153..10154,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'IDIVK'",
        ),
        position: Position {
            line: 354,
            column: 17,
            span: 10164..10171,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 354,
            column: 18,
            span: 10171..10172,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 354,
            column: 27,
            span: 10173..10181,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 354,
            column: 28,
            span: 10181..10182,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 354,
            column: 38,
            span: 10183..10192,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 39,
            span: 10192..10193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkR",
        ),
        position: Position {
            line: 355,
            column: 7,
            span: 10194..10200,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 355,
            column: 8,
            span: 10200..10201,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 355,
            column: 16,
            span: 10201..10209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 355,
            column: 18,
            span: 10210..10211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 355,
            column: 19,
            span: 10211..10212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 355,
            column: 20,
            span: 10212..10213,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 355,
            column: 27,
            span: 10214..10220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 355,
            column: 29,
            span: 10221..10222,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 355,
            column: 31,
            span: 10223..10224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 355,
            column: 33,
            span: 10225..10226,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 38,
            span: 10225..10231,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 355,
            column: 40,
            span: 10232..10233,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 43,
            span: 10233..10236,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 355,
            column: 44,
            span: 10236..10237,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 355,
            column: 48,
            span: 10238..10241,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 355,
            column: 49,
            span: 10241..10242,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "91",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 52,
            span: 10242..10245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 355,
            column: 53,
            span: 10245..10246,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 57,
            span: 10246..10250,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 355,
            column: 58,
            span: 10250..10251,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MODK'",
        ),
        position: Position {
            line: 356,
            column: 16,
            span: 10261..10267,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 356,
            column: 17,
            span: 10267..10268,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 356,
            column: 26,
            span: 10269..10277,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 356,
            column: 27,
            span: 10277..10278,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 356,
            column: 37,
            span: 10279..10288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 356,
            column: 38,
            span: 10288..10289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 359,
            column: 6,
            span: 10331..10336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 7,
            span: 10336..10337,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 359,
            column: 15,
            span: 10337..10345,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 17,
            span: 10346..10347,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 18,
            span: 10347..10348,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 359,
            column: 25,
            span: 10349..10355,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 359,
            column: 27,
            span: 10356..10357,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 359,
            column: 30,
            span: 10356..10360,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 359,
            column: 34,
            span: 10361..10364,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 359,
            column: 35,
            span: 10364..10365,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADF'",
        ),
        position: Position {
            line: 359,
            column: 43,
            span: 10366..10373,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 359,
            column: 44,
            span: 10373..10374,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'UNM'",
        ),
        position: Position {
            line: 359,
            column: 50,
            span: 10375..10380,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 359,
            column: 51,
            span: 10380..10381,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 359,
            column: 61,
            span: 10382..10391,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 62,
            span: 10391..10392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 360,
            column: 6,
            span: 10393..10398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 7,
            span: 10398..10399,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 360,
            column: 15,
            span: 10399..10407,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 17,
            span: 10408..10409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 18,
            span: 10409..10410,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 360,
            column: 25,
            span: 10411..10417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k3",
        ),
        position: Position {
            line: 360,
            column: 28,
            span: 10418..10420,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 360,
            column: 29,
            span: 10420..10421,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 360,
            column: 30,
            span: 10420..10422,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 360,
            column: 34,
            span: 10423..10426,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 360,
            column: 35,
            span: 10426..10427,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 360,
            column: 43,
            span: 10428..10435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 360,
            column: 44,
            span: 10435..10436,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIVK'",
        ),
        position: Position {
            line: 360,
            column: 51,
            span: 10437..10443,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 360,
            column: 52,
            span: 10443..10444,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 360,
            column: 61,
            span: 10445..10453,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 360,
            column: 62,
            span: 10453..10454,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 360,
            column: 72,
            span: 10455..10464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 73,
            span: 10464..10465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 361,
            column: 6,
            span: 10466..10471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 7,
            span: 10471..10472,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 361,
            column: 15,
            span: 10472..10480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 17,
            span: 10481..10482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 18,
            span: 10482..10483,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 361,
            column: 25,
            span: 10484..10490,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 361,
            column: 27,
            span: 10490..10492,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 361,
            column: 28,
            span: 10492..10493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 361,
            column: 29,
            span: 10492..10494,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 361,
            column: 33,
            span: 10495..10498,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 34,
            span: 10498..10499,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 361,
            column: 42,
            span: 10500..10507,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 43,
            span: 10507..10508,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MODK'",
        ),
        position: Position {
            line: 361,
            column: 50,
            span: 10509..10515,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 51,
            span: 10515..10516,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 361,
            column: 60,
            span: 10517..10525,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 61,
            span: 10525..10526,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 361,
            column: 71,
            span: 10527..10536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 72,
            span: 10536..10537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 362,
            column: 6,
            span: 10538..10543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 7,
            span: 10543..10544,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 362,
            column: 15,
            span: 10544..10552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 17,
            span: 10553..10554,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 18,
            span: 10554..10555,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 362,
            column: 25,
            span: 10556..10562,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 362,
            column: 27,
            span: 10563..10564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 362,
            column: 28,
            span: 10563..10565,
        },
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        position: Position {
            line: 362,
            column: 30,
            span: 10565..10567,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 362,
            column: 31,
            span: 10566..10568,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 362,
            column: 35,
            span: 10569..10572,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 362,
            column: 36,
            span: 10572..10573,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 362,
            column: 44,
            span: 10574..10581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 362,
            column: 45,
            span: 10581..10582,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'IDIVK'",
        ),
        position: Position {
            line: 362,
            column: 53,
            span: 10583..10590,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 362,
            column: 54,
            span: 10590..10591,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINK'",
        ),
        position: Position {
            line: 362,
            column: 63,
            span: 10592..10600,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 362,
            column: 64,
            span: 10600..10601,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 362,
            column: 74,
            span: 10602..10611,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 75,
            span: 10611..10612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 363,
            column: 6,
            span: 10613..10618,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 7,
            span: 10618..10619,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 363,
            column: 15,
            span: 10619..10627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 17,
            span: 10628..10629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 363,
            column: 18,
            span: 10629..10630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 363,
            column: 19,
            span: 10630..10631,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 363,
            column: 26,
            span: 10632..10638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 363,
            column: 28,
            span: 10639..10640,
        },
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        position: Position {
            line: 363,
            column: 31,
            span: 10641..10643,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 363,
            column: 35,
            span: 10643..10647,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 363,
            column: 39,
            span: 10648..10651,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 363,
            column: 40,
            span: 10651..10652,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADF'",
        ),
        position: Position {
            line: 363,
            column: 48,
            span: 10653..10660,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 363,
            column: 49,
            span: 10660..10661,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SHR'",
        ),
        position: Position {
            line: 363,
            column: 55,
            span: 10662..10667,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 363,
            column: 56,
            span: 10667..10668,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBIN'",
        ),
        position: Position {
            line: 363,
            column: 64,
            span: 10669..10676,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 363,
            column: 65,
            span: 10676..10677,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 363,
            column: 75,
            span: 10678..10687,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 363,
            column: 76,
            span: 10687..10688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 364,
            column: 6,
            span: 10689..10694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 7,
            span: 10694..10695,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 364,
            column: 15,
            span: 10695..10703,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 17,
            span: 10704..10705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 364,
            column: 18,
            span: 10705..10706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 19,
            span: 10706..10707,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 364,
            column: 26,
            span: 10708..10714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 364,
            column: 28,
            span: 10715..10716,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 364,
            column: 31,
            span: 10717..10719,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "128",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 364,
            column: 35,
            span: 10719..10723,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 364,
            column: 39,
            span: 10724..10727,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 40,
            span: 10727..10728,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 364,
            column: 48,
            span: 10729..10736,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 49,
            span: 10736..10737,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SHL'",
        ),
        position: Position {
            line: 364,
            column: 55,
            span: 10738..10743,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 56,
            span: 10743..10744,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBIN'",
        ),
        position: Position {
            line: 364,
            column: 64,
            span: 10745..10752,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 65,
            span: 10752..10753,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 364,
            column: 75,
            span: 10754..10763,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 76,
            span: 10763..10764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 365,
            column: 6,
            span: 10765..10770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 7,
            span: 10770..10771,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 365,
            column: 15,
            span: 10771..10779,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 17,
            span: 10780..10781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 365,
            column: 18,
            span: 10781..10782,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 19,
            span: 10782..10783,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 365,
            column: 26,
            span: 10784..10790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 365,
            column: 28,
            span: 10791..10792,
        },
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        position: Position {
            line: 365,
            column: 30,
            span: 10793..10794,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 34,
            span: 10794..10798,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 365,
            column: 38,
            span: 10799..10802,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 39,
            span: 10802..10803,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADF'",
        ),
        position: Position {
            line: 365,
            column: 47,
            span: 10804..10811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 48,
            span: 10811..10812,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'BAND'",
        ),
        position: Position {
            line: 365,
            column: 55,
            span: 10813..10819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 56,
            span: 10819..10820,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBIN'",
        ),
        position: Position {
            line: 365,
            column: 64,
            span: 10821..10828,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 65,
            span: 10828..10829,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 365,
            column: 75,
            span: 10830..10839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 76,
            span: 10839..10840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 368,
            column: 6,
            span: 10863..10868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 7,
            span: 10868..10869,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 368,
            column: 15,
            span: 10869..10877,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 17,
            span: 10878..10879,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 18,
            span: 10879..10880,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 368,
            column: 22,
            span: 10881..10884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 368,
            column: 24,
            span: 10885..10886,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 368,
            column: 26,
            span: 10887..10888,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 368,
            column: 28,
            span: 10889..10890,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 368,
            column: 30,
            span: 10889..10892,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 368,
            column: 31,
            span: 10892..10893,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 368,
            column: 36,
            span: 10893..10898,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 368,
            column: 39,
            span: 10899..10901,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 368,
            column: 43,
            span: 10902..10905,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 368,
            column: 47,
            span: 10906..10909,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 368,
            column: 48,
            span: 10909..10910,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 369,
            column: 8,
            span: 10911..10918,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 9,
            span: 10918..10919,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 369,
            column: 17,
            span: 10920..10927,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 18,
            span: 10927..10928,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 369,
            column: 26,
            span: 10929..10936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 27,
            span: 10936..10937,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'FORPREP'",
        ),
        position: Position {
            line: 369,
            column: 37,
            span: 10938..10947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 38,
            span: 10947..10948,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'FORLOOP'",
        ),
        position: Position {
            line: 369,
            column: 48,
            span: 10949..10958,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 49,
            span: 10958..10959,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 369,
            column: 59,
            span: 10960..10969,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 60,
            span: 10969..10970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 370,
            column: 6,
            span: 10971..10976,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 7,
            span: 10976..10977,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 370,
            column: 15,
            span: 10977..10985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 17,
            span: 10986..10987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 18,
            span: 10987..10988,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 370,
            column: 22,
            span: 10989..10992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 370,
            column: 24,
            span: 10993..10994,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 370,
            column: 26,
            span: 10995..10996,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffff",
            ),
        ),
        position: Position {
            line: 370,
            column: 36,
            span: 10996..11006,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 370,
            column: 37,
            span: 11006..11007,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 370,
            column: 42,
            span: 11007..11012,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 370,
            column: 43,
            span: 11012..11013,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 370,
            column: 45,
            span: 11013..11015,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 370,
            column: 48,
            span: 11016..11018,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 370,
            column: 52,
            span: 11019..11022,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 370,
            column: 56,
            span: 11023..11026,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 370,
            column: 57,
            span: 11026..11027,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 371,
            column: 8,
            span: 11028..11035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 9,
            span: 11035..11036,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADF'",
        ),
        position: Position {
            line: 371,
            column: 17,
            span: 11037..11044,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 18,
            span: 11044..11045,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADI'",
        ),
        position: Position {
            line: 371,
            column: 26,
            span: 11046..11053,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 27,
            span: 11053..11054,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'FORPREP'",
        ),
        position: Position {
            line: 371,
            column: 37,
            span: 11055..11064,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 38,
            span: 11064..11065,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'FORLOOP'",
        ),
        position: Position {
            line: 371,
            column: 48,
            span: 11066..11075,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 49,
            span: 11075..11076,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 371,
            column: 59,
            span: 11077..11086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 60,
            span: 11086..11087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 374,
            column: 6,
            span: 11124..11129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 7,
            span: 11129..11130,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 374,
            column: 15,
            span: 11130..11138,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 17,
            span: 11139..11140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 18,
            span: 11140..11141,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 374,
            column: 25,
            span: 11142..11148,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 374,
            column: 27,
            span: 11149..11150,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 374,
            column: 30,
            span: 11150..11153,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 374,
            column: 34,
            span: 11154..11157,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 374,
            column: 35,
            span: 11157..11158,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        position: Position {
            line: 374,
            column: 45,
            span: 11159..11168,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 374,
            column: 46,
            span: 11168..11169,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'UNM'",
        ),
        position: Position {
            line: 374,
            column: 52,
            span: 11170..11175,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 374,
            column: 53,
            span: 11175..11176,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN1'",
        ),
        position: Position {
            line: 374,
            column: 63,
            span: 11177..11186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 64,
            span: 11186..11187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 377,
            column: 6,
            span: 11190..11195,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 7,
            span: 11195..11196,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 377,
            column: 15,
            span: 11196..11204,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 17,
            span: 11205..11206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 18,
            span: 11206..11207,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 378,
            column: 8,
            span: 11210..11215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 378,
            column: 10,
            span: 11216..11217,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 378,
            column: 11,
            span: 11217..11218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 378,
            column: 12,
            span: 11218..11219,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 378,
            column: 13,
            span: 11219..11220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 378,
            column: 0,
            span: 11220..11221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 379,
            column: 4,
            span: 11224..11225,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 379,
            column: 5,
            span: 11225..11226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 379,
            column: 6,
            span: 11226..11227,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 379,
            column: 7,
            span: 11227..11228,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 379,
            column: 8,
            span: 11228..11229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 379,
            column: 10,
            span: 11230..11231,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 379,
            column: 12,
            span: 11232..11233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 379,
            column: 14,
            span: 11234..11235,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 379,
            column: 15,
            span: 11235..11236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 379,
            column: 0,
            span: 11237..11238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 380,
            column: 4,
            span: 11241..11242,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 380,
            column: 5,
            span: 11242..11243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 380,
            column: 6,
            span: 11243..11244,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 380,
            column: 7,
            span: 11244..11245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 8,
            span: 11245..11246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 380,
            column: 10,
            span: 11247..11248,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 380,
            column: 12,
            span: 11249..11250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 380,
            column: 14,
            span: 11251..11252,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 15,
            span: 11252..11253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 380,
            column: 0,
            span: 11254..11255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 381,
            column: 4,
            span: 11258..11259,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 5,
            span: 11259..11260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 381,
            column: 7,
            span: 11261..11262,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 381,
            column: 9,
            span: 11263..11264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 381,
            column: 11,
            span: 11265..11266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 12,
            span: 11266..11267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 381,
            column: 0,
            span: 11268..11269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 382,
            column: 4,
            span: 11272..11273,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 382,
            column: 6,
            span: 11274..11275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 382,
            column: 0,
            span: 11276..11277,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 383,
            column: 4,
            span: 11278..11281,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 383,
            column: 5,
            span: 11281..11282,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        position: Position {
            line: 384,
            column: 12,
            span: 11285..11294,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 384,
            column: 13,
            span: 11294..11295,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 385,
            column: 9,
            span: 11298..11304,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 10,
            span: 11304..11305,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 385,
            column: 17,
            span: 11306..11312,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 18,
            span: 11312..11313,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 385,
            column: 29,
            span: 11314..11324,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 30,
            span: 11324..11325,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 386,
            column: 9,
            span: 11328..11334,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 10,
            span: 11334..11335,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 386,
            column: 17,
            span: 11336..11342,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 18,
            span: 11342..11343,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 386,
            column: 25,
            span: 11344..11350,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 26,
            span: 11350..11351,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 386,
            column: 37,
            span: 11352..11362,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 38,
            span: 11362..11363,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 387,
            column: 9,
            span: 11366..11372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 10,
            span: 11372..11373,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 387,
            column: 17,
            span: 11374..11380,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 18,
            span: 11380..11381,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 387,
            column: 25,
            span: 11382..11388,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 26,
            span: 11388..11389,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 389,
            column: 12,
            span: 11415..11424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 389,
            column: 13,
            span: 11424..11425,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 399,
            column: 3,
            span: 11711..11713,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 400,
            column: 8,
            span: 11756..11761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 400,
            column: 0,
            span: 11762..11763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 401,
            column: 8,
            span: 11766..11771,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 401,
            column: 9,
            span: 11771..11772,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 401,
            column: 17,
            span: 11772..11780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 401,
            column: 19,
            span: 11781..11782,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 401,
            column: 20,
            span: 11782..11783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 401,
            column: 22,
            span: 11784..11785,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 401,
            column: 23,
            span: 11785..11786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kx",
        ),
        position: Position {
            line: 401,
            column: 25,
            span: 11786..11788,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 401,
            column: 26,
            span: 11788..11789,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 401,
            column: 28,
            span: 11790..11791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 401,
            column: 30,
            span: 11792..11793,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 401,
            column: 31,
            span: 11793..11794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 401,
            column: 32,
            span: 11794..11795,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 401,
            column: 36,
            span: 11796..11799,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 401,
            column: 37,
            span: 11799..11800,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABUP'",
        ),
        position: Position {
            line: 401,
            column: 48,
            span: 11801..11811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 401,
            column: 49,
            span: 11811..11812,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABUP'",
        ),
        position: Position {
            line: 401,
            column: 60,
            span: 11813..11823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 401,
            column: 61,
            span: 11823..11824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 402,
            column: 8,
            span: 11827..11832,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 402,
            column: 9,
            span: 11832..11833,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 402,
            column: 17,
            span: 11833..11841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 402,
            column: 19,
            span: 11842..11843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 402,
            column: 20,
            span: 11843..11844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 402,
            column: 21,
            span: 11844..11845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 402,
            column: 23,
            span: 11846..11847,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 402,
            column: 24,
            span: 11847..11848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 402,
            column: 25,
            span: 11848..11849,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 402,
            column: 26,
            span: 11849..11850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 402,
            column: 27,
            span: 11850..11851,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 402,
            column: 28,
            span: 11851..11852,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 402,
            column: 30,
            span: 11853..11854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 402,
            column: 32,
            span: 11855..11856,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 402,
            column: 33,
            span: 11856..11857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 402,
            column: 34,
            span: 11857..11858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 402,
            column: 35,
            span: 11858..11859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 402,
            column: 36,
            span: 11859..11860,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 402,
            column: 37,
            span: 11860..11861,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 402,
            column: 41,
            span: 11862..11865,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 402,
            column: 42,
            span: 11865..11866,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 403,
            column: 9,
            span: 11869..11875,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 403,
            column: 10,
            span: 11875..11876,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        position: Position {
            line: 403,
            column: 17,
            span: 11877..11883,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 403,
            column: 18,
            span: 11883..11884,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETUPVAL'",
        ),
        position: Position {
            line: 403,
            column: 29,
            span: 11885..11895,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 403,
            column: 30,
            span: 11895..11896,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 403,
            column: 37,
            span: 11897..11903,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 403,
            column: 38,
            span: 11903..11904,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        position: Position {
            line: 403,
            column: 45,
            span: 11905..11911,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 403,
            column: 46,
            span: 11911..11912,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETUPVAL'",
        ),
        position: Position {
            line: 404,
            column: 13,
            span: 11915..11925,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 404,
            column: 14,
            span: 11925..11926,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABLE'",
        ),
        position: Position {
            line: 404,
            column: 25,
            span: 11927..11937,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 404,
            column: 26,
            span: 11937..11938,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 404,
            column: 37,
            span: 11939..11949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 404,
            column: 38,
            span: 11949..11950,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 405,
            column: 0,
            span: 11951..11954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        position: Position {
            line: 408,
            column: 11,
            span: 11969..11979,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 12,
            span: 11979..11980,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 408,
            column: 20,
            span: 11980..11988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 22,
            span: 11989..11990,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 408,
            column: 23,
            span: 11990..11991,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 408,
            column: 29,
            span: 11992..11997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 408,
            column: 31,
            span: 11998..11999,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 408,
            column: 32,
            span: 11999..12000,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 408,
            column: 35,
            span: 12001..12003,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 408,
            column: 39,
            span: 12004..12007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 41,
            span: 12008..12009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 408,
            column: 42,
            span: 12009..12010,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 408,
            column: 45,
            span: 12011..12013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 408,
            column: 47,
            span: 12014..12015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 408,
            column: 48,
            span: 12015..12016,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 408,
            column: 53,
            span: 12017..12021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 408,
            column: 55,
            span: 12022..12023,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 408,
            column: 56,
            span: 12023..12024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 408,
            column: 57,
            span: 12024..12025,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 408,
            column: 61,
            span: 12026..12029,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 408,
            column: 65,
            span: 12030..12033,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 408,
            column: 66,
            span: 12033..12034,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 409,
            column: 20,
            span: 12046..12054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 409,
            column: 22,
            span: 12055..12056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 409,
            column: 23,
            span: 12056..12057,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 409,
            column: 29,
            span: 12058..12063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 409,
            column: 31,
            span: 12064..12065,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 409,
            column: 32,
            span: 12065..12066,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 409,
            column: 35,
            span: 12067..12069,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 409,
            column: 37,
            span: 12070..12071,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 409,
            column: 40,
            span: 12071..12074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 409,
            column: 42,
            span: 12075..12076,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 409,
            column: 46,
            span: 12077..12080,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 409,
            column: 50,
            span: 12081..12084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 409,
            column: 52,
            span: 12085..12086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 409,
            column: 53,
            span: 12086..12087,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 409,
            column: 58,
            span: 12088..12092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 409,
            column: 60,
            span: 12093..12094,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 409,
            column: 61,
            span: 12094..12095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 409,
            column: 62,
            span: 12095..12096,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 409,
            column: 66,
            span: 12097..12100,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 409,
            column: 70,
            span: 12101..12104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 409,
            column: 71,
            span: 12104..12105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        position: Position {
            line: 411,
            column: 11,
            span: 12107..12117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 411,
            column: 12,
            span: 12117..12118,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 411,
            column: 20,
            span: 12118..12126,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 411,
            column: 22,
            span: 12127..12128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 411,
            column: 23,
            span: 12128..12129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 411,
            column: 24,
            span: 12129..12130,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 411,
            column: 30,
            span: 12131..12136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 411,
            column: 32,
            span: 12137..12138,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 411,
            column: 33,
            span: 12138..12139,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 411,
            column: 40,
            span: 12140..12146,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 411,
            column: 42,
            span: 12146..12148,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 411,
            column: 45,
            span: 12149..12151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 411,
            column: 47,
            span: 12152..12153,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 411,
            column: 51,
            span: 12154..12157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 411,
            column: 53,
            span: 12158..12159,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 411,
            column: 56,
            span: 12160..12162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 411,
            column: 58,
            span: 12163..12164,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 411,
            column: 62,
            span: 12165..12168,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 411,
            column: 63,
            span: 12168..12169,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 412,
            column: 20,
            span: 12181..12189,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 22,
            span: 12190..12191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 412,
            column: 23,
            span: 12191..12192,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 24,
            span: 12192..12193,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 412,
            column: 30,
            span: 12194..12199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 412,
            column: 32,
            span: 12200..12201,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 412,
            column: 33,
            span: 12201..12202,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 412,
            column: 40,
            span: 12203..12209,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 412,
            column: 44,
            span: 12210..12213,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 46,
            span: 12214..12215,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 412,
            column: 49,
            span: 12215..12218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 50,
            span: 12218..12219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 412,
            column: 51,
            span: 12219..12220,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 412,
            column: 54,
            span: 12221..12223,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 412,
            column: 56,
            span: 12223..12225,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 57,
            span: 12225..12226,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 412,
            column: 60,
            span: 12227..12229,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 412,
            column: 64,
            span: 12230..12233,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 65,
            span: 12233..12234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 412,
            column: 66,
            span: 12234..12235,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 412,
            column: 69,
            span: 12236..12238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 412,
            column: 71,
            span: 12239..12240,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 72,
            span: 12240..12241,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 73,
            span: 12241..12242,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 412,
            column: 77,
            span: 12243..12246,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 78,
            span: 12246..12247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 416,
            column: 6,
            span: 12276..12281,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 416,
            column: 7,
            span: 12281..12282,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 416,
            column: 15,
            span: 12282..12290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 416,
            column: 17,
            span: 12291..12292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 416,
            column: 18,
            span: 12292..12293,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 416,
            column: 19,
            span: 12293..12294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 416,
            column: 21,
            span: 12295..12296,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 416,
            column: 22,
            span: 12296..12297,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 417,
            column: 14,
            span: 12306..12311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 417,
            column: 16,
            span: 12312..12313,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 417,
            column: 0,
            span: 12314..12316,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 418,
            column: 13,
            span: 12327..12329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 418,
            column: 15,
            span: 12330..12331,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 418,
            column: 20,
            span: 12332..12336,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 418,
            column: 26,
            span: 12337..12342,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 418,
            column: 31,
            span: 12343..12347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 418,
            column: 33,
            span: 12348..12349,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 418,
            column: 35,
            span: 12350..12351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 418,
            column: 37,
            span: 12352..12353,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 418,
            column: 39,
            span: 12354..12355,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 418,
            column: 41,
            span: 12355..12357,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 418,
            column: 0,
            span: 12358..12361,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 419,
            column: 0,
            span: 12370..12373,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 420,
            column: 10,
            span: 12380..12383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 420,
            column: 11,
            span: 12383..12384,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'TEST'",
        ),
        position: Position {
            line: 421,
            column: 7,
            span: 12385..12391,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 8,
            span: 12391..12392,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 421,
            column: 14,
            span: 12393..12398,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 15,
            span: 12398..12399,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'TEST'",
        ),
        position: Position {
            line: 421,
            column: 22,
            span: 12400..12406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 23,
            span: 12406..12407,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 421,
            column: 29,
            span: 12408..12413,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 30,
            span: 12413..12414,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ADDI'",
        ),
        position: Position {
            line: 421,
            column: 37,
            span: 12415..12421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 38,
            span: 12421..12422,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MMBINI'",
        ),
        position: Position {
            line: 421,
            column: 47,
            span: 12423..12431,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 48,
            span: 12431..12432,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 421,
            column: 54,
            span: 12433..12438,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 55,
            span: 12438..12439,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN0'",
        ),
        position: Position {
            line: 421,
            column: 65,
            span: 12440..12449,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 421,
            column: 66,
            span: 12449..12450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        position: Position {
            line: 423,
            column: 11,
            span: 12452..12462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 12,
            span: 12462..12463,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 423,
            column: 20,
            span: 12463..12471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 22,
            span: 12472..12473,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 23,
            span: 12473..12474,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 423,
            column: 30,
            span: 12475..12481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 423,
            column: 32,
            span: 12481..12483,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 423,
            column: 35,
            span: 12484..12486,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 423,
            column: 40,
            span: 12487..12491,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 423,
            column: 43,
            span: 12492..12494,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 423,
            column: 47,
            span: 12495..12498,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 423,
            column: 51,
            span: 12499..12502,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 423,
            column: 52,
            span: 12502..12503,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 424,
            column: 20,
            span: 12515..12523,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 424,
            column: 22,
            span: 12524..12525,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 23,
            span: 12525..12526,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 424,
            column: 30,
            span: 12527..12533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k6",
        ),
        position: Position {
            line: 424,
            column: 33,
            span: 12534..12536,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 424,
            column: 36,
            span: 12537..12539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kTrue",
        ),
        position: Position {
            line: 424,
            column: 42,
            span: 12540..12545,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 424,
            column: 45,
            span: 12546..12548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kNil",
        ),
        position: Position {
            line: 424,
            column: 50,
            span: 12549..12553,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 424,
            column: 54,
            span: 12554..12557,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 55,
            span: 12557..12558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        position: Position {
            line: 426,
            column: 11,
            span: 12560..12570,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 426,
            column: 12,
            span: 12570..12571,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 426,
            column: 20,
            span: 12571..12579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 426,
            column: 22,
            span: 12580..12581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 426,
            column: 23,
            span: 12581..12582,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 426,
            column: 30,
            span: 12583..12589,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 426,
            column: 32,
            span: 12589..12591,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 426,
            column: 36,
            span: 12592..12595,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 426,
            column: 41,
            span: 12596..12600,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 426,
            column: 44,
            span: 12601..12603,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 426,
            column: 48,
            span: 12604..12607,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 426,
            column: 52,
            span: 12608..12611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 426,
            column: 53,
            span: 12611..12612,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 427,
            column: 20,
            span: 12624..12632,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 427,
            column: 22,
            span: 12633..12634,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 427,
            column: 23,
            span: 12634..12635,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 427,
            column: 30,
            span: 12636..12642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k6",
        ),
        position: Position {
            line: 427,
            column: 33,
            span: 12643..12645,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 427,
            column: 37,
            span: 12646..12649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kTrue",
        ),
        position: Position {
            line: 427,
            column: 43,
            span: 12650..12655,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 427,
            column: 46,
            span: 12656..12658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kNil",
        ),
        position: Position {
            line: 427,
            column: 51,
            span: 12659..12663,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 427,
            column: 55,
            span: 12664..12667,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 427,
            column: 56,
            span: 12667..12668,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 430,
            column: 3,
            span: 12671..12673,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 431,
            column: 8,
            span: 12698..12703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k0",
        ),
        position: Position {
            line: 431,
            column: 11,
            span: 12704..12706,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 431,
            column: 13,
            span: 12707..12708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 431,
            column: 18,
            span: 12708..12713,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 431,
            column: 19,
            span: 12713..12714,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 431,
            column: 21,
            span: 12715..12716,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"00000000000000000000000000000000000000000000000000\"",
        ),
        position: Position {
            line: 431,
            column: 74,
            span: 12717..12769,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 432,
            column: 8,
            span: 12772..12777,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 432,
            column: 17,
            span: 12778..12786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 432,
            column: 20,
            span: 12787..12789,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 432,
            column: 22,
            span: 12790..12791,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 432,
            column: 23,
            span: 12791..12792,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 433,
            column: 10,
            span: 12797..12802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 433,
            column: 12,
            span: 12803..12804,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 433,
            column: 14,
            span: 12805..12806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 433,
            column: 19,
            span: 12806..12811,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 433,
            column: 20,
            span: 12811..12812,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 433,
            column: 22,
            span: 12813..12814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k0",
        ),
        position: Position {
            line: 433,
            column: 0,
            span: 12815..12817,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 434,
            column: 11,
            span: 12822..12828,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 434,
            column: 20,
            span: 12829..12837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 434,
            column: 22,
            span: 12838..12839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 434,
            column: 23,
            span: 12839..12840,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 435,
            column: 20,
            span: 12854..12860,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 435,
            column: 29,
            span: 12861..12869,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 435,
            column: 31,
            span: 12870..12871,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 435,
            column: 32,
            span: 12871..12872,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 435,
            column: 39,
            span: 12873..12879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 435,
            column: 41,
            span: 12880..12881,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 435,
            column: 0,
            span: 12882..12885,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 436,
            column: 0,
            span: 12897..12900,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 437,
            column: 0,
            span: 12903..12906,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 439,
            column: 8,
            span: 12910..12915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        position: Position {
            line: 439,
            column: 11,
            span: 12916..12918,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 439,
            column: 13,
            span: 12919..12920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 439,
            column: 16,
            span: 12921..12923,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 439,
            column: 17,
            span: 12923..12924,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 439,
            column: 18,
            span: 12924..12925,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 440,
            column: 8,
            span: 12928..12933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f3",
        ),
        position: Position {
            line: 440,
            column: 11,
            span: 12934..12936,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 440,
            column: 13,
            span: 12937..12938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        position: Position {
            line: 440,
            column: 16,
            span: 12939..12941,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 440,
            column: 17,
            span: 12941..12942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 440,
            column: 18,
            span: 12942..12943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 441,
            column: 9,
            span: 12946..12952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 441,
            column: 10,
            span: 12952..12953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f3",
        ),
        position: Position {
            line: 441,
            column: 12,
            span: 12953..12955,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 441,
            column: 13,
            span: 12955..12956,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 441,
            column: 14,
            span: 12956..12957,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 441,
            column: 17,
            span: 12958..12960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k0",
        ),
        position: Position {
            line: 441,
            column: 20,
            span: 12961..12963,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 441,
            column: 21,
            span: 12963..12964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        position: Position {
            line: 442,
            column: 9,
            span: 12967..12973,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 10,
            span: 12973..12974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f3",
        ),
        position: Position {
            line: 442,
            column: 12,
            span: 12974..12976,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 442,
            column: 13,
            span: 12976..12977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k0",
        ),
        position: Position {
            line: 442,
            column: 16,
            span: 12978..12980,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 442,
            column: 17,
            span: 12980..12981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 444,
            column: 9,
            span: 13029..13035,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 10,
            span: 13035..13036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 444,
            column: 11,
            span: 13036..13037,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 444,
            column: 12,
            span: 13037..13038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listk",
        ),
        position: Position {
            line: 444,
            column: 17,
            span: 13038..13043,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 18,
            span: 13043..13044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 444,
            column: 20,
            span: 13044..13046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 21,
            span: 13046..13047,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 444,
            column: 22,
            span: 13047..13048,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 444,
            column: 23,
            span: 13047..13049,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 444,
            column: 24,
            span: 13049..13050,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 444,
            column: 27,
            span: 13051..13053,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 444,
            column: 31,
            span: 13054..13057,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 32,
            span: 13057..13058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 445,
            column: 9,
            span: 13061..13067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 10,
            span: 13067..13068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 445,
            column: 11,
            span: 13068..13069,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 445,
            column: 12,
            span: 13069..13070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listk",
        ),
        position: Position {
            line: 445,
            column: 17,
            span: 13070..13075,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 18,
            span: 13075..13076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        position: Position {
            line: 445,
            column: 20,
            span: 13076..13078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 21,
            span: 13078..13079,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 445,
            column: 22,
            span: 13079..13080,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 445,
            column: 23,
            span: 13079..13081,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 445,
            column: 24,
            span: 13081..13082,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 445,
            column: 27,
            span: 13083..13085,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 445,
            column: 31,
            span: 13086..13089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 32,
            span: 13089..13090,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 446,
            column: 0,
            span: 13091..13094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 448,
            column: 6,
            span: 13096..13101,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 448,
            column: 11,
            span: 13102..13106,
        },
    },
]
