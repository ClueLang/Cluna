---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/errors.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing errors\"",
        ),
        line: 4,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 9,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 9,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 9,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmm",
        ),
        line: 10,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 10,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 11,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 11,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 14,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 15,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 15,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 16,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 19,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 20,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 20,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 21,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 21,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 21,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 21,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 21,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        line: 22,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 22,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 23,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 24,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 29,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 30,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 31,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 33,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 34,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 35,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 35,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 35,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^<%a\"",
        ),
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 35,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 35,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 35,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^char%(\"",
        ),
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 37,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 37,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 37,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 37,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 39,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%p)\"",
        ),
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%%1\"",
        ),
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        line: 40,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 40,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[^%%[string \".*\"%%]:%d: .- near %s$]]",
        ),
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error('hi', 0)\"",
        ),
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error()\"",
        ),
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.unpack({}, 1, n=2^30)\"",
        ),
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=math.sin()\"",
        ),
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring(1)\"",
        ),
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring()\"",
        ),
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 58,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber()\"",
        ),
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 59,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"repeat until 1; a\"",
        ),
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 60,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return;;\"",
        ),
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 61,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(false)\"",
        ),
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 62,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(nil)\"",
        ),
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (... , ...) end\"",
        ),
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (, ...) end\"",
        ),
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local t={}; t = t[#t] + 1\"",
        ),
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local a = {4\n\n]]",
        ),
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'}' expected (to close '{' at line 1)\"",
        ),
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 73,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 74,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 75,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 76,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line \"",
        ),
        line: 76,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 77,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n     a = 1\n\n  ]]",
        ),
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'A' already defined\"",
        ),
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    a = 1\n\n    do  end\n  ]]",
        ),
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no visible label 'A'\"",
        ),
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 90,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 93,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 93,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 94,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping memory message test <<<\\n'",
        ),
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 97,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing memory error message\"",
        ),
        line: 97,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 98,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 98,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 98,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 99,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 99,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 101,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 101,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 103,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 104,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100000",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 104,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 104,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 104,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 106,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 107,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 107,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough\"",
        ),
        line: 107,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" memory\"",
        ),
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} + 1\"",
        ),
        line: 113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arithmetic\"",
        ),
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} | 1\"",
        ),
        line: 114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bitwise operation\"",
        ),
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} < 1\"",
        ),
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to compare\"",
        ),
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} <= 1\"",
        ),
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to compare\"",
        ),
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; bbbb=2; a=math.sin(3)+bbbb(3)\"",
        ),
        line: 118,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbbb'\"",
        ),
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={}; do local a=1 end a:bbbb(3)\"",
        ),
        line: 119,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbbb'\"",
        ),
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; a.bbbb(3)\"",
        ),
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbbb'\"",
        ),
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 121,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'bbbb'\"",
        ),
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=(1)..{}\"",
        ),
        line: 123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a table value\"",
        ),
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a(13)\"",
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'a'\"",
        ),
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local a = setmetatable({}, {__add = 34})\n  a = a + 1\n]]",
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod 'add'\"",
        ),
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local a = setmetatable({}, {__lt = {}})\n  a = a > a\n]]",
        ),
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod 'lt'\"",
        ),
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; return a.bbbb(3)\"",
        ),
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbbb'\"",
        ),
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={}; do local a=1 end; return a:bbbb(3)\"",
        ),
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbbb'\"",
        ),
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = #print\"",
        ),
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"length of a function value\"",
        ),
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = #3\"",
        ),
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"length of a number value\"",
        ),
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aaa",
        ),
        line: 143,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 143,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa.bbb:ddd(9)\"",
        ),
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb=1}; aaa.bbb:ddd(9)\"",
        ),
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={}}; aaa.bbb:ddd(9)\"",
        ),
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'ddd'\"",
        ),
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c; (function () a = b+1.1 end)()\"",
        ),
        line: 147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'b'\"",
        ),
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 148,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={ddd=next}}; aaa.bbb:ddd(nil)\"",
        ),
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,cc; (function () a = cc[1] end)()\"",
        ),
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'cc'\"",
        ),
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,cc; (function () a.x = 1 end)()\"",
        ),
        line: 152,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'a'\"",
        ),
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local _ENV = {x={}}; a = a + 1\"",
        ),
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'a'\"",
        ),
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b=1; local aaa={}; x=aaa+b\"",
        ),
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aaa'\"",
        ),
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=3.3/aaa\"",
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa=2; b=nil;x=aaa*b\"",
        ),
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'b'\"",
        ),
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=-aaa\"",
        ),
        line: 159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; local a,bbbb=2,3; a = math.sin(1) and bbbb(3)\"",
        ),
        line: 162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'bbbb'\"",
        ),
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; local a,bbbb=2,3; a = bbbb(1) or a(3)\"",
        ),
        line: 164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'bbbb'\"",
        ),
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c,f = 1,1,1; f((a and b) or c)\"",
        ),
        line: 165,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'f'\"",
        ),
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c = 1,1,1; ((a and b) or c)()\"",
        ),
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call a number value\"",
        ),
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 167,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=(aaa or aaa)+(aaa and aaa)\"",
        ),
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 168,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 168,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; (aaa or aaa)()\"",
        ),
        line: 168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(print < 10)\"",
        ),
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function with number\"",
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(print < print)\"",
        ),
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"two function values\"",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print('10' < 10)\"",
        ),
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string with number\"",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(10 < '23')\"",
        ),
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number with string\"",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100; x = a << 2\"",
        ),
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a\"",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 1 >> 2.0^100\"",
        ),
        line: 177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 10.1 << 2.0^100\"",
        ),
        line: 178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100 & 1\"",
        ),
        line: 179,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100 & 1e100\"",
        ),
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0 | 1e40\"",
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2e100 ~ 1\"",
        ),
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.sub('a', 2.0^100)\"",
        ),
        line: 183,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.rep('a', 3.3)\"",
        ),
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 6e40 & 7\"",
        ),
        line: 185,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 34 << 7e30\"",
        ),
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~-3e40\"",
        ),
        line: 187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~-3.009\"",
        ),
        line: 188,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 3.009 & 1\"",
        ),
        line: 189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 34 >> {}\"",
        ),
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table value\"",
        ),
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 24 // 0\"",
        ),
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"divide by zero\"",
        ),
        line: 191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 1 % 0\"",
        ),
        line: 192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'n%0'\"",
        ),
        line: 192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = setmetatable({}, {__index = 10}).x\"",
        ),
        line: 198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to index a number value\"",
        ),
        line: 199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = {}, 10 do end\"",
        ),
        line: 203,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = io.stdin, 10 do end\"",
        ),
        line: 204,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FILE\"",
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = {}, 10 do end\"",
        ),
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"initial value\"",
        ),
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = 1, 'x', 10 do end\"",
        ),
        line: 206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = 1, {}, 10 do end\"",
        ),
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"limit\"",
        ),
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = 1, {} do end\"",
        ),
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"limit\"",
        ),
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = 1, 10, print do end\"",
        ),
        line: 209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = 1, 10, print do end\"",
        ),
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 213,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 213,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  -- create light udata\n  local x = D.upvalueid(function () return debug end, 1)\n  D.setuservalue(x, {})\n]]",
        ),
        line: 218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"light userdata\"",
        ),
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 219,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 219,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 219,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 219,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"math.sin(io.input())\"",
        ),
        line: 222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(number expected, got FILE*)\"",
        ),
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 223,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 223,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 223,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__name",
        ),
        line: 223,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"My Type\"",
        ),
        line: 223,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 224,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^My Type\"",
        ),
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io.input(XX)\"",
        ),
        line: 225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(FILE* expected, got My Type)\"",
        ),
        line: 225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX + 1\"",
        ),
        line: 226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"on a My Type value\"",
        ),
        line: 226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~io.stdin\"",
        ),
        line: 227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"on a FILE* value\"",
        ),
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX < XX\"",
        ),
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"two My Type values\"",
        ),
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return {} < XX\"",
        ),
        line: 229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table with My Type\"",
        ),
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX < io.stdin\"",
        ),
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"My Type with FILE*\"",
        ),
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 231,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 231,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 231,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 231,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 233,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 233,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 235,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 235,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 235,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__name",
        ),
        line: 235,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 235,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"TABLE\"",
        ),
        line: 235,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 236,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Ltolstring -1; return 1\"",
        ),
        line: 236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 238,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 238,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushint 10; Ltolstring -2; return 2\"",
        ),
        line: 238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 239,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 239,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__tostring",
        ),
        line: 242,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 242,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 243,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ABC\"",
        ),
        line: 244,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 245,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 247,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 247,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushint 10; Ltolstring -2; return 3\"",
        ),
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 248,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ABC\"",
        ),
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(io.write or print){}\"",
        ),
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io.write\"",
        ),
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(collectgarbage or print){}\"",
        ),
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"collectgarbage\"",
        ),
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 257,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 258,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 258,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 259,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 259,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%?:%-1:\"",
        ),
        line: 261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 261,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 264,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 265,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 265,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 265,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 268,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 268,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 268,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%?:%-1:.*table value\"",
        ),
        line: 270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 271,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 275,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 275,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 275,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 275,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 276,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 277,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 277,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 277,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = x\"",
        ),
        line: 277,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 277,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 278,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 279,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 279,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 279,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; \"",
        ),
        line: 279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 280,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 280,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 281,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 281,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; a = bbb + 1\"",
        ),
        line: 281,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbb'\"",
        ),
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local _ENV=_ENV;\"",
        ),
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; a = bbb + 1\"",
        ),
        line: 282,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbb'\"",
        ),
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 283,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 283,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; local t = {}; a = t.bbb + 1\"",
        ),
        line: 283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        line: 283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 284,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; local t = {}; t:bbb()\"",
        ),
        line: 284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbb'\"",
        ),
        line: 284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[aaa=9\nrepeat until 3==3\nlocal x=math.sin(math.cos(3))\nif math.sin(1) == x then return math.sin(1) end   -- tail call\nlocal a,b = 1, {\n  {x='a'..'b'..'c', y='b', z=x},\n  {1,2,3,4,5} or 3+3<=3+3,\n  3+1>3+1,\n  {d = x and aaa[x or y]}}\n]]",
        ),
        line: 295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal x,y = {},1\nif math.sin(1) == 0 then return 3 end    -- return\nx.a()]]",
        ),
        line: 300,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'a'\"",
        ),
        line: 300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nprefix = nil\ninsert = nil\nwhile 1 do\n  local a\n  if nil then break end\n  insert(prefix, a)\nend]]",
        ),
        line: 309,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'insert'\"",
        ),
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[  -- tail call\n  return math.sin(\"a\")\n]]",
        ),
        line: 313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sin\"",
        ),
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[collectgarbage(\"nooption\")]]",
        ),
        line: 315,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid option\"",
        ),
        line: 315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = print .. \"a\"]]",
        ),
        line: 317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = \"a\" .. false]]",
        ),
        line: 318,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = {} .. 2]]",
        ),
        line: 319,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getmetatable(io.stdin).__gc()\"",
        ),
        line: 321,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no value\"",
        ),
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal Var\nlocal function main()\n  NoSuchName (function() Var=0 end)\nend\nmain()\n]]",
        ),
        line: 329,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'NoSuchName'\"",
        ),
        line: 329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 332,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 332,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 332,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 332,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 332,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 332,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 332,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 332,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a:sub()\"",
        ),
        line: 333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bad self\"",
        ),
        line: 333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.sub('a', {})\"",
        ),
        line: 334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#2\"",
        ),
        line: 334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"('a'):sub{}\"",
        ),
        line: 335,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 335,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#1\"",
        ),
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.sort({1,2,3}, table.sort)\"",
        ),
        line: 337,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 337,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'table.sort'\"",
        ),
        line: 337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.gsub('s', 's', setmetatable)\"",
        ),
        line: 338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'setmetatable'\"",
        ),
        line: 338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 342,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 343,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 343,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 344,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 344,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 344,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 345,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 347,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C stack overflow\"",
        ),
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutine.yield()\"",
        ),
        line: 349,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outside a coroutine\"",
        ),
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 351,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 351,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 351,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 351,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield across\"",
        ),
        line: 352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "idsize",
        ),
        line: 357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 358,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 360,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 361,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 361,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 361,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^([^:]*):\"",
        ),
        line: 361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 362,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "idsize",
        ),
        line: 362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 363,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 365,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 365,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 365,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 365,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@\"",
        ),
        line: 366,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 366,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 367,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 367,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        line: 368,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 368,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 369,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 374,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 375,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 376,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 376,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        line: 376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 377,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 377,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 377,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a\\n for i=1,'a' do \\n print(i) \\n end\"",
        ),
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n local a \\n for k,v in 3 \\n do \\n print(k) \\n end\"",
        ),
        line: 381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n for k,v in \\n 3 \\n do \\n print(k) \\n end\"",
        ),
        line: 382,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a.x.y ()\\na=a+1\\nend\"",
        ),
        line: 383,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\na\\n+\\n{}\"",
        ),
        line: 385,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\n3\\n+\\n(\\n4\\n/\\nprint)\"",
        ),
        line: 386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\nprint\\n+\\n(\\n4\\n/\\n7)\"",
        ),
        line: 387,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n=\\n-\\n\\nprint\\n;\"",
        ),
        line: 389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\na\n(\n23)\n]]",
        ),
        line: 395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23\n)\n]]",
        ),
        line: 405,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23 + a\n)\n]]",
        ),
        line: 415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 417,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 417,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  function g() f() end\n  function f(x) error('a', X) end\ng()\n]]",
        ),
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 422,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 423,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 424,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 425,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal b = false\nif not b then\n  error 'test'\nend]]",
        ),
        line: 432,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal b = false\nif not b then\n  if not b then\n    if not b then\n      error 'test'\n    end\n  end\nend]]",
        ),
        line: 442,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 444,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 448,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 448,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s return __A.x\"",
        ),
        line: 448,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 448,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 448,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 449,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "301",
                    after_decimal: "",
                },
            ),
        ),
        line: 449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 450,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 453,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 453,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 456,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow\"",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 457,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 457,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 459,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 459,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 459,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 459,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 460,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxy",
        ),
        line: 460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 461,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 461,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 461,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxy",
        ),
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 462,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxy",
        ),
        line: 465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 467,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 469,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(expected stack overflow after \"",
        ),
        line: 470,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 470,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 470,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" calls)\"",
        ),
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 471,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 471,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 471,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 472,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 472,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 472,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 472,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 472,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 481,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 482,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 483,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 483,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 483,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 483,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxy",
        ),
        line: 485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 487,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        line: 488,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 488,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 489,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 489,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 490,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 490,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 490,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 490,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 491,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 491,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        line: 491,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]*\"",
        ),
        line: 491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 491,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 492,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 492,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        line: 492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 493,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 493,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 493,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 494,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 495,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 496,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 496,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 496,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 496,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 497,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 497,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 497,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 498,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 498,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 498,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 498,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 500,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 500,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 500,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 504,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 505,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 508,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 508,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 508,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 509,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 509,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 510,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\n'",
        ),
        line: 510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 510,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 511,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 512,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 512,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 512,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 512,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 512,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 512,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 512,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 512,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 512,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 513,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 513,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 513,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 513,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 514,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 515,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 519,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 519,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 519,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 519,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 521,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 521,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 522,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error handling\"",
        ),
        line: 523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 524,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 525,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 526,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 527,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 527,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 527,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 527,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 529,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 529,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 530,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "999900",
                    after_decimal: "",
                },
            ),
        ),
        line: 530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 530,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 530,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 530,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 530,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 533,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 536,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 538,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 538,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 538,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 538,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 539,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 539,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 539,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 540,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 540,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 542,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 543,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 543,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 543,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 543,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 543,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 545,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 545,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 545,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 545,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 545,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 545,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 546,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 546,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 546,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 546,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 546,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 546,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 546,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 546,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 546,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y'",
        ),
        line: 546,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 546,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 547,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 547,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xy'",
        ),
        line: 547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 550,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 550,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 550,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 550,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 550,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 550,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 550,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 551,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 551,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 554,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 555,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 555,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 555,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+%.lua:(%d+): assertion failed!$\"",
        ),
        line: 555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 556,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 556,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 556,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 559,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 559,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 560,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 560,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 560,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 562,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 562,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 562,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 562,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 562,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 562,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 563,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 563,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 563,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 566,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 567,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 567,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 567,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 567,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value expected\"",
        ),
        line: 567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 567,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 571,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 571,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"al\"",
        ),
        line: 571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 572,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 572,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 572,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 573,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 573,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 573,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 573,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 573,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"al\"",
        ),
        line: 573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 574,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 574,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 574,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 574,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing tokens in error messages\"",
        ),
        line: 577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"syntax error\"",
        ),
        line: 578,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 578,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error\"",
        ),
        line: 578,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 578,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        line: 579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        line: 579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 579,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 579,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        line: 580,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 580,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        line: 580,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        line: 581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        line: 581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 582,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while << do end\"",
        ),
        line: 582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<<\"",
        ),
        line: 582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for >> do end\"",
        ),
        line: 583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">>\"",
        ),
        line: 583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\1a = 1\"",
        ),
        line: 586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 586,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 586,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<\\\\1>\"",
        ),
        line: 586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\255a = 1\"",
        ),
        line: 589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<\\\\255>\"",
        ),
        line: 589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'I = load(\"a=9+\"); a=3'",
        ),
        line: 591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 592,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 592,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 592,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "I",
        ),
        line: 592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 593,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 595,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 595,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 596,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 596,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 596,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 596,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 597,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 597,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = '",
        ),
        line: 598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 599,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = 4+nil'",
        ),
        line: 599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 599,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 600,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 605,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 605,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 605,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 605,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repc",
        ),
        line: 605,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finalresult",
        ),
        line: 605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 605,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 606,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 606,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 606,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 606,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 606,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repc",
        ),
        line: 606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 607,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 607,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 608,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 608,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finalresult",
        ),
        line: 609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 610,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finalresult",
        ),
        line: 610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 610,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 612,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 612,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 612,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 612,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 613,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 614,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 614,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 614,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many\"",
        ),
        line: 614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 614,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 615,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 615,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 615,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        line: 615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a\"",
        ),
        line: 618,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",a\"",
        ),
        line: 618,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"= 1\"",
        ),
        line: 618,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",1\"",
        ),
        line: 618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a=\"",
        ),
        line: 619,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"{\"",
        ),
        line: 619,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 619,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"}\"",
        ),
        line: 619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(\"",
        ),
        line: 620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function a (x) return x end; return \"",
        ),
        line: 621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a(\"",
        ),
        line: 621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2.2\"",
        ),
        line: 621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 621,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"do \"",
        ),
        line: 622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 623,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 623,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 623,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while a do \"",
        ),
        line: 623,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 623,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 623,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 623,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; \"",
        ),
        line: 624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"if a then else \"",
        ),
        line: 624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function foo () \"",
        ),
        line: 625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = ''; return \"",
        ),
        line: 626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a..\"",
        ),
        line: 626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'a'\"",
        ),
        line: 626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 627,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 1; return \"",
        ),
        line: 627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 627,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a^\"",
        ),
        line: 627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 627,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 627,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = f(x\"",
        ),
        line: 629,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 629,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",x\"",
        ),
        line: 629,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "260",
                    after_decimal: "",
                },
            ),
        ),
        line: 629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 629,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many registers\"",
        ),
        line: 629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 635,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        line: 635,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 636,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function fooA ()\\n  local \"",
        ),
        line: 636,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 637,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 637,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 637,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 637,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 638,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 638,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 638,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 638,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 638,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 638,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 638,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 640,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 640,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b,c\\n\"",
        ),
        line: 640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 641,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 641,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function fooB ()\\n  local \"",
        ),
        line: 641,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 642,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 642,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 643,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 643,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 643,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 643,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 643,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 643,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 643,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 645,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 645,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 645,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 646,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 646,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 646,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function fooC () return b+c\"",
        ),
        line: 646,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 647,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 647,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 647,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 647,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 648,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 648,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 649,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 649,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 649,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+a\"",
        ),
        line: 649,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 649,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 649,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+b\"",
        ),
        line: 649,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 650,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 650,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 650,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 652,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 652,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nend  end end\"",
        ),
        line: 652,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 653,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 654,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 654,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 654,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many upvalues\"",
        ),
        line: 654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 655,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 5\"",
        ),
        line: 655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 658,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nfunction foo ()\\n  local \"",
        ),
        line: 658,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 659,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 659,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 660,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 660,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 660,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 660,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 660,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 660,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 660,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 662,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 662,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        line: 662,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 663,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 664,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 664,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 2\"",
        ),
        line: 664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 664,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 664,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many local variables\"",
        ),
        line: 664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 666,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 666,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmm",
        ),
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 668,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 668,
    },
]
