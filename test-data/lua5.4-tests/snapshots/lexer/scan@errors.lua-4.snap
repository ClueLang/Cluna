---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/errors.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 69..74,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 74..75,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing errors\"",
        ),
        position: Position {
            line: 4,
            column: 23,
            span: 75..91,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 4,
            column: 24,
            span: 91..92,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 94..99,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 6,
            column: 12,
            span: 100..105,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 6,
            column: 14,
            span: 106..107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 6,
            column: 22,
            span: 108..115,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 6,
            column: 30,
            span: 116..123,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 9,
            column: 6,
            span: 206..211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 9,
            column: 9,
            span: 212..214,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 9,
            column: 11,
            span: 215..216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 9,
            column: 24,
            span: 217..229,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 25,
            span: 229..230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 9,
            column: 27,
            span: 230..232,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 28,
            span: 232..233,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 9,
            column: 31,
            span: 234..236,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 9,
            column: 33,
            span: 237..238,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 9,
            column: 34,
            span: 238..239,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 10,
            column: 6,
            span: 240..245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmm",
        ),
        position: Position {
            line: 10,
            column: 12,
            span: 246..251,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 10,
            column: 14,
            span: 252..253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 10,
            column: 17,
            span: 254..256,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 10,
            column: 18,
            span: 256..257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 10,
            column: 0,
            span: 257..264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 11,
            column: 3,
            span: 265..267,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 11,
            column: 4,
            span: 267..268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 11,
            column: 11,
            span: 268..275,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 11,
            column: 13,
            span: 276..277,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 11,
            column: 0,
            span: 278..281,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 13,
            column: 6,
            span: 283..288,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 13,
            column: 15,
            span: 289..297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 13,
            column: 24,
            span: 298..306,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 25,
            span: 306..307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 13,
            column: 28,
            span: 307..310,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 29,
            span: 310..311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 13,
            column: 31,
            span: 312..313,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 32,
            span: 313..314,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 13,
            column: 36,
            span: 315..318,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 37,
            span: 318..319,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 14,
            column: 8,
            span: 322..327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 14,
            column: 11,
            span: 328..330,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 14,
            column: 12,
            span: 330..331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 14,
            column: 16,
            span: 332..335,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 14,
            column: 18,
            span: 336..337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 14,
            column: 24,
            span: 338..343,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 25,
            span: 343..344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 14,
            column: 26,
            span: 344..345,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 14,
            column: 27,
            span: 345..346,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 14,
            column: 31,
            span: 347..350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 32,
            span: 350..351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 15,
            column: 9,
            span: 354..360,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 10,
            span: 360..361,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 15,
            column: 13,
            span: 361..364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 15,
            column: 16,
            span: 365..367,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 15,
            column: 20,
            span: 368..371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 15,
            column: 27,
            span: 372..378,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 15,
            column: 28,
            span: 378..379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 15,
            column: 32,
            span: 379..383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 33,
            span: 383..384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 15,
            column: 36,
            span: 384..387,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 15,
            column: 37,
            span: 387..388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 15,
            column: 41,
            span: 389..392,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 42,
            span: 392..393,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 43,
            span: 393..394,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 16,
            column: 0,
            span: 395..398,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 401..406,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 19,
            column: 15,
            span: 407..415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 19,
            column: 20,
            span: 416..420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 21,
            span: 420..421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 19,
            column: 22,
            span: 421..422,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 23,
            span: 422..423,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 20,
            column: 8,
            span: 426..431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 20,
            column: 10,
            span: 432..433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 20,
            column: 11,
            span: 433..434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 20,
            column: 15,
            span: 435..438,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 20,
            column: 17,
            span: 439..440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 20,
            column: 22,
            span: 441..445,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 23,
            span: 445..446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 20,
            column: 24,
            span: 446..447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 25,
            span: 447..448,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 21,
            column: 5,
            span: 451..453,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 21,
            column: 9,
            span: 454..457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 21,
            column: 11,
            span: 458..459,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 21,
            column: 16,
            span: 460..464,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 21,
            column: 23,
            span: 465..471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 21,
            column: 27,
            span: 472..475,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 21,
            column: 0,
            span: 476..479,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 22,
            column: 8,
            span: 482..487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        position: Position {
            line: 22,
            column: 13,
            span: 488..492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 22,
            column: 14,
            span: 492..493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 22,
            column: 18,
            span: 494..497,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 22,
            column: 20,
            span: 498..499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 22,
            column: 26,
            span: 500..505,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 27,
            span: 505..506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 22,
            column: 28,
            span: 506..507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 29,
            span: 507..508,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 23,
            column: 9,
            span: 511..517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 11,
            span: 518..519,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 23,
            column: 14,
            span: 519..522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        position: Position {
            line: 23,
            column: 19,
            span: 523..527,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 20,
            span: 527..528,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 23,
            column: 24,
            span: 529..532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 23,
            column: 0,
            span: 533..536,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 24,
            column: 0,
            span: 537..540,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 27,
            column: 6,
            span: 543..548,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 27,
            column: 15,
            span: 549..557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 27,
            column: 28,
            span: 558..570,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 29,
            span: 570..571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 27,
            column: 33,
            span: 571..575,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 34,
            span: 575..576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 27,
            column: 38,
            span: 577..580,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 39,
            span: 580..581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 27,
            column: 45,
            span: 582..587,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 46,
            span: 587..588,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 28,
            column: 8,
            span: 591..596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 28,
            column: 10,
            span: 597..598,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 28,
            column: 12,
            span: 599..600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 28,
            column: 17,
            span: 601..605,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 18,
            span: 605..606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 28,
            column: 22,
            span: 606..610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 23,
            span: 610..611,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 29,
            column: 5,
            span: 614..616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 29,
            column: 11,
            span: 617..622,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 29,
            column: 16,
            span: 623..627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 29,
            column: 22,
            span: 628..633,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 23,
            span: 633..634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 29,
            column: 24,
            span: 634..635,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 29,
            column: 25,
            span: 635..636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 29,
            column: 29,
            span: 637..640,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 30,
            span: 640..641,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 29,
            column: 0,
            span: 642..645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 30,
            column: 9,
            span: 648..654,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 10,
            span: 654..655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 30,
            column: 16,
            span: 655..661,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 30,
            column: 17,
            span: 661..662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 30,
            column: 21,
            span: 662..666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 22,
            span: 666..667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 30,
            column: 23,
            span: 667..668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 24,
            span: 668..669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 30,
            column: 28,
            span: 670..673,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 29,
            span: 673..674,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 30,
            column: 31,
            span: 674..676,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 32,
            span: 676..677,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 30,
            column: 37,
            span: 678..682,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 38,
            span: 682..683,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 39,
            span: 683..684,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 31,
            column: 0,
            span: 685..688,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 33,
            column: 6,
            span: 690..695,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 33,
            column: 15,
            span: 696..704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 33,
            column: 27,
            span: 705..716,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 28,
            span: 716..717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 33,
            column: 32,
            span: 717..721,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 33,
            span: 721..722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 33,
            column: 39,
            span: 723..728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 40,
            span: 728..729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 33,
            column: 46,
            span: 730..735,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 47,
            span: 735..736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 33,
            column: 52,
            span: 737..741,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 53,
            span: 741..742,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 34,
            column: 8,
            span: 745..750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 34,
            column: 12,
            span: 751..754,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 34,
            column: 14,
            span: 755..756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 34,
            column: 19,
            span: 757..761,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 20,
            span: 761..762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 34,
            column: 24,
            span: 762..766,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 25,
            span: 766..767,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 35,
            column: 5,
            span: 770..772,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 35,
            column: 9,
            span: 773..776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 35,
            column: 16,
            span: 777..783,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 17,
            span: 783..784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 35,
            column: 21,
            span: 784..788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 22,
            span: 788..789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 35,
            column: 27,
            span: 789..794,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 28,
            span: 794..795,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^<%a\"",
        ),
        position: Position {
            line: 35,
            column: 35,
            span: 796..802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 36,
            span: 802..803,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 35,
            column: 40,
            span: 804..807,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 35,
            column: 44,
            span: 808..811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 35,
            column: 51,
            span: 812..818,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 52,
            span: 818..819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 35,
            column: 56,
            span: 819..823,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 57,
            span: 823..824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 35,
            column: 62,
            span: 824..829,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 63,
            span: 829..830,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^char%(\"",
        ),
        position: Position {
            line: 35,
            column: 73,
            span: 831..840,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 74,
            span: 840..841,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 36,
            column: 0,
            span: 844..848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 37,
            column: 10,
            span: 853..858,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 37,
            column: 12,
            span: 859..860,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        position: Position {
            line: 37,
            column: 16,
            span: 861..864,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 37,
            column: 19,
            span: 865..867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 37,
            column: 25,
            span: 868..873,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 37,
            column: 28,
            span: 874..876,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        position: Position {
            line: 37,
            column: 32,
            span: 877..880,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 38,
            column: 0,
            span: 883..886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 39,
            column: 8,
            span: 889..894,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 39,
            column: 10,
            span: 895..896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 39,
            column: 17,
            span: 897..903,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 39,
            column: 18,
            span: 903..904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 39,
            column: 22,
            span: 904..908,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 23,
            span: 908..909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 39,
            column: 28,
            span: 909..914,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 29,
            span: 914..915,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%p)\"",
        ),
        position: Position {
            line: 39,
            column: 36,
            span: 916..922,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 37,
            span: 922..923,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%%1\"",
        ),
        position: Position {
            line: 39,
            column: 44,
            span: 924..930,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 45,
            span: 930..931,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 934..939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        position: Position {
            line: 40,
            column: 11,
            span: 940..942,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 13,
            span: 943..944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 40,
            column: 20,
            span: 945..951,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 40,
            column: 21,
            span: 951..952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 40,
            column: 27,
            span: 952..958,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 28,
            span: 958..959,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[^%%[string \".*\"%%]:%d: .- near %s$]]",
        ),
        position: Position {
            line: 40,
            column: 66,
            span: 959..997,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 67,
            span: 997..998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 41,
            column: 9,
            span: 1003..1007,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 10,
            span: 1007..1008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 41,
            column: 16,
            span: 1009..1014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 17,
            span: 1014..1015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 42,
            column: 9,
            span: 1018..1024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 10,
            span: 1024..1025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 42,
            column: 16,
            span: 1025..1031,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 42,
            column: 17,
            span: 1031..1032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 42,
            column: 21,
            span: 1032..1036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 22,
            span: 1036..1037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 42,
            column: 25,
            span: 1037..1040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 26,
            span: 1040..1041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        position: Position {
            line: 42,
            column: 29,
            span: 1042..1044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 30,
            span: 1044..1045,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 31,
            span: 1045..1046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 43,
            column: 9,
            span: 1049..1055,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 10,
            span: 1055..1056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 43,
            column: 16,
            span: 1056..1062,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 17,
            span: 1062..1063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 43,
            column: 21,
            span: 1063..1067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 22,
            span: 1067..1068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 43,
            column: 25,
            span: 1068..1071,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 26,
            span: 1071..1072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 43,
            column: 30,
            span: 1073..1076,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 31,
            span: 1076..1077,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 33,
            span: 1077..1079,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 34,
            span: 1079..1080,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 43,
            column: 39,
            span: 1081..1085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 40,
            span: 1085..1086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 41,
            span: 1086..1087,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 44,
            column: 0,
            span: 1088..1091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 48,
            column: 7,
            span: 1135..1141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 8,
            span: 1141..1142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 48,
            column: 12,
            span: 1142..1146,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 13,
            span: 1146..1147,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error('hi', 0)\"",
        ),
        position: Position {
            line: 48,
            column: 29,
            span: 1147..1163,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 30,
            span: 1163..1164,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 48,
            column: 33,
            span: 1165..1167,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        position: Position {
            line: 48,
            column: 38,
            span: 1168..1172,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 39,
            span: 1172..1173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 51,
            column: 7,
            span: 1210..1216,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1216..1217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 51,
            column: 12,
            span: 1217..1221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 13,
            span: 1221..1222,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error()\"",
        ),
        position: Position {
            line: 51,
            column: 22,
            span: 1222..1231,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 23,
            span: 1231..1232,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 51,
            column: 26,
            span: 1233..1235,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 51,
            column: 30,
            span: 1236..1239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 31,
            span: 1239..1240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 7,
            span: 1297..1303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1303..1304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 55,
            column: 12,
            span: 1304..1308,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 13,
            span: 1308..1309,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.unpack({}, 1, n=2^30)\"",
        ),
        position: Position {
            line: 55,
            column: 42,
            span: 1309..1338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 43,
            span: 1338..1339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 44,
            span: 1339..1340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 56,
            column: 7,
            span: 1341..1347,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 8,
            span: 1347..1348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 56,
            column: 12,
            span: 1348..1352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 13,
            span: 1352..1353,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=math.sin()\"",
        ),
        position: Position {
            line: 56,
            column: 27,
            span: 1353..1367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 28,
            span: 1367..1368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 29,
            span: 1368..1369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 57,
            column: 7,
            span: 1370..1376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 8,
            span: 1376..1377,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 57,
            column: 11,
            span: 1377..1380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 57,
            column: 16,
            span: 1381..1385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 17,
            span: 1385..1386,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring(1)\"",
        ),
        position: Position {
            line: 57,
            column: 30,
            span: 1386..1399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 31,
            span: 1399..1400,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 57,
            column: 35,
            span: 1401..1404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 57,
            column: 40,
            span: 1405..1409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 41,
            span: 1409..1410,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring()\"",
        ),
        position: Position {
            line: 57,
            column: 53,
            span: 1410..1422,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 54,
            span: 1422..1423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 55,
            span: 1423..1424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 58,
            column: 7,
            span: 1425..1431,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1431..1432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 58,
            column: 12,
            span: 1432..1436,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber()\"",
        ),
        position: Position {
            line: 58,
            column: 25,
            span: 1437..1449,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 26,
            span: 1449..1450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 59,
            column: 7,
            span: 1451..1457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1457..1458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 59,
            column: 12,
            span: 1458..1462,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"repeat until 1; a\"",
        ),
        position: Position {
            line: 59,
            column: 32,
            span: 1463..1482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 33,
            span: 1482..1483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 60,
            column: 7,
            span: 1484..1490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 8,
            span: 1490..1491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 60,
            column: 12,
            span: 1491..1495,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return;;\"",
        ),
        position: Position {
            line: 60,
            column: 23,
            span: 1496..1506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 1506..1507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 61,
            column: 7,
            span: 1508..1514,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1514..1515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 61,
            column: 12,
            span: 1515..1519,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(false)\"",
        ),
        position: Position {
            line: 61,
            column: 28,
            span: 1520..1535,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 29,
            span: 1535..1536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 62,
            column: 7,
            span: 1537..1543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 1543..1544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 62,
            column: 12,
            span: 1544..1548,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(nil)\"",
        ),
        position: Position {
            line: 62,
            column: 26,
            span: 1549..1562,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 27,
            span: 1562..1563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 7,
            span: 1564..1570,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 8,
            span: 1570..1571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 63,
            column: 12,
            span: 1571..1575,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 13,
            span: 1575..1576,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (... , ...) end\"",
        ),
        position: Position {
            line: 63,
            column: 41,
            span: 1576..1604,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 42,
            span: 1604..1605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 43,
            span: 1605..1606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 64,
            column: 7,
            span: 1607..1613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 8,
            span: 1613..1614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 64,
            column: 12,
            span: 1614..1618,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 13,
            span: 1618..1619,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (, ...) end\"",
        ),
        position: Position {
            line: 64,
            column: 37,
            span: 1619..1643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 38,
            span: 1643..1644,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 39,
            span: 1644..1645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 7,
            span: 1646..1652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 8,
            span: 1652..1653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 65,
            column: 12,
            span: 1653..1657,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 13,
            span: 1657..1658,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local t={}; t = t[#t] + 1\"",
        ),
        position: Position {
            line: 65,
            column: 40,
            span: 1658..1685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 41,
            span: 1685..1686,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 42,
            span: 1686..1687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 67,
            column: 12,
            span: 1689..1700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 13,
            span: 1700..1701,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local a = {4\n\n]]",
        ),
        position: Position {
            line: 70,
            column: 3,
            span: 1701..1722,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 4,
            span: 1722..1723,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'}' expected (to close '{' at line 1)\"",
        ),
        position: Position {
            line: 70,
            column: 44,
            span: 1724..1763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 45,
            span: 1763..1764,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        position: Position {
            line: 70,
            column: 53,
            span: 1765..1772,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 54,
            span: 1772..1773,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 56,
            span: 1773..1775,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 57,
            span: 1775..1776,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 73,
            column: 3,
            span: 1779..1781,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 1816..1821,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 74,
            column: 17,
            span: 1822..1830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 74,
            column: 29,
            span: 1831..1842,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 30,
            span: 1842..1843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 74,
            column: 34,
            span: 1843..1847,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 35,
            span: 1847..1848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 74,
            column: 39,
            span: 1849..1852,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 40,
            span: 1852..1853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 74,
            column: 45,
            span: 1854..1858,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 46,
            span: 1858..1859,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 1864..1869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 75,
            column: 13,
            span: 1870..1872,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 14,
            span: 1872..1873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 75,
            column: 18,
            span: 1874..1877,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 75,
            column: 20,
            span: 1878..1879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 75,
            column: 25,
            span: 1880..1884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 26,
            span: 1884..1885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 75,
            column: 30,
            span: 1885..1889,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 31,
            span: 1889..1890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 11,
            span: 1895..1901,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 12,
            span: 1901..1902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 76,
            column: 18,
            span: 1902..1908,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 19,
            span: 1908..1909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 76,
            column: 23,
            span: 1909..1913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 24,
            span: 1913..1914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 76,
            column: 27,
            span: 1914..1917,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 28,
            span: 1917..1918,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line \"",
        ),
        position: Position {
            line: 76,
            column: 36,
            span: 1919..1926,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 76,
            column: 39,
            span: 1927..1929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 76,
            column: 44,
            span: 1930..1934,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 45,
            span: 1934..1935,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 46,
            span: 1935..1936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 77,
            column: 11,
            span: 1941..1947,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 12,
            span: 1947..1948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 77,
            column: 18,
            span: 1948..1954,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 19,
            span: 1954..1955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 77,
            column: 23,
            span: 1955..1959,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 24,
            span: 1959..1960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 77,
            column: 27,
            span: 1960..1963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 28,
            span: 1963..1964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 77,
            column: 32,
            span: 1965..1968,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 33,
            span: 1968..1969,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 35,
            span: 1969..1971,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 36,
            span: 1971..1972,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 77,
            column: 41,
            span: 1973..1977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 42,
            span: 1977..1978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 43,
            span: 1978..1979,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 78,
            column: 0,
            span: 1982..1985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 80,
            column: 14,
            span: 1989..2000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 2000..2001,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n     a = 1\n\n  ]]",
        ),
        position: Position {
            line: 83,
            column: 5,
            span: 2001..2020,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 6,
            span: 2020..2021,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'A' already defined\"",
        ),
        position: Position {
            line: 83,
            column: 34,
            span: 2022..2049,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 35,
            span: 2049..2050,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 37,
            span: 2050..2052,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 38,
            span: 2052..2053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 85,
            column: 14,
            span: 2057..2068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 15,
            span: 2068..2069,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    a = 1\n\n    do  end\n  ]]",
        ),
        position: Position {
            line: 89,
            column: 5,
            span: 2069..2099,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 6,
            span: 2099..2100,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no visible label 'A'\"",
        ),
        position: Position {
            line: 89,
            column: 29,
            span: 2101..2123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 30,
            span: 2123..2124,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 32,
            span: 2124..2126,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 33,
            span: 2126..2127,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 90,
            column: 0,
            span: 2128..2131,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 93,
            column: 3,
            span: 2134..2136,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 93,
            column: 7,
            span: 2137..2140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 93,
            column: 9,
            span: 2141..2142,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 93,
            column: 0,
            span: 2143..2147,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 4,
            span: 2150..2151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 94,
            column: 11,
            span: 2151..2158,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 94,
            column: 14,
            span: 2159..2161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 94,
            column: 20,
            span: 2162..2167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 21,
            span: 2167..2168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 8,
            span: 2175..2176,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping memory message test <<<\\n'",
        ),
        position: Position {
            line: 95,
            column: 69,
            span: 2176..2237,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 70,
            span: 2237..2238,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 2239..2243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 2246..2251,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing memory error message\"",
        ),
        position: Position {
            line: 97,
            column: 39,
            span: 2252..2282,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 98,
            column: 8,
            span: 2285..2290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 2291..2292,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 12,
            span: 2293..2294,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 98,
            column: 14,
            span: 2295..2296,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 98,
            column: 15,
            span: 2296..2297,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 99,
            column: 6,
            span: 2300..2303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 99,
            column: 8,
            span: 2304..2305,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 2306..2307,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 12,
            span: 2307..2309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 13,
            span: 2309..2310,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 19,
            span: 2310..2316,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 99,
            column: 22,
            span: 2317..2319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 99,
            column: 24,
            span: 2320..2321,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 99,
            column: 25,
            span: 2321..2322,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 99,
            column: 26,
            span: 2322..2323,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 99,
            column: 27,
            span: 2323..2324,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 99,
            column: 29,
            span: 2325..2326,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 99,
            column: 34,
            span: 2327..2331,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 99,
            column: 38,
            span: 2332..2335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 100,
            column: 17,
            span: 2359..2373,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 18,
            span: 2373..2374,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 19,
            span: 2374..2375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 101,
            column: 4,
            span: 2378..2379,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 101,
            column: 5,
            span: 2379..2380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 101,
            column: 13,
            span: 2380..2388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 14,
            span: 2388..2389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 101,
            column: 15,
            span: 2389..2390,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 101,
            column: 16,
            span: 2390..2391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 101,
            column: 24,
            span: 2391..2399,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 25,
            span: 2399..2400,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 26,
            span: 2400..2401,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 101,
            column: 28,
            span: 2402..2403,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 34,
            span: 2403..2409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 35,
            span: 2409..2410,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 103,
            column: 8,
            span: 2459..2464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 103,
            column: 11,
            span: 2465..2467,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 12,
            span: 2467..2468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 103,
            column: 16,
            span: 2469..2472,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 103,
            column: 18,
            span: 2473..2474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 103,
            column: 24,
            span: 2475..2480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 25,
            span: 2480..2481,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 103,
            column: 33,
            span: 2481..2489,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 34,
            span: 2489..2490,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 35,
            span: 2490..2491,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 104,
            column: 8,
            span: 2496..2499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 104,
            column: 10,
            span: 2500..2501,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 104,
            column: 12,
            span: 2502..2503,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 14,
            span: 2503..2505,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 15,
            span: 2505..2506,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 22,
            span: 2506..2513,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 104,
            column: 25,
            span: 2514..2516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 104,
            column: 27,
            span: 2517..2518,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 104,
            column: 28,
            span: 2518..2519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 104,
            column: 29,
            span: 2519..2520,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 104,
            column: 30,
            span: 2520..2521,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 104,
            column: 32,
            span: 2522..2523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 104,
            column: 41,
            span: 2524..2532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 42,
            span: 2532..2533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 104,
            column: 43,
            span: 2533..2534,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 44,
            span: 2534..2535,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 104,
            column: 0,
            span: 2536..2539,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 105,
            column: 6,
            span: 2542..2545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 105,
            column: 7,
            span: 2545..2546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 106,
            column: 4,
            span: 2549..2550,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 106,
            column: 5,
            span: 2550..2551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 106,
            column: 13,
            span: 2551..2559,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 14,
            span: 2559..2560,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 15,
            span: 2559..2561,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 16,
            span: 2561..2562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 107,
            column: 9,
            span: 2565..2571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 2571..2572,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 107,
            column: 13,
            span: 2572..2575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 107,
            column: 16,
            span: 2576..2578,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 107,
            column: 20,
            span: 2579..2582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 107,
            column: 24,
            span: 2583..2586,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 107,
            column: 27,
            span: 2587..2589,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough\"",
        ),
        position: Position {
            line: 107,
            column: 40,
            span: 2590..2602,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 107,
            column: 43,
            span: 2603..2605,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" memory\"",
        ),
        position: Position {
            line: 107,
            column: 53,
            span: 2606..2615,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 54,
            span: 2615..2616,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 108,
            column: 0,
            span: 2617..2620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 113,
            column: 13,
            span: 2659..2671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 14,
            span: 2671..2672,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} + 1\"",
        ),
        position: Position {
            line: 113,
            column: 26,
            span: 2672..2684,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 27,
            span: 2684..2685,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arithmetic\"",
        ),
        position: Position {
            line: 113,
            column: 40,
            span: 2686..2698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 41,
            span: 2698..2699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 114,
            column: 13,
            span: 2700..2712,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 14,
            span: 2712..2713,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} | 1\"",
        ),
        position: Position {
            line: 114,
            column: 26,
            span: 2713..2725,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 27,
            span: 2725..2726,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bitwise operation\"",
        ),
        position: Position {
            line: 114,
            column: 47,
            span: 2727..2746,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 48,
            span: 2746..2747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 115,
            column: 13,
            span: 2748..2760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 115,
            column: 14,
            span: 2760..2761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} < 1\"",
        ),
        position: Position {
            line: 115,
            column: 26,
            span: 2761..2773,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 27,
            span: 2773..2774,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to compare\"",
        ),
        position: Position {
            line: 115,
            column: 48,
            span: 2775..2795,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 49,
            span: 2795..2796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 116,
            column: 13,
            span: 2797..2809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 14,
            span: 2809..2810,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} <= 1\"",
        ),
        position: Position {
            line: 116,
            column: 27,
            span: 2810..2823,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 28,
            span: 2823..2824,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to compare\"",
        ),
        position: Position {
            line: 116,
            column: 49,
            span: 2825..2845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 50,
            span: 2845..2846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 118,
            column: 13,
            span: 2848..2860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 2860..2861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; bbbb=2; a=math.sin(3)+bbbb(3)\"",
        ),
        position: Position {
            line: 118,
            column: 50,
            span: 2861..2897,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 118,
            column: 51,
            span: 2897..2898,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbbb'\"",
        ),
        position: Position {
            line: 118,
            column: 67,
            span: 2899..2914,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 68,
            span: 2914..2915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 119,
            column: 13,
            span: 2916..2928,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 14,
            span: 2928..2929,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={}; do local a=1 end a:bbbb(3)\"",
        ),
        position: Position {
            line: 119,
            column: 48,
            span: 2929..2963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 49,
            span: 2963..2964,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbbb'\"",
        ),
        position: Position {
            line: 119,
            column: 65,
            span: 2965..2980,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 66,
            span: 2980..2981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 120,
            column: 13,
            span: 2982..2994,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 14,
            span: 2994..2995,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; a.bbbb(3)\"",
        ),
        position: Position {
            line: 120,
            column: 37,
            span: 2995..3018,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 120,
            column: 38,
            span: 3018..3019,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbbb'\"",
        ),
        position: Position {
            line: 120,
            column: 53,
            span: 3020..3034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 54,
            span: 3034..3035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 121,
            column: 7,
            span: 3036..3042,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 121,
            column: 8,
            span: 3042..3043,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 121,
            column: 11,
            span: 3043..3046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 121,
            column: 18,
            span: 3047..3053,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 121,
            column: 19,
            span: 3053..3054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 121,
            column: 23,
            span: 3054..3058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 121,
            column: 24,
            span: 3058..3059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 121,
            column: 28,
            span: 3059..3063,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        position: Position {
            line: 121,
            column: 63,
            span: 3064..3098,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 121,
            column: 64,
            span: 3098..3099,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'bbbb'\"",
        ),
        position: Position {
            line: 121,
            column: 73,
            span: 3100..3108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 121,
            column: 74,
            span: 3108..3109,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 121,
            column: 75,
            span: 3109..3110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 122,
            column: 13,
            span: 3111..3123,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 14,
            span: 3123..3124,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        position: Position {
            line: 122,
            column: 48,
            span: 3124..3158,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 122,
            column: 49,
            span: 3158..3159,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        position: Position {
            line: 122,
            column: 58,
            span: 3160..3168,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 59,
            span: 3168..3169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 123,
            column: 13,
            span: 3170..3182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 14,
            span: 3182..3183,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=(1)..{}\"",
        ),
        position: Position {
            line: 123,
            column: 25,
            span: 3183..3194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 123,
            column: 26,
            span: 3194..3195,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a table value\"",
        ),
        position: Position {
            line: 123,
            column: 42,
            span: 3196..3211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 43,
            span: 3211..3212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 126,
            column: 13,
            span: 3223..3235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 14,
            span: 3235..3236,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a(13)\"",
        ),
        position: Position {
            line: 126,
            column: 30,
            span: 3236..3252,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 31,
            span: 3252..3253,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'a'\"",
        ),
        position: Position {
            line: 126,
            column: 43,
            span: 3254..3265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 44,
            span: 3265..3266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 127,
            column: 13,
            span: 3267..3279,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 14,
            span: 3279..3280,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local a = setmetatable({}, {__add = 34})\n  a = a + 1\n]]",
        ),
        position: Position {
            line: 130,
            column: 3,
            span: 3280..3340,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 4,
            span: 3340..3341,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod 'add'\"",
        ),
        position: Position {
            line: 130,
            column: 23,
            span: 3342..3360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 24,
            span: 3360..3361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 131,
            column: 13,
            span: 3362..3374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 14,
            span: 3374..3375,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local a = setmetatable({}, {__lt = {}})\n  a = a > a\n]]",
        ),
        position: Position {
            line: 134,
            column: 3,
            span: 3375..3434,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 4,
            span: 3434..3435,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod 'lt'\"",
        ),
        position: Position {
            line: 134,
            column: 22,
            span: 3436..3453,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 23,
            span: 3453..3454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 137,
            column: 13,
            span: 3470..3482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 14,
            span: 3482..3483,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; return a.bbbb(3)\"",
        ),
        position: Position {
            line: 137,
            column: 44,
            span: 3483..3513,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 45,
            span: 3513..3514,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbbb'\"",
        ),
        position: Position {
            line: 137,
            column: 60,
            span: 3515..3529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 61,
            span: 3529..3530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 138,
            column: 13,
            span: 3531..3543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 14,
            span: 3543..3544,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={}; do local a=1 end; return a:bbbb(3)\"",
        ),
        position: Position {
            line: 138,
            column: 56,
            span: 3544..3586,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 57,
            span: 3586..3587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbbb'\"",
        ),
        position: Position {
            line: 138,
            column: 73,
            span: 3588..3603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 74,
            span: 3603..3604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 140,
            column: 13,
            span: 3606..3618,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 14,
            span: 3618..3619,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = #print\"",
        ),
        position: Position {
            line: 140,
            column: 26,
            span: 3619..3631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 27,
            span: 3631..3632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"length of a function value\"",
        ),
        position: Position {
            line: 140,
            column: 56,
            span: 3633..3661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 57,
            span: 3661..3662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 141,
            column: 13,
            span: 3663..3675,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 14,
            span: 3675..3676,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = #3\"",
        ),
        position: Position {
            line: 141,
            column: 22,
            span: 3676..3684,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 23,
            span: 3684..3685,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"length of a number value\"",
        ),
        position: Position {
            line: 141,
            column: 50,
            span: 3686..3712,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 51,
            span: 3712..3713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aaa",
        ),
        position: Position {
            line: 143,
            column: 4,
            span: 3715..3718,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 143,
            column: 6,
            span: 3719..3720,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 143,
            column: 0,
            span: 3721..3724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 144,
            column: 13,
            span: 3725..3737,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 14,
            span: 3737..3738,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa.bbb:ddd(9)\"",
        ),
        position: Position {
            line: 144,
            column: 30,
            span: 3738..3754,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 31,
            span: 3754..3755,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        position: Position {
            line: 144,
            column: 46,
            span: 3756..3770,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 47,
            span: 3770..3771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 145,
            column: 13,
            span: 3772..3784,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 14,
            span: 3784..3785,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb=1}; aaa.bbb:ddd(9)\"",
        ),
        position: Position {
            line: 145,
            column: 49,
            span: 3785..3820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 50,
            span: 3820..3821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        position: Position {
            line: 145,
            column: 64,
            span: 3822..3835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 65,
            span: 3835..3836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 146,
            column: 13,
            span: 3837..3849,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 14,
            span: 3849..3850,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={}}; aaa.bbb:ddd(9)\"",
        ),
        position: Position {
            line: 146,
            column: 50,
            span: 3850..3886,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 51,
            span: 3886..3887,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'ddd'\"",
        ),
        position: Position {
            line: 146,
            column: 66,
            span: 3888..3902,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 67,
            span: 3902..3903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 147,
            column: 13,
            span: 3904..3916,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 14,
            span: 3916..3917,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c; (function () a = b+1.1 end)()\"",
        ),
        position: Position {
            line: 147,
            column: 58,
            span: 3917..3961,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 59,
            span: 3961..3962,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'b'\"",
        ),
        position: Position {
            line: 147,
            column: 73,
            span: 3963..3976,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 74,
            span: 3976..3977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 148,
            column: 7,
            span: 3978..3984,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 3984..3985,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 148,
            column: 11,
            span: 3985..3988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 148,
            column: 16,
            span: 3989..3993,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={ddd=next}}; aaa.bbb:ddd(nil)\"",
        ),
        position: Position {
            line: 148,
            column: 63,
            span: 3994..4040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 64,
            span: 4040..4041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 151,
            column: 13,
            span: 4092..4104,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 14,
            span: 4104..4105,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,cc; (function () a = cc[1] end)()\"",
        ),
        position: Position {
            line: 151,
            column: 59,
            span: 4105..4150,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 60,
            span: 4150..4151,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'cc'\"",
        ),
        position: Position {
            line: 151,
            column: 75,
            span: 4152..4166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 76,
            span: 4166..4167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 4168..4180,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 14,
            span: 4180..4181,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,cc; (function () a.x = 1 end)()\"",
        ),
        position: Position {
            line: 152,
            column: 57,
            span: 4181..4224,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 58,
            span: 4224..4225,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'a'\"",
        ),
        position: Position {
            line: 152,
            column: 72,
            span: 4226..4239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 73,
            span: 4239..4240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 154,
            column: 13,
            span: 4242..4254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 14,
            span: 4254..4255,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local _ENV = {x={}}; a = a + 1\"",
        ),
        position: Position {
            line: 154,
            column: 46,
            span: 4255..4287,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 47,
            span: 4287..4288,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'a'\"",
        ),
        position: Position {
            line: 154,
            column: 60,
            span: 4289..4301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 61,
            span: 4301..4302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 156,
            column: 13,
            span: 4304..4316,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 14,
            span: 4316..4317,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b=1; local aaa={}; x=aaa+b\"",
        ),
        position: Position {
            line: 156,
            column: 42,
            span: 4317..4345,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 43,
            span: 4345..4346,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aaa'\"",
        ),
        position: Position {
            line: 156,
            column: 57,
            span: 4347..4360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 58,
            span: 4360..4361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 157,
            column: 13,
            span: 4362..4374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 14,
            span: 4374..4375,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=3.3/aaa\"",
        ),
        position: Position {
            line: 157,
            column: 33,
            span: 4375..4394,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 34,
            span: 4394..4395,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        position: Position {
            line: 157,
            column: 49,
            span: 4396..4410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 50,
            span: 4410..4411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 158,
            column: 13,
            span: 4412..4424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 14,
            span: 4424..4425,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa=2; b=nil;x=aaa*b\"",
        ),
        position: Position {
            line: 158,
            column: 36,
            span: 4425..4447,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 37,
            span: 4447..4448,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'b'\"",
        ),
        position: Position {
            line: 158,
            column: 50,
            span: 4449..4461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 51,
            span: 4461..4462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 159,
            column: 13,
            span: 4463..4475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 14,
            span: 4475..4476,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=-aaa\"",
        ),
        position: Position {
            line: 159,
            column: 30,
            span: 4476..4492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 31,
            span: 4492..4493,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        position: Position {
            line: 159,
            column: 46,
            span: 4494..4508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 47,
            span: 4508..4509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 162,
            column: 13,
            span: 4528..4540,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 14,
            span: 4540..4541,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; local a,bbbb=2,3; a = math.sin(1) and bbbb(3)\"",
        ),
        position: Position {
            line: 162,
            column: 66,
            span: 4541..4593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 67,
            span: 4593..4594,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'bbbb'\"",
        ),
        position: Position {
            line: 163,
            column: 17,
            span: 4597..4611,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 18,
            span: 4611..4612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 164,
            column: 13,
            span: 4613..4625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 14,
            span: 4625..4626,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; local a,bbbb=2,3; a = bbbb(1) or a(3)\"",
        ),
        position: Position {
            line: 164,
            column: 58,
            span: 4626..4670,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 164,
            column: 59,
            span: 4670..4671,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'bbbb'\"",
        ),
        position: Position {
            line: 164,
            column: 74,
            span: 4672..4686,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 75,
            span: 4686..4687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 165,
            column: 13,
            span: 4688..4700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 14,
            span: 4700..4701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c,f = 1,1,1; f((a and b) or c)\"",
        ),
        position: Position {
            line: 165,
            column: 56,
            span: 4701..4743,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 165,
            column: 57,
            span: 4743..4744,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'f'\"",
        ),
        position: Position {
            line: 165,
            column: 69,
            span: 4745..4756,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 70,
            span: 4756..4757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 166,
            column: 13,
            span: 4758..4770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 14,
            span: 4770..4771,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c = 1,1,1; ((a and b) or c)()\"",
        ),
        position: Position {
            line: 166,
            column: 55,
            span: 4771..4812,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 56,
            span: 4812..4813,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call a number value\"",
        ),
        position: Position {
            line: 166,
            column: 78,
            span: 4814..4835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 79,
            span: 4835..4836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 167,
            column: 7,
            span: 4837..4843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 8,
            span: 4843..4844,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 167,
            column: 11,
            span: 4844..4847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 167,
            column: 18,
            span: 4848..4854,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 19,
            span: 4854..4855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 167,
            column: 23,
            span: 4855..4859,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 24,
            span: 4859..4860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 167,
            column: 28,
            span: 4860..4864,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=(aaa or aaa)+(aaa and aaa)\"",
        ),
        position: Position {
            line: 167,
            column: 67,
            span: 4865..4903,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 68,
            span: 4903..4904,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        position: Position {
            line: 167,
            column: 76,
            span: 4905..4912,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 77,
            span: 4912..4913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 78,
            span: 4913..4914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 168,
            column: 7,
            span: 4915..4921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 8,
            span: 4921..4922,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 168,
            column: 11,
            span: 4922..4925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 168,
            column: 18,
            span: 4926..4932,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 168,
            column: 19,
            span: 4932..4933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 168,
            column: 23,
            span: 4933..4937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 24,
            span: 4937..4938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 168,
            column: 28,
            span: 4938..4942,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; (aaa or aaa)()\"",
        ),
        position: Position {
            line: 168,
            column: 53,
            span: 4943..4967,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 54,
            span: 4967..4968,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        position: Position {
            line: 168,
            column: 62,
            span: 4969..4976,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 63,
            span: 4976..4977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 64,
            span: 4977..4978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 170,
            column: 13,
            span: 4980..4992,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 14,
            span: 4992..4993,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(print < 10)\"",
        ),
        position: Position {
            line: 170,
            column: 33,
            span: 4993..5012,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 170,
            column: 34,
            span: 5012..5013,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function with number\"",
        ),
        position: Position {
            line: 170,
            column: 57,
            span: 5014..5036,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 58,
            span: 5036..5037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 171,
            column: 13,
            span: 5038..5050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 14,
            span: 5050..5051,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(print < print)\"",
        ),
        position: Position {
            line: 171,
            column: 36,
            span: 5051..5073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 37,
            span: 5073..5074,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"two function values\"",
        ),
        position: Position {
            line: 171,
            column: 59,
            span: 5075..5096,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 60,
            span: 5096..5097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 172,
            column: 13,
            span: 5098..5110,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 14,
            span: 5110..5111,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print('10' < 10)\"",
        ),
        position: Position {
            line: 172,
            column: 32,
            span: 5111..5129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 33,
            span: 5129..5130,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string with number\"",
        ),
        position: Position {
            line: 172,
            column: 54,
            span: 5131..5151,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 55,
            span: 5151..5152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 173,
            column: 13,
            span: 5153..5165,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 14,
            span: 5165..5166,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(10 < '23')\"",
        ),
        position: Position {
            line: 173,
            column: 32,
            span: 5166..5184,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 33,
            span: 5184..5185,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number with string\"",
        ),
        position: Position {
            line: 173,
            column: 54,
            span: 5186..5206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 55,
            span: 5206..5207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 176,
            column: 13,
            span: 5239..5251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 14,
            span: 5251..5252,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100; x = a << 2\"",
        ),
        position: Position {
            line: 176,
            column: 45,
            span: 5252..5283,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 176,
            column: 46,
            span: 5283..5284,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a\"",
        ),
        position: Position {
            line: 176,
            column: 56,
            span: 5285..5294,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 57,
            span: 5294..5295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 177,
            column: 13,
            span: 5296..5308,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 14,
            span: 5308..5309,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 1 >> 2.0^100\"",
        ),
        position: Position {
            line: 177,
            column: 38,
            span: 5309..5333,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 177,
            column: 39,
            span: 5333..5334,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 177,
            column: 71,
            span: 5335..5366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 72,
            span: 5366..5367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 178,
            column: 13,
            span: 5368..5380,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 14,
            span: 5380..5381,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 10.1 << 2.0^100\"",
        ),
        position: Position {
            line: 178,
            column: 41,
            span: 5381..5408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 42,
            span: 5408..5409,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 178,
            column: 74,
            span: 5410..5441,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 178,
            column: 75,
            span: 5441..5442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 179,
            column: 13,
            span: 5443..5455,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 14,
            span: 5455..5456,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100 & 1\"",
        ),
        position: Position {
            line: 179,
            column: 37,
            span: 5456..5479,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 38,
            span: 5479..5480,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 179,
            column: 70,
            span: 5481..5512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 71,
            span: 5512..5513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 180,
            column: 13,
            span: 5514..5526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 14,
            span: 5526..5527,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100 & 1e100\"",
        ),
        position: Position {
            line: 180,
            column: 41,
            span: 5527..5554,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 180,
            column: 42,
            span: 5554..5555,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 180,
            column: 74,
            span: 5556..5587,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 75,
            span: 5587..5588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 181,
            column: 13,
            span: 5589..5601,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 14,
            span: 5601..5602,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0 | 1e40\"",
        ),
        position: Position {
            line: 181,
            column: 36,
            span: 5602..5624,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 37,
            span: 5624..5625,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 181,
            column: 69,
            span: 5626..5657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 70,
            span: 5657..5658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 182,
            column: 13,
            span: 5659..5671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 14,
            span: 5671..5672,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2e100 ~ 1\"",
        ),
        position: Position {
            line: 182,
            column: 35,
            span: 5672..5693,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 36,
            span: 5693..5694,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 182,
            column: 68,
            span: 5695..5726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 69,
            span: 5726..5727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 183,
            column: 13,
            span: 5728..5740,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 14,
            span: 5740..5741,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.sub('a', 2.0^100)\"",
        ),
        position: Position {
            line: 183,
            column: 40,
            span: 5741..5767,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 183,
            column: 41,
            span: 5767..5768,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 183,
            column: 73,
            span: 5769..5800,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 74,
            span: 5800..5801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 184,
            column: 13,
            span: 5802..5814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 14,
            span: 5814..5815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.rep('a', 3.3)\"",
        ),
        position: Position {
            line: 184,
            column: 36,
            span: 5815..5837,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 184,
            column: 37,
            span: 5837..5838,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 184,
            column: 69,
            span: 5839..5870,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 70,
            span: 5870..5871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 185,
            column: 13,
            span: 5872..5884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 14,
            span: 5884..5885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 6e40 & 7\"",
        ),
        position: Position {
            line: 185,
            column: 31,
            span: 5885..5902,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 185,
            column: 32,
            span: 5902..5903,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 185,
            column: 64,
            span: 5904..5935,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 65,
            span: 5935..5936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 186,
            column: 13,
            span: 5937..5949,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 14,
            span: 5949..5950,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 34 << 7e30\"",
        ),
        position: Position {
            line: 186,
            column: 33,
            span: 5950..5969,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 186,
            column: 34,
            span: 5969..5970,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 186,
            column: 66,
            span: 5971..6002,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 67,
            span: 6002..6003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 187,
            column: 13,
            span: 6004..6016,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 14,
            span: 6016..6017,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~-3e40\"",
        ),
        position: Position {
            line: 187,
            column: 29,
            span: 6017..6032,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 30,
            span: 6032..6033,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 187,
            column: 62,
            span: 6034..6065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 63,
            span: 6065..6066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 188,
            column: 13,
            span: 6067..6079,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 14,
            span: 6079..6080,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~-3.009\"",
        ),
        position: Position {
            line: 188,
            column: 30,
            span: 6080..6096,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 31,
            span: 6096..6097,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 188,
            column: 63,
            span: 6098..6129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 64,
            span: 6129..6130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 189,
            column: 13,
            span: 6131..6143,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 14,
            span: 6143..6144,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 3.009 & 1\"",
        ),
        position: Position {
            line: 189,
            column: 32,
            span: 6144..6162,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 33,
            span: 6162..6163,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        position: Position {
            line: 189,
            column: 65,
            span: 6164..6195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 66,
            span: 6195..6196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 190,
            column: 13,
            span: 6197..6209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 14,
            span: 6209..6210,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 34 >> {}\"",
        ),
        position: Position {
            line: 190,
            column: 31,
            span: 6210..6227,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 32,
            span: 6227..6228,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table value\"",
        ),
        position: Position {
            line: 190,
            column: 46,
            span: 6229..6242,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 47,
            span: 6242..6243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 191,
            column: 13,
            span: 6244..6256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 14,
            span: 6256..6257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 24 // 0\"",
        ),
        position: Position {
            line: 191,
            column: 27,
            span: 6257..6270,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 28,
            span: 6270..6271,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"divide by zero\"",
        ),
        position: Position {
            line: 191,
            column: 45,
            span: 6272..6288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 46,
            span: 6288..6289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 192,
            column: 13,
            span: 6290..6302,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 14,
            span: 6302..6303,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 1 % 0\"",
        ),
        position: Position {
            line: 192,
            column: 25,
            span: 6303..6314,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 192,
            column: 26,
            span: 6314..6315,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'n%0'\"",
        ),
        position: Position {
            line: 192,
            column: 34,
            span: 6316..6323,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 35,
            span: 6323..6324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 198,
            column: 13,
            span: 6524..6536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 14,
            span: 6536..6537,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = setmetatable({}, {__index = 10}).x\"",
        ),
        position: Position {
            line: 198,
            column: 60,
            span: 6537..6583,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 61,
            span: 6583..6584,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to index a number value\"",
        ),
        position: Position {
            line: 199,
            column: 36,
            span: 6587..6620,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 37,
            span: 6620..6621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 203,
            column: 13,
            span: 6645..6657,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 14,
            span: 6657..6658,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = {}, 10 do end\"",
        ),
        position: Position {
            line: 203,
            column: 37,
            span: 6658..6681,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 38,
            span: 6681..6682,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 203,
            column: 46,
            span: 6683..6690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 47,
            span: 6690..6691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 204,
            column: 13,
            span: 6692..6704,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 14,
            span: 6704..6705,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = io.stdin, 10 do end\"",
        ),
        position: Position {
            line: 204,
            column: 43,
            span: 6705..6734,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 44,
            span: 6734..6735,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FILE\"",
        ),
        position: Position {
            line: 204,
            column: 51,
            span: 6736..6742,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 52,
            span: 6742..6743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 205,
            column: 13,
            span: 6744..6756,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 14,
            span: 6756..6757,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = {}, 10 do end\"",
        ),
        position: Position {
            line: 205,
            column: 37,
            span: 6757..6780,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 38,
            span: 6780..6781,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"initial value\"",
        ),
        position: Position {
            line: 205,
            column: 54,
            span: 6782..6797,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 55,
            span: 6797..6798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 206,
            column: 13,
            span: 6799..6811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 14,
            span: 6811..6812,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = 1, 'x', 10 do end\"",
        ),
        position: Position {
            line: 206,
            column: 41,
            span: 6812..6839,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 42,
            span: 6839..6840,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 206,
            column: 51,
            span: 6841..6849,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 52,
            span: 6849..6850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 207,
            column: 13,
            span: 6851..6863,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 14,
            span: 6863..6864,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = 1, {}, 10 do end\"",
        ),
        position: Position {
            line: 207,
            column: 40,
            span: 6864..6890,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 41,
            span: 6890..6891,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"limit\"",
        ),
        position: Position {
            line: 207,
            column: 49,
            span: 6892..6899,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 50,
            span: 6899..6900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 208,
            column: 13,
            span: 6901..6913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 14,
            span: 6913..6914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = 1, {} do end\"",
        ),
        position: Position {
            line: 208,
            column: 36,
            span: 6914..6936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 37,
            span: 6936..6937,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"limit\"",
        ),
        position: Position {
            line: 208,
            column: 45,
            span: 6938..6945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 46,
            span: 6945..6946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 209,
            column: 13,
            span: 6947..6959,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 14,
            span: 6959..6960,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = 1, 10, print do end\"",
        ),
        position: Position {
            line: 209,
            column: 43,
            span: 6960..6989,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 44,
            span: 6989..6990,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        position: Position {
            line: 209,
            column: 51,
            span: 6991..6997,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 52,
            span: 6997..6998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 210,
            column: 13,
            span: 6999..7011,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 14,
            span: 7011..7012,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for i = 1, 10, print do end\"",
        ),
        position: Position {
            line: 210,
            column: 43,
            span: 7012..7041,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 44,
            span: 7041..7042,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 210,
            column: 55,
            span: 7043..7053,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 56,
            span: 7053..7054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 213,
            column: 3,
            span: 7107..7109,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 213,
            column: 4,
            span: 7109..7110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 213,
            column: 5,
            span: 7110..7111,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 213,
            column: 7,
            span: 7112..7113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 213,
            column: 0,
            span: 7114..7119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 214,
            column: 13,
            span: 7120..7132,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 214,
            column: 14,
            span: 7132..7133,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  -- create light udata\n  local x = D.upvalueid(function () return debug end, 1)\n  D.setuservalue(x, {})\n]]",
        ),
        position: Position {
            line: 218,
            column: 3,
            span: 7133..7243,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 4,
            span: 7243..7244,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"light userdata\"",
        ),
        position: Position {
            line: 218,
            column: 21,
            span: 7245..7261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 22,
            span: 7261..7262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 219,
            column: 3,
            span: 7263..7265,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 219,
            column: 4,
            span: 7265..7266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 219,
            column: 5,
            span: 7266..7267,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 219,
            column: 7,
            span: 7268..7269,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 219,
            column: 0,
            span: 7270..7273,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 221,
            column: 3,
            span: 7275..7277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 222,
            column: 15,
            span: 7314..7326,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 16,
            span: 7326..7327,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"math.sin(io.input())\"",
        ),
        position: Position {
            line: 222,
            column: 38,
            span: 7327..7349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 39,
            span: 7349..7350,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(number expected, got FILE*)\"",
        ),
        position: Position {
            line: 222,
            column: 70,
            span: 7351..7381,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 71,
            span: 7381..7382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 223,
            column: 5,
            span: 7385..7387,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 223,
            column: 6,
            span: 7387..7388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 223,
            column: 8,
            span: 7388..7390,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 223,
            column: 10,
            span: 7391..7392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 223,
            column: 23,
            span: 7393..7405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 24,
            span: 7405..7406,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 223,
            column: 25,
            span: 7406..7407,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 223,
            column: 26,
            span: 7407..7408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 27,
            span: 7408..7409,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 223,
            column: 29,
            span: 7410..7411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__name",
        ),
        position: Position {
            line: 223,
            column: 36,
            span: 7412..7418,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 223,
            column: 38,
            span: 7419..7420,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"My Type\"",
        ),
        position: Position {
            line: 223,
            column: 48,
            span: 7421..7430,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 223,
            column: 50,
            span: 7431..7432,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 51,
            span: 7432..7433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 224,
            column: 9,
            span: 7436..7442,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 10,
            span: 7442..7443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 224,
            column: 16,
            span: 7443..7449,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 224,
            column: 17,
            span: 7449..7450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 224,
            column: 21,
            span: 7450..7454,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 22,
            span: 7454..7455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 224,
            column: 30,
            span: 7455..7463,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 31,
            span: 7463..7464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 224,
            column: 33,
            span: 7464..7466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 34,
            span: 7466..7467,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 35,
            span: 7467..7468,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^My Type\"",
        ),
        position: Position {
            line: 224,
            column: 46,
            span: 7469..7479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 47,
            span: 7479..7480,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 48,
            span: 7480..7481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 225,
            column: 15,
            span: 7484..7496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 16,
            span: 7496..7497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io.input(XX)\"",
        ),
        position: Position {
            line: 225,
            column: 30,
            span: 7497..7511,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 31,
            span: 7511..7512,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(FILE* expected, got My Type)\"",
        ),
        position: Position {
            line: 225,
            column: 63,
            span: 7513..7544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 64,
            span: 7544..7545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 226,
            column: 15,
            span: 7548..7560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 16,
            span: 7560..7561,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX + 1\"",
        ),
        position: Position {
            line: 226,
            column: 31,
            span: 7561..7576,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 32,
            span: 7576..7577,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"on a My Type value\"",
        ),
        position: Position {
            line: 226,
            column: 53,
            span: 7578..7598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 54,
            span: 7598..7599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 227,
            column: 15,
            span: 7602..7614,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 16,
            span: 7614..7615,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~io.stdin\"",
        ),
        position: Position {
            line: 227,
            column: 34,
            span: 7615..7633,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 227,
            column: 35,
            span: 7633..7634,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"on a FILE* value\"",
        ),
        position: Position {
            line: 227,
            column: 54,
            span: 7635..7653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 55,
            span: 7653..7654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 228,
            column: 15,
            span: 7657..7669,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 16,
            span: 7669..7670,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX < XX\"",
        ),
        position: Position {
            line: 228,
            column: 32,
            span: 7670..7686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 33,
            span: 7686..7687,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"two My Type values\"",
        ),
        position: Position {
            line: 228,
            column: 54,
            span: 7688..7708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 55,
            span: 7708..7709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 229,
            column: 15,
            span: 7712..7724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 16,
            span: 7724..7725,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return {} < XX\"",
        ),
        position: Position {
            line: 229,
            column: 32,
            span: 7725..7741,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 33,
            span: 7741..7742,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table with My Type\"",
        ),
        position: Position {
            line: 229,
            column: 54,
            span: 7743..7763,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 55,
            span: 7763..7764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 230,
            column: 15,
            span: 7767..7779,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 16,
            span: 7779..7780,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX < io.stdin\"",
        ),
        position: Position {
            line: 230,
            column: 38,
            span: 7780..7802,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 39,
            span: 7802..7803,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"My Type with FILE*\"",
        ),
        position: Position {
            line: 230,
            column: 60,
            span: 7804..7824,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 61,
            span: 7824..7825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 231,
            column: 5,
            span: 7828..7830,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 231,
            column: 6,
            span: 7830..7831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 231,
            column: 8,
            span: 7831..7833,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 231,
            column: 10,
            span: 7834..7835,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 231,
            column: 0,
            span: 7836..7839,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 233,
            column: 5,
            span: 7843..7845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 233,
            column: 7,
            span: 7846..7847,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 233,
            column: 12,
            span: 7848..7852,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 235,
            column: 10,
            span: 7953..7958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 235,
            column: 12,
            span: 7959..7960,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 235,
            column: 14,
            span: 7961..7962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 235,
            column: 27,
            span: 7963..7975,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 28,
            span: 7975..7976,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 235,
            column: 29,
            span: 7976..7977,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 235,
            column: 30,
            span: 7977..7978,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 31,
            span: 7978..7979,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 235,
            column: 33,
            span: 7980..7981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__name",
        ),
        position: Position {
            line: 235,
            column: 40,
            span: 7982..7988,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 235,
            column: 42,
            span: 7989..7990,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"TABLE\"",
        ),
        position: Position {
            line: 235,
            column: 50,
            span: 7991..7998,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 235,
            column: 52,
            span: 7999..8000,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 53,
            span: 8000..8001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 236,
            column: 11,
            span: 8006..8012,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 12,
            span: 8012..8013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 236,
            column: 13,
            span: 8013..8014,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 236,
            column: 14,
            span: 8014..8015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 236,
            column: 19,
            span: 8015..8020,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 20,
            span: 8020..8021,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Ltolstring -1; return 1\"",
        ),
        position: Position {
            line: 236,
            column: 45,
            span: 8021..8046,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 46,
            span: 8046..8047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 236,
            column: 48,
            span: 8048..8049,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 49,
            span: 8049..8050,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 236,
            column: 52,
            span: 8051..8053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 236,
            column: 61,
            span: 8054..8062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 62,
            span: 8062..8063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 236,
            column: 63,
            span: 8063..8064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 64,
            span: 8064..8065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 65,
            span: 8065..8066,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 238,
            column: 10,
            span: 8072..8077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 12,
            span: 8078..8079,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 13,
            span: 8079..8080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 238,
            column: 15,
            span: 8081..8082,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 238,
            column: 17,
            span: 8083..8084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 238,
            column: 19,
            span: 8085..8086,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 238,
            column: 20,
            span: 8086..8087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 238,
            column: 25,
            span: 8087..8092,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 26,
            span: 8092..8093,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushint 10; Ltolstring -2; return 2\"",
        ),
        position: Position {
            line: 238,
            column: 63,
            span: 8093..8130,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 64,
            span: 8130..8131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 238,
            column: 66,
            span: 8132..8133,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 67,
            span: 8133..8134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 239,
            column: 11,
            span: 8139..8145,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 12,
            span: 8145..8146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 239,
            column: 13,
            span: 8146..8147,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 239,
            column: 16,
            span: 8148..8150,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 239,
            column: 19,
            span: 8150..8153,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 239,
            column: 23,
            span: 8154..8157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 239,
            column: 25,
            span: 8158..8159,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 239,
            column: 28,
            span: 8160..8162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 239,
            column: 37,
            span: 8163..8171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 38,
            span: 8171..8172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 239,
            column: 39,
            span: 8172..8173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 40,
            span: 8173..8174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 41,
            span: 8174..8175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 241,
            column: 17,
            span: 8181..8193,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 18,
            span: 8193..8194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 241,
            column: 19,
            span: 8194..8195,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 241,
            column: 20,
            span: 8195..8196,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 241,
            column: 22,
            span: 8197..8198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__tostring",
        ),
        position: Position {
            line: 242,
            column: 17,
            span: 8205..8215,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 242,
            column: 19,
            span: 8216..8217,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 242,
            column: 28,
            span: 8218..8226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 29,
            span: 8226..8227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        position: Position {
            line: 242,
            column: 30,
            span: 8227..8228,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 31,
            span: 8228..8229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 243,
            column: 15,
            span: 8238..8244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 16,
            span: 8244..8245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        position: Position {
            line: 243,
            column: 17,
            span: 8245..8246,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 20,
            span: 8247..8249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 243,
            column: 22,
            span: 8250..8251,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 23,
            span: 8251..8252,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 244,
            column: 15,
            span: 8261..8267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ABC\"",
        ),
        position: Position {
            line: 244,
            column: 21,
            span: 8268..8273,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 245,
            column: 0,
            span: 8280..8283,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 246,
            column: 6,
            span: 8288..8289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 7,
            span: 8289..8290,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 247,
            column: 10,
            span: 8295..8300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 247,
            column: 12,
            span: 8301..8302,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 13,
            span: 8302..8303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 247,
            column: 15,
            span: 8304..8305,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 16,
            span: 8305..8306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 247,
            column: 18,
            span: 8307..8308,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 247,
            column: 20,
            span: 8309..8310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 247,
            column: 22,
            span: 8311..8312,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 247,
            column: 23,
            span: 8312..8313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 247,
            column: 28,
            span: 8313..8318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 29,
            span: 8318..8319,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushint 10; Ltolstring -2; return 3\"",
        ),
        position: Position {
            line: 247,
            column: 66,
            span: 8319..8356,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 67,
            span: 8356..8357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 247,
            column: 69,
            span: 8358..8359,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 70,
            span: 8359..8360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 248,
            column: 11,
            span: 8365..8371,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 12,
            span: 8371..8372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 248,
            column: 13,
            span: 8372..8373,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 248,
            column: 16,
            span: 8374..8376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 248,
            column: 18,
            span: 8377..8378,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 248,
            column: 22,
            span: 8379..8382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 248,
            column: 24,
            span: 8383..8384,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 248,
            column: 27,
            span: 8385..8387,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 248,
            column: 30,
            span: 8387..8390,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 248,
            column: 34,
            span: 8391..8394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 248,
            column: 36,
            span: 8395..8396,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 248,
            column: 39,
            span: 8397..8399,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ABC\"",
        ),
        position: Position {
            line: 248,
            column: 45,
            span: 8400..8405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 248,
            column: 46,
            span: 8405..8406,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 249,
            column: 0,
            span: 8409..8412,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 250,
            column: 0,
            span: 8413..8416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 253,
            column: 13,
            span: 8438..8450,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 14,
            span: 8450..8451,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(io.write or print){}\"",
        ),
        position: Position {
            line: 253,
            column: 37,
            span: 8451..8474,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 38,
            span: 8474..8475,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io.write\"",
        ),
        position: Position {
            line: 253,
            column: 49,
            span: 8476..8486,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 50,
            span: 8486..8487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 254,
            column: 13,
            span: 8488..8500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 14,
            span: 8500..8501,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(collectgarbage or print){}\"",
        ),
        position: Position {
            line: 254,
            column: 43,
            span: 8501..8530,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 254,
            column: 44,
            span: 8530..8531,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"collectgarbage\"",
        ),
        position: Position {
            line: 254,
            column: 61,
            span: 8532..8548,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 62,
            span: 8548..8549,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 257,
            column: 0,
            span: 8593..8595,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 258,
            column: 8,
            span: 8598..8603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 258,
            column: 10,
            span: 8604..8605,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 258,
            column: 12,
            span: 8606..8607,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 258,
            column: 21,
            span: 8608..8616,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 22,
            span: 8616..8617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 258,
            column: 23,
            span: 8617..8618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 24,
            span: 8618..8619,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 258,
            column: 31,
            span: 8620..8626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 258,
            column: 33,
            span: 8627..8628,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 258,
            column: 35,
            span: 8629..8630,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 37,
            span: 8630..8632,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 258,
            column: 0,
            span: 8633..8636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 259,
            column: 4,
            span: 8639..8640,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 259,
            column: 6,
            span: 8641..8642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 259,
            column: 13,
            span: 8643..8649,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 14,
            span: 8649..8650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 259,
            column: 18,
            span: 8650..8654,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 19,
            span: 8654..8655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 259,
            column: 25,
            span: 8655..8661,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 259,
            column: 26,
            span: 8661..8662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 259,
            column: 30,
            span: 8662..8666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 31,
            span: 8666..8667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 259,
            column: 32,
            span: 8667..8668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 33,
            span: 8668..8669,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 259,
            column: 38,
            span: 8670..8674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 39,
            span: 8674..8675,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 40,
            span: 8675..8676,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 41,
            span: 8676..8677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 260,
            column: 9,
            span: 8680..8686,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 10,
            span: 8686..8687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 260,
            column: 11,
            span: 8687..8688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 12,
            span: 8688..8689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 260,
            column: 13,
            span: 8688..8690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 14,
            span: 8690..8691,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 260,
            column: 17,
            span: 8692..8694,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 260,
            column: 19,
            span: 8694..8696,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 20,
            span: 8696..8697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 261,
            column: 11,
            span: 8700..8708,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 12,
            span: 8708..8709,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%?:%-1:\"",
        ),
        position: Position {
            line: 261,
            column: 22,
            span: 8709..8719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 261,
            column: 23,
            span: 8719..8720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 261,
            column: 25,
            span: 8721..8722,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 261,
            column: 26,
            span: 8722..8723,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 261,
            column: 28,
            span: 8724..8725,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 261,
            column: 29,
            span: 8725..8726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 30,
            span: 8726..8727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 264,
            column: 4,
            span: 8792..8793,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 264,
            column: 6,
            span: 8794..8795,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 264,
            column: 15,
            span: 8796..8804,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 16,
            span: 8804..8805,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 17,
            span: 8805..8806,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 265,
            column: 10,
            span: 8811..8816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 265,
            column: 12,
            span: 8817..8818,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 265,
            column: 13,
            span: 8818..8819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 265,
            column: 15,
            span: 8820..8821,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 265,
            column: 17,
            span: 8822..8823,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 265,
            column: 19,
            span: 8824..8825,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 265,
            column: 20,
            span: 8825..8826,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 265,
            column: 21,
            span: 8826..8827,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 265,
            column: 28,
            span: 8828..8834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 265,
            column: 30,
            span: 8835..8836,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 265,
            column: 32,
            span: 8837..8838,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 265,
            column: 0,
            span: 8838..8840,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 266,
            column: 0,
            span: 8843..8846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 268,
            column: 4,
            span: 8893..8894,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 268,
            column: 6,
            span: 8895..8896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 268,
            column: 13,
            span: 8897..8903,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 14,
            span: 8903..8904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 268,
            column: 18,
            span: 8904..8908,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 19,
            span: 8908..8909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 268,
            column: 25,
            span: 8909..8915,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 268,
            column: 26,
            span: 8915..8916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 268,
            column: 30,
            span: 8916..8920,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 31,
            span: 8920..8921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 268,
            column: 32,
            span: 8921..8922,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 33,
            span: 8922..8923,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 268,
            column: 38,
            span: 8924..8928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 39,
            span: 8928..8929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 40,
            span: 8929..8930,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 41,
            span: 8930..8931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 270,
            column: 11,
            span: 8978..8986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 12,
            span: 8986..8987,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%?:%-1:.*table value\"",
        ),
        position: Position {
            line: 270,
            column: 35,
            span: 8987..9010,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 36,
            span: 9010..9011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 270,
            column: 38,
            span: 9012..9013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 39,
            span: 9013..9014,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 271,
            column: 0,
            span: 9015..9018,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 275,
            column: 6,
            span: 9064..9069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 275,
            column: 8,
            span: 9070..9071,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 275,
            column: 10,
            span: 9072..9073,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 275,
            column: 12,
            span: 9074..9075,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 275,
            column: 13,
            span: 9075..9076,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 276,
            column: 4,
            span: 9077..9080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 276,
            column: 6,
            span: 9081..9082,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 276,
            column: 8,
            span: 9083..9084,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 10,
            span: 9084..9086,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 276,
            column: 11,
            span: 9086..9087,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 16,
            span: 9087..9092,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 276,
            column: 0,
            span: 9093..9095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 277,
            column: 4,
            span: 9098..9099,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 277,
            column: 5,
            span: 9099..9100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 277,
            column: 6,
            span: 9100..9101,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 277,
            column: 7,
            span: 9101..9102,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 277,
            column: 9,
            span: 9103..9104,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = x\"",
        ),
        position: Position {
            line: 277,
            column: 17,
            span: 9105..9112,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 277,
            column: 20,
            span: 9113..9115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 277,
            column: 0,
            span: 9116..9117,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 278,
            column: 0,
            span: 9118..9121,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 279,
            column: 6,
            span: 9122..9127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 279,
            column: 8,
            span: 9128..9129,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 279,
            column: 10,
            span: 9130..9131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 279,
            column: 16,
            span: 9132..9137,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 279,
            column: 17,
            span: 9137..9138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 279,
            column: 23,
            span: 9138..9144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 24,
            span: 9144..9145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 279,
            column: 25,
            span: 9145..9146,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 26,
            span: 9146..9147,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; \"",
        ),
        position: Position {
            line: 279,
            column: 31,
            span: 9148..9152,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 32,
            span: 9152..9153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 280,
            column: 2,
            span: 9154..9155,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 280,
            column: 4,
            span: 9156..9157,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 280,
            column: 0,
            span: 9158..9161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 281,
            column: 13,
            span: 9162..9174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 14,
            span: 9174..9175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 281,
            column: 15,
            span: 9175..9176,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 281,
            column: 18,
            span: 9177..9179,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; a = bbb + 1\"",
        ),
        position: Position {
            line: 281,
            column: 34,
            span: 9180..9195,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 281,
            column: 35,
            span: 9195..9196,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbb'\"",
        ),
        position: Position {
            line: 281,
            column: 50,
            span: 9197..9211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 51,
            span: 9211..9212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 282,
            column: 13,
            span: 9213..9225,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 14,
            span: 9225..9226,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local _ENV=_ENV;\"",
        ),
        position: Position {
            line: 282,
            column: 32,
            span: 9226..9244,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 282,
            column: 35,
            span: 9245..9247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 282,
            column: 37,
            span: 9248..9249,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 282,
            column: 40,
            span: 9250..9252,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; a = bbb + 1\"",
        ),
        position: Position {
            line: 282,
            column: 56,
            span: 9253..9268,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 282,
            column: 57,
            span: 9268..9269,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbb'\"",
        ),
        position: Position {
            line: 282,
            column: 72,
            span: 9270..9284,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 73,
            span: 9284..9285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 283,
            column: 13,
            span: 9286..9298,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 283,
            column: 14,
            span: 9298..9299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 283,
            column: 15,
            span: 9299..9300,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 283,
            column: 18,
            span: 9301..9303,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; local t = {}; a = t.bbb + 1\"",
        ),
        position: Position {
            line: 283,
            column: 50,
            span: 9304..9335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 283,
            column: 51,
            span: 9335..9336,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        position: Position {
            line: 283,
            column: 65,
            span: 9337..9350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 283,
            column: 66,
            span: 9350..9351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 284,
            column: 13,
            span: 9352..9364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 14,
            span: 9364..9365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 284,
            column: 15,
            span: 9365..9366,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 284,
            column: 18,
            span: 9367..9369,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; local t = {}; t:bbb()\"",
        ),
        position: Position {
            line: 284,
            column: 44,
            span: 9370..9395,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 284,
            column: 45,
            span: 9395..9396,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbb'\"",
        ),
        position: Position {
            line: 284,
            column: 60,
            span: 9397..9411,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 61,
            span: 9411..9412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 286,
            column: 13,
            span: 9414..9426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 14,
            span: 9426..9427,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[aaa=9\nrepeat until 3==3\nlocal x=math.sin(math.cos(3))\nif math.sin(1) == x then return math.sin(1) end   -- tail call\nlocal a,b = 1, {\n  {x='a'..'b'..'c', y='b', z=x},\n  {1,2,3,4,5} or 3+3<=3+3,\n  3+1>3+1,\n  {d = x and aaa[x or y]}}\n]]",
        ),
        position: Position {
            line: 295,
            column: 3,
            span: 9427..9663,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 4,
            span: 9663..9664,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        position: Position {
            line: 295,
            column: 19,
            span: 9665..9679,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 20,
            span: 9679..9680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 297,
            column: 13,
            span: 9682..9694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 14,
            span: 9694..9695,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal x,y = {},1\nif math.sin(1) == 0 then return 3 end    -- return\nx.a()]]",
        ),
        position: Position {
            line: 300,
            column: 8,
            span: 9695..9773,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 300,
            column: 9,
            span: 9773..9774,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'a'\"",
        ),
        position: Position {
            line: 300,
            column: 21,
            span: 9775..9786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 300,
            column: 22,
            span: 9786..9787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 302,
            column: 13,
            span: 9789..9801,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 14,
            span: 9801..9802,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nprefix = nil\ninsert = nil\nwhile 1 do\n  local a\n  if nil then break end\n  insert(prefix, a)\nend]]",
        ),
        position: Position {
            line: 309,
            column: 6,
            span: 9802..9901,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 309,
            column: 7,
            span: 9901..9902,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'insert'\"",
        ),
        position: Position {
            line: 309,
            column: 25,
            span: 9903..9920,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 26,
            span: 9920..9921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 311,
            column: 13,
            span: 9923..9935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 311,
            column: 14,
            span: 9935..9936,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[  -- tail call\n  return math.sin(\"a\")\n]]",
        ),
        position: Position {
            line: 313,
            column: 3,
            span: 9936..9978,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 4,
            span: 9978..9979,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sin\"",
        ),
        position: Position {
            line: 313,
            column: 10,
            span: 9980..9985,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 11,
            span: 9985..9986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 315,
            column: 13,
            span: 9988..10000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 14,
            span: 10000..10001,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[collectgarbage(\"nooption\")]]",
        ),
        position: Position {
            line: 315,
            column: 44,
            span: 10001..10031,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 45,
            span: 10031..10032,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid option\"",
        ),
        position: Position {
            line: 315,
            column: 62,
            span: 10033..10049,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 63,
            span: 10049..10050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 317,
            column: 13,
            span: 10052..10064,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 14,
            span: 10064..10065,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = print .. \"a\"]]",
        ),
        position: Position {
            line: 317,
            column: 34,
            span: 10065..10085,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 35,
            span: 10085..10086,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        position: Position {
            line: 317,
            column: 49,
            span: 10087..10100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 50,
            span: 10100..10101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 318,
            column: 13,
            span: 10102..10114,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 318,
            column: 14,
            span: 10114..10115,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = \"a\" .. false]]",
        ),
        position: Position {
            line: 318,
            column: 34,
            span: 10115..10135,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 318,
            column: 35,
            span: 10135..10136,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        position: Position {
            line: 318,
            column: 49,
            span: 10137..10150,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 318,
            column: 50,
            span: 10150..10151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 319,
            column: 13,
            span: 10152..10164,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 14,
            span: 10164..10165,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = {} .. 2]]",
        ),
        position: Position {
            line: 319,
            column: 29,
            span: 10165..10180,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 319,
            column: 30,
            span: 10180..10181,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        position: Position {
            line: 319,
            column: 44,
            span: 10182..10195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 45,
            span: 10195..10196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 321,
            column: 13,
            span: 10198..10210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 14,
            span: 10210..10211,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getmetatable(io.stdin).__gc()\"",
        ),
        position: Position {
            line: 321,
            column: 45,
            span: 10211..10242,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 321,
            column: 46,
            span: 10242..10243,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no value\"",
        ),
        position: Position {
            line: 321,
            column: 57,
            span: 10244..10254,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 58,
            span: 10254..10255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 323,
            column: 13,
            span: 10257..10269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 323,
            column: 14,
            span: 10269..10270,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal Var\nlocal function main()\n  NoSuchName (function() Var=0 end)\nend\nmain()\n]]",
        ),
        position: Position {
            line: 329,
            column: 3,
            span: 10270..10354,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 329,
            column: 4,
            span: 10354..10355,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'NoSuchName'\"",
        ),
        position: Position {
            line: 329,
            column: 26,
            span: 10356..10377,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 27,
            span: 10377..10378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 330,
            column: 6,
            span: 10379..10384,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 330,
            column: 10,
            span: 10385..10388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 332,
            column: 2,
            span: 10390..10391,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 332,
            column: 4,
            span: 10392..10393,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 332,
            column: 6,
            span: 10394..10395,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 332,
            column: 7,
            span: 10395..10396,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 10396..10397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 332,
            column: 21,
            span: 10398..10410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 22,
            span: 10410..10411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 332,
            column: 23,
            span: 10411..10412,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 24,
            span: 10412..10413,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 332,
            column: 26,
            span: 10414..10415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 332,
            column: 34,
            span: 10416..10423,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 332,
            column: 36,
            span: 10424..10425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 332,
            column: 43,
            span: 10426..10432,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 332,
            column: 45,
            span: 10433..10434,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 46,
            span: 10434..10435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 333,
            column: 13,
            span: 10436..10448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 14,
            span: 10448..10449,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a:sub()\"",
        ),
        position: Position {
            line: 333,
            column: 23,
            span: 10449..10458,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 24,
            span: 10458..10459,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bad self\"",
        ),
        position: Position {
            line: 333,
            column: 35,
            span: 10460..10470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 36,
            span: 10470..10471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 334,
            column: 13,
            span: 10472..10484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 14,
            span: 10484..10485,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.sub('a', {})\"",
        ),
        position: Position {
            line: 334,
            column: 35,
            span: 10485..10506,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 36,
            span: 10506..10507,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#2\"",
        ),
        position: Position {
            line: 334,
            column: 41,
            span: 10508..10512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 42,
            span: 10512..10513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 335,
            column: 13,
            span: 10514..10526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 14,
            span: 10526..10527,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"('a'):sub{}\"",
        ),
        position: Position {
            line: 335,
            column: 27,
            span: 10527..10540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 335,
            column: 28,
            span: 10540..10541,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#1\"",
        ),
        position: Position {
            line: 335,
            column: 33,
            span: 10542..10546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 34,
            span: 10546..10547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 337,
            column: 13,
            span: 10549..10561,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 14,
            span: 10561..10562,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.sort({1,2,3}, table.sort)\"",
        ),
        position: Position {
            line: 337,
            column: 47,
            span: 10562..10595,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 48,
            span: 10595..10596,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'table.sort'\"",
        ),
        position: Position {
            line: 337,
            column: 63,
            span: 10597..10611,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 64,
            span: 10611..10612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 338,
            column: 13,
            span: 10613..10625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 14,
            span: 10625..10626,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.gsub('s', 's', setmetatable)\"",
        ),
        position: Position {
            line: 338,
            column: 51,
            span: 10626..10663,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 52,
            span: 10663..10664,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'setmetatable'\"",
        ),
        position: Position {
            line: 338,
            column: 69,
            span: 10665..10681,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 70,
            span: 10681..10682,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 342,
            column: 6,
            span: 10719..10724,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 342,
            column: 15,
            span: 10725..10733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 342,
            column: 17,
            span: 10734..10735,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 18,
            span: 10735..10736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 342,
            column: 19,
            span: 10736..10737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 20,
            span: 10737..10738,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 343,
            column: 8,
            span: 10741..10746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 343,
            column: 10,
            span: 10747..10748,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 343,
            column: 12,
            span: 10749..10750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 343,
            column: 22,
            span: 10751..10760,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 343,
            column: 23,
            span: 10760..10761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 343,
            column: 29,
            span: 10761..10767,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 30,
            span: 10767..10768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 343,
            column: 31,
            span: 10768..10769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 32,
            span: 10769..10770,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 344,
            column: 8,
            span: 10773..10778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 344,
            column: 10,
            span: 10779..10780,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 344,
            column: 11,
            span: 10780..10781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 344,
            column: 13,
            span: 10782..10783,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 344,
            column: 15,
            span: 10784..10785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 344,
            column: 25,
            span: 10786..10795,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 344,
            column: 26,
            span: 10795..10796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 344,
            column: 32,
            span: 10796..10802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 33,
            span: 10802..10803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 344,
            column: 34,
            span: 10803..10804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 35,
            span: 10804..10805,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 345,
            column: 9,
            span: 10808..10814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 345,
            column: 0,
            span: 10815..10816,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 346,
            column: 0,
            span: 10817..10820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 347,
            column: 7,
            span: 10821..10827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 8,
            span: 10827..10828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 347,
            column: 14,
            span: 10828..10834,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 347,
            column: 15,
            span: 10834..10835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 347,
            column: 19,
            span: 10835..10839,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 20,
            span: 10839..10840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 347,
            column: 21,
            span: 10840..10841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 22,
            span: 10841..10842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 23,
            span: 10842..10843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 347,
            column: 24,
            span: 10843..10844,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C stack overflow\"",
        ),
        position: Position {
            line: 347,
            column: 43,
            span: 10845..10863,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 44,
            span: 10863..10864,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 45,
            span: 10864..10865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 349,
            column: 13,
            span: 10867..10879,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 349,
            column: 14,
            span: 10879..10880,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutine.yield()\"",
        ),
        position: Position {
            line: 349,
            column: 33,
            span: 10880..10899,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 349,
            column: 34,
            span: 10899..10900,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outside a coroutine\"",
        ),
        position: Position {
            line: 349,
            column: 56,
            span: 10901..10922,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 349,
            column: 57,
            span: 10922..10923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 351,
            column: 2,
            span: 10925..10926,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 351,
            column: 4,
            span: 10927..10928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 351,
            column: 14,
            span: 10929..10938,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 351,
            column: 15,
            span: 10938..10939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 351,
            column: 19,
            span: 10939..10943,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 20,
            span: 10943..10944,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 351,
            column: 28,
            span: 10944..10952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 29,
            span: 10952..10953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 30,
            span: 10953..10954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 351,
            column: 36,
            span: 10955..10960,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 351,
            column: 37,
            span: 10960..10961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 351,
            column: 41,
            span: 10961..10965,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 42,
            span: 10965..10966,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 351,
            column: 43,
            span: 10966..10967,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 45,
            span: 10967..10969,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 46,
            span: 10969..10970,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 48,
            span: 10970..10972,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 49,
            span: 10972..10973,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 51,
            span: 10973..10975,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 351,
            column: 53,
            span: 10976..10977,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 54,
            span: 10977..10978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 351,
            column: 64,
            span: 10979..10988,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 351,
            column: 65,
            span: 10988..10989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 351,
            column: 70,
            span: 10989..10994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 71,
            span: 10994..10995,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 351,
            column: 75,
            span: 10996..10999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 76,
            span: 10999..11000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 352,
            column: 9,
            span: 11001..11009,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 352,
            column: 10,
            span: 11009..11010,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield across\"",
        ),
        position: Position {
            line: 352,
            column: 24,
            span: 11010..11024,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 352,
            column: 25,
            span: 11024..11025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 352,
            column: 27,
            span: 11026..11027,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 352,
            column: 28,
            span: 11027..11028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "idsize",
        ),
        position: Position {
            line: 357,
            column: 7,
            span: 11166..11172,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 357,
            column: 9,
            span: 11173..11174,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 357,
            column: 12,
            span: 11174..11177,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 357,
            column: 14,
            span: 11178..11179,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 357,
            column: 0,
            span: 11179..11181,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 358,
            column: 6,
            span: 11182..11187,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 358,
            column: 15,
            span: 11188..11196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        position: Position {
            line: 358,
            column: 25,
            span: 11197..11206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 358,
            column: 26,
            span: 11206..11207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        position: Position {
            line: 358,
            column: 32,
            span: 11207..11213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 358,
            column: 33,
            span: 11213..11214,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 360,
            column: 8,
            span: 11235..11240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 360,
            column: 10,
            span: 11241..11242,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 360,
            column: 11,
            span: 11242..11243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 360,
            column: 15,
            span: 11244..11247,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 360,
            column: 17,
            span: 11248..11249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 360,
            column: 22,
            span: 11250..11254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 23,
            span: 11254..11255,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 360,
            column: 26,
            span: 11255..11258,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 360,
            column: 27,
            span: 11258..11259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        position: Position {
            line: 360,
            column: 34,
            span: 11260..11266,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 35,
            span: 11266..11267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 361,
            column: 6,
            span: 11270..11273,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 361,
            column: 8,
            span: 11274..11275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 361,
            column: 15,
            span: 11276..11282,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 361,
            column: 16,
            span: 11282..11283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 361,
            column: 21,
            span: 11283..11288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 22,
            span: 11288..11289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 361,
            column: 25,
            span: 11289..11292,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 26,
            span: 11292..11293,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^([^:]*):\"",
        ),
        position: Position {
            line: 361,
            column: 38,
            span: 11294..11305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 39,
            span: 11305..11306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 362,
            column: 9,
            span: 11345..11351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 10,
            span: 11351..11352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 362,
            column: 13,
            span: 11352..11355,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 362,
            column: 14,
            span: 11355..11356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 362,
            column: 17,
            span: 11356..11359,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 18,
            span: 11359..11360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 19,
            span: 11360..11361,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 362,
            column: 22,
            span: 11362..11364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "idsize",
        ),
        position: Position {
            line: 362,
            column: 29,
            span: 11365..11371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 30,
            span: 11371..11372,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 363,
            column: 0,
            span: 11373..11376,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 365,
            column: 4,
            span: 11378..11381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 365,
            column: 6,
            span: 11382..11383,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 365,
            column: 8,
            span: 11384..11385,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 11,
            span: 11385..11388,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 365,
            column: 13,
            span: 11389..11390,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 16,
            span: 11390..11393,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 17,
            span: 11393..11394,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 20,
            span: 11394..11397,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 365,
            column: 22,
            span: 11398..11399,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 25,
            span: 11399..11402,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 365,
            column: 28,
            span: 11403..11405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        position: Position {
            line: 366,
            column: 12,
            span: 11451..11460,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 13,
            span: 11460..11461,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@\"",
        ),
        position: Position {
            line: 366,
            column: 16,
            span: 11461..11464,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 366,
            column: 19,
            span: 11465..11467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 366,
            column: 26,
            span: 11468..11474,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 366,
            column: 27,
            span: 11474..11475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 366,
            column: 30,
            span: 11475..11478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 31,
            span: 11478..11479,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 366,
            column: 34,
            span: 11479..11482,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 366,
            column: 35,
            span: 11482..11483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 366,
            column: 37,
            span: 11484..11485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 38,
            span: 11485..11486,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 39,
            span: 11486..11487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        position: Position {
            line: 367,
            column: 12,
            span: 11504..11513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 13,
            span: 11513..11514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 367,
            column: 19,
            span: 11514..11520,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 367,
            column: 20,
            span: 11520..11521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 367,
            column: 23,
            span: 11521..11524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 24,
            span: 11524..11525,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 367,
            column: 27,
            span: 11525..11528,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 367,
            column: 28,
            span: 11528..11529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 367,
            column: 30,
            span: 11530..11531,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 367,
            column: 32,
            span: 11532..11533,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 35,
            span: 11533..11536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 36,
            span: 11536..11537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 37,
            span: 11537..11538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        position: Position {
            line: 368,
            column: 12,
            span: 11561..11570,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 13,
            span: 11570..11571,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        position: Position {
            line: 368,
            column: 16,
            span: 11571..11574,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 368,
            column: 19,
            span: 11575..11577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 368,
            column: 26,
            span: 11578..11584,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 368,
            column: 27,
            span: 11584..11585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 368,
            column: 30,
            span: 11585..11588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 31,
            span: 11588..11589,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 368,
            column: 34,
            span: 11589..11592,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 368,
            column: 35,
            span: 11592..11593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 368,
            column: 37,
            span: 11594..11595,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 38,
            span: 11595..11596,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 39,
            span: 11596..11597,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 369,
            column: 0,
            span: 11615..11618,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 374,
            column: 6,
            span: 11644..11649,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 374,
            column: 15,
            span: 11650..11658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 374,
            column: 25,
            span: 11659..11668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 26,
            span: 11668..11669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 374,
            column: 27,
            span: 11669..11670,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 374,
            column: 28,
            span: 11670..11671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 374,
            column: 30,
            span: 11672..11673,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 31,
            span: 11673..11674,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 375,
            column: 8,
            span: 11677..11682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 375,
            column: 12,
            span: 11683..11686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 375,
            column: 13,
            span: 11686..11687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 375,
            column: 17,
            span: 11688..11691,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 375,
            column: 19,
            span: 11692..11693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 375,
            column: 25,
            span: 11694..11699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 26,
            span: 11699..11700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 375,
            column: 30,
            span: 11700..11704,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 31,
            span: 11704..11705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 375,
            column: 32,
            span: 11705..11706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 33,
            span: 11706..11707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 34,
            span: 11707..11708,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 376,
            column: 8,
            span: 11711..11716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 376,
            column: 13,
            span: 11717..11721,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 376,
            column: 15,
            span: 11722..11723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 376,
            column: 24,
            span: 11724..11732,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 25,
            span: 11732..11733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 376,
            column: 31,
            span: 11733..11739,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 376,
            column: 32,
            span: 11739..11740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 376,
            column: 37,
            span: 11740..11745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 38,
            span: 11745..11746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 376,
            column: 41,
            span: 11746..11749,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 376,
            column: 42,
            span: 11749..11750,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        position: Position {
            line: 376,
            column: 52,
            span: 11751..11760,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 53,
            span: 11760..11761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 54,
            span: 11761..11762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 377,
            column: 9,
            span: 11765..11771,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 10,
            span: 11771..11772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 377,
            column: 14,
            span: 11772..11776,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 377,
            column: 17,
            span: 11777..11779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 377,
            column: 19,
            span: 11780..11781,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 377,
            column: 22,
            span: 11782..11784,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 24,
            span: 11785..11786,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 377,
            column: 27,
            span: 11786..11789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 377,
            column: 32,
            span: 11790..11794,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 377,
            column: 36,
            span: 11795..11798,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 377,
            column: 40,
            span: 11799..11802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 377,
            column: 42,
            span: 11803..11804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 43,
            span: 11804..11805,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 44,
            span: 11805..11806,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 378,
            column: 0,
            span: 11807..11810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 380,
            column: 10,
            span: 11812..11821,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 11,
            span: 11821..11822,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a\\n for i=1,'a' do \\n print(i) \\n end\"",
        ),
        position: Position {
            line: 380,
            column: 56,
            span: 11822..11867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 57,
            span: 11867..11868,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 380,
            column: 59,
            span: 11868..11870,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 60,
            span: 11870..11871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 381,
            column: 10,
            span: 11872..11881,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 11,
            span: 11881..11882,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n local a \\n for k,v in 3 \\n do \\n print(k) \\n end\"",
        ),
        position: Position {
            line: 381,
            column: 64,
            span: 11882..11935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 65,
            span: 11935..11936,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 381,
            column: 67,
            span: 11936..11938,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 68,
            span: 11938..11939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 382,
            column: 10,
            span: 11940..11949,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 11,
            span: 11949..11950,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n for k,v in \\n 3 \\n do \\n print(k) \\n end\"",
        ),
        position: Position {
            line: 382,
            column: 58,
            span: 11950..11997,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 382,
            column: 59,
            span: 11997..11998,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 382,
            column: 61,
            span: 11998..12000,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 62,
            span: 12000..12001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 383,
            column: 10,
            span: 12002..12011,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 383,
            column: 11,
            span: 12011..12012,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a.x.y ()\\na=a+1\\nend\"",
        ),
        position: Position {
            line: 383,
            column: 42,
            span: 12012..12043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 383,
            column: 43,
            span: 12043..12044,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 383,
            column: 45,
            span: 12044..12046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 383,
            column: 46,
            span: 12046..12047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 385,
            column: 10,
            span: 12049..12058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 11,
            span: 12058..12059,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\na\\n+\\n{}\"",
        ),
        position: Position {
            line: 385,
            column: 27,
            span: 12059..12075,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 28,
            span: 12075..12076,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 385,
            column: 30,
            span: 12076..12078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 385,
            column: 31,
            span: 12078..12079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 386,
            column: 10,
            span: 12080..12089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 11,
            span: 12089..12090,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\n3\\n+\\n(\\n4\\n/\\nprint)\"",
        ),
        position: Position {
            line: 386,
            column: 40,
            span: 12090..12119,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 41,
            span: 12119..12120,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 386,
            column: 43,
            span: 12120..12122,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 44,
            span: 12122..12123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 387,
            column: 10,
            span: 12124..12133,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 387,
            column: 11,
            span: 12133..12134,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\nprint\\n+\\n(\\n4\\n/\\n7)\"",
        ),
        position: Position {
            line: 387,
            column: 40,
            span: 12134..12163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 41,
            span: 12163..12164,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 387,
            column: 43,
            span: 12164..12166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 387,
            column: 44,
            span: 12166..12167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 389,
            column: 10,
            span: 12169..12178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 389,
            column: 11,
            span: 12178..12179,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n=\\n-\\n\\nprint\\n;\"",
        ),
        position: Position {
            line: 389,
            column: 32,
            span: 12179..12200,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 389,
            column: 33,
            span: 12200..12201,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 389,
            column: 35,
            span: 12201..12203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 389,
            column: 36,
            span: 12203..12204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 391,
            column: 10,
            span: 12206..12215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 391,
            column: 11,
            span: 12215..12216,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\na\n(\n23)\n]]",
        ),
        position: Position {
            line: 395,
            column: 3,
            span: 12216..12229,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 395,
            column: 4,
            span: 12229..12230,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 395,
            column: 6,
            span: 12230..12232,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 395,
            column: 7,
            span: 12232..12233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 397,
            column: 10,
            span: 12235..12244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 11,
            span: 12244..12245,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23\n)\n]]",
        ),
        position: Position {
            line: 405,
            column: 3,
            span: 12245..12282,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 405,
            column: 4,
            span: 12282..12283,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 405,
            column: 6,
            span: 12283..12285,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 405,
            column: 7,
            span: 12285..12286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 407,
            column: 10,
            span: 12288..12297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 407,
            column: 11,
            span: 12297..12298,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23 + a\n)\n]]",
        ),
        position: Position {
            line: 415,
            column: 3,
            span: 12298..12339,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 415,
            column: 4,
            span: 12339..12340,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 415,
            column: 6,
            span: 12340..12342,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 7,
            span: 12342..12343,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 417,
            column: 6,
            span: 12345..12350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 417,
            column: 8,
            span: 12351..12352,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 417,
            column: 10,
            span: 12353..12354,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  function g() f() end\n  function f(x) error('a', X) end\ng()\n]]",
        ),
        position: Position {
            line: 421,
            column: 3,
            span: 12355..12421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 422,
            column: 2,
            span: 12422..12423,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 422,
            column: 4,
            span: 12424..12425,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 422,
            column: 6,
            span: 12425..12427,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 422,
            column: 7,
            span: 12427..12428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 422,
            column: 17,
            span: 12429..12438,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 422,
            column: 18,
            span: 12438..12439,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 422,
            column: 19,
            span: 12439..12440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 422,
            column: 20,
            span: 12440..12441,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 422,
            column: 21,
            span: 12441..12442,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 422,
            column: 22,
            span: 12442..12443,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 422,
            column: 24,
            span: 12443..12445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 422,
            column: 25,
            span: 12445..12446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 423,
            column: 2,
            span: 12447..12448,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 423,
            column: 4,
            span: 12449..12450,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 423,
            column: 6,
            span: 12450..12452,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 423,
            column: 7,
            span: 12452..12453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 423,
            column: 17,
            span: 12454..12463,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 18,
            span: 12463..12464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 19,
            span: 12464..12465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 423,
            column: 20,
            span: 12465..12466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 21,
            span: 12466..12467,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 423,
            column: 22,
            span: 12467..12468,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 423,
            column: 28,
            span: 12469..12474,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 29,
            span: 12474..12475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 424,
            column: 2,
            span: 12476..12477,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 424,
            column: 4,
            span: 12478..12479,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 424,
            column: 6,
            span: 12479..12481,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 424,
            column: 7,
            span: 12481..12482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 424,
            column: 17,
            span: 12483..12492,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 424,
            column: 18,
            span: 12492..12493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 424,
            column: 19,
            span: 12493..12494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 424,
            column: 20,
            span: 12494..12495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 21,
            span: 12495..12496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 424,
            column: 22,
            span: 12496..12497,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 424,
            column: 24,
            span: 12497..12499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 25,
            span: 12499..12500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 425,
            column: 2,
            span: 12501..12502,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 425,
            column: 4,
            span: 12503..12504,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 425,
            column: 6,
            span: 12504..12506,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 425,
            column: 7,
            span: 12506..12507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 425,
            column: 17,
            span: 12508..12517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 425,
            column: 18,
            span: 12517..12518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 425,
            column: 19,
            span: 12518..12519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 425,
            column: 20,
            span: 12519..12520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 425,
            column: 21,
            span: 12520..12521,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 425,
            column: 22,
            span: 12521..12522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 425,
            column: 24,
            span: 12522..12524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 425,
            column: 25,
            span: 12524..12525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 428,
            column: 10,
            span: 12528..12537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 428,
            column: 11,
            span: 12537..12538,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal b = false\nif not b then\n  error 'test'\nend]]",
        ),
        position: Position {
            line: 432,
            column: 6,
            span: 12538..12591,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 432,
            column: 7,
            span: 12591..12592,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 432,
            column: 9,
            span: 12592..12594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 432,
            column: 10,
            span: 12594..12595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 434,
            column: 10,
            span: 12597..12606,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 434,
            column: 11,
            span: 12606..12607,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal b = false\nif not b then\n  if not b then\n    if not b then\n      error 'test'\n    end\n  end\nend]]",
        ),
        position: Position {
            line: 442,
            column: 6,
            span: 12607..12712,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 442,
            column: 7,
            span: 12712..12713,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 442,
            column: 9,
            span: 12713..12715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 442,
            column: 10,
            span: 12715..12716,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 444,
            column: 0,
            span: 12718..12720,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 448,
            column: 8,
            span: 12915..12920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 448,
            column: 10,
            span: 12921..12922,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 448,
            column: 12,
            span: 12923..12924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 448,
            column: 19,
            span: 12925..12931,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 448,
            column: 20,
            span: 12931..12932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 448,
            column: 26,
            span: 12932..12938,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 448,
            column: 27,
            span: 12938..12939,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s return __A.x\"",
        ),
        position: Position {
            line: 448,
            column: 44,
            span: 12939..12956,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 448,
            column: 45,
            span: 12956..12957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 448,
            column: 52,
            span: 12958..12964,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 448,
            column: 53,
            span: 12964..12965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 448,
            column: 56,
            span: 12965..12968,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 448,
            column: 57,
            span: 12968..12969,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 448,
            column: 61,
            span: 12969..12973,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 448,
            column: 62,
            span: 12973..12974,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 448,
            column: 66,
            span: 12974..12978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 448,
            column: 67,
            span: 12978..12979,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 448,
            column: 68,
            span: 12979..12980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        position: Position {
            line: 449,
            column: 12,
            span: 12983..12992,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 449,
            column: 13,
            span: 12992..12993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 449,
            column: 14,
            span: 12993..12994,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 449,
            column: 15,
            span: 12994..12995,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "301",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 449,
            column: 19,
            span: 12995..12999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 449,
            column: 20,
            span: 12999..13000,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 450,
            column: 0,
            span: 13001..13004,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 453,
            column: 3,
            span: 13007..13009,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 453,
            column: 7,
            span: 13010..13013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 453,
            column: 13,
            span: 13014..13019,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 453,
            column: 0,
            span: 13020..13024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 455,
            column: 17,
            span: 13072..13086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 18,
            span: 13086..13087,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 19,
            span: 13087..13088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 456,
            column: 8,
            span: 13091..13096,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow\"",
        ),
        position: Position {
            line: 456,
            column: 33,
            span: 13097..13121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 457,
            column: 4,
            span: 13124..13125,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 457,
            column: 6,
            span: 13126..13127,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 457,
            column: 0,
            span: 13127..13129,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 459,
            column: 8,
            span: 13179..13184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 459,
            column: 10,
            span: 13185..13186,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 459,
            column: 12,
            span: 13187..13188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 459,
            column: 18,
            span: 13189..13194,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 459,
            column: 19,
            span: 13194..13195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 459,
            column: 26,
            span: 13195..13202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 459,
            column: 27,
            span: 13202..13203,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 459,
            column: 28,
            span: 13202..13204,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 459,
            column: 29,
            span: 13204..13205,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 459,
            column: 33,
            span: 13206..13209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 459,
            column: 34,
            span: 13209..13210,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 459,
            column: 35,
            span: 13210..13211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 459,
            column: 46,
            span: 13211..13222,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 459,
            column: 48,
            span: 13223..13224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 459,
            column: 0,
            span: 13224..13226,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 460,
            column: 8,
            span: 13229..13234,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 460,
            column: 17,
            span: 13235..13243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxy",
        ),
        position: Position {
            line: 460,
            column: 22,
            span: 13244..13248,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 460,
            column: 23,
            span: 13248..13249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 460,
            column: 24,
            span: 13249..13250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 461,
            column: 6,
            span: 13255..13256,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 461,
            column: 8,
            span: 13257..13258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 461,
            column: 10,
            span: 13259..13260,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 461,
            column: 12,
            span: 13261..13262,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 461,
            column: 14,
            span: 13262..13264,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 461,
            column: 15,
            span: 13264..13265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxy",
        ),
        position: Position {
            line: 461,
            column: 20,
            span: 13266..13270,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 461,
            column: 21,
            span: 13270..13271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 461,
            column: 22,
            span: 13271..13272,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 462,
            column: 6,
            span: 13275..13278,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 463,
            column: 11,
            span: 13330..13338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 463,
            column: 13,
            span: 13339..13340,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 463,
            column: 14,
            span: 13340..13341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 463,
            column: 15,
            span: 13341..13342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 464,
            column: 19,
            span: 13347..13361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 464,
            column: 20,
            span: 13361..13362,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 464,
            column: 26,
            span: 13362..13368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 464,
            column: 27,
            span: 13368..13369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxy",
        ),
        position: Position {
            line: 465,
            column: 9,
            span: 13422..13426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 465,
            column: 10,
            span: 13426..13427,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 465,
            column: 11,
            span: 13427..13428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 466,
            column: 19,
            span: 13433..13447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 20,
            span: 13447..13448,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 466,
            column: 29,
            span: 13448..13457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 30,
            span: 13457..13458,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 467,
            column: 0,
            span: 13461..13464,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 469,
            column: 8,
            span: 13468..13473,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 469,
            column: 17,
            span: 13474..13482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        position: Position {
            line: 469,
            column: 35,
            span: 13483..13500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 469,
            column: 36,
            span: 13500..13501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 469,
            column: 37,
            span: 13501..13502,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 469,
            column: 38,
            span: 13502..13503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 470,
            column: 10,
            span: 13508..13513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 470,
            column: 11,
            span: 13513..13514,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(expected stack overflow after \"",
        ),
        position: Position {
            line: 470,
            column: 44,
            span: 13514..13547,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 470,
            column: 47,
            span: 13548..13550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 470,
            column: 49,
            span: 13551..13552,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 470,
            column: 52,
            span: 13553..13555,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" calls)\"",
        ),
        position: Position {
            line: 470,
            column: 62,
            span: 13556..13565,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 470,
            column: 63,
            span: 13565..13566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 471,
            column: 6,
            span: 13571..13572,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 471,
            column: 8,
            span: 13573..13574,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 471,
            column: 10,
            span: 13574..13576,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 472,
            column: 11,
            span: 13603..13609,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 472,
            column: 13,
            span: 13610..13611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 472,
            column: 19,
            span: 13611..13617,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 472,
            column: 20,
            span: 13617..13618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 472,
            column: 24,
            span: 13618..13622,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 472,
            column: 25,
            span: 13622..13623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 472,
            column: 26,
            span: 13623..13624,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 27,
            span: 13624..13625,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        position: Position {
            line: 472,
            column: 44,
            span: 13626..13642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 472,
            column: 45,
            span: 13642..13643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 472,
            column: 46,
            span: 13643..13644,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 473,
            column: 0,
            span: 13647..13650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 475,
            column: 9,
            span: 13709..13715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 475,
            column: 10,
            span: 13715..13716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        position: Position {
            line: 475,
            column: 27,
            span: 13716..13733,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 475,
            column: 28,
            span: 13733..13734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 475,
            column: 32,
            span: 13734..13738,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 475,
            column: 33,
            span: 13738..13739,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        position: Position {
            line: 475,
            column: 38,
            span: 13739..13744,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 475,
            column: 39,
            span: 13744..13745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 475,
            column: 40,
            span: 13745..13746,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 475,
            column: 41,
            span: 13746..13747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 476,
            column: 9,
            span: 13750..13756,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 10,
            span: 13756..13757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        position: Position {
            line: 476,
            column: 27,
            span: 13757..13774,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 28,
            span: 13774..13775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 476,
            column: 32,
            span: 13775..13779,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 33,
            span: 13779..13780,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        position: Position {
            line: 476,
            column: 38,
            span: 13780..13785,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 39,
            span: 13785..13786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 40,
            span: 13786..13787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 41,
            span: 13787..13788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 477,
            column: 9,
            span: 13791..13797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 10,
            span: 13797..13798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        position: Position {
            line: 477,
            column: 27,
            span: 13798..13815,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 28,
            span: 13815..13816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 477,
            column: 32,
            span: 13816..13820,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 33,
            span: 13820..13821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        position: Position {
            line: 477,
            column: 38,
            span: 13821..13826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 39,
            span: 13826..13827,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 40,
            span: 13827..13828,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 41,
            span: 13828..13829,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 481,
            column: 8,
            span: 13869..13874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        position: Position {
            line: 481,
            column: 0,
            span: 13875..13877,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 482,
            column: 8,
            span: 13880..13885,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 482,
            column: 17,
            span: 13886..13894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 482,
            column: 19,
            span: 13895..13896,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 482,
            column: 20,
            span: 13896..13897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 482,
            column: 21,
            span: 13897..13898,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 482,
            column: 22,
            span: 13898..13899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        position: Position {
            line: 483,
            column: 7,
            span: 13904..13906,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 483,
            column: 9,
            span: 13907..13908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 483,
            column: 15,
            span: 13909..13914,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 483,
            column: 16,
            span: 13914..13915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 483,
            column: 23,
            span: 13915..13922,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 483,
            column: 24,
            span: 13922..13923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 483,
            column: 25,
            span: 13923..13924,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 483,
            column: 26,
            span: 13924..13925,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 483,
            column: 30,
            span: 13926..13929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 483,
            column: 31,
            span: 13929..13930,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 483,
            column: 32,
            span: 13930..13931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 483,
            column: 43,
            span: 13931..13942,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 483,
            column: 45,
            span: 13943..13944,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 483,
            column: 0,
            span: 13944..13946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 484,
            column: 19,
            span: 13951..13965,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 484,
            column: 20,
            span: 13965..13966,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 484,
            column: 26,
            span: 13966..13972,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 484,
            column: 27,
            span: 13972..13973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxy",
        ),
        position: Position {
            line: 485,
            column: 9,
            span: 14026..14030,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 485,
            column: 10,
            span: 14030..14031,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 485,
            column: 11,
            span: 14031..14032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 486,
            column: 19,
            span: 14037..14051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 20,
            span: 14051..14052,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 486,
            column: 29,
            span: 14052..14061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 30,
            span: 14061..14062,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 487,
            column: 0,
            span: 14065..14068,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 488,
            column: 8,
            span: 14071..14076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 488,
            column: 10,
            span: 14077..14078,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 488,
            column: 11,
            span: 14078..14079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        position: Position {
            line: 488,
            column: 20,
            span: 14080..14088,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 488,
            column: 22,
            span: 14089..14090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 488,
            column: 29,
            span: 14091..14097,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 488,
            column: 30,
            span: 14097..14098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 488,
            column: 31,
            span: 14098..14099,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 488,
            column: 32,
            span: 14099..14100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 488,
            column: 38,
            span: 14101..14106,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 488,
            column: 39,
            span: 14106..14107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 488,
            column: 48,
            span: 14107..14116,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 488,
            column: 49,
            span: 14116..14117,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 488,
            column: 51,
            span: 14117..14119,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 488,
            column: 52,
            span: 14119..14120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 489,
            column: 8,
            span: 14123..14128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 489,
            column: 9,
            span: 14128..14129,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 489,
            column: 12,
            span: 14129..14132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 489,
            column: 13,
            span: 14132..14133,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 490,
            column: 8,
            span: 14136..14141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 490,
            column: 14,
            span: 14142..14147,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 490,
            column: 16,
            span: 14148..14149,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 490,
            column: 18,
            span: 14150..14151,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 490,
            column: 19,
            span: 14151..14152,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 491,
            column: 6,
            span: 14155..14158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 491,
            column: 11,
            span: 14159..14163,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 491,
            column: 14,
            span: 14164..14166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 491,
            column: 21,
            span: 14167..14173,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 491,
            column: 22,
            span: 14173..14174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 491,
            column: 28,
            span: 14174..14180,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 491,
            column: 29,
            span: 14180..14181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        position: Position {
            line: 491,
            column: 37,
            span: 14181..14189,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 491,
            column: 38,
            span: 14189..14190,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]*\"",
        ),
        position: Position {
            line: 491,
            column: 47,
            span: 14191..14199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 491,
            column: 48,
            span: 14199..14200,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 491,
            column: 0,
            span: 14201..14203,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 492,
            column: 10,
            span: 14208..14213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        position: Position {
            line: 492,
            column: 15,
            span: 14214..14218,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 492,
            column: 17,
            span: 14219..14220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 492,
            column: 24,
            span: 14221..14227,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 492,
            column: 25,
            span: 14227..14228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 492,
            column: 30,
            span: 14228..14233,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 31,
            span: 14233..14234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 492,
            column: 35,
            span: 14234..14238,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 36,
            span: 14238..14239,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        position: Position {
            line: 492,
            column: 46,
            span: 14240..14249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 492,
            column: 47,
            span: 14249..14250,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 493,
            column: 7,
            span: 14255..14257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        position: Position {
            line: 493,
            column: 12,
            span: 14258..14262,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 493,
            column: 17,
            span: 14263..14267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 493,
            column: 23,
            span: 14268..14273,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 493,
            column: 24,
            span: 14273..14274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 493,
            column: 30,
            span: 14274..14280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 493,
            column: 31,
            span: 14280..14281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 493,
            column: 36,
            span: 14281..14286,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 493,
            column: 37,
            span: 14286..14287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 493,
            column: 46,
            span: 14288..14296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 493,
            column: 47,
            span: 14296..14297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        position: Position {
            line: 493,
            column: 51,
            span: 14297..14301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 52,
            span: 14301..14302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 53,
            span: 14302..14303,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 493,
            column: 0,
            span: 14304..14307,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 494,
            column: 0,
            span: 14310..14313,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 495,
            column: 8,
            span: 14316..14321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 495,
            column: 10,
            span: 14322..14323,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 495,
            column: 12,
            span: 14324..14325,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 0,
            span: 14325..14327,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 496,
            column: 8,
            span: 14330..14335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 496,
            column: 14,
            span: 14336..14341,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 496,
            column: 15,
            span: 14341..14342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 496,
            column: 16,
            span: 14342..14343,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 496,
            column: 17,
            span: 14343..14344,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 496,
            column: 20,
            span: 14345..14347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        position: Position {
            line: 496,
            column: 23,
            span: 14348..14350,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 496,
            column: 0,
            span: 14351..14353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 497,
            column: 11,
            span: 14358..14364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 497,
            column: 12,
            span: 14364..14365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 497,
            column: 17,
            span: 14365..14370,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 497,
            column: 18,
            span: 14370..14371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 497,
            column: 19,
            span: 14371..14372,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 497,
            column: 20,
            span: 14372..14373,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 497,
            column: 23,
            span: 14374..14376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 497,
            column: 25,
            span: 14377..14378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 497,
            column: 26,
            span: 14378..14379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 498,
            column: 6,
            span: 14384..14385,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 498,
            column: 8,
            span: 14386..14387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 498,
            column: 10,
            span: 14388..14389,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 498,
            column: 12,
            span: 14390..14391,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 498,
            column: 0,
            span: 14391..14393,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 499,
            column: 0,
            span: 14396..14399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 500,
            column: 9,
            span: 14402..14408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 500,
            column: 10,
            span: 14408..14409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 500,
            column: 11,
            span: 14409..14410,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 500,
            column: 13,
            span: 14411..14412,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 500,
            column: 16,
            span: 14412..14415,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 500,
            column: 17,
            span: 14415..14416,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 504,
            column: 8,
            span: 14450..14455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 504,
            column: 12,
            span: 14456..14459,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 504,
            column: 13,
            span: 14459..14460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 504,
            column: 17,
            span: 14461..14464,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 504,
            column: 19,
            span: 14465..14466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 504,
            column: 26,
            span: 14467..14473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 504,
            column: 27,
            span: 14473..14474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 504,
            column: 32,
            span: 14474..14479,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 504,
            column: 33,
            span: 14479..14480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 504,
            column: 39,
            span: 14481..14486,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 40,
            span: 14486..14487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 505,
            column: 9,
            span: 14490..14496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 505,
            column: 10,
            span: 14496..14497,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 505,
            column: 13,
            span: 14497..14500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 505,
            column: 17,
            span: 14501..14504,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 505,
            column: 21,
            span: 14505..14508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 505,
            column: 26,
            span: 14509..14513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 505,
            column: 27,
            span: 14513..14514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 505,
            column: 30,
            span: 14514..14517,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 505,
            column: 31,
            span: 14517..14518,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 505,
            column: 34,
            span: 14519..14521,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 505,
            column: 43,
            span: 14522..14530,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 505,
            column: 44,
            span: 14530..14531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 506,
            column: 8,
            span: 14534..14539,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 9,
            span: 14539..14540,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 506,
            column: 12,
            span: 14540..14543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 13,
            span: 14543..14544,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 508,
            column: 8,
            span: 14548..14553,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 508,
            column: 17,
            span: 14554..14562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 508,
            column: 19,
            span: 14563..14564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 508,
            column: 20,
            span: 14564..14565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 508,
            column: 21,
            span: 14565..14566,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 508,
            column: 22,
            span: 14566..14567,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 509,
            column: 7,
            span: 14572..14574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 509,
            column: 9,
            span: 14575..14576,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 509,
            column: 12,
            span: 14577..14579,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 509,
            column: 14,
            span: 14579..14581,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 509,
            column: 0,
            span: 14582..14586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 510,
            column: 12,
            span: 14593..14598,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 510,
            column: 13,
            span: 14598..14599,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\n'",
        ),
        position: Position {
            line: 510,
            column: 18,
            span: 14599..14604,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 510,
            column: 19,
            span: 14604..14605,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 511,
            column: 0,
            span: 14610..14614,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 512,
            column: 12,
            span: 14621..14626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        position: Position {
            line: 512,
            column: 16,
            span: 14627..14630,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 512,
            column: 18,
            span: 14631..14632,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 512,
            column: 27,
            span: 14633..14641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 512,
            column: 28,
            span: 14641..14642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 512,
            column: 29,
            span: 14642..14643,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 512,
            column: 36,
            span: 14644..14650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 512,
            column: 38,
            span: 14651..14652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 512,
            column: 39,
            span: 14652..14653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 512,
            column: 40,
            span: 14653..14654,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 512,
            column: 42,
            span: 14655..14656,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 512,
            column: 44,
            span: 14656..14658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 512,
            column: 45,
            span: 14658..14659,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 512,
            column: 0,
            span: 14660..14663,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 513,
            column: 12,
            span: 14670..14675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 513,
            column: 14,
            span: 14676..14677,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 513,
            column: 15,
            span: 14677..14678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 513,
            column: 17,
            span: 14679..14680,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 513,
            column: 19,
            span: 14681..14682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 513,
            column: 26,
            span: 14683..14689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 513,
            column: 27,
            span: 14689..14690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        position: Position {
            line: 513,
            column: 30,
            span: 14690..14693,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 513,
            column: 31,
            span: 14693..14694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        position: Position {
            line: 513,
            column: 35,
            span: 14695..14698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 513,
            column: 36,
            span: 14698..14699,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 514,
            column: 13,
            span: 14706..14712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 514,
            column: 15,
            span: 14713..14714,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 514,
            column: 16,
            span: 14714..14715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 514,
            column: 0,
            span: 14716..14717,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 515,
            column: 0,
            span: 14722..14725,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 516,
            column: 0,
            span: 14728..14731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 517,
            column: 4,
            span: 14734..14735,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 517,
            column: 5,
            span: 14735..14736,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 517,
            column: 6,
            span: 14735..14737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 517,
            column: 7,
            span: 14737..14738,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 519,
            column: 8,
            span: 14742..14747,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 519,
            column: 17,
            span: 14748..14756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        position: Position {
            line: 519,
            column: 22,
            span: 14757..14761,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 519,
            column: 23,
            span: 14761..14762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 519,
            column: 24,
            span: 14762..14763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 25,
            span: 14763..14764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 519,
            column: 27,
            span: 14765..14766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 28,
            span: 14766..14767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 519,
            column: 30,
            span: 14768..14769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 519,
            column: 31,
            span: 14769..14770,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 519,
            column: 38,
            span: 14771..14777,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 519,
            column: 40,
            span: 14777..14779,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 519,
            column: 42,
            span: 14780..14781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        position: Position {
            line: 519,
            column: 47,
            span: 14782..14786,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 519,
            column: 48,
            span: 14786..14787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 519,
            column: 49,
            span: 14787..14788,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 50,
            span: 14788..14789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 519,
            column: 52,
            span: 14790..14791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 53,
            span: 14791..14792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 519,
            column: 55,
            span: 14793..14794,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 519,
            column: 56,
            span: 14794..14795,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 519,
            column: 0,
            span: 14796..14799,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 521,
            column: 8,
            span: 14803..14808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 521,
            column: 12,
            span: 14809..14812,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 521,
            column: 13,
            span: 14812..14813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 521,
            column: 17,
            span: 14814..14817,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 521,
            column: 19,
            span: 14818..14819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 521,
            column: 26,
            span: 14820..14826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 521,
            column: 27,
            span: 14826..14827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        position: Position {
            line: 521,
            column: 31,
            span: 14827..14831,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 521,
            column: 32,
            span: 14831..14832,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 521,
            column: 41,
            span: 14833..14841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 521,
            column: 42,
            span: 14841..14842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 521,
            column: 43,
            span: 14842..14843,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 521,
            column: 44,
            span: 14843..14844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 522,
            column: 11,
            span: 14849..14855,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 522,
            column: 12,
            span: 14855..14856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 522,
            column: 18,
            span: 14856..14862,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 522,
            column: 19,
            span: 14862..14863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 522,
            column: 23,
            span: 14863..14867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 522,
            column: 24,
            span: 14867..14868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 522,
            column: 25,
            span: 14868..14869,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 522,
            column: 26,
            span: 14869..14870,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        position: Position {
            line: 522,
            column: 43,
            span: 14871..14887,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 522,
            column: 44,
            span: 14887..14888,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 522,
            column: 45,
            span: 14888..14889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 523,
            column: 13,
            span: 14894..14902,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 523,
            column: 14,
            span: 14902..14903,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error handling\"",
        ),
        position: Position {
            line: 523,
            column: 30,
            span: 14903..14919,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 523,
            column: 31,
            span: 14919..14920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        position: Position {
            line: 523,
            column: 36,
            span: 14921..14925,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 523,
            column: 37,
            span: 14925..14926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 524,
            column: 11,
            span: 14931..14937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 524,
            column: 12,
            span: 14937..14938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 524,
            column: 16,
            span: 14938..14942,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 524,
            column: 17,
            span: 14942..14943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        position: Position {
            line: 524,
            column: 20,
            span: 14943..14946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 524,
            column: 21,
            span: 14946..14947,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 524,
            column: 22,
            span: 14946..14948,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 524,
            column: 23,
            span: 14948..14949,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 524,
            column: 26,
            span: 14950..14952,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 524,
            column: 28,
            span: 14952..14954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 524,
            column: 29,
            span: 14954..14955,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 525,
            column: 11,
            span: 14960..14966,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 525,
            column: 0,
            span: 14966..14969,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 526,
            column: 6,
            span: 14972..14975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 526,
            column: 7,
            span: 14975..14976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 527,
            column: 9,
            span: 14979..14985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 10,
            span: 14985..14986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 527,
            column: 13,
            span: 14986..14989,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 527,
            column: 16,
            span: 14990..14992,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 527,
            column: 19,
            span: 14992..14995,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 527,
            column: 20,
            span: 14995..14996,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 529,
            column: 8,
            span: 15000..15005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 529,
            column: 10,
            span: 15006..15007,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 529,
            column: 12,
            span: 15008..15009,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 529,
            column: 21,
            span: 15010..15018,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 529,
            column: 22,
            span: 15018..15019,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 529,
            column: 23,
            span: 15019..15020,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 530,
            column: 8,
            span: 15025..15028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 530,
            column: 10,
            span: 15029..15030,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 530,
            column: 12,
            span: 15031..15032,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "999900",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 530,
            column: 19,
            span: 15032..15039,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 530,
            column: 20,
            span: 15039..15040,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 530,
            column: 28,
            span: 15040..15048,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 530,
            column: 29,
            span: 15048..15049,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 530,
            column: 31,
            span: 15049..15051,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 530,
            column: 34,
            span: 15052..15054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 530,
            column: 40,
            span: 15055..15060,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 530,
            column: 41,
            span: 15060..15061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 530,
            column: 47,
            span: 15061..15067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 530,
            column: 48,
            span: 15067..15068,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 530,
            column: 49,
            span: 15068..15069,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 530,
            column: 50,
            span: 15069..15070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 530,
            column: 51,
            span: 15070..15071,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 530,
            column: 53,
            span: 15071..15073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 530,
            column: 54,
            span: 15073..15074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 530,
            column: 56,
            span: 15075..15076,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 530,
            column: 57,
            span: 15076..15077,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 530,
            column: 0,
            span: 15078..15081,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 531,
            column: 0,
            span: 15084..15087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 532,
            column: 11,
            span: 15090..15098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 532,
            column: 12,
            span: 15098..15099,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        position: Position {
            line: 532,
            column: 30,
            span: 15099..15117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 532,
            column: 31,
            span: 15117..15118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 532,
            column: 33,
            span: 15119..15120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 532,
            column: 34,
            span: 15120..15121,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 533,
            column: 0,
            span: 15122..15125,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 536,
            column: 0,
            span: 15128..15130,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 538,
            column: 8,
            span: 15158..15163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 538,
            column: 10,
            span: 15164..15165,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 538,
            column: 12,
            span: 15166..15167,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 538,
            column: 14,
            span: 15168..15169,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 538,
            column: 15,
            span: 15169..15170,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 539,
            column: 8,
            span: 15173..15178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 539,
            column: 12,
            span: 15179..15182,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 539,
            column: 13,
            span: 15182..15183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 539,
            column: 17,
            span: 15184..15187,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 539,
            column: 19,
            span: 15188..15189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 539,
            column: 25,
            span: 15190..15195,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 539,
            column: 26,
            span: 15195..15196,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 539,
            column: 34,
            span: 15196..15204,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 539,
            column: 35,
            span: 15204..15205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 539,
            column: 36,
            span: 15205..15206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 539,
            column: 42,
            span: 15207..15212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 539,
            column: 43,
            span: 15212..15213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 539,
            column: 44,
            span: 15213..15214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 539,
            column: 45,
            span: 15214..15215,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 539,
            column: 49,
            span: 15216..15219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 539,
            column: 50,
            span: 15219..15220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 540,
            column: 9,
            span: 15223..15229,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 540,
            column: 10,
            span: 15229..15230,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 540,
            column: 13,
            span: 15230..15233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 540,
            column: 17,
            span: 15234..15237,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 540,
            column: 21,
            span: 15238..15241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 540,
            column: 25,
            span: 15242..15245,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 540,
            column: 28,
            span: 15246..15248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 540,
            column: 30,
            span: 15249..15250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 540,
            column: 31,
            span: 15250..15251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 542,
            column: 6,
            span: 15255..15258,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 542,
            column: 7,
            span: 15258..15259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 542,
            column: 11,
            span: 15260..15263,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 542,
            column: 13,
            span: 15264..15265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 542,
            column: 19,
            span: 15266..15271,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 20,
            span: 15271..15272,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 542,
            column: 28,
            span: 15272..15280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 29,
            span: 15280..15281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 542,
            column: 30,
            span: 15281..15282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 542,
            column: 36,
            span: 15283..15288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 37,
            span: 15288..15289,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 542,
            column: 40,
            span: 15289..15292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 542,
            column: 41,
            span: 15292..15293,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 542,
            column: 45,
            span: 15294..15297,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 542,
            column: 46,
            span: 15297..15298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 543,
            column: 9,
            span: 15301..15307,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 543,
            column: 10,
            span: 15307..15308,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 543,
            column: 13,
            span: 15308..15311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 543,
            column: 17,
            span: 15312..15315,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 543,
            column: 21,
            span: 15316..15319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 543,
            column: 25,
            span: 15320..15323,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 543,
            column: 28,
            span: 15324..15326,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 543,
            column: 32,
            span: 15327..15330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 543,
            column: 33,
            span: 15330..15331,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 545,
            column: 8,
            span: 15335..15340,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 545,
            column: 17,
            span: 15341..15349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 545,
            column: 19,
            span: 15350..15351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 545,
            column: 20,
            span: 15351..15352,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 545,
            column: 21,
            span: 15352..15353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 545,
            column: 27,
            span: 15354..15359,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 545,
            column: 29,
            span: 15360..15361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 545,
            column: 33,
            span: 15362..15365,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 545,
            column: 35,
            span: 15366..15367,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 545,
            column: 39,
            span: 15368..15371,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 545,
            column: 41,
            span: 15372..15373,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 545,
            column: 0,
            span: 15374..15377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 546,
            column: 6,
            span: 15380..15383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 546,
            column: 7,
            span: 15383..15384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 546,
            column: 11,
            span: 15385..15388,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 546,
            column: 13,
            span: 15389..15390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 546,
            column: 20,
            span: 15391..15397,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 546,
            column: 21,
            span: 15397..15398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 546,
            column: 22,
            span: 15398..15399,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 546,
            column: 23,
            span: 15399..15400,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 546,
            column: 32,
            span: 15401..15409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 546,
            column: 33,
            span: 15409..15410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 546,
            column: 34,
            span: 15410..15411,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 546,
            column: 35,
            span: 15411..15412,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 546,
            column: 42,
            span: 15413..15419,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 546,
            column: 44,
            span: 15420..15421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 546,
            column: 48,
            span: 15422..15425,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 546,
            column: 50,
            span: 15426..15427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 546,
            column: 52,
            span: 15428..15429,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 546,
            column: 53,
            span: 15429..15430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 546,
            column: 56,
            span: 15430..15433,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 546,
            column: 59,
            span: 15434..15436,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y'",
        ),
        position: Position {
            line: 546,
            column: 63,
            span: 15437..15440,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 546,
            column: 65,
            span: 15441..15442,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 546,
            column: 69,
            span: 15443..15446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 546,
            column: 70,
            span: 15446..15447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 547,
            column: 9,
            span: 15450..15456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 547,
            column: 10,
            span: 15456..15457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 547,
            column: 13,
            span: 15457..15460,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 547,
            column: 14,
            span: 15460..15461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 547,
            column: 17,
            span: 15461..15464,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 547,
            column: 20,
            span: 15465..15467,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xy'",
        ),
        position: Position {
            line: 547,
            column: 25,
            span: 15468..15472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 547,
            column: 26,
            span: 15472..15473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 550,
            column: 6,
            span: 15512..15515,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 550,
            column: 7,
            span: 15515..15516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 550,
            column: 11,
            span: 15517..15520,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 550,
            column: 13,
            span: 15521..15522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 550,
            column: 19,
            span: 15523..15528,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 550,
            column: 20,
            span: 15528..15529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 550,
            column: 26,
            span: 15529..15535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 550,
            column: 27,
            span: 15535..15536,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 550,
            column: 33,
            span: 15537..15542,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 550,
            column: 34,
            span: 15542..15543,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 550,
            column: 38,
            span: 15544..15547,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 550,
            column: 39,
            span: 15547..15548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 550,
            column: 41,
            span: 15549..15550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 550,
            column: 42,
            span: 15550..15551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 551,
            column: 9,
            span: 15554..15560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 551,
            column: 10,
            span: 15560..15561,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 551,
            column: 13,
            span: 15561..15564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 551,
            column: 17,
            span: 15565..15568,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 551,
            column: 21,
            span: 15569..15572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 551,
            column: 25,
            span: 15573..15576,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 551,
            column: 28,
            span: 15577..15579,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 551,
            column: 32,
            span: 15580..15583,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 551,
            column: 33,
            span: 15583..15584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 554,
            column: 6,
            span: 15618..15621,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 554,
            column: 7,
            span: 15621..15622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 554,
            column: 11,
            span: 15623..15626,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 554,
            column: 13,
            span: 15627..15628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 554,
            column: 19,
            span: 15629..15634,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 554,
            column: 20,
            span: 15634..15635,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 554,
            column: 28,
            span: 15635..15643,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 554,
            column: 29,
            span: 15643..15644,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 554,
            column: 30,
            span: 15644..15645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 554,
            column: 37,
            span: 15646..15652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 554,
            column: 38,
            span: 15652..15653,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 554,
            column: 43,
            span: 15653..15658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 554,
            column: 44,
            span: 15658..15659,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 554,
            column: 48,
            span: 15660..15663,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 554,
            column: 49,
            span: 15663..15664,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 555,
            column: 8,
            span: 15667..15672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 555,
            column: 13,
            span: 15673..15677,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 555,
            column: 15,
            span: 15678..15679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 555,
            column: 22,
            span: 15680..15686,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 555,
            column: 23,
            span: 15686..15687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 555,
            column: 28,
            span: 15687..15692,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 555,
            column: 29,
            span: 15692..15693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 555,
            column: 32,
            span: 15693..15696,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 555,
            column: 33,
            span: 15696..15697,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+%.lua:(%d+): assertion failed!$\"",
        ),
        position: Position {
            line: 555,
            column: 70,
            span: 15698..15734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 555,
            column: 71,
            span: 15734..15735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 556,
            column: 9,
            span: 15738..15744,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 556,
            column: 10,
            span: 15744..15745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 556,
            column: 18,
            span: 15745..15753,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 556,
            column: 19,
            span: 15753..15754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 556,
            column: 23,
            span: 15754..15758,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 556,
            column: 24,
            span: 15758..15759,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 556,
            column: 27,
            span: 15760..15762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 556,
            column: 33,
            span: 15763..15768,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 556,
            column: 34,
            span: 15768..15769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 556,
            column: 41,
            span: 15769..15776,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 556,
            column: 42,
            span: 15776..15777,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 556,
            column: 43,
            span: 15776..15778,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 556,
            column: 44,
            span: 15778..15779,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 556,
            column: 48,
            span: 15780..15783,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 556,
            column: 49,
            span: 15783..15784,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 556,
            column: 50,
            span: 15784..15785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 556,
            column: 61,
            span: 15785..15796,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 556,
            column: 63,
            span: 15797..15798,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 556,
            column: 65,
            span: 15798..15800,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 556,
            column: 66,
            span: 15800..15801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 559,
            column: 6,
            span: 15844..15847,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 559,
            column: 7,
            span: 15847..15848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 559,
            column: 11,
            span: 15849..15852,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 559,
            column: 13,
            span: 15853..15854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 559,
            column: 19,
            span: 15855..15860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 559,
            column: 20,
            span: 15860..15861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 559,
            column: 26,
            span: 15861..15867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 559,
            column: 27,
            span: 15867..15868,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 559,
            column: 33,
            span: 15869..15874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 559,
            column: 34,
            span: 15874..15875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 559,
            column: 36,
            span: 15876..15877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 559,
            column: 37,
            span: 15877..15878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 560,
            column: 9,
            span: 15881..15887,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 560,
            column: 10,
            span: 15887..15888,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 560,
            column: 13,
            span: 15888..15891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 560,
            column: 17,
            span: 15892..15895,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 560,
            column: 21,
            span: 15896..15899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 560,
            column: 25,
            span: 15900..15903,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 560,
            column: 28,
            span: 15904..15906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 560,
            column: 30,
            span: 15907..15908,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 560,
            column: 31,
            span: 15908..15909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 562,
            column: 6,
            span: 15913..15916,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 562,
            column: 7,
            span: 15916..15917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 562,
            column: 11,
            span: 15918..15921,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 562,
            column: 13,
            span: 15922..15923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 562,
            column: 19,
            span: 15924..15929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 562,
            column: 20,
            span: 15929..15930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 562,
            column: 26,
            span: 15930..15936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 562,
            column: 27,
            span: 15936..15937,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 562,
            column: 31,
            span: 15938..15941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 562,
            column: 32,
            span: 15941..15942,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 562,
            column: 36,
            span: 15943..15946,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 562,
            column: 37,
            span: 15946..15947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 563,
            column: 9,
            span: 15950..15956,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 563,
            column: 10,
            span: 15956..15957,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 563,
            column: 13,
            span: 15957..15960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 563,
            column: 17,
            span: 15961..15964,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 563,
            column: 21,
            span: 15965..15968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 563,
            column: 25,
            span: 15969..15972,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 563,
            column: 28,
            span: 15973..15975,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 563,
            column: 32,
            span: 15976..15979,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 563,
            column: 33,
            span: 15979..15980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 566,
            column: 6,
            span: 16016..16019,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 7,
            span: 16019..16020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 566,
            column: 11,
            span: 16021..16024,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 566,
            column: 13,
            span: 16025..16026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 566,
            column: 19,
            span: 16027..16032,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 566,
            column: 20,
            span: 16032..16033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 566,
            column: 26,
            span: 16033..16039,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 566,
            column: 27,
            span: 16039..16040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 567,
            column: 9,
            span: 16043..16049,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 567,
            column: 10,
            span: 16049..16050,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 567,
            column: 13,
            span: 16050..16053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 567,
            column: 17,
            span: 16054..16057,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 567,
            column: 21,
            span: 16058..16061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 567,
            column: 28,
            span: 16062..16068,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 567,
            column: 29,
            span: 16068..16069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 567,
            column: 33,
            span: 16069..16073,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 567,
            column: 34,
            span: 16073..16074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 567,
            column: 37,
            span: 16074..16077,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 567,
            column: 38,
            span: 16077..16078,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value expected\"",
        ),
        position: Position {
            line: 567,
            column: 55,
            span: 16079..16095,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 567,
            column: 56,
            span: 16095..16096,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 567,
            column: 57,
            span: 16096..16097,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 568,
            column: 0,
            span: 16098..16101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 571,
            column: 2,
            span: 16128..16129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 571,
            column: 3,
            span: 16129..16130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 571,
            column: 5,
            span: 16131..16132,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 571,
            column: 6,
            span: 16132..16133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 571,
            column: 8,
            span: 16134..16135,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 571,
            column: 10,
            span: 16136..16137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 571,
            column: 17,
            span: 16138..16144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 571,
            column: 18,
            span: 16144..16145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 571,
            column: 24,
            span: 16145..16151,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 571,
            column: 25,
            span: 16151..16152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 571,
            column: 29,
            span: 16152..16156,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 571,
            column: 30,
            span: 16156..16157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 571,
            column: 36,
            span: 16158..16163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 571,
            column: 37,
            span: 16163..16164,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 571,
            column: 43,
            span: 16165..16170,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 571,
            column: 44,
            span: 16170..16171,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"al\"",
        ),
        position: Position {
            line: 571,
            column: 49,
            span: 16172..16176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 571,
            column: 50,
            span: 16176..16177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 572,
            column: 7,
            span: 16178..16184,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 572,
            column: 8,
            span: 16184..16185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 572,
            column: 9,
            span: 16185..16186,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 572,
            column: 13,
            span: 16187..16190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 572,
            column: 15,
            span: 16191..16192,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 572,
            column: 18,
            span: 16193..16195,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 572,
            column: 20,
            span: 16195..16197,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 572,
            column: 24,
            span: 16198..16201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 572,
            column: 26,
            span: 16202..16203,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 572,
            column: 29,
            span: 16204..16206,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 572,
            column: 31,
            span: 16206..16208,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 572,
            column: 32,
            span: 16208..16209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 573,
            column: 2,
            span: 16210..16211,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 573,
            column: 3,
            span: 16211..16212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 573,
            column: 5,
            span: 16213..16214,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 573,
            column: 6,
            span: 16214..16215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 573,
            column: 8,
            span: 16216..16217,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 573,
            column: 10,
            span: 16218..16219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 573,
            column: 17,
            span: 16220..16226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 573,
            column: 18,
            span: 16226..16227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 573,
            column: 24,
            span: 16227..16233,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 573,
            column: 25,
            span: 16233..16234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 573,
            column: 29,
            span: 16234..16238,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 573,
            column: 30,
            span: 16238..16239,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 573,
            column: 39,
            span: 16240..16248,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 573,
            column: 40,
            span: 16248..16249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 573,
            column: 41,
            span: 16249..16250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 573,
            column: 42,
            span: 16250..16251,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 573,
            column: 49,
            span: 16252..16258,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 573,
            column: 51,
            span: 16259..16260,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 573,
            column: 52,
            span: 16260..16261,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 573,
            column: 56,
            span: 16262..16265,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 573,
            column: 57,
            span: 16265..16266,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 573,
            column: 62,
            span: 16267..16271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 573,
            column: 63,
            span: 16271..16272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"al\"",
        ),
        position: Position {
            line: 573,
            column: 68,
            span: 16273..16277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 573,
            column: 69,
            span: 16277..16278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 574,
            column: 7,
            span: 16279..16285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 574,
            column: 8,
            span: 16285..16286,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 574,
            column: 11,
            span: 16286..16289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 574,
            column: 13,
            span: 16290..16291,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 574,
            column: 17,
            span: 16292..16295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 574,
            column: 22,
            span: 16296..16300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 574,
            column: 23,
            span: 16300..16301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 574,
            column: 24,
            span: 16301..16302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 574,
            column: 25,
            span: 16302..16303,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 574,
            column: 28,
            span: 16304..16306,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 574,
            column: 36,
            span: 16307..16314,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 574,
            column: 40,
            span: 16315..16318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 574,
            column: 42,
            span: 16319..16320,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 574,
            column: 45,
            span: 16321..16323,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 574,
            column: 49,
            span: 16324..16327,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 574,
            column: 50,
            span: 16327..16328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 577,
            column: 6,
            span: 16331..16336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 577,
            column: 7,
            span: 16336..16337,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing tokens in error messages\"",
        ),
        position: Position {
            line: 577,
            column: 41,
            span: 16337..16371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 577,
            column: 42,
            span: 16371..16372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 578,
            column: 12,
            span: 16373..16384,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 578,
            column: 13,
            span: 16384..16385,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"syntax error\"",
        ),
        position: Position {
            line: 578,
            column: 27,
            span: 16385..16399,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 28,
            span: 16399..16400,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 578,
            column: 31,
            span: 16401..16403,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 32,
            span: 16403..16404,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error\"",
        ),
        position: Position {
            line: 578,
            column: 40,
            span: 16405..16412,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 41,
            span: 16412..16413,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 578,
            column: 43,
            span: 16413..16415,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 578,
            column: 44,
            span: 16415..16416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 579,
            column: 12,
            span: 16417..16428,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 579,
            column: 13,
            span: 16428..16429,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        position: Position {
            line: 579,
            column: 20,
            span: 16429..16436,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 21,
            span: 16436..16437,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 579,
            column: 24,
            span: 16438..16440,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 25,
            span: 16440..16441,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        position: Position {
            line: 579,
            column: 33,
            span: 16442..16449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 34,
            span: 16449..16450,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 579,
            column: 36,
            span: 16450..16452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 579,
            column: 37,
            span: 16452..16453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 580,
            column: 12,
            span: 16454..16465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 580,
            column: 13,
            span: 16465..16466,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        position: Position {
            line: 580,
            column: 20,
            span: 16466..16473,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 580,
            column: 21,
            span: 16473..16474,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 580,
            column: 24,
            span: 16475..16477,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 580,
            column: 25,
            span: 16477..16478,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        position: Position {
            line: 580,
            column: 33,
            span: 16479..16486,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 580,
            column: 34,
            span: 16486..16487,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 580,
            column: 36,
            span: 16487..16489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 580,
            column: 37,
            span: 16489..16490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 581,
            column: 12,
            span: 16491..16502,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 581,
            column: 13,
            span: 16502..16503,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        position: Position {
            line: 581,
            column: 19,
            span: 16503..16509,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 581,
            column: 20,
            span: 16509..16510,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 581,
            column: 23,
            span: 16511..16513,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 581,
            column: 24,
            span: 16513..16514,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        position: Position {
            line: 581,
            column: 31,
            span: 16515..16521,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 581,
            column: 32,
            span: 16521..16522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 581,
            column: 34,
            span: 16522..16524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 581,
            column: 35,
            span: 16524..16525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 582,
            column: 12,
            span: 16526..16537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 582,
            column: 13,
            span: 16537..16538,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while << do end\"",
        ),
        position: Position {
            line: 582,
            column: 30,
            span: 16538..16555,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 31,
            span: 16555..16556,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 582,
            column: 34,
            span: 16557..16559,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 35,
            span: 16559..16560,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<<\"",
        ),
        position: Position {
            line: 582,
            column: 40,
            span: 16561..16565,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 41,
            span: 16565..16566,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 582,
            column: 43,
            span: 16566..16568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 582,
            column: 44,
            span: 16568..16569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 583,
            column: 12,
            span: 16570..16581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 583,
            column: 13,
            span: 16581..16582,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for >> do end\"",
        ),
        position: Position {
            line: 583,
            column: 28,
            span: 16582..16597,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 583,
            column: 29,
            span: 16597..16598,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 583,
            column: 32,
            span: 16599..16601,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 583,
            column: 33,
            span: 16601..16602,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">>\"",
        ),
        position: Position {
            line: 583,
            column: 38,
            span: 16603..16607,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 583,
            column: 39,
            span: 16607..16608,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 583,
            column: 41,
            span: 16608..16610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 583,
            column: 42,
            span: 16610..16611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 586,
            column: 12,
            span: 16659..16670,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 586,
            column: 13,
            span: 16670..16671,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\1a = 1\"",
        ),
        position: Position {
            line: 586,
            column: 23,
            span: 16671..16681,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 586,
            column: 24,
            span: 16681..16682,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 586,
            column: 27,
            span: 16683..16685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 586,
            column: 28,
            span: 16685..16686,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<\\\\1>\"",
        ),
        position: Position {
            line: 586,
            column: 36,
            span: 16687..16694,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 586,
            column: 37,
            span: 16694..16695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 586,
            column: 39,
            span: 16695..16697,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 586,
            column: 40,
            span: 16697..16698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        position: Position {
            line: 589,
            column: 12,
            span: 16737..16748,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 589,
            column: 13,
            span: 16748..16749,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\255a = 1\"",
        ),
        position: Position {
            line: 589,
            column: 24,
            span: 16749..16760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 589,
            column: 25,
            span: 16760..16761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 589,
            column: 28,
            span: 16762..16764,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 589,
            column: 29,
            span: 16764..16765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<\\\\255>\"",
        ),
        position: Position {
            line: 589,
            column: 39,
            span: 16766..16775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 589,
            column: 40,
            span: 16775..16776,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 589,
            column: 42,
            span: 16776..16778,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 589,
            column: 43,
            span: 16778..16779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 591,
            column: 5,
            span: 16781..16785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 591,
            column: 6,
            span: 16785..16786,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'I = load(\"a=9+\"); a=3'",
        ),
        position: Position {
            line: 591,
            column: 29,
            span: 16786..16809,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 591,
            column: 30,
            span: 16809..16810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 592,
            column: 7,
            span: 16811..16817,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 592,
            column: 8,
            span: 16817..16818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 592,
            column: 9,
            span: 16818..16819,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 592,
            column: 12,
            span: 16820..16822,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 592,
            column: 14,
            span: 16822..16824,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 592,
            column: 18,
            span: 16825..16828,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 592,
            column: 22,
            span: 16829..16832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "I",
        ),
        position: Position {
            line: 592,
            column: 24,
            span: 16833..16834,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 592,
            column: 25,
            span: 16834..16835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 593,
            column: 6,
            span: 16836..16841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 7,
            span: 16841..16842,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 593,
            column: 10,
            span: 16842..16845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 11,
            span: 16845..16846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 595,
            column: 4,
            span: 16848..16851,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 595,
            column: 6,
            span: 16852..16853,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 595,
            column: 0,
            span: 16853..16858,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 596,
            column: 3,
            span: 16859..16861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 596,
            column: 9,
            span: 16862..16867,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 596,
            column: 14,
            span: 16868..16872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 596,
            column: 18,
            span: 16873..16876,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 596,
            column: 20,
            span: 16877..16878,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 596,
            column: 24,
            span: 16878..16882,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 596,
            column: 0,
            span: 16883..16886,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 597,
            column: 4,
            span: 16887..16890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 597,
            column: 6,
            span: 16891..16892,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 597,
            column: 8,
            span: 16893..16894,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 597,
            column: 10,
            span: 16894..16896,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 597,
            column: 11,
            span: 16896..16897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 597,
            column: 15,
            span: 16898..16901,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 597,
            column: 0,
            span: 16902..16904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 598,
            column: 7,
            span: 16907..16911,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 598,
            column: 8,
            span: 16911..16912,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = '",
        ),
        position: Position {
            line: 598,
            column: 14,
            span: 16912..16918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 598,
            column: 15,
            span: 16918..16919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        position: Position {
            line: 599,
            column: 7,
            span: 16922..16926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 599,
            column: 8,
            span: 16926..16927,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = 4+nil'",
        ),
        position: Position {
            line: 599,
            column: 19,
            span: 16927..16938,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 599,
            column: 20,
            span: 16938..16939,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 600,
            column: 0,
            span: 16940..16943,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 605,
            column: 6,
            span: 16972..16977,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 605,
            column: 15,
            span: 16978..16986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 605,
            column: 23,
            span: 16987..16994,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 605,
            column: 24,
            span: 16994..16995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        position: Position {
            line: 605,
            column: 28,
            span: 16995..16999,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 605,
            column: 29,
            span: 16999..17000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 605,
            column: 33,
            span: 17001..17004,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 605,
            column: 34,
            span: 17004..17005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 605,
            column: 40,
            span: 17006..17011,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 605,
            column: 41,
            span: 17011..17012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repc",
        ),
        position: Position {
            line: 605,
            column: 46,
            span: 17013..17017,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 605,
            column: 47,
            span: 17017..17018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finalresult",
        ),
        position: Position {
            line: 605,
            column: 59,
            span: 17019..17030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 605,
            column: 60,
            span: 17030..17031,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 606,
            column: 8,
            span: 17034..17039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 606,
            column: 10,
            span: 17040..17041,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 606,
            column: 12,
            span: 17042..17043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        position: Position {
            line: 606,
            column: 17,
            span: 17044..17048,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 606,
            column: 20,
            span: 17049..17051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 606,
            column: 27,
            span: 17052..17058,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 606,
            column: 28,
            span: 17058..17059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 606,
            column: 31,
            span: 17059..17062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 606,
            column: 32,
            span: 17062..17063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 606,
            column: 35,
            span: 17063..17066,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 606,
            column: 36,
            span: 17066..17067,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 606,
            column: 40,
            span: 17067..17071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 606,
            column: 41,
            span: 17071..17072,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 606,
            column: 44,
            span: 17073..17075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 606,
            column: 50,
            span: 17076..17081,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 606,
            column: 53,
            span: 17082..17084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 606,
            column: 60,
            span: 17085..17091,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 606,
            column: 61,
            span: 17091..17092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 606,
            column: 64,
            span: 17092..17095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 606,
            column: 65,
            span: 17095..17096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repc",
        ),
        position: Position {
            line: 606,
            column: 69,
            span: 17096..17100,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 606,
            column: 70,
            span: 17100..17101,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 606,
            column: 74,
            span: 17101..17105,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 606,
            column: 75,
            span: 17105..17106,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 607,
            column: 8,
            span: 17109..17114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 607,
            column: 12,
            span: 17115..17118,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 607,
            column: 13,
            span: 17118..17119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 607,
            column: 17,
            span: 17120..17123,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 607,
            column: 19,
            span: 17124..17125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 607,
            column: 24,
            span: 17126..17130,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 607,
            column: 25,
            span: 17130..17131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 607,
            column: 26,
            span: 17131..17132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 607,
            column: 27,
            span: 17132..17133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 608,
            column: 9,
            span: 17136..17142,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 608,
            column: 10,
            span: 17142..17143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 608,
            column: 13,
            span: 17143..17146,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 608,
            column: 14,
            span: 17146..17147,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 609,
            column: 5,
            span: 17170..17172,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 609,
            column: 7,
            span: 17173..17174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finalresult",
        ),
        position: Position {
            line: 609,
            column: 18,
            span: 17174..17185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 609,
            column: 19,
            span: 17185..17186,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 609,
            column: 0,
            span: 17187..17191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 610,
            column: 11,
            span: 17196..17202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 610,
            column: 12,
            span: 17202..17203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 610,
            column: 15,
            span: 17203..17206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 610,
            column: 16,
            span: 17206..17207,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 610,
            column: 17,
            span: 17207..17208,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 610,
            column: 20,
            span: 17209..17211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finalresult",
        ),
        position: Position {
            line: 610,
            column: 32,
            span: 17212..17223,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 610,
            column: 33,
            span: 17223..17224,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 611,
            column: 0,
            span: 17227..17230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 612,
            column: 4,
            span: 17233..17234,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 612,
            column: 6,
            span: 17235..17236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        position: Position {
            line: 612,
            column: 11,
            span: 17237..17241,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 612,
            column: 14,
            span: 17242..17244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 612,
            column: 21,
            span: 17245..17251,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 612,
            column: 22,
            span: 17251..17252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 612,
            column: 25,
            span: 17252..17255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 612,
            column: 26,
            span: 17255..17256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 612,
            column: 29,
            span: 17256..17259,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 612,
            column: 30,
            span: 17259..17260,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 612,
            column: 34,
            span: 17260..17264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 612,
            column: 35,
            span: 17264..17265,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 613,
            column: 8,
            span: 17268..17273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 613,
            column: 12,
            span: 17274..17277,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 613,
            column: 13,
            span: 17277..17278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 613,
            column: 17,
            span: 17279..17282,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 613,
            column: 19,
            span: 17283..17284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 613,
            column: 24,
            span: 17285..17289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 613,
            column: 25,
            span: 17289..17290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 613,
            column: 26,
            span: 17290..17291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 613,
            column: 27,
            span: 17291..17292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 614,
            column: 9,
            span: 17316..17322,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 614,
            column: 10,
            span: 17322..17323,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 614,
            column: 13,
            span: 17323..17326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 614,
            column: 17,
            span: 17327..17330,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 614,
            column: 21,
            span: 17331..17334,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 614,
            column: 23,
            span: 17335..17336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 614,
            column: 29,
            span: 17336..17342,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 614,
            column: 30,
            span: 17342..17343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 614,
            column: 34,
            span: 17343..17347,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 614,
            column: 35,
            span: 17347..17348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 614,
            column: 38,
            span: 17348..17351,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 614,
            column: 39,
            span: 17351..17352,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many\"",
        ),
        position: Position {
            line: 614,
            column: 50,
            span: 17353..17363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 614,
            column: 51,
            span: 17363..17364,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 614,
            column: 0,
            span: 17365..17367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 615,
            column: 11,
            span: 17372..17378,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 615,
            column: 12,
            span: 17378..17379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 615,
            column: 16,
            span: 17379..17383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 615,
            column: 17,
            span: 17383..17384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 615,
            column: 20,
            span: 17384..17387,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 615,
            column: 21,
            span: 17387..17388,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 615,
            column: 32,
            span: 17389..17399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 615,
            column: 33,
            span: 17399..17400,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 615,
            column: 34,
            span: 17400..17401,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 615,
            column: 35,
            span: 17401..17402,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 616,
            column: 0,
            span: 17403..17406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 618,
            column: 8,
            span: 17408..17415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 618,
            column: 9,
            span: 17415..17416,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a\"",
        ),
        position: Position {
            line: 618,
            column: 21,
            span: 17416..17428,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 618,
            column: 22,
            span: 17428..17429,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",a\"",
        ),
        position: Position {
            line: 618,
            column: 27,
            span: 17430..17434,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 618,
            column: 28,
            span: 17434..17435,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"= 1\"",
        ),
        position: Position {
            line: 618,
            column: 34,
            span: 17436..17441,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 618,
            column: 35,
            span: 17441..17442,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",1\"",
        ),
        position: Position {
            line: 618,
            column: 40,
            span: 17443..17447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 618,
            column: 41,
            span: 17447..17448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 619,
            column: 8,
            span: 17472..17479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 619,
            column: 9,
            span: 17479..17480,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a=\"",
        ),
        position: Position {
            line: 619,
            column: 22,
            span: 17480..17493,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 619,
            column: 23,
            span: 17493..17494,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"{\"",
        ),
        position: Position {
            line: 619,
            column: 27,
            span: 17495..17498,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 619,
            column: 28,
            span: 17498..17499,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        position: Position {
            line: 619,
            column: 32,
            span: 17500..17503,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 619,
            column: 33,
            span: 17503..17504,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"}\"",
        ),
        position: Position {
            line: 619,
            column: 37,
            span: 17505..17508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 619,
            column: 38,
            span: 17508..17509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 620,
            column: 8,
            span: 17510..17517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 620,
            column: 9,
            span: 17517..17518,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        position: Position {
            line: 620,
            column: 18,
            span: 17518..17527,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 620,
            column: 19,
            span: 17527..17528,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(\"",
        ),
        position: Position {
            line: 620,
            column: 23,
            span: 17529..17532,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 620,
            column: 24,
            span: 17532..17533,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 620,
            column: 28,
            span: 17534..17537,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 620,
            column: 29,
            span: 17537..17538,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        position: Position {
            line: 620,
            column: 33,
            span: 17539..17542,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 620,
            column: 34,
            span: 17542..17543,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 620,
            column: 36,
            span: 17543..17545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 620,
            column: 37,
            span: 17545..17546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 621,
            column: 8,
            span: 17547..17554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 621,
            column: 9,
            span: 17554..17555,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function a (x) return x end; return \"",
        ),
        position: Position {
            line: 621,
            column: 53,
            span: 17555..17599,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 621,
            column: 54,
            span: 17599..17600,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a(\"",
        ),
        position: Position {
            line: 621,
            column: 59,
            span: 17601..17605,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 621,
            column: 60,
            span: 17605..17606,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2.2\"",
        ),
        position: Position {
            line: 621,
            column: 66,
            span: 17607..17612,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 621,
            column: 67,
            span: 17612..17613,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        position: Position {
            line: 621,
            column: 71,
            span: 17614..17617,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 621,
            column: 72,
            span: 17617..17618,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".2",
                },
            ),
        ),
        position: Position {
            line: 621,
            column: 76,
            span: 17618..17622,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 621,
            column: 77,
            span: 17622..17623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 622,
            column: 8,
            span: 17624..17631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 622,
            column: 9,
            span: 17631..17632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 622,
            column: 11,
            span: 17632..17634,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 622,
            column: 12,
            span: 17634..17635,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"do \"",
        ),
        position: Position {
            line: 622,
            column: 18,
            span: 17636..17641,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 622,
            column: 19,
            span: 17641..17642,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 622,
            column: 22,
            span: 17643..17645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 622,
            column: 23,
            span: 17645..17646,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        position: Position {
            line: 622,
            column: 30,
            span: 17647..17653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 622,
            column: 31,
            span: 17653..17654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 623,
            column: 8,
            span: 17655..17662,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 623,
            column: 9,
            span: 17662..17663,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 623,
            column: 11,
            span: 17663..17665,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 623,
            column: 12,
            span: 17665..17666,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while a do \"",
        ),
        position: Position {
            line: 623,
            column: 26,
            span: 17667..17680,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 623,
            column: 27,
            span: 17680..17681,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 623,
            column: 30,
            span: 17682..17684,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 623,
            column: 31,
            span: 17684..17685,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        position: Position {
            line: 623,
            column: 38,
            span: 17686..17692,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 623,
            column: 39,
            span: 17692..17693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 624,
            column: 8,
            span: 17694..17701,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 624,
            column: 9,
            span: 17701..17702,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; \"",
        ),
        position: Position {
            line: 624,
            column: 20,
            span: 17702..17713,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 624,
            column: 21,
            span: 17713..17714,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"if a then else \"",
        ),
        position: Position {
            line: 624,
            column: 39,
            span: 17715..17732,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 624,
            column: 40,
            span: 17732..17733,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 624,
            column: 43,
            span: 17734..17736,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 624,
            column: 44,
            span: 17736..17737,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        position: Position {
            line: 624,
            column: 51,
            span: 17738..17744,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 624,
            column: 52,
            span: 17744..17745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 625,
            column: 8,
            span: 17746..17753,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 625,
            column: 9,
            span: 17753..17754,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 625,
            column: 11,
            span: 17754..17756,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 625,
            column: 12,
            span: 17756..17757,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function foo () \"",
        ),
        position: Position {
            line: 625,
            column: 31,
            span: 17758..17776,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 625,
            column: 32,
            span: 17776..17777,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 625,
            column: 35,
            span: 17778..17780,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 625,
            column: 36,
            span: 17780..17781,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        position: Position {
            line: 625,
            column: 43,
            span: 17782..17788,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 625,
            column: 44,
            span: 17788..17789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 626,
            column: 8,
            span: 17790..17797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 626,
            column: 9,
            span: 17797..17798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = ''; return \"",
        ),
        position: Position {
            line: 626,
            column: 32,
            span: 17798..17821,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 626,
            column: 33,
            span: 17821..17822,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a..\"",
        ),
        position: Position {
            line: 626,
            column: 39,
            span: 17823..17828,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 626,
            column: 40,
            span: 17828..17829,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'a'\"",
        ),
        position: Position {
            line: 626,
            column: 46,
            span: 17830..17835,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 626,
            column: 47,
            span: 17835..17836,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 626,
            column: 50,
            span: 17837..17839,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 626,
            column: 51,
            span: 17839..17840,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 626,
            column: 55,
            span: 17841..17844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 626,
            column: 56,
            span: 17844..17845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        position: Position {
            line: 627,
            column: 8,
            span: 17846..17853,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 627,
            column: 9,
            span: 17853..17854,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 1; return \"",
        ),
        position: Position {
            line: 627,
            column: 31,
            span: 17854..17876,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 627,
            column: 32,
            span: 17876..17877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a^\"",
        ),
        position: Position {
            line: 627,
            column: 37,
            span: 17878..17882,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 627,
            column: 38,
            span: 17882..17883,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 627,
            column: 42,
            span: 17884..17887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 627,
            column: 43,
            span: 17887..17888,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 627,
            column: 46,
            span: 17889..17891,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 627,
            column: 47,
            span: 17891..17892,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 627,
            column: 49,
            span: 17892..17894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 627,
            column: 50,
            span: 17894..17895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        position: Position {
            line: 629,
            column: 13,
            span: 17897..17909,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 629,
            column: 14,
            span: 17909..17910,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = f(x\"",
        ),
        position: Position {
            line: 629,
            column: 23,
            span: 17910..17919,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 629,
            column: 26,
            span: 17920..17922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 629,
            column: 33,
            span: 17923..17929,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 629,
            column: 34,
            span: 17929..17930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 629,
            column: 37,
            span: 17930..17933,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 629,
            column: 38,
            span: 17933..17934,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",x\"",
        ),
        position: Position {
            line: 629,
            column: 42,
            span: 17934..17938,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 629,
            column: 43,
            span: 17938..17939,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "260",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 629,
            column: 47,
            span: 17939..17943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 629,
            column: 48,
            span: 17943..17944,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 629,
            column: 51,
            span: 17945..17947,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        position: Position {
            line: 629,
            column: 55,
            span: 17948..17951,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 629,
            column: 56,
            span: 17951..17952,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many registers\"",
        ),
        position: Position {
            line: 629,
            column: 77,
            span: 17953..17973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 629,
            column: 78,
            span: 17973..17974,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 635,
            column: 6,
            span: 18014..18019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 635,
            column: 10,
            span: 18020..18023,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 635,
            column: 12,
            span: 18024..18025,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 635,
            column: 0,
            span: 18025..18029,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 636,
            column: 6,
            span: 18030..18035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 636,
            column: 8,
            span: 18036..18037,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 636,
            column: 10,
            span: 18038..18039,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function fooA ()\\n  local \"",
        ),
        position: Position {
            line: 636,
            column: 45,
            span: 18040..18074,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 637,
            column: 4,
            span: 18075..18078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 637,
            column: 6,
            span: 18079..18080,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 637,
            column: 8,
            span: 18081..18082,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 637,
            column: 10,
            span: 18082..18084,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 637,
            column: 11,
            span: 18084..18085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 637,
            column: 15,
            span: 18086..18089,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 637,
            column: 0,
            span: 18090..18092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 638,
            column: 4,
            span: 18095..18096,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 638,
            column: 6,
            span: 18097..18098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 638,
            column: 8,
            span: 18099..18100,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 638,
            column: 11,
            span: 18101..18103,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 638,
            column: 15,
            span: 18104..18107,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 638,
            column: 18,
            span: 18108..18110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 638,
            column: 20,
            span: 18111..18112,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 638,
            column: 23,
            span: 18113..18115,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        position: Position {
            line: 638,
            column: 28,
            span: 18116..18120,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 639,
            column: 0,
            span: 18121..18124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 640,
            column: 2,
            span: 18125..18126,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 640,
            column: 4,
            span: 18127..18128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 640,
            column: 6,
            span: 18129..18130,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 640,
            column: 9,
            span: 18131..18133,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b,c\\n\"",
        ),
        position: Position {
            line: 640,
            column: 17,
            span: 18134..18141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 641,
            column: 2,
            span: 18142..18143,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 641,
            column: 4,
            span: 18144..18145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 641,
            column: 6,
            span: 18146..18147,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 641,
            column: 9,
            span: 18148..18150,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function fooB ()\\n  local \"",
        ),
        position: Position {
            line: 641,
            column: 44,
            span: 18151..18185,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 642,
            column: 4,
            span: 18186..18189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 642,
            column: 6,
            span: 18190..18191,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 642,
            column: 8,
            span: 18192..18193,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 642,
            column: 10,
            span: 18193..18195,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 642,
            column: 11,
            span: 18195..18196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 642,
            column: 15,
            span: 18197..18200,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 642,
            column: 0,
            span: 18201..18203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 643,
            column: 4,
            span: 18206..18207,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 643,
            column: 6,
            span: 18208..18209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 643,
            column: 8,
            span: 18210..18211,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 643,
            column: 11,
            span: 18212..18214,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 643,
            column: 15,
            span: 18215..18218,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 643,
            column: 18,
            span: 18219..18221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 643,
            column: 20,
            span: 18222..18223,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 643,
            column: 23,
            span: 18224..18226,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        position: Position {
            line: 643,
            column: 28,
            span: 18227..18231,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 644,
            column: 0,
            span: 18232..18235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 645,
            column: 2,
            span: 18236..18237,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 645,
            column: 4,
            span: 18238..18239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 645,
            column: 6,
            span: 18240..18241,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 645,
            column: 9,
            span: 18242..18244,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        position: Position {
            line: 645,
            column: 15,
            span: 18245..18250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 646,
            column: 2,
            span: 18251..18252,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 646,
            column: 4,
            span: 18253..18254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 646,
            column: 6,
            span: 18255..18256,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 646,
            column: 9,
            span: 18257..18259,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function fooC () return b+c\"",
        ),
        position: Position {
            line: 646,
            column: 39,
            span: 18260..18289,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 647,
            column: 6,
            span: 18290..18295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 647,
            column: 8,
            span: 18296..18297,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 647,
            column: 10,
            span: 18298..18299,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 647,
            column: 12,
            span: 18299..18301,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 647,
            column: 14,
            span: 18302..18303,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 647,
            column: 0,
            span: 18303..18305,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 648,
            column: 4,
            span: 18306..18309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 648,
            column: 6,
            span: 18310..18311,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 648,
            column: 8,
            span: 18312..18313,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 648,
            column: 10,
            span: 18313..18315,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 648,
            column: 11,
            span: 18315..18316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 648,
            column: 15,
            span: 18317..18320,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 648,
            column: 0,
            span: 18321..18323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 649,
            column: 4,
            span: 18326..18327,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 649,
            column: 6,
            span: 18328..18329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 649,
            column: 8,
            span: 18330..18331,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 649,
            column: 11,
            span: 18332..18334,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+a\"",
        ),
        position: Position {
            line: 649,
            column: 16,
            span: 18335..18339,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 649,
            column: 19,
            span: 18340..18342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 649,
            column: 21,
            span: 18343..18344,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 649,
            column: 24,
            span: 18345..18347,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+b\"",
        ),
        position: Position {
            line: 649,
            column: 29,
            span: 18348..18352,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 649,
            column: 32,
            span: 18353..18355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 649,
            column: 0,
            span: 18356..18357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 650,
            column: 4,
            span: 18360..18361,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 650,
            column: 6,
            span: 18362..18363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 650,
            column: 8,
            span: 18364..18365,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 650,
            column: 10,
            span: 18366..18367,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 650,
            column: 0,
            span: 18367..18369,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 651,
            column: 0,
            span: 18370..18373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 652,
            column: 2,
            span: 18374..18375,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 652,
            column: 4,
            span: 18376..18377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 652,
            column: 6,
            span: 18378..18379,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 652,
            column: 9,
            span: 18380..18382,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nend  end end\"",
        ),
        position: Position {
            line: 652,
            column: 26,
            span: 18383..18399,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 653,
            column: 6,
            span: 18400..18405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 653,
            column: 8,
            span: 18406..18407,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 653,
            column: 9,
            span: 18407..18408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 653,
            column: 11,
            span: 18409..18410,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 653,
            column: 13,
            span: 18411..18412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 653,
            column: 18,
            span: 18413..18417,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 653,
            column: 19,
            span: 18417..18418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 653,
            column: 20,
            span: 18418..18419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 653,
            column: 21,
            span: 18419..18420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 654,
            column: 7,
            span: 18421..18427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 654,
            column: 8,
            span: 18427..18428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 654,
            column: 9,
            span: 18428..18429,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 654,
            column: 11,
            span: 18430..18431,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 15,
            span: 18431..18435,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 654,
            column: 19,
            span: 18436..18439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 654,
            column: 26,
            span: 18440..18446,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 654,
            column: 27,
            span: 18446..18447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 654,
            column: 31,
            span: 18447..18451,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 654,
            column: 32,
            span: 18451..18452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 654,
            column: 33,
            span: 18452..18453,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 654,
            column: 34,
            span: 18453..18454,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many upvalues\"",
        ),
        position: Position {
            line: 654,
            column: 54,
            span: 18455..18474,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 654,
            column: 55,
            span: 18474..18475,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 654,
            column: 0,
            span: 18476..18479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 655,
            column: 9,
            span: 18482..18488,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 655,
            column: 10,
            span: 18488..18489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 655,
            column: 14,
            span: 18489..18493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 655,
            column: 15,
            span: 18493..18494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 655,
            column: 16,
            span: 18494..18495,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 655,
            column: 17,
            span: 18495..18496,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 5\"",
        ),
        position: Position {
            line: 655,
            column: 26,
            span: 18497..18505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 655,
            column: 27,
            span: 18505..18506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 655,
            column: 28,
            span: 18506..18507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 658,
            column: 2,
            span: 18528..18529,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 658,
            column: 4,
            span: 18530..18531,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nfunction foo ()\\n  local \"",
        ),
        position: Position {
            line: 658,
            column: 34,
            span: 18532..18561,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 659,
            column: 4,
            span: 18562..18565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 659,
            column: 6,
            span: 18566..18567,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 659,
            column: 8,
            span: 18568..18569,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 659,
            column: 10,
            span: 18569..18571,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 659,
            column: 11,
            span: 18571..18572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 659,
            column: 15,
            span: 18572..18576,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 659,
            column: 0,
            span: 18577..18579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 660,
            column: 4,
            span: 18582..18583,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 660,
            column: 6,
            span: 18584..18585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 660,
            column: 8,
            span: 18586..18587,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 660,
            column: 11,
            span: 18588..18590,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 660,
            column: 15,
            span: 18591..18594,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 660,
            column: 18,
            span: 18595..18597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 660,
            column: 20,
            span: 18598..18599,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 660,
            column: 23,
            span: 18600..18602,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        position: Position {
            line: 660,
            column: 28,
            span: 18603..18607,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 661,
            column: 0,
            span: 18608..18611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 662,
            column: 2,
            span: 18612..18613,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 662,
            column: 4,
            span: 18614..18615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 662,
            column: 6,
            span: 18616..18617,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 662,
            column: 9,
            span: 18618..18620,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        position: Position {
            line: 662,
            column: 15,
            span: 18621..18626,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 663,
            column: 6,
            span: 18627..18632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 663,
            column: 8,
            span: 18633..18634,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 663,
            column: 9,
            span: 18634..18635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 663,
            column: 11,
            span: 18636..18637,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 663,
            column: 13,
            span: 18638..18639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 663,
            column: 18,
            span: 18640..18644,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 663,
            column: 19,
            span: 18644..18645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 663,
            column: 20,
            span: 18645..18646,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 663,
            column: 21,
            span: 18646..18647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 664,
            column: 7,
            span: 18648..18654,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 664,
            column: 8,
            span: 18654..18655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 664,
            column: 14,
            span: 18655..18661,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 664,
            column: 15,
            span: 18661..18662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 664,
            column: 19,
            span: 18662..18666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 664,
            column: 20,
            span: 18666..18667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 664,
            column: 21,
            span: 18667..18668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 664,
            column: 22,
            span: 18668..18669,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 2\"",
        ),
        position: Position {
            line: 664,
            column: 31,
            span: 18670..18678,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 664,
            column: 32,
            span: 18678..18679,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 664,
            column: 36,
            span: 18680..18683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 664,
            column: 43,
            span: 18684..18690,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 664,
            column: 44,
            span: 18690..18691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 664,
            column: 48,
            span: 18691..18695,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 664,
            column: 49,
            span: 18695..18696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 664,
            column: 50,
            span: 18696..18697,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 664,
            column: 51,
            span: 18697..18698,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many local variables\"",
        ),
        position: Position {
            line: 664,
            column: 78,
            span: 18699..18725,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 664,
            column: 79,
            span: 18725..18726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 664,
            column: 80,
            span: 18726..18727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 666,
            column: 3,
            span: 18729..18731,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 666,
            column: 4,
            span: 18731..18732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 666,
            column: 11,
            span: 18732..18739,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 666,
            column: 13,
            span: 18740..18741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmm",
        ),
        position: Position {
            line: 666,
            column: 0,
            span: 18742..18747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 668,
            column: 6,
            span: 18749..18754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 668,
            column: 7,
            span: 18754..18755,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 668,
            column: 11,
            span: 18755..18759,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 668,
            column: 12,
            span: 18759..18760,
        },
    },
]
