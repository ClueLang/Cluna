---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/sort.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 67..72,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing (parts of) table library\"",
        ),
        line: 4,
        column: 41,
        span: 73..107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 6,
        column: 6,
        span: 109..114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing unpack\"",
        ),
        line: 6,
        column: 23,
        span: 115..131,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 8,
        column: 6,
        span: 133..138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 8,
        column: 13,
        span: 139..145,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 8,
        column: 15,
        span: 146..147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 8,
        column: 21,
        span: 148..153,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 22,
        span: 153..154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 8,
        column: 0,
        span: 154..160,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 10,
        column: 6,
        span: 162..167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 10,
        column: 11,
        span: 168..172,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 13,
        span: 173..174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 10,
        column: 18,
        span: 175..179,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 19,
        span: 179..180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 10,
        column: 0,
        span: 180..190,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 11,
        column: 6,
        span: 191..196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 11,
        column: 11,
        span: 197..201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
        column: 13,
        span: 202..203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 11,
        column: 18,
        span: 204..208,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 11,
        column: 19,
        span: 208..209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        line: 11,
        column: 0,
        span: 209..219,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 14,
        column: 6,
        span: 222..227,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 14,
        column: 15,
        span: 228..236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 14,
        column: 26,
        span: 237..247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 28,
        span: 248..249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 14,
        column: 31,
        span: 249..252,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 32,
        span: 252..253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 14,
        column: 34,
        span: 254..255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 35,
        span: 255..256,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 14,
        column: 39,
        span: 257..260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 40,
        span: 260..261,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 15,
        column: 8,
        span: 264..269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 15,
        column: 10,
        span: 270..271,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 11,
        span: 271..272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 15,
        column: 15,
        span: 273..276,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 15,
        column: 17,
        span: 277..278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 15,
        column: 23,
        span: 279..284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 24,
        span: 284..285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 15,
        column: 25,
        span: 285..286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 26,
        span: 286..287,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 15,
        column: 30,
        span: 288..291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 31,
        span: 291..292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 9,
        span: 295..301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 10,
        span: 301..302,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 16,
        column: 13,
        span: 302..305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 16,
        column: 15,
        span: 306..307,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 16,
        column: 19,
        span: 308..311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 16,
        column: 26,
        span: 312..318,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 27,
        span: 318..319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 16,
        column: 31,
        span: 319..323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 32,
        span: 323..324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 16,
        column: 35,
        span: 324..327,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 36,
        span: 327..328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 16,
        column: 40,
        span: 329..332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 41,
        span: 332..333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 42,
        span: 333..334,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 17,
        column: 0,
        span: 335..338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 20,
        column: 11,
        span: 341..351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 12,
        span: 351..352,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wrong number of arguments\"",
        ),
        line: 20,
        column: 39,
        span: 352..379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 40,
        span: 379..380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 20,
        column: 46,
        span: 381..386,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
        column: 47,
        span: 386..387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 20,
        column: 53,
        span: 387..393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 54,
        span: 393..394,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 20,
        column: 56,
        span: 395..396,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 20,
        column: 57,
        span: 396..397,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 58,
        span: 397..398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 60,
        span: 398..400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 61,
        span: 400..401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 63,
        span: 401..403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 64,
        span: 403..404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 66,
        span: 404..406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 67,
        span: 406..407,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 6,
        span: 409..414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 22,
        column: 8,
        span: 415..416,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 9,
        span: 416..417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 22,
        column: 10,
        span: 417..418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 11,
        span: 418..419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 22,
        column: 12,
        span: 419..420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 13,
        span: 420..421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 22,
        column: 14,
        span: 421..422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 15,
        span: 422..423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 22,
        column: 0,
        span: 423..424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 23,
        column: 2,
        span: 425..426,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
        column: 4,
        span: 427..428,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 23,
        column: 6,
        span: 429..430,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 23,
        column: 7,
        span: 430..431,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 23,
        column: 8,
        span: 431..432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 23,
        column: 12,
        span: 433..436,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
        column: 14,
        span: 437..438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 23,
        column: 20,
        span: 439..444,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 23,
        column: 24,
        span: 445..448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 28,
        span: 448..452,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 23,
        column: 31,
        span: 453..455,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 0,
        span: 455..460,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 24,
        column: 4,
        span: 461..464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 24,
        column: 6,
        span: 465..466,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 7,
        span: 466..467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 8,
        span: 466..468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 9,
        span: 468..469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 24,
        column: 13,
        span: 470..473,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 24,
        column: 16,
        span: 474..476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 24,
        column: 18,
        span: 477..478,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 24,
        column: 19,
        span: 478..479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 24,
        column: 20,
        span: 479..480,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 24,
        column: 21,
        span: 480..481,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 22,
        span: 481..482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 24,
        column: 23,
        span: 482..483,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 24,
        column: 0,
        span: 484..487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 488..494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 494..495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 25,
        column: 14,
        span: 495..501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 15,
        span: 501..502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 25,
        column: 18,
        span: 502..505,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 19,
        span: 505..506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 25,
        column: 26,
        span: 507..513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 27,
        span: 513..514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 25,
        column: 28,
        span: 514..515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 29,
        span: 515..516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 30,
        span: 516..517,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 33,
        span: 518..520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 25,
        column: 37,
        span: 521..524,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 25,
        column: 41,
        span: 525..528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 25,
        column: 48,
        span: 529..535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 49,
        span: 535..536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 25,
        column: 52,
        span: 536..539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 53,
        span: 539..540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 25,
        column: 60,
        span: 541..547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 61,
        span: 547..548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 25,
        column: 62,
        span: 548..549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 63,
        span: 549..550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 64,
        span: 550..551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 67,
        span: 552..554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 25,
        column: 71,
        span: 555..558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 72,
        span: 558..559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 26,
        column: 2,
        span: 560..561,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 4,
        span: 562..563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 26,
        column: 11,
        span: 564..570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 12,
        span: 570..571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 26,
        column: 13,
        span: 571..572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 14,
        span: 572..573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 27,
        column: 7,
        span: 574..580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 8,
        span: 580..581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 27,
        column: 9,
        span: 581..582,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 27,
        column: 12,
        span: 583..585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 14,
        span: 585..587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 15,
        span: 587..588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 28,
        column: 2,
        span: 589..590,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 4,
        span: 591..592,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 28,
        column: 6,
        span: 593..594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 28,
        column: 12,
        span: 594..600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 13,
        span: 600..601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 28,
        column: 14,
        span: 601..602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 15,
        span: 602..603,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 28,
        column: 16,
        span: 603..604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 7,
        span: 605..611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 611..612,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 29,
        column: 9,
        span: 612..613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 29,
        column: 10,
        span: 613..614,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 13,
        span: 615..617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 29,
        column: 17,
        span: 618..621,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 29,
        column: 21,
        span: 622..625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 29,
        column: 23,
        span: 626..627,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 29,
        column: 24,
        span: 627..628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 25,
        span: 627..629,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 29,
        column: 26,
        span: 629..630,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 29,
        span: 631..633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 31,
        span: 633..635,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 29,
        column: 35,
        span: 636..639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 29,
        column: 37,
        span: 640..641,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 29,
        column: 38,
        span: 641..642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 29,
        column: 41,
        span: 642..645,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 29,
        column: 42,
        span: 645..646,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 45,
        span: 647..649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 29,
        column: 49,
        span: 650..653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 50,
        span: 653..654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 30,
        column: 2,
        span: 655..656,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 4,
        span: 657..658,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 30,
        column: 6,
        span: 659..660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 30,
        column: 12,
        span: 660..666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 13,
        span: 666..667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 14,
        span: 667..668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 15,
        span: 668..669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 30,
        column: 19,
        span: 670..673,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 30,
        column: 20,
        span: 673..674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 21,
        span: 673..675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 22,
        span: 675..676,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 30,
        column: 23,
        span: 676..677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 678..684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 684..685,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 31,
        column: 9,
        span: 685..686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 31,
        column: 10,
        span: 686..687,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 13,
        span: 688..690,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 15,
        span: 690..692,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 31,
        column: 19,
        span: 693..696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 31,
        column: 21,
        span: 697..698,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 31,
        column: 22,
        span: 698..699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 23,
        span: 698..700,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 31,
        column: 24,
        span: 700..701,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 27,
        span: 702..704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 31,
        column: 31,
        span: 705..708,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 31,
        column: 32,
        span: 708..709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 33,
        span: 708..710,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 31,
        column: 37,
        span: 711..714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 31,
        column: 39,
        span: 715..716,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 31,
        column: 40,
        span: 716..717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 41,
        span: 716..718,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 31,
        column: 42,
        span: 718..719,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 45,
        span: 720..722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 31,
        column: 49,
        span: 723..726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 50,
        span: 726..727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 32,
        column: 2,
        span: 728..729,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 4,
        span: 730..731,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 32,
        column: 6,
        span: 732..733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 32,
        column: 12,
        span: 733..739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 13,
        span: 739..740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 14,
        span: 740..741,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 15,
        span: 741..742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 18,
        span: 742..745,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 19,
        span: 745..746,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 21,
        span: 746..748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 22,
        span: 748..749,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 32,
        column: 23,
        span: 749..750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 7,
        span: 751..757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 8,
        span: 757..758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 33,
        column: 12,
        span: 758..762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 13,
        span: 762..763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 33,
        column: 14,
        span: 763..764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 15,
        span: 764..765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
        column: 18,
        span: 766..768,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 33,
        column: 22,
        span: 769..772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 23,
        span: 772..773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 34,
        column: 2,
        span: 791..792,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 4,
        span: 793..794,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 34,
        column: 6,
        span: 795..796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 34,
        column: 12,
        span: 796..802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 13,
        span: 802..803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 14,
        span: 803..804,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 15,
        span: 804..805,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 18,
        span: 805..808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 19,
        span: 808..809,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 22,
        span: 809..812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 23,
        span: 812..813,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 34,
        column: 24,
        span: 813..814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 815..821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 821..822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 35,
        column: 12,
        span: 822..826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 13,
        span: 826..827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
        column: 14,
        span: 827..828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 15,
        span: 828..829,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 18,
        span: 830..832,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 35,
        column: 22,
        span: 833..836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 23,
        span: 836..837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 36,
        column: 2,
        span: 855..856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 3,
        span: 856..857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 36,
        column: 4,
        span: 857..858,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 6,
        span: 859..860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 36,
        column: 13,
        span: 861..867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 14,
        span: 867..868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 15,
        span: 868..869,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 16,
        span: 869..870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 19,
        span: 870..873,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 20,
        span: 873..874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 23,
        span: 874..877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 24,
        span: 877..878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 879..885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 885..886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 37,
        column: 9,
        span: 886..887,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 12,
        span: 888..890,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 15,
        span: 890..893,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 37,
        column: 19,
        span: 894..897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 37,
        column: 21,
        span: 898..899,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 24,
        span: 900..902,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 37,
        column: 28,
        span: 903..906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 29,
        span: 906..907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 38,
        column: 2,
        span: 908..909,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 3,
        span: 909..910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 38,
        column: 4,
        span: 910..911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 5,
        span: 911..912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 38,
        column: 6,
        span: 912..913,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 8,
        span: 914..915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 38,
        column: 15,
        span: 916..922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 16,
        span: 922..923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 17,
        span: 923..924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 18,
        span: 924..925,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 21,
        span: 925..928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 22,
        span: 928..929,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 25,
        span: 929..932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 26,
        span: 932..933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 934..940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 940..941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 39,
        column: 9,
        span: 941..942,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 12,
        span: 943..945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 15,
        span: 945..948,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 39,
        column: 19,
        span: 949..952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 39,
        column: 21,
        span: 953..954,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 24,
        span: 955..957,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 27,
        span: 957..960,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 39,
        column: 31,
        span: 961..964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 39,
        column: 33,
        span: 965..966,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 36,
        span: 967..969,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 39,
        column: 40,
        span: 970..973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 41,
        span: 973..974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 2,
        span: 975..976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 3,
        span: 976..977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 40,
        column: 4,
        span: 977..978,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 40,
        column: 6,
        span: 979..980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 40,
        column: 13,
        span: 981..987,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 40,
        column: 14,
        span: 987..988,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 15,
        span: 987..989,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 40,
        column: 16,
        span: 989..990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 991..997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 997..998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 41,
        column: 9,
        span: 998..999,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 11,
        span: 999..1001,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 12,
        span: 1000..1002,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 16,
        span: 1003..1006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 41,
        column: 18,
        span: 1007..1008,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 20,
        span: 1008..1010,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 41,
        column: 23,
        span: 1010..1013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 24,
        span: 1013..1014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 42,
        column: 2,
        span: 1015..1016,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 3,
        span: 1016..1017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 42,
        column: 4,
        span: 1017..1018,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 42,
        column: 6,
        span: 1019..1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 42,
        column: 13,
        span: 1021..1027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 14,
        span: 1027..1028,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 42,
        column: 15,
        span: 1028..1029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 16,
        span: 1028..1030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 17,
        span: 1030..1031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 18,
        span: 1030..1032,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 42,
        column: 19,
        span: 1032..1033,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 20,
        span: 1033..1034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 22,
        span: 1034..1036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 23,
        span: 1036..1037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 25,
        span: 1037..1039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 26,
        span: 1039..1040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
        column: 7,
        span: 1041..1047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 8,
        span: 1047..1048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
        column: 9,
        span: 1048..1049,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 11,
        span: 1049..1051,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 12,
        span: 1050..1052,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 43,
        column: 16,
        span: 1053..1056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 43,
        column: 18,
        span: 1057..1058,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 20,
        span: 1058..1060,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 43,
        column: 23,
        span: 1060..1063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 24,
        span: 1063..1064,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 45,
        column: 0,
        span: 1066..1068,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 46,
        column: 8,
        span: 1071..1076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 46,
        column: 13,
        span: 1077..1081,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 15,
        span: 1082..1083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 17,
        span: 1084..1085,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 18,
        span: 1084..1086,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 46,
        column: 21,
        span: 1087..1089,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 24,
        span: 1089..1092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 25,
        span: 1092..1093,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 46,
        column: 27,
        span: 1094..1095,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 29,
        span: 1095..1097,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 47,
        column: 8,
        span: 1147..1152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 47,
        column: 13,
        span: 1153..1157,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 15,
        span: 1158..1159,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 47,
        column: 17,
        span: 1160..1161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 18,
        span: 1161..1162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 19,
        span: 1161..1163,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 47,
        column: 22,
        span: 1164..1166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 25,
        span: 1166..1169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 26,
        span: 1169..1170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 48,
        column: 13,
        span: 1223..1233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 14,
        span: 1233..1234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 48,
        column: 32,
        span: 1234..1252,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 33,
        span: 1252..1253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 48,
        column: 40,
        span: 1254..1260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 41,
        span: 1260..1261,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 48,
        column: 43,
        span: 1262..1263,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 48,
        column: 44,
        span: 1263..1264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 45,
        span: 1264..1265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 47,
        span: 1265..1267,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 48,
        span: 1267..1268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 48,
        column: 53,
        span: 1269..1273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 54,
        span: 1273..1274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 49,
        column: 13,
        span: 1277..1287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 14,
        span: 1287..1288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 49,
        column: 32,
        span: 1288..1306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 33,
        span: 1306..1307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 49,
        column: 40,
        span: 1308..1314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 41,
        span: 1314..1315,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 49,
        column: 43,
        span: 1316..1317,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 49,
        column: 44,
        span: 1317..1318,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 45,
        span: 1318..1319,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 47,
        span: 1319..1321,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 48,
        span: 1321..1322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 49,
        column: 53,
        span: 1323..1327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 54,
        span: 1327..1328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 50,
        column: 13,
        span: 1331..1341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 14,
        span: 1341..1342,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 50,
        column: 32,
        span: 1342..1360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 33,
        span: 1360..1361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 50,
        column: 40,
        span: 1362..1368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 41,
        span: 1368..1369,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 50,
        column: 43,
        span: 1370..1371,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 50,
        column: 44,
        span: 1371..1372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 45,
        span: 1372..1373,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 47,
        span: 1373..1375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 48,
        span: 1375..1376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 50,
        column: 53,
        span: 1377..1381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 54,
        span: 1381..1382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 51,
        column: 13,
        span: 1385..1395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 14,
        span: 1395..1396,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 51,
        column: 32,
        span: 1396..1414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 33,
        span: 1414..1415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 51,
        column: 40,
        span: 1416..1422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 41,
        span: 1422..1423,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 51,
        column: 43,
        span: 1424..1425,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 51,
        column: 44,
        span: 1425..1426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 45,
        span: 1426..1427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 47,
        span: 1427..1429,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 48,
        span: 1429..1430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 51,
        column: 53,
        span: 1431..1435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 54,
        span: 1435..1436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 52,
        column: 13,
        span: 1439..1449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 14,
        span: 1449..1450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 52,
        column: 32,
        span: 1450..1468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 33,
        span: 1468..1469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 52,
        column: 40,
        span: 1470..1476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 41,
        span: 1476..1477,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 52,
        column: 43,
        span: 1478..1479,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 52,
        column: 44,
        span: 1479..1480,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 45,
        span: 1480..1481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mini",
        ),
        line: 52,
        column: 50,
        span: 1482..1486,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 51,
        span: 1486..1487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 52,
        column: 56,
        span: 1488..1492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 57,
        span: 1492..1493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 53,
        column: 13,
        span: 1496..1506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 14,
        span: 1506..1507,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 53,
        column: 32,
        span: 1507..1525,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 33,
        span: 1525..1526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 53,
        column: 40,
        span: 1527..1533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 41,
        span: 1533..1534,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 53,
        column: 43,
        span: 1535..1536,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 53,
        column: 44,
        span: 1536..1537,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 45,
        span: 1537..1538,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 53,
        column: 47,
        span: 1539..1540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 53,
        column: 51,
        span: 1540..1544,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 52,
        span: 1544..1545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 53,
        column: 57,
        span: 1546..1550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 58,
        span: 1550..1551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 54,
        column: 13,
        span: 1554..1564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 14,
        span: 1564..1565,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 54,
        column: 32,
        span: 1565..1583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 33,
        span: 1583..1584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 54,
        column: 40,
        span: 1585..1591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 41,
        span: 1591..1592,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 54,
        column: 43,
        span: 1593..1594,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 54,
        column: 44,
        span: 1594..1595,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 45,
        span: 1595..1596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 54,
        column: 50,
        span: 1597..1601,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 51,
        span: 1601..1602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 54,
        column: 56,
        span: 1603..1607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 57,
        span: 1607..1608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 55,
        column: 9,
        span: 1611..1617,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 10,
        span: 1617..1618,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 55,
        column: 11,
        span: 1618..1619,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 55,
        column: 12,
        span: 1619..1620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 13,
        span: 1620..1621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 55,
        column: 18,
        span: 1622..1626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 19,
        span: 1626..1627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 21,
        span: 1627..1629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 22,
        span: 1629..1630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 56,
        column: 9,
        span: 1633..1639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 10,
        span: 1639..1640,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 56,
        column: 11,
        span: 1640..1641,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 56,
        column: 12,
        span: 1641..1642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 13,
        span: 1642..1643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 56,
        column: 18,
        span: 1644..1648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 19,
        span: 1648..1649,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 21,
        span: 1649..1651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 22,
        span: 1651..1652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 57,
        column: 9,
        span: 1655..1661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 10,
        span: 1661..1662,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 57,
        column: 11,
        span: 1662..1663,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 57,
        column: 12,
        span: 1663..1664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 13,
        span: 1664..1665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 57,
        column: 18,
        span: 1666..1670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 19,
        span: 1670..1671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 57,
        column: 24,
        span: 1672..1676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 25,
        span: 1676..1677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 58,
        column: 8,
        span: 1680..1685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 9,
        span: 1685..1686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 58,
        column: 15,
        span: 1686..1692,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 16,
        span: 1692..1693,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 58,
        column: 18,
        span: 1694..1695,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 58,
        column: 19,
        span: 1695..1696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 20,
        span: 1696..1697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 22,
        span: 1697..1699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 23,
        span: 1699..1700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 58,
        column: 28,
        span: 1701..1705,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 58,
        column: 30,
        span: 1706..1707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 32,
        span: 1707..1709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 33,
        span: 1709..1710,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 59,
        column: 8,
        span: 1713..1718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 10,
        span: 1719..1720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 11,
        span: 1720..1721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 59,
        column: 13,
        span: 1722..1723,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 15,
        span: 1724..1725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 59,
        column: 22,
        span: 1726..1732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 23,
        span: 1732..1733,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 59,
        column: 24,
        span: 1733..1734,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 59,
        column: 25,
        span: 1734..1735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 59,
        column: 29,
        span: 1735..1739,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 59,
        column: 30,
        span: 1739..1740,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 32,
        span: 1741..1742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 35,
        span: 1742..1745,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 59,
        column: 36,
        span: 1745..1746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 37,
        span: 1746..1747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 59,
        column: 42,
        span: 1748..1752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 43,
        span: 1752..1753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 59,
        column: 48,
        span: 1754..1758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 49,
        span: 1758..1759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 9,
        span: 1762..1768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 10,
        span: 1768..1769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 60,
        column: 11,
        span: 1769..1770,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 14,
        span: 1771..1773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 17,
        span: 1773..1776,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 60,
        column: 21,
        span: 1777..1780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 60,
        column: 23,
        span: 1781..1782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 26,
        span: 1783..1785,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 60,
        column: 30,
        span: 1786..1789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 31,
        span: 1789..1790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 61,
        column: 4,
        span: 1793..1794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 5,
        span: 1794..1795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 61,
        column: 7,
        span: 1796..1797,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 9,
        span: 1798..1799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 61,
        column: 16,
        span: 1800..1806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 17,
        span: 1806..1807,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 61,
        column: 18,
        span: 1807..1808,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 61,
        column: 19,
        span: 1808..1809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 61,
        column: 23,
        span: 1809..1813,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 61,
        column: 24,
        span: 1813..1814,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 26,
        span: 1815..1816,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 29,
        span: 1816..1819,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 61,
        column: 30,
        span: 1819..1820,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 31,
        span: 1820..1821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 61,
        column: 36,
        span: 1822..1826,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 61,
        column: 38,
        span: 1827..1828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 40,
        span: 1828..1830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 41,
        span: 1830..1831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxi",
        ),
        line: 61,
        column: 46,
        span: 1832..1836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 47,
        span: 1836..1837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 9,
        span: 1840..1846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 10,
        span: 1846..1847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
        column: 11,
        span: 1847..1848,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 14,
        span: 1849..1851,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 62,
        column: 18,
        span: 1852..1855,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 62,
        column: 22,
        span: 1856..1859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 62,
        column: 24,
        span: 1860..1861,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 27,
        span: 1862..1864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 30,
        span: 1864..1867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 31,
        span: 1867..1868,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 63,
        column: 8,
        span: 1871..1876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 63,
        column: 10,
        span: 1877..1878,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 12,
        span: 1879..1880,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 63,
        column: 14,
        span: 1881..1882,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 63,
        column: 15,
        span: 1882..1883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 63,
        column: 19,
        span: 1883..1887,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 63,
        column: 21,
        span: 1888..1889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 23,
        span: 1889..1891,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 63,
        column: 24,
        span: 1891..1892,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 26,
        span: 1893..1894,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 29,
        span: 1894..1897,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 30,
        span: 1897..1898,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 63,
        column: 32,
        span: 1899..1900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 63,
        column: 36,
        span: 1900..1904,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 63,
        column: 37,
        span: 1904..1905,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 39,
        span: 1906..1907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 42,
        span: 1907..1910,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 63,
        column: 43,
        span: 1910..1911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 64,
        column: 4,
        span: 1914..1915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 5,
        span: 1915..1916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 64,
        column: 7,
        span: 1917..1918,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 9,
        span: 1919..1920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 64,
        column: 16,
        span: 1921..1927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 17,
        span: 1927..1928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 64,
        column: 18,
        span: 1928..1929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 19,
        span: 1929..1930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 64,
        column: 24,
        span: 1931..1935,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 64,
        column: 26,
        span: 1936..1937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 28,
        span: 1937..1939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 29,
        span: 1939..1940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 64,
        column: 34,
        span: 1941..1945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 35,
        span: 1945..1946,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 64,
        column: 36,
        span: 1946..1947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 43,
        span: 1948..1954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 44,
        span: 1954..1955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 64,
        column: 45,
        span: 1955..1956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 48,
        span: 1957..1959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 51,
        span: 1959..1962,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 64,
        column: 55,
        span: 1963..1966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 64,
        column: 57,
        span: 1967..1968,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 60,
        span: 1969..1971,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 63,
        span: 1971..1974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 64,
        span: 1974..1975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 65,
        column: 4,
        span: 1978..1979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 5,
        span: 1979..1980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 65,
        column: 7,
        span: 1981..1982,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
        column: 9,
        span: 1983..1984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 65,
        column: 16,
        span: 1985..1991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 17,
        span: 1991..1992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 65,
        column: 18,
        span: 1992..1993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 19,
        span: 1993..1994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 65,
        column: 24,
        span: 1995..1999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 25,
        span: 1999..2000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 65,
        column: 30,
        span: 2001..2005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 31,
        span: 2005..2006,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 65,
        column: 32,
        span: 2006..2007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 39,
        span: 2008..2014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 40,
        span: 2014..2015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 65,
        column: 41,
        span: 2015..2016,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 44,
        span: 2017..2019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 47,
        span: 2019..2022,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 65,
        column: 51,
        span: 2023..2026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 65,
        column: 53,
        span: 2027..2028,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 56,
        span: 2029..2031,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 65,
        column: 60,
        span: 2032..2035,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 61,
        span: 2035..2036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 4,
        span: 2039..2040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 5,
        span: 2040..2041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 66,
        column: 7,
        span: 2042..2043,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 9,
        span: 2044..2045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 66,
        column: 16,
        span: 2046..2052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 17,
        span: 2052..2053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 66,
        column: 18,
        span: 2053..2054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 19,
        span: 2054..2055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 66,
        column: 24,
        span: 2056..2060,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 25,
        span: 2060..2061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 66,
        column: 30,
        span: 2062..2066,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 66,
        column: 32,
        span: 2067..2068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 34,
        span: 2068..2070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 35,
        span: 2070..2071,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 66,
        column: 36,
        span: 2071..2072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 43,
        span: 2073..2079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 44,
        span: 2079..2080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 45,
        span: 2080..2081,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
        column: 48,
        span: 2082..2084,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 66,
        column: 52,
        span: 2085..2088,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 66,
        column: 56,
        span: 2089..2092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 66,
        column: 58,
        span: 2093..2094,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
        column: 61,
        span: 2095..2097,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 66,
        column: 65,
        span: 2098..2101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 66,
        span: 2101..2102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 67,
        column: 4,
        span: 2105..2106,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 6,
        span: 2107..2108,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 67,
        column: 8,
        span: 2109..2110,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 67,
        column: 9,
        span: 2110..2111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 67,
        column: 13,
        span: 2111..2115,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 67,
        column: 14,
        span: 2115..2116,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 16,
        span: 2117..2118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 67,
        column: 21,
        span: 2118..2123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 22,
        span: 2123..2124,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 67,
        column: 24,
        span: 2125..2126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 67,
        column: 28,
        span: 2126..2130,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 67,
        column: 30,
        span: 2131..2132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 32,
        span: 2132..2134,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 67,
        column: 33,
        span: 2134..2135,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 35,
        span: 2136..2137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 67,
        column: 40,
        span: 2137..2142,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 67,
        column: 41,
        span: 2142..2143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 68,
        column: 4,
        span: 2146..2147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 5,
        span: 2147..2148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 68,
        column: 7,
        span: 2149..2150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 9,
        span: 2151..2152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 68,
        column: 16,
        span: 2153..2159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 17,
        span: 2159..2160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 68,
        column: 18,
        span: 2160..2161,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 19,
        span: 2161..2162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 68,
        column: 24,
        span: 2163..2167,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 25,
        span: 2167..2168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 68,
        column: 30,
        span: 2169..2173,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 68,
        column: 32,
        span: 2174..2175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 34,
        span: 2175..2177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 35,
        span: 2177..2178,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 68,
        column: 36,
        span: 2178..2179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 43,
        span: 2180..2186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 44,
        span: 2186..2187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 68,
        column: 45,
        span: 2187..2188,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 68,
        column: 48,
        span: 2189..2191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 68,
        column: 53,
        span: 2191..2196,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 68,
        column: 57,
        span: 2197..2200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 68,
        column: 59,
        span: 2201..2202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 68,
        column: 62,
        span: 2203..2205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 68,
        column: 67,
        span: 2205..2210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 68,
        span: 2210..2211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 69,
        column: 4,
        span: 2214..2215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 5,
        span: 2215..2216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 69,
        column: 7,
        span: 2217..2218,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
        column: 9,
        span: 2219..2220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 69,
        column: 16,
        span: 2221..2227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 17,
        span: 2227..2228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 69,
        column: 18,
        span: 2228..2229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 19,
        span: 2229..2230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 69,
        column: 24,
        span: 2231..2235,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 25,
        span: 2235..2236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 69,
        column: 30,
        span: 2237..2241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 31,
        span: 2241..2242,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 69,
        column: 32,
        span: 2242..2243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 39,
        span: 2244..2250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 40,
        span: 2250..2251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 69,
        column: 41,
        span: 2251..2252,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 44,
        span: 2253..2255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 69,
        column: 49,
        span: 2255..2260,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 69,
        column: 53,
        span: 2261..2264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 69,
        column: 55,
        span: 2265..2266,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 58,
        span: 2267..2269,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 69,
        column: 62,
        span: 2270..2273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 63,
        span: 2273..2274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 70,
        column: 4,
        span: 2277..2278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 5,
        span: 2278..2279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 70,
        column: 7,
        span: 2280..2281,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 9,
        span: 2282..2283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 70,
        column: 16,
        span: 2284..2290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 17,
        span: 2290..2291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 70,
        column: 18,
        span: 2291..2292,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 19,
        span: 2292..2293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 70,
        column: 24,
        span: 2294..2298,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 70,
        column: 26,
        span: 2299..2300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 28,
        span: 2300..2302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 29,
        span: 2302..2303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 70,
        column: 34,
        span: 2304..2308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 35,
        span: 2308..2309,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 70,
        column: 36,
        span: 2309..2310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 43,
        span: 2311..2317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 44,
        span: 2317..2318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 70,
        column: 45,
        span: 2318..2319,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 48,
        span: 2320..2322,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 70,
        column: 52,
        span: 2323..2326,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 70,
        column: 56,
        span: 2327..2330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 70,
        column: 58,
        span: 2331..2332,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 61,
        span: 2333..2335,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 70,
        column: 65,
        span: 2336..2339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 66,
        span: 2339..2340,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 71,
        column: 0,
        span: 2341..2344,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 73,
        column: 3,
        span: 2346..2348,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 74,
        column: 8,
        span: 2381..2386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 74,
        column: 10,
        span: 2387..2388,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 12,
        span: 2389..2390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 74,
        column: 25,
        span: 2391..2403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 26,
        span: 2403..2404,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 74,
        column: 27,
        span: 2404..2405,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 74,
        column: 28,
        span: 2405..2406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 29,
        span: 2406..2407,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 74,
        column: 31,
        span: 2408..2409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 74,
        column: 36,
        span: 2409..2414,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 38,
        span: 2415..2416,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 74,
        column: 47,
        span: 2417..2425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 49,
        span: 2426..2427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 50,
        span: 2427..2428,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 74,
        column: 57,
        span: 2429..2435,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abc'",
        ),
        line: 74,
        column: 63,
        span: 2436..2441,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 74,
        column: 67,
        span: 2442..2445,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 74,
        column: 68,
        span: 2445..2446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 69,
        span: 2446..2447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
        column: 9,
        span: 2450..2456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 10,
        span: 2456..2457,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 75,
        column: 11,
        span: 2457..2458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 75,
        column: 12,
        span: 2458..2459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 15,
        span: 2460..2462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abc'",
        ),
        line: 75,
        column: 21,
        span: 2463..2468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 22,
        span: 2468..2469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 76,
        column: 13,
        span: 2472..2482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 14,
        span: 2482..2483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"object length is not an integer\"",
        ),
        line: 76,
        column: 47,
        span: 2483..2516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 48,
        span: 2516..2517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 76,
        column: 54,
        span: 2518..2523,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 76,
        column: 55,
        span: 2523..2524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 76,
        column: 61,
        span: 2524..2530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 62,
        span: 2530..2531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 76,
        column: 64,
        span: 2532..2533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 65,
        span: 2533..2534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 67,
        span: 2534..2536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 68,
        span: 2536..2537,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 77,
        column: 0,
        span: 2538..2541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 79,
        column: 6,
        span: 2543..2548,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing pack\"",
        ),
        line: 79,
        column: 21,
        span: 2549..2563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 81,
        column: 2,
        span: 2565..2566,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
        column: 4,
        span: 2567..2568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 81,
        column: 10,
        span: 2569..2574,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 11,
        span: 2574..2575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 81,
        column: 15,
        span: 2575..2579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 16,
        span: 2579..2580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 17,
        span: 2580..2581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 7,
        span: 2582..2588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 8,
        span: 2588..2589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 82,
        column: 9,
        span: 2589..2590,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 82,
        column: 10,
        span: 2590..2591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 11,
        span: 2590..2592,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 82,
        column: 12,
        span: 2592..2593,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 15,
        span: 2594..2596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 82,
        column: 21,
        span: 2597..2602,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 82,
        column: 25,
        span: 2603..2606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 82,
        column: 27,
        span: 2607..2608,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 28,
        span: 2608..2609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 82,
        column: 29,
        span: 2609..2610,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 32,
        span: 2611..2613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 34,
        span: 2613..2615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 35,
        span: 2615..2616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
        column: 2,
        span: 2619..2620,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 4,
        span: 2621..2622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 84,
        column: 10,
        span: 2623..2628,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 84,
        column: 11,
        span: 2628..2629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 84,
        column: 15,
        span: 2629..2633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 16,
        span: 2633..2634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 84,
        column: 21,
        span: 2634..2639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 22,
        span: 2639..2640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
        column: 7,
        span: 2641..2647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 8,
        span: 2647..2648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 9,
        span: 2648..2649,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 85,
        column: 10,
        span: 2649..2650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 11,
        span: 2649..2651,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 85,
        column: 12,
        span: 2651..2652,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 15,
        span: 2653..2655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 85,
        column: 21,
        span: 2656..2661,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 85,
        column: 25,
        span: 2662..2665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 27,
        span: 2666..2667,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
        column: 28,
        span: 2667..2668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 85,
        column: 29,
        span: 2668..2669,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 32,
        span: 2670..2672,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 34,
        span: 2672..2674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 35,
        span: 2674..2675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 87,
        column: 2,
        span: 2677..2678,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 87,
        column: 4,
        span: 2679..2680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 87,
        column: 10,
        span: 2681..2686,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 87,
        column: 11,
        span: 2686..2687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 87,
        column: 15,
        span: 2687..2691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 16,
        span: 2691..2692,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 87,
        column: 19,
        span: 2692..2695,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 20,
        span: 2695..2696,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 87,
        column: 24,
        span: 2697..2700,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 25,
        span: 2700..2701,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 87,
        column: 29,
        span: 2702..2705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 30,
        span: 2705..2706,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 87,
        column: 34,
        span: 2707..2710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 35,
        span: 2710..2711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 7,
        span: 2712..2718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 8,
        span: 2718..2719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 88,
        column: 9,
        span: 2719..2720,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 88,
        column: 10,
        span: 2720..2721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 11,
        span: 2720..2722,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 88,
        column: 12,
        span: 2722..2723,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 15,
        span: 2724..2726,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 88,
        column: 19,
        span: 2727..2730,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 88,
        column: 23,
        span: 2731..2734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 88,
        column: 25,
        span: 2735..2736,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 26,
        span: 2736..2737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 88,
        column: 27,
        span: 2737..2738,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 30,
        span: 2739..2741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 32,
        span: 2741..2743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 33,
        span: 2743..2744,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 92,
        column: 0,
        span: 2763..2765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 94,
        column: 13,
        span: 2769..2779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 14,
        span: 2779..2780,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table expected\"",
        ),
        line: 94,
        column: 30,
        span: 2780..2796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 31,
        span: 2796..2797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 94,
        column: 37,
        span: 2798..2803,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
        column: 38,
        span: 2803..2804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 94,
        column: 42,
        span: 2804..2808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 43,
        span: 2808..2809,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 45,
        span: 2809..2811,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 46,
        span: 2811..2812,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 48,
        span: 2812..2814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 49,
        span: 2814..2815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 51,
        span: 2815..2817,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 52,
        span: 2817..2818,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 54,
        span: 2818..2820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 55,
        span: 2820..2821,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 96,
        column: 8,
        span: 2825..2830,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 96,
        column: 17,
        span: 2831..2839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 96,
        column: 21,
        span: 2840..2843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 23,
        span: 2844..2845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 96,
        column: 24,
        span: 2845..2846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 25,
        span: 2846..2847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 96,
        column: 27,
        span: 2848..2849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 28,
        span: 2849..2850,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 97,
        column: 8,
        span: 2855..2858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 97,
        column: 10,
        span: 2859..2860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 11,
        span: 2860..2861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 97,
        column: 13,
        span: 2862..2863,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 97,
        column: 16,
        span: 2864..2866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 97,
        column: 22,
        span: 2867..2872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 23,
        span: 2872..2873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 24,
        span: 2873..2874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 25,
        span: 2874..2875,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 97,
        column: 28,
        span: 2876..2878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 97,
        column: 35,
        span: 2879..2885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 36,
        span: 2885..2886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 97,
        column: 37,
        span: 2886..2887,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 97,
        column: 38,
        span: 2887..2888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 97,
        column: 39,
        span: 2888..2889,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 97,
        column: 40,
        span: 2889..2890,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 97,
        column: 43,
        span: 2891..2893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 97,
        column: 45,
        span: 2894..2895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 46,
        span: 2895..2896,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 97,
        column: 50,
        span: 2897..2900,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 98,
        column: 8,
        span: 2906..2909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 98,
        column: 10,
        span: 2910..2911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 11,
        span: 2911..2912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 98,
        column: 13,
        span: 2913..2914,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 98,
        column: 16,
        span: 2915..2917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 98,
        column: 22,
        span: 2918..2923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 23,
        span: 2923..2924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 98,
        column: 24,
        span: 2924..2925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 25,
        span: 2925..2926,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 98,
        column: 28,
        span: 2927..2929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
        column: 35,
        span: 2930..2936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 36,
        span: 2936..2937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 98,
        column: 37,
        span: 2937..2938,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 98,
        column: 38,
        span: 2938..2939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 98,
        column: 39,
        span: 2939..2940,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 98,
        column: 40,
        span: 2940..2941,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 43,
        span: 2942..2944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 98,
        column: 45,
        span: 2945..2946,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 46,
        span: 2946..2947,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 98,
        column: 50,
        span: 2948..2951,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
        column: 0,
        span: 2955..2958,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 101,
        column: 8,
        span: 2962..2967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 101,
        column: 10,
        span: 2968..2969,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 12,
        span: 2970..2971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 101,
        column: 18,
        span: 2972..2977,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
        column: 19,
        span: 2977..2978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 101,
        column: 23,
        span: 2978..2982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 24,
        span: 2982..2983,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 101,
        column: 25,
        span: 2983..2984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 27,
        span: 2983..2986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 28,
        span: 2986..2987,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 30,
        span: 2986..2989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 31,
        span: 2989..2990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 33,
        span: 2989..2992,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 101,
        column: 34,
        span: 2992..2993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 35,
        span: 2993..2994,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 37,
        span: 2994..2996,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 38,
        span: 2996..2997,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 40,
        span: 2997..2999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 41,
        span: 2999..3000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 43,
        span: 3000..3002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 44,
        span: 3002..3003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 102,
        column: 6,
        span: 3023..3026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 7,
        span: 3026..3027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 102,
        column: 8,
        span: 3027..3028,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 9,
        span: 3028..3029,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 102,
        column: 11,
        span: 3030..3031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 13,
        span: 3030..3033,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 14,
        span: 3033..3034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 16,
        span: 3033..3036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 17,
        span: 3036..3037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 19,
        span: 3036..3039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 20,
        span: 3039..3040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 22,
        span: 3039..3042,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 102,
        column: 23,
        span: 3042..3043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 24,
        span: 3043..3044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 4,
        span: 3084..3085,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 6,
        span: 3086..3087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 105,
        column: 12,
        span: 3088..3093,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 13,
        span: 3093..3094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 105,
        column: 17,
        span: 3094..3098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 18,
        span: 3098..3099,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 105,
        column: 19,
        span: 3099..3100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 21,
        span: 3099..3102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 22,
        span: 3102..3103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 25,
        span: 3103..3106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 26,
        span: 3106..3107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 29,
        span: 3107..3110,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 105,
        column: 30,
        span: 3110..3111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 31,
        span: 3111..3112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 33,
        span: 3112..3114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 34,
        span: 3114..3115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 36,
        span: 3115..3117,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 37,
        span: 3117..3118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 39,
        span: 3118..3120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 40,
        span: 3120..3121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 106,
        column: 6,
        span: 3124..3127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 7,
        span: 3127..3128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 106,
        column: 8,
        span: 3128..3129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 9,
        span: 3129..3130,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 106,
        column: 11,
        span: 3131..3132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 13,
        span: 3131..3134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 14,
        span: 3134..3135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 17,
        span: 3135..3138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 18,
        span: 3138..3139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 21,
        span: 3139..3142,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 22,
        span: 3142..3143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 25,
        span: 3143..3146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 26,
        span: 3146..3147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 29,
        span: 3147..3150,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 106,
        column: 30,
        span: 3150..3151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 31,
        span: 3151..3152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 109,
        column: 4,
        span: 3216..3217,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
        column: 6,
        span: 3218..3219,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 109,
        column: 8,
        span: 3220..3221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 10,
        span: 3220..3223,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 11,
        span: 3223..3224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 14,
        span: 3224..3227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 15,
        span: 3227..3228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 18,
        span: 3228..3231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 19,
        span: 3231..3232,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 22,
        span: 3232..3235,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 109,
        column: 23,
        span: 3235..3236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 110,
        column: 8,
        span: 3239..3244,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 110,
        column: 9,
        span: 3244..3245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 110,
        column: 13,
        span: 3245..3249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 14,
        span: 3249..3250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 15,
        span: 3250..3251,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 16,
        span: 3251..3252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 18,
        span: 3252..3254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 19,
        span: 3254..3255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 21,
        span: 3255..3257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 22,
        span: 3257..3258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 24,
        span: 3258..3260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 25,
        span: 3260..3261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 27,
        span: 3262..3263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 28,
        span: 3263..3264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 111,
        column: 6,
        span: 3267..3270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 7,
        span: 3270..3271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 8,
        span: 3271..3272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 9,
        span: 3272..3273,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 111,
        column: 11,
        span: 3274..3275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 13,
        span: 3274..3277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 14,
        span: 3277..3278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 17,
        span: 3278..3281,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 18,
        span: 3281..3282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 21,
        span: 3282..3285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 22,
        span: 3285..3286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 25,
        span: 3286..3289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 26,
        span: 3289..3290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 29,
        span: 3290..3293,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 111,
        column: 30,
        span: 3293..3294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 31,
        span: 3294..3295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 113,
        column: 4,
        span: 3299..3300,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 113,
        column: 6,
        span: 3301..3302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 113,
        column: 12,
        span: 3303..3308,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 113,
        column: 13,
        span: 3308..3309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 113,
        column: 17,
        span: 3309..3313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 18,
        span: 3313..3314,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 113,
        column: 19,
        span: 3314..3315,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 21,
        span: 3314..3317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 22,
        span: 3317..3318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 24,
        span: 3317..3320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 25,
        span: 3320..3321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 27,
        span: 3320..3323,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 113,
        column: 28,
        span: 3323..3324,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 29,
        span: 3324..3325,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 31,
        span: 3325..3327,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 32,
        span: 3327..3328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 34,
        span: 3328..3330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 35,
        span: 3330..3331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 37,
        span: 3331..3333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 38,
        span: 3333..3334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 114,
        column: 6,
        span: 3356..3359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 7,
        span: 3359..3360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 114,
        column: 8,
        span: 3360..3361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 9,
        span: 3361..3362,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 114,
        column: 11,
        span: 3363..3364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 13,
        span: 3363..3366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 14,
        span: 3366..3367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 16,
        span: 3366..3369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 17,
        span: 3369..3370,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 19,
        span: 3369..3372,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 114,
        column: 20,
        span: 3372..3373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 21,
        span: 3373..3374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 4,
        span: 3378..3379,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 6,
        span: 3380..3381,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 116,
        column: 8,
        span: 3382..3383,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 116,
        column: 9,
        span: 3383..3384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 9,
        span: 3410..3416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 10,
        span: 3416..3417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 117,
        column: 15,
        span: 3417..3422,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 117,
        column: 16,
        span: 3422..3423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 117,
        column: 20,
        span: 3423..3427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 21,
        span: 3427..3428,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 117,
        column: 22,
        span: 3428..3429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 24,
        span: 3428..3431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 25,
        span: 3431..3432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 27,
        span: 3431..3434,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 28,
        span: 3434..3435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 30,
        span: 3434..3437,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 117,
        column: 31,
        span: 3437..3438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 32,
        span: 3438..3439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 34,
        span: 3439..3441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 35,
        span: 3441..3442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 37,
        span: 3442..3444,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 38,
        span: 3444..3445,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 40,
        span: 3445..3447,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 41,
        span: 3447..3448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 43,
        span: 3449..3450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 44,
        span: 3450..3451,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 47,
        span: 3452..3454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 49,
        span: 3455..3456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 50,
        span: 3456..3457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 118,
        column: 6,
        span: 3460..3463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 7,
        span: 3463..3464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 8,
        span: 3464..3465,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 9,
        span: 3465..3466,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 118,
        column: 11,
        span: 3467..3468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 13,
        span: 3467..3470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 14,
        span: 3470..3471,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 16,
        span: 3470..3473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 17,
        span: 3473..3474,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 19,
        span: 3473..3476,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 118,
        column: 20,
        span: 3476..3477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 21,
        span: 3477..3478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 4,
        span: 3482..3483,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 6,
        span: 3484..3485,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 120,
        column: 8,
        span: 3486..3487,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 120,
        column: 9,
        span: 3487..3488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
        column: 9,
        span: 3491..3497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 10,
        span: 3497..3498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 121,
        column: 15,
        span: 3498..3503,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
        column: 16,
        span: 3503..3504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 121,
        column: 20,
        span: 3504..3508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 21,
        span: 3508..3509,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 121,
        column: 22,
        span: 3509..3510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 24,
        span: 3509..3512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 25,
        span: 3512..3513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 27,
        span: 3512..3515,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 28,
        span: 3515..3516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 30,
        span: 3515..3518,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 121,
        column: 31,
        span: 3518..3519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 32,
        span: 3519..3520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 34,
        span: 3520..3522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 35,
        span: 3522..3523,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 37,
        span: 3523..3525,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 38,
        span: 3525..3526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 40,
        span: 3526..3528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 41,
        span: 3528..3529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 43,
        span: 3530..3531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 44,
        span: 3531..3532,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 47,
        span: 3533..3535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 49,
        span: 3536..3537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 50,
        span: 3537..3538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 122,
        column: 6,
        span: 3566..3569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 7,
        span: 3569..3570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 122,
        column: 8,
        span: 3570..3571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 9,
        span: 3571..3572,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 122,
        column: 11,
        span: 3573..3574,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 122,
        column: 12,
        span: 3574..3575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 13,
        span: 3575..3576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 4,
        span: 3580..3581,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 124,
        column: 6,
        span: 3582..3583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 124,
        column: 12,
        span: 3584..3589,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 124,
        column: 13,
        span: 3589..3590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 124,
        column: 17,
        span: 3590..3594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 18,
        span: 3594..3595,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 124,
        column: 19,
        span: 3595..3596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 21,
        span: 3595..3598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 22,
        span: 3598..3599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 24,
        span: 3598..3601,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 25,
        span: 3601..3602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 27,
        span: 3601..3604,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 124,
        column: 28,
        span: 3604..3605,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 29,
        span: 3605..3606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 31,
        span: 3606..3608,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 32,
        span: 3608..3609,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 35,
        span: 3609..3612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 36,
        span: 3612..3613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 38,
        span: 3613..3615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 39,
        span: 3615..3616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 125,
        column: 6,
        span: 3647..3650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 7,
        span: 3650..3651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 125,
        column: 8,
        span: 3651..3652,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 9,
        span: 3652..3653,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 125,
        column: 11,
        span: 3654..3655,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 13,
        span: 3654..3657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 14,
        span: 3657..3658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 16,
        span: 3657..3660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 17,
        span: 3660..3661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 19,
        span: 3660..3663,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 125,
        column: 20,
        span: 3663..3664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 21,
        span: 3664..3665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 128,
        column: 4,
        span: 3696..3697,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 6,
        span: 3698..3699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 128,
        column: 12,
        span: 3700..3705,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 128,
        column: 13,
        span: 3705..3706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 128,
        column: 17,
        span: 3706..3710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 18,
        span: 3710..3711,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 128,
        column: 19,
        span: 3711..3712,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 128,
        column: 20,
        span: 3712..3713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 128,
        column: 24,
        span: 3713..3717,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 128,
        column: 26,
        span: 3718..3719,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 28,
        span: 3719..3721,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 128,
        column: 29,
        span: 3721..3722,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 31,
        span: 3723..3724,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 33,
        span: 3724..3726,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 34,
        span: 3726..3727,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 128,
        column: 36,
        span: 3728..3729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 128,
        column: 40,
        span: 3729..3733,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 128,
        column: 42,
        span: 3734..3735,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 44,
        span: 3735..3737,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 128,
        column: 45,
        span: 3737..3738,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 47,
        span: 3739..3740,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 49,
        span: 3740..3742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 50,
        span: 3742..3743,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 128,
        column: 52,
        span: 3744..3745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 128,
        column: 56,
        span: 3745..3749,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 128,
        column: 57,
        span: 3749..3750,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 59,
        span: 3751..3752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 61,
        span: 3752..3754,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 128,
        column: 62,
        span: 3754..3755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 63,
        span: 3755..3756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 129,
        column: 22,
        span: 3774..3778,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 129,
        column: 24,
        span: 3779..3780,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 26,
        span: 3780..3782,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 27,
        span: 3782..3783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 129,
        column: 32,
        span: 3784..3788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 33,
        span: 3788..3789,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 129,
        column: 35,
        span: 3790..3791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 37,
        span: 3790..3793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 38,
        span: 3793..3794,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 129,
        column: 40,
        span: 3795..3796,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 129,
        column: 41,
        span: 3796..3797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 42,
        span: 3797..3798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 130,
        column: 6,
        span: 3801..3804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 7,
        span: 3804..3805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 130,
        column: 8,
        span: 3805..3806,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 9,
        span: 3806..3807,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 130,
        column: 11,
        span: 3808..3809,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 130,
        column: 12,
        span: 3809..3810,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 130,
        column: 13,
        span: 3810..3811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 15,
        span: 3810..3813,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 130,
        column: 16,
        span: 3813..3814,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 18,
        span: 3815..3816,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 20,
        span: 3816..3818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 21,
        span: 3818..3819,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 130,
        column: 23,
        span: 3820..3821,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 130,
        column: 24,
        span: 3821..3822,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 25,
        span: 3821..3823,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 130,
        column: 26,
        span: 3823..3824,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 28,
        span: 3825..3826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 30,
        span: 3826..3828,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 31,
        span: 3828..3829,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 130,
        column: 33,
        span: 3830..3831,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 130,
        column: 34,
        span: 3831..3832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 35,
        span: 3831..3833,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 130,
        column: 36,
        span: 3833..3834,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 38,
        span: 3835..3836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 40,
        span: 3836..3838,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 130,
        column: 41,
        span: 3838..3839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 42,
        span: 3839..3840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 132,
        column: 4,
        span: 3844..3845,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 6,
        span: 3846..3847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 132,
        column: 12,
        span: 3848..3853,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 132,
        column: 13,
        span: 3853..3854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 132,
        column: 17,
        span: 3854..3858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 18,
        span: 3858..3859,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 132,
        column: 19,
        span: 3859..3860,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 132,
        column: 20,
        span: 3860..3861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 132,
        column: 24,
        span: 3861..3865,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 132,
        column: 25,
        span: 3865..3866,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 27,
        span: 3867..3868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 29,
        span: 3868..3870,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 30,
        span: 3870..3871,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 132,
        column: 32,
        span: 3872..3873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 132,
        column: 36,
        span: 3873..3877,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 132,
        column: 38,
        span: 3878..3879,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 40,
        span: 3879..3881,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 132,
        column: 41,
        span: 3881..3882,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 43,
        span: 3883..3884,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 45,
        span: 3884..3886,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 46,
        span: 3886..3887,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 132,
        column: 48,
        span: 3888..3889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 132,
        column: 52,
        span: 3889..3893,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 132,
        column: 54,
        span: 3894..3895,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 56,
        span: 3895..3897,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 132,
        column: 57,
        span: 3897..3898,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 59,
        span: 3899..3900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 61,
        span: 3900..3902,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 132,
        column: 62,
        span: 3902..3903,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 63,
        span: 3903..3904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 133,
        column: 22,
        span: 3922..3926,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 23,
        span: 3926..3927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 133,
        column: 28,
        span: 3928..3932,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 133,
        column: 30,
        span: 3933..3934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
        column: 32,
        span: 3934..3936,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 33,
        span: 3936..3937,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 133,
        column: 35,
        span: 3938..3939,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
        column: 37,
        span: 3938..3941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 38,
        span: 3941..3942,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 133,
        column: 40,
        span: 3943..3944,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 133,
        column: 41,
        span: 3944..3945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 42,
        span: 3945..3946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 134,
        column: 6,
        span: 3949..3952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 7,
        span: 3952..3953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
        column: 8,
        span: 3953..3954,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 9,
        span: 3954..3955,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 134,
        column: 11,
        span: 3956..3957,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 134,
        column: 12,
        span: 3957..3958,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 134,
        column: 13,
        span: 3958..3959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 15,
        span: 3958..3961,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 134,
        column: 16,
        span: 3961..3962,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 18,
        span: 3963..3964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 20,
        span: 3964..3966,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 21,
        span: 3966..3967,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 134,
        column: 23,
        span: 3968..3969,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 134,
        column: 24,
        span: 3969..3970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 25,
        span: 3969..3971,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 134,
        column: 26,
        span: 3971..3972,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 28,
        span: 3973..3974,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 30,
        span: 3974..3976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 31,
        span: 3976..3977,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 134,
        column: 33,
        span: 3978..3979,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 134,
        column: 34,
        span: 3979..3980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 35,
        span: 3979..3981,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 134,
        column: 36,
        span: 3981..3982,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 38,
        span: 3983..3984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 40,
        span: 3984..3986,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 134,
        column: 41,
        span: 3986..3987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 42,
        span: 3987..3988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 136,
        column: 4,
        span: 3992..3993,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
        column: 6,
        span: 3994..3995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 136,
        column: 12,
        span: 3996..4001,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 136,
        column: 13,
        span: 4001..4002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 136,
        column: 17,
        span: 4002..4006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 18,
        span: 4006..4007,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 136,
        column: 19,
        span: 4007..4008,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 21,
        span: 4007..4010,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 136,
        column: 22,
        span: 4010..4011,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 23,
        span: 4011..4012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 25,
        span: 4012..4014,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 26,
        span: 4014..4015,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 28,
        span: 4015..4017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 29,
        span: 4017..4018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 136,
        column: 34,
        span: 4019..4023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 35,
        span: 4023..4024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 137,
        column: 6,
        span: 4027..4030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 7,
        span: 4030..4031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 137,
        column: 8,
        span: 4031..4032,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 9,
        span: 4032..4033,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 137,
        column: 11,
        span: 4034..4035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 13,
        span: 4034..4037,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 14,
        span: 4037..4038,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 137,
        column: 16,
        span: 4039..4040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 137,
        column: 20,
        span: 4040..4044,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 137,
        column: 21,
        span: 4044..4045,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 23,
        span: 4046..4047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 26,
        span: 4047..4050,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 137,
        column: 27,
        span: 4050..4051,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 28,
        span: 4051..4052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 139,
        column: 4,
        span: 4056..4057,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 6,
        span: 4058..4059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 139,
        column: 12,
        span: 4060..4065,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 139,
        column: 13,
        span: 4065..4066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 139,
        column: 17,
        span: 4066..4070,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 18,
        span: 4070..4071,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 139,
        column: 19,
        span: 4071..4072,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 139,
        column: 20,
        span: 4072..4073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 139,
        column: 24,
        span: 4073..4077,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 139,
        column: 25,
        span: 4077..4078,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 27,
        span: 4079..4080,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 31,
        span: 4080..4084,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 139,
        column: 32,
        span: 4084..4085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 33,
        span: 4085..4086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 139,
        column: 38,
        span: 4087..4091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 39,
        span: 4091..4092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 139,
        column: 44,
        span: 4093..4097,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 45,
        span: 4097..4098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 139,
        column: 50,
        span: 4099..4103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 51,
        span: 4103..4104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 140,
        column: 6,
        span: 4107..4110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 7,
        span: 4110..4111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
        column: 8,
        span: 4111..4112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 9,
        span: 4112..4113,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 140,
        column: 11,
        span: 4114..4115,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
        column: 12,
        span: 4115..4116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 140,
        column: 16,
        span: 4116..4120,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
        column: 17,
        span: 4120..4121,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 140,
        column: 19,
        span: 4122..4123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 23,
        span: 4123..4127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 24,
        span: 4127..4128,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
        column: 26,
        span: 4129..4130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 140,
        column: 30,
        span: 4130..4134,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
        column: 31,
        span: 4134..4135,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 140,
        column: 33,
        span: 4136..4137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 37,
        span: 4137..4141,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 140,
        column: 38,
        span: 4141..4142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 39,
        span: 4142..4143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 142,
        column: 4,
        span: 4147..4148,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
        column: 6,
        span: 4149..4150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 142,
        column: 12,
        span: 4151..4156,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
        column: 13,
        span: 4156..4157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 142,
        column: 17,
        span: 4157..4161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 18,
        span: 4161..4162,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 142,
        column: 19,
        span: 4162..4163,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 142,
        column: 20,
        span: 4163..4164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 142,
        column: 24,
        span: 4164..4168,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 142,
        column: 25,
        span: 4168..4169,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
        column: 27,
        span: 4170..4171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 31,
        span: 4171..4175,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 142,
        column: 32,
        span: 4175..4176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 33,
        span: 4176..4177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 142,
        column: 38,
        span: 4178..4182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 39,
        span: 4182..4183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 142,
        column: 44,
        span: 4184..4188,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 45,
        span: 4188..4189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 142,
        column: 50,
        span: 4190..4194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 51,
        span: 4194..4195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 143,
        column: 6,
        span: 4198..4201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 7,
        span: 4201..4202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 143,
        column: 8,
        span: 4202..4203,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 9,
        span: 4203..4204,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 143,
        column: 11,
        span: 4205..4206,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 143,
        column: 12,
        span: 4206..4207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 143,
        column: 16,
        span: 4207..4211,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 143,
        column: 17,
        span: 4211..4212,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 143,
        column: 19,
        span: 4213..4214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 23,
        span: 4214..4218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 24,
        span: 4218..4219,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 143,
        column: 26,
        span: 4220..4221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 143,
        column: 30,
        span: 4221..4225,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 143,
        column: 31,
        span: 4225..4226,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 143,
        column: 33,
        span: 4227..4228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 37,
        span: 4228..4232,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 143,
        column: 38,
        span: 4232..4233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 39,
        span: 4233..4234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 145,
        column: 4,
        span: 4238..4239,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 6,
        span: 4240..4241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 145,
        column: 19,
        span: 4242..4254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 20,
        span: 4254..4255,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 145,
        column: 21,
        span: 4255..4256,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 145,
        column: 22,
        span: 4256..4257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 23,
        span: 4257..4258,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 145,
        column: 25,
        span: 4259..4260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 146,
        column: 16,
        span: 4269..4276,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
        column: 18,
        span: 4277..4278,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 146,
        column: 27,
        span: 4279..4287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 29,
        span: 4288..4289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 146,
        column: 30,
        span: 4289..4290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 31,
        span: 4290..4291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 146,
        column: 32,
        span: 4291..4292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 33,
        span: 4292..4293,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 146,
        column: 40,
        span: 4294..4300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 146,
        column: 42,
        span: 4301..4302,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 146,
        column: 44,
        span: 4303..4304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 47,
        span: 4304..4307,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 146,
        column: 51,
        span: 4308..4311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 52,
        span: 4311..4312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 147,
        column: 19,
        span: 4321..4331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 21,
        span: 4332..4333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 147,
        column: 27,
        span: 4334..4339,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 147,
        column: 28,
        span: 4339..4340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 29,
        span: 4340..4341,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 148,
        column: 8,
        span: 4344..4349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 148,
        column: 10,
        span: 4350..4351,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 148,
        column: 12,
        span: 4352..4353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 148,
        column: 18,
        span: 4354..4359,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 148,
        column: 19,
        span: 4359..4360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 148,
        column: 23,
        span: 4360..4364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 24,
        span: 4364..4365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 148,
        column: 25,
        span: 4365..4366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 26,
        span: 4366..4367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 28,
        span: 4367..4369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 29,
        span: 4369..4370,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 32,
        span: 4370..4373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 33,
        span: 4373..4374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 35,
        span: 4374..4376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 36,
        span: 4376..4377,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 148,
        column: 38,
        span: 4378..4379,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 148,
        column: 39,
        span: 4379..4380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 40,
        span: 4380..4381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 149,
        column: 6,
        span: 4384..4387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 7,
        span: 4387..4388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 149,
        column: 8,
        span: 4388..4389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 9,
        span: 4389..4390,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 149,
        column: 11,
        span: 4391..4392,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 149,
        column: 12,
        span: 4392..4393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 13,
        span: 4393..4394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 150,
        column: 6,
        span: 4397..4400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 7,
        span: 4400..4401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 150,
        column: 8,
        span: 4401..4402,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 9,
        span: 4402..4403,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 150,
        column: 11,
        span: 4404..4405,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 150,
        column: 14,
        span: 4405..4408,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 15,
        span: 4408..4409,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 150,
        column: 18,
        span: 4409..4412,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 19,
        span: 4412..4413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 21,
        span: 4412..4415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 22,
        span: 4415..4416,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 24,
        span: 4415..4418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 25,
        span: 4418..4419,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 27,
        span: 4418..4421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 28,
        span: 4421..4422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 30,
        span: 4421..4424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 31,
        span: 4424..4425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 33,
        span: 4424..4427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 34,
        span: 4427..4428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 36,
        span: 4427..4430,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 37,
        span: 4430..4431,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "70",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 39,
        span: 4430..4433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 40,
        span: 4433..4434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 42,
        span: 4433..4436,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 43,
        span: 4436..4437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 45,
        span: 4436..4439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 46,
        span: 4439..4440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 49,
        span: 4439..4443,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 150,
        column: 50,
        span: 4443..4444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 51,
        span: 4444..4445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 152,
        column: 4,
        span: 4449..4450,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 152,
        column: 6,
        span: 4451..4452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 152,
        column: 19,
        span: 4453..4465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 20,
        span: 4465..4466,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 152,
        column: 21,
        span: 4466..4467,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 152,
        column: 23,
        span: 4467..4469,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 152,
        column: 24,
        span: 4469..4470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 25,
        span: 4470..4471,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 152,
        column: 27,
        span: 4472..4473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 153,
        column: 16,
        span: 4482..4489,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 153,
        column: 18,
        span: 4490..4491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 153,
        column: 24,
        span: 4492..4497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 25,
        span: 4497..4498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 154,
        column: 19,
        span: 4507..4517,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 154,
        column: 21,
        span: 4518..4519,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 154,
        column: 30,
        span: 4520..4528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 32,
        span: 4529..4530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 154,
        column: 33,
        span: 4530..4531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 34,
        span: 4531..4532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 154,
        column: 35,
        span: 4532..4533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 36,
        span: 4533..4534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 154,
        column: 37,
        span: 4534..4535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 38,
        span: 4535..4536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 155,
        column: 12,
        span: 4547..4548,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 155,
        column: 13,
        span: 4548..4549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 14,
        span: 4548..4550,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 155,
        column: 15,
        span: 4550..4551,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 155,
        column: 17,
        span: 4552..4553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 155,
        column: 24,
        span: 4554..4560,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 25,
        span: 4560..4561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 155,
        column: 31,
        span: 4561..4567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 32,
        span: 4567..4568,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s(%d,%d)\"",
        ),
        line: 155,
        column: 43,
        span: 4568..4579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 44,
        span: 4579..4580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 155,
        column: 46,
        span: 4581..4582,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 155,
        column: 47,
        span: 4582..4583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 48,
        span: 4582..4584,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 155,
        column: 49,
        span: 4584..4585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 50,
        span: 4585..4586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 155,
        column: 52,
        span: 4587..4588,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 53,
        span: 4588..4589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 155,
        column: 55,
        span: 4590..4591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 56,
        span: 4591..4592,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 156,
        column: 10,
        span: 4599..4602,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 156,
        column: 11,
        span: 4602..4603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 12,
        span: 4603..4604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 157,
        column: 8,
        span: 4607..4612,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 157,
        column: 9,
        span: 4612..4613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 157,
        column: 13,
        span: 4613..4617,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 14,
        span: 4617..4618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 157,
        column: 15,
        span: 4618..4619,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 16,
        span: 4619..4620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 19,
        span: 4620..4623,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 20,
        span: 4623..4624,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 23,
        span: 4624..4627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 24,
        span: 4627..4628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 26,
        span: 4628..4630,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 27,
        span: 4630..4631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 157,
        column: 29,
        span: 4632..4633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 30,
        span: 4633..4634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 158,
        column: 9,
        span: 4637..4643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 10,
        span: 4643..4644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 158,
        column: 11,
        span: 4644..4645,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 158,
        column: 12,
        span: 4645..4646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 13,
        span: 4645..4647,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 158,
        column: 14,
        span: 4647..4648,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 158,
        column: 17,
        span: 4649..4651,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(3,100)(4,110)(5,120)(6,130)\"",
        ),
        line: 158,
        column: 48,
        span: 4652..4682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 49,
        span: 4682..4683,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 159,
        column: 8,
        span: 4686..4691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        line: 159,
        column: 13,
        span: 4692..4696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 14,
        span: 4696..4697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 159,
        column: 18,
        span: 4698..4701,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 159,
        column: 20,
        span: 4702..4703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 159,
        column: 26,
        span: 4704..4709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 27,
        span: 4709..4710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 159,
        column: 32,
        span: 4710..4715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
        column: 33,
        span: 4715..4716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 159,
        column: 37,
        span: 4716..4720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 38,
        span: 4720..4721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 159,
        column: 40,
        span: 4722..4723,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 41,
        span: 4723..4724,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 44,
        span: 4724..4727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 45,
        span: 4727..4728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 48,
        span: 4728..4731,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 49,
        span: 4731..4732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 51,
        span: 4732..4734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 52,
        span: 4734..4735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 159,
        column: 54,
        span: 4736..4737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 55,
        span: 4737..4738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 160,
        column: 9,
        span: 4741..4747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 10,
        span: 4747..4748,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 160,
        column: 13,
        span: 4748..4751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        line: 160,
        column: 18,
        span: 4752..4756,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 160,
        column: 22,
        span: 4757..4760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 160,
        column: 26,
        span: 4761..4764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 160,
        column: 29,
        span: 4765..4767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 160,
        column: 31,
        span: 4768..4769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 32,
        span: 4769..4770,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 161,
        column: 0,
        span: 4771..4774,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 163,
        column: 0,
        span: 4776..4778,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 166,
        column: 8,
        span: 4873..4878,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 166,
        column: 17,
        span: 4879..4887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmove",
        ),
        line: 166,
        column: 27,
        span: 4888..4897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 29,
        span: 4898..4899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 166,
        column: 30,
        span: 4899..4900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 31,
        span: 4900..4901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 166,
        column: 33,
        span: 4902..4903,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 34,
        span: 4903..4904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 166,
        column: 36,
        span: 4905..4906,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 37,
        span: 4906..4907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 166,
        column: 39,
        span: 4908..4909,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 40,
        span: 4909..4910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 166,
        column: 42,
        span: 4911..4912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 43,
        span: 4912..4913,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 167,
        column: 10,
        span: 4918..4923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos1",
        ),
        line: 167,
        column: 15,
        span: 4924..4928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
        column: 16,
        span: 4928..4929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos2",
        ),
        line: 167,
        column: 0,
        span: 4930..4934,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 168,
        column: 10,
        span: 4939..4944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 168,
        column: 12,
        span: 4945..4946,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 168,
        column: 14,
        span: 4947..4948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 168,
        column: 27,
        span: 4949..4961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 28,
        span: 4961..4962,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 168,
        column: 29,
        span: 4962..4963,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 168,
        column: 30,
        span: 4963..4964,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 31,
        span: 4964..4965,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 168,
        column: 33,
        span: 4966..4967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 169,
        column: 24,
        span: 4984..4991,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 169,
        column: 26,
        span: 4992..4993,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 169,
        column: 35,
        span: 4994..5002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 37,
        span: 5003..5004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 169,
        column: 38,
        span: 5004..5005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 39,
        span: 5005..5006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 169,
        column: 40,
        span: 5006..5007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 41,
        span: 5007..5008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos1",
        ),
        line: 169,
        column: 46,
        span: 5009..5013,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 169,
        column: 48,
        span: 5014..5015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 169,
        column: 50,
        span: 5016..5017,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 169,
        column: 54,
        span: 5018..5021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 55,
        span: 5021..5022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 170,
        column: 27,
        span: 5039..5049,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 170,
        column: 29,
        span: 5050..5051,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 170,
        column: 38,
        span: 5052..5060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 40,
        span: 5061..5062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 170,
        column: 41,
        span: 5062..5063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 42,
        span: 5063..5064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 170,
        column: 43,
        span: 5064..5065,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 44,
        span: 5065..5066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos2",
        ),
        line: 170,
        column: 49,
        span: 5067..5071,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 170,
        column: 51,
        span: 5072..5073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 170,
        column: 53,
        span: 5074..5075,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 170,
        column: 54,
        span: 5075..5076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 170,
        column: 60,
        span: 5077..5082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 61,
        span: 5082..5083,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 62,
        span: 5083..5084,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 170,
        column: 66,
        span: 5085..5088,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 67,
        span: 5088..5089,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 170,
        column: 69,
        span: 5090..5091,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 70,
        span: 5091..5092,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 171,
        column: 10,
        span: 5097..5102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 171,
        column: 13,
        span: 5103..5105,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 14,
        span: 5105..5106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 171,
        column: 18,
        span: 5107..5110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 171,
        column: 20,
        span: 5111..5112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 171,
        column: 26,
        span: 5113..5118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 27,
        span: 5118..5119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 171,
        column: 32,
        span: 5119..5124,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 171,
        column: 33,
        span: 5124..5125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 171,
        column: 37,
        span: 5125..5129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 38,
        span: 5129..5130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 171,
        column: 40,
        span: 5131..5132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 41,
        span: 5132..5133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 171,
        column: 43,
        span: 5134..5135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 44,
        span: 5135..5136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 171,
        column: 46,
        span: 5137..5138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 47,
        span: 5138..5139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 171,
        column: 49,
        span: 5140..5141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 50,
        span: 5141..5142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 172,
        column: 11,
        span: 5147..5153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 12,
        span: 5153..5154,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 172,
        column: 15,
        span: 5154..5157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 172,
        column: 18,
        span: 5158..5160,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 172,
        column: 22,
        span: 5161..5164,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 172,
        column: 26,
        span: 5165..5168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 172,
        column: 30,
        span: 5169..5172,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 172,
        column: 34,
        span: 5173..5176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos1",
        ),
        line: 172,
        column: 39,
        span: 5177..5181,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 42,
        span: 5182..5184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 172,
        column: 44,
        span: 5185..5186,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 172,
        column: 48,
        span: 5187..5190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos2",
        ),
        line: 172,
        column: 53,
        span: 5191..5195,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 56,
        span: 5196..5198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 172,
        column: 58,
        span: 5199..5200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 59,
        span: 5200..5201,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 173,
        column: 0,
        span: 5204..5207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmove",
        ),
        line: 174,
        column: 12,
        span: 5210..5219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 13,
        span: 5219..5220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 14,
        span: 5219..5221,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 15,
        span: 5221..5222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 174,
        column: 20,
        span: 5223..5227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 21,
        span: 5227..5228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 23,
        span: 5228..5230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 24,
        span: 5230..5231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 26,
        span: 5231..5233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 27,
        span: 5233..5234,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 29,
        span: 5234..5236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 30,
        span: 5236..5237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmove",
        ),
        line: 175,
        column: 12,
        span: 5240..5249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 13,
        span: 5249..5250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 14,
        span: 5249..5251,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 15,
        span: 5251..5252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 175,
        column: 20,
        span: 5253..5257,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 175,
        column: 22,
        span: 5258..5259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 24,
        span: 5259..5261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 25,
        span: 5261..5262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 27,
        span: 5262..5264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 28,
        span: 5264..5265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 175,
        column: 33,
        span: 5266..5270,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 175,
        column: 35,
        span: 5271..5272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 37,
        span: 5272..5274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 38,
        span: 5274..5275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 175,
        column: 43,
        span: 5276..5280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 44,
        span: 5280..5281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmove",
        ),
        line: 176,
        column: 12,
        span: 5284..5293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 13,
        span: 5293..5294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 176,
        column: 17,
        span: 5294..5298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 18,
        span: 5298..5299,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 176,
        column: 20,
        span: 5300..5301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 21,
        span: 5300..5302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 22,
        span: 5302..5303,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 176,
        column: 24,
        span: 5304..5305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 25,
        span: 5304..5306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 26,
        span: 5306..5307,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 176,
        column: 28,
        span: 5308..5309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 29,
        span: 5308..5310,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 30,
        span: 5310..5311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 176,
        column: 35,
        span: 5312..5316,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 176,
        column: 37,
        span: 5317..5318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 39,
        span: 5318..5320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 40,
        span: 5320..5321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmove",
        ),
        line: 177,
        column: 12,
        span: 5324..5333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 13,
        span: 5333..5334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 177,
        column: 17,
        span: 5334..5338,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 177,
        column: 19,
        span: 5339..5340,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 21,
        span: 5340..5342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 22,
        span: 5342..5343,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 177,
        column: 24,
        span: 5344..5345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 25,
        span: 5344..5346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 26,
        span: 5346..5347,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 177,
        column: 28,
        span: 5348..5349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 29,
        span: 5348..5350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 30,
        span: 5350..5351,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 177,
        column: 32,
        span: 5352..5353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 33,
        span: 5352..5354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 34,
        span: 5354..5355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 177,
        column: 39,
        span: 5356..5360,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 177,
        column: 41,
        span: 5361..5362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 43,
        span: 5362..5364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 44,
        span: 5364..5365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmove",
        ),
        line: 178,
        column: 12,
        span: 5368..5377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 13,
        span: 5377..5378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 178,
        column: 17,
        span: 5378..5382,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 18,
        span: 5382..5383,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 178,
        column: 20,
        span: 5384..5385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 21,
        span: 5384..5386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 22,
        span: 5386..5387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 24,
        span: 5387..5389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 25,
        span: 5389..5390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 178,
        column: 30,
        span: 5391..5395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 31,
        span: 5395..5396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 33,
        span: 5396..5398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 34,
        span: 5398..5399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmove",
        ),
        line: 179,
        column: 12,
        span: 5422..5431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 13,
        span: 5431..5432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 179,
        column: 17,
        span: 5432..5436,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 179,
        column: 19,
        span: 5437..5438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 21,
        span: 5438..5440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 22,
        span: 5440..5441,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 179,
        column: 24,
        span: 5442..5443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 25,
        span: 5442..5444,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 26,
        span: 5444..5445,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 28,
        span: 5445..5447,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 29,
        span: 5447..5448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 179,
        column: 34,
        span: 5449..5453,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 179,
        column: 36,
        span: 5454..5455,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 38,
        span: 5455..5457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 39,
        span: 5457..5458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 41,
        span: 5458..5460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 42,
        span: 5460..5461,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
        column: 0,
        span: 5482..5485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 182,
        column: 11,
        span: 5487..5497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 12,
        span: 5497..5498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many\"",
        ),
        line: 182,
        column: 22,
        span: 5498..5508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 23,
        span: 5508..5509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 182,
        column: 29,
        span: 5510..5515,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 30,
        span: 5515..5516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 182,
        column: 34,
        span: 5516..5520,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 35,
        span: 5520..5521,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 182,
        column: 37,
        span: 5522..5523,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 182,
        column: 38,
        span: 5523..5524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 39,
        span: 5524..5525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 41,
        span: 5525..5527,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 42,
        span: 5527..5528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 182,
        column: 47,
        span: 5529..5533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 48,
        span: 5533..5534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 50,
        span: 5534..5536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 51,
        span: 5536..5537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 183,
        column: 11,
        span: 5538..5548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 12,
        span: 5548..5549,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many\"",
        ),
        line: 183,
        column: 22,
        span: 5549..5559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 23,
        span: 5559..5560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 183,
        column: 29,
        span: 5561..5566,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 183,
        column: 30,
        span: 5566..5567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 183,
        column: 34,
        span: 5567..5571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 35,
        span: 5571..5572,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 183,
        column: 37,
        span: 5573..5574,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 183,
        column: 38,
        span: 5574..5575,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 39,
        span: 5575..5576,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 183,
        column: 41,
        span: 5577..5578,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 42,
        span: 5577..5579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 43,
        span: 5579..5580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 183,
        column: 48,
        span: 5581..5585,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 183,
        column: 50,
        span: 5586..5587,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 52,
        span: 5587..5589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 53,
        span: 5589..5590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 55,
        span: 5590..5592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 56,
        span: 5592..5593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 184,
        column: 11,
        span: 5594..5604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 12,
        span: 5604..5605,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many\"",
        ),
        line: 184,
        column: 22,
        span: 5605..5615,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 23,
        span: 5615..5616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 184,
        column: 29,
        span: 5617..5622,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 184,
        column: 30,
        span: 5622..5623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 184,
        column: 34,
        span: 5623..5627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 35,
        span: 5627..5628,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 184,
        column: 37,
        span: 5629..5630,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 184,
        column: 38,
        span: 5630..5631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 39,
        span: 5631..5632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 184,
        column: 44,
        span: 5633..5637,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 45,
        span: 5637..5638,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 184,
        column: 47,
        span: 5639..5640,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 48,
        span: 5639..5641,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 49,
        span: 5641..5642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 51,
        span: 5642..5644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 52,
        span: 5644..5645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 185,
        column: 11,
        span: 5646..5656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 12,
        span: 5656..5657,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many\"",
        ),
        line: 185,
        column: 22,
        span: 5657..5667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 23,
        span: 5667..5668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 185,
        column: 29,
        span: 5669..5674,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 30,
        span: 5674..5675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 185,
        column: 34,
        span: 5675..5679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 35,
        span: 5679..5680,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 185,
        column: 37,
        span: 5681..5682,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 185,
        column: 38,
        span: 5682..5683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 39,
        span: 5683..5684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 185,
        column: 44,
        span: 5685..5689,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 45,
        span: 5689..5690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 185,
        column: 50,
        span: 5691..5695,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 51,
        span: 5695..5696,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 53,
        span: 5696..5698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 54,
        span: 5698..5699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 186,
        column: 11,
        span: 5700..5710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 12,
        span: 5710..5711,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wrap around\"",
        ),
        line: 186,
        column: 25,
        span: 5711..5724,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 26,
        span: 5724..5725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 186,
        column: 32,
        span: 5726..5731,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 33,
        span: 5731..5732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 186,
        column: 37,
        span: 5732..5736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 38,
        span: 5736..5737,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 186,
        column: 40,
        span: 5738..5739,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 186,
        column: 41,
        span: 5739..5740,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 42,
        span: 5740..5741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 44,
        span: 5741..5743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 45,
        span: 5743..5744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 186,
        column: 50,
        span: 5745..5749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 51,
        span: 5749..5750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 53,
        span: 5750..5752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 54,
        span: 5752..5753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 187,
        column: 11,
        span: 5754..5764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 12,
        span: 5764..5765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wrap around\"",
        ),
        line: 187,
        column: 25,
        span: 5765..5778,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 26,
        span: 5778..5779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 187,
        column: 32,
        span: 5780..5785,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 33,
        span: 5785..5786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 187,
        column: 37,
        span: 5786..5790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 38,
        span: 5790..5791,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 187,
        column: 40,
        span: 5792..5793,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 187,
        column: 41,
        span: 5793..5794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 42,
        span: 5794..5795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 44,
        span: 5795..5797,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 45,
        span: 5797..5798,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 47,
        span: 5798..5800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 48,
        span: 5800..5801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 187,
        column: 53,
        span: 5802..5806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 54,
        span: 5806..5807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 188,
        column: 11,
        span: 5808..5818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 12,
        span: 5818..5819,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wrap around\"",
        ),
        line: 188,
        column: 25,
        span: 5819..5832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 26,
        span: 5832..5833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 188,
        column: 32,
        span: 5834..5839,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
        column: 33,
        span: 5839..5840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        line: 188,
        column: 37,
        span: 5840..5844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 38,
        span: 5844..5845,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 188,
        column: 40,
        span: 5846..5847,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 188,
        column: 41,
        span: 5847..5848,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 42,
        span: 5848..5849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minI",
        ),
        line: 188,
        column: 47,
        span: 5850..5854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 48,
        span: 5854..5855,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 188,
        column: 50,
        span: 5856..5857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 51,
        span: 5856..5858,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 52,
        span: 5858..5859,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 54,
        span: 5859..5861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 55,
        span: 5861..5862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 191,
        column: 6,
        span: 5865..5870,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing sort\"",
        ),
        line: 191,
        column: 20,
        span: 5870..5884,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 195,
        column: 6,
        span: 5906..5911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 195,
        column: 8,
        span: 5912..5913,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 10,
        span: 5914..5915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 195,
        column: 23,
        span: 5916..5928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 24,
        span: 5928..5929,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 195,
        column: 25,
        span: 5929..5930,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 195,
        column: 26,
        span: 5930..5931,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 27,
        span: 5931..5932,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 195,
        column: 29,
        span: 5933..5934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 195,
        column: 34,
        span: 5934..5939,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 36,
        span: 5940..5941,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 195,
        column: 45,
        span: 5942..5950,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 47,
        span: 5951..5952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 48,
        span: 5952..5953,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 195,
        column: 55,
        span: 5954..5960,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
        column: 57,
        span: 5961..5962,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 58,
        span: 5961..5963,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 195,
        column: 62,
        span: 5964..5967,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 195,
        column: 63,
        span: 5967..5968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 64,
        span: 5968..5969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 7,
        span: 5970..5976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 8,
        span: 5976..5977,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 196,
        column: 9,
        span: 5977..5978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 196,
        column: 10,
        span: 5978..5979,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 13,
        span: 5980..5982,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 196,
        column: 15,
        span: 5983..5984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 16,
        span: 5983..5985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 17,
        span: 5985..5986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 197,
        column: 6,
        span: 5987..5992,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 197,
        column: 7,
        span: 5992..5993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 197,
        column: 11,
        span: 5993..5997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 12,
        span: 5997..5998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 197,
        column: 13,
        span: 5998..5999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 197,
        column: 14,
        span: 5999..6000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 197,
        column: 20,
        span: 6001..6006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 21,
        span: 6006..6007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 198,
        column: 2,
        span: 6042..6043,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 4,
        span: 6044..6045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 198,
        column: 17,
        span: 6046..6058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 18,
        span: 6058..6059,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 198,
        column: 19,
        span: 6059..6060,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 198,
        column: 20,
        span: 6060..6061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 21,
        span: 6061..6062,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 198,
        column: 23,
        span: 6063..6064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 198,
        column: 28,
        span: 6064..6069,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 30,
        span: 6070..6071,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 198,
        column: 39,
        span: 6072..6080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 41,
        span: 6081..6082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 42,
        span: 6082..6083,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 198,
        column: 49,
        span: 6084..6090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxI",
        ),
        line: 198,
        column: 54,
        span: 6091..6095,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 198,
        column: 58,
        span: 6096..6099,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 198,
        column: 59,
        span: 6099..6100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 60,
        span: 6100..6101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 199,
        column: 11,
        span: 6102..6112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 12,
        span: 6112..6113,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too big\"",
        ),
        line: 199,
        column: 21,
        span: 6113..6122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 22,
        span: 6122..6123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 199,
        column: 28,
        span: 6124..6129,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
        column: 29,
        span: 6129..6130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 199,
        column: 33,
        span: 6130..6134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 34,
        span: 6134..6135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 199,
        column: 36,
        span: 6136..6137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 37,
        span: 6137..6138,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 202,
        column: 6,
        span: 6183..6188,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 202,
        column: 15,
        span: 6189..6197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 202,
        column: 21,
        span: 6198..6203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 23,
        span: 6204..6205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 202,
        column: 24,
        span: 6205..6206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 25,
        span: 6206..6207,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 203,
        column: 8,
        span: 6210..6215,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 203,
        column: 17,
        span: 6216..6224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 203,
        column: 19,
        span: 6225..6226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 20,
        span: 6226..6227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 203,
        column: 21,
        span: 6227..6228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 22,
        span: 6228..6229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 203,
        column: 24,
        span: 6230..6231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 25,
        span: 6231..6232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 32,
        span: 6233..6239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 33,
        span: 6239..6240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 203,
        column: 34,
        span: 6240..6241,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 203,
        column: 38,
        span: 6242..6245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 203,
        column: 40,
        span: 6246..6247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 41,
        span: 6247..6248,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 203,
        column: 42,
        span: 6248..6249,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 203,
        column: 49,
        span: 6250..6256,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 203,
        column: 54,
        span: 6257..6261,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 203,
        column: 0,
        span: 6262..6265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 204,
        column: 13,
        span: 6268..6278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 14,
        span: 6278..6279,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid order function\"",
        ),
        line: 204,
        column: 38,
        span: 6279..6303,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 39,
        span: 6303..6304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 204,
        column: 45,
        span: 6305..6310,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 46,
        span: 6310..6311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 204,
        column: 50,
        span: 6311..6315,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 51,
        span: 6315..6316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 204,
        column: 53,
        span: 6317..6318,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 54,
        span: 6318..6319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 204,
        column: 56,
        span: 6320..6321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 57,
        span: 6321..6322,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 205,
        column: 0,
        span: 6323..6326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 207,
        column: 6,
        span: 6328..6333,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 207,
        column: 7,
        span: 6333..6334,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 8,
        span: 6333..6335,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 9,
        span: 6335..6336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 10,
        span: 6335..6337,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 11,
        span: 6337..6338,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 12,
        span: 6337..6339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 13,
        span: 6339..6340,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 14,
        span: 6339..6341,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 207,
        column: 15,
        span: 6341..6342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 208,
        column: 6,
        span: 6343..6348,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 208,
        column: 7,
        span: 6348..6349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 8,
        span: 6348..6350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 9,
        span: 6350..6351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 10,
        span: 6350..6352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 11,
        span: 6352..6353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 12,
        span: 6352..6354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 13,
        span: 6354..6355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 14,
        span: 6354..6356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 15,
        span: 6356..6357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 16,
        span: 6356..6358,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 208,
        column: 17,
        span: 6358..6359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 209,
        column: 6,
        span: 6360..6365,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 209,
        column: 7,
        span: 6365..6366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 8,
        span: 6365..6367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 9,
        span: 6367..6368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 10,
        span: 6367..6369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 11,
        span: 6369..6370,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 12,
        span: 6369..6371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 13,
        span: 6371..6372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 14,
        span: 6371..6373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 15,
        span: 6373..6374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 16,
        span: 6373..6375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 17,
        span: 6375..6376,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 18,
        span: 6375..6377,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 209,
        column: 19,
        span: 6377..6378,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 212,
        column: 9,
        span: 6381..6389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 212,
        column: 15,
        span: 6390..6395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 17,
        span: 6396..6397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 212,
        column: 18,
        span: 6397..6398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 19,
        span: 6398..6399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 212,
        column: 21,
        span: 6400..6401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 22,
        span: 6401..6402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 213,
        column: 4,
        span: 6405..6406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 213,
        column: 6,
        span: 6407..6408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 213,
        column: 8,
        span: 6409..6410,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 213,
        column: 11,
        span: 6411..6413,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 213,
        column: 20,
        span: 6414..6422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 22,
        span: 6423..6424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 213,
        column: 23,
        span: 6424..6425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 24,
        span: 6425..6426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 213,
        column: 25,
        span: 6426..6427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 26,
        span: 6427..6428,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 213,
        column: 33,
        span: 6429..6435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 213,
        column: 35,
        span: 6436..6437,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 213,
        column: 36,
        span: 6437..6438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 213,
        column: 37,
        span: 6438..6439,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 213,
        column: 41,
        span: 6440..6443,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 213,
        column: 42,
        span: 6443..6444,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 214,
        column: 6,
        span: 6447..6450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 214,
        column: 8,
        span: 6451..6452,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 214,
        column: 10,
        span: 6453..6454,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 214,
        column: 12,
        span: 6455..6456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 214,
        column: 13,
        span: 6456..6457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 14,
        span: 6457..6458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 16,
        span: 6458..6460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 17,
        span: 6460..6461,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 214,
        column: 19,
        span: 6462..6463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 20,
        span: 6462..6464,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 214,
        column: 0,
        span: 6465..6467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 215,
        column: 11,
        span: 6472..6478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 12,
        span: 6478..6479,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 215,
        column: 15,
        span: 6479..6482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 215,
        column: 17,
        span: 6483..6484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 18,
        span: 6484..6485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 215,
        column: 19,
        span: 6485..6486,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 215,
        column: 20,
        span: 6486..6487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 215,
        column: 21,
        span: 6487..6488,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 215,
        column: 22,
        span: 6488..6489,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 23,
        span: 6489..6490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 215,
        column: 25,
        span: 6491..6492,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 215,
        column: 26,
        span: 6492..6493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 215,
        column: 27,
        span: 6493..6494,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 215,
        column: 28,
        span: 6494..6495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 29,
        span: 6494..6496,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 215,
        column: 30,
        span: 6496..6497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 31,
        span: 6497..6498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 32,
        span: 6498..6499,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 216,
        column: 0,
        span: 6502..6505,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 217,
        column: 0,
        span: 6506..6509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 219,
        column: 2,
        span: 6511..6512,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 219,
        column: 4,
        span: 6513..6514,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 219,
        column: 6,
        span: 6515..6516,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Jan\"",
        ),
        line: 219,
        column: 11,
        span: 6516..6521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 12,
        span: 6521..6522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Feb\"",
        ),
        line: 219,
        column: 18,
        span: 6523..6528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 19,
        span: 6528..6529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Mar\"",
        ),
        line: 219,
        column: 25,
        span: 6530..6535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 26,
        span: 6535..6536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Apr\"",
        ),
        line: 219,
        column: 32,
        span: 6537..6542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 33,
        span: 6542..6543,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"May\"",
        ),
        line: 219,
        column: 39,
        span: 6544..6549,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 40,
        span: 6549..6550,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Jun\"",
        ),
        line: 219,
        column: 46,
        span: 6551..6556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 47,
        span: 6556..6557,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Jul\"",
        ),
        line: 219,
        column: 53,
        span: 6558..6563,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 54,
        span: 6563..6564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Aug\"",
        ),
        line: 219,
        column: 60,
        span: 6565..6570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 61,
        span: 6570..6571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Sep\"",
        ),
        line: 219,
        column: 67,
        span: 6572..6577,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 68,
        span: 6577..6578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Oct\"",
        ),
        line: 220,
        column: 11,
        span: 6584..6589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 12,
        span: 6589..6590,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Nov\"",
        ),
        line: 220,
        column: 18,
        span: 6591..6596,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 19,
        span: 6596..6597,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Dec\"",
        ),
        line: 220,
        column: 25,
        span: 6598..6603,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 220,
        column: 26,
        span: 6603..6604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 222,
        column: 6,
        span: 6606..6611,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 7,
        span: 6611..6612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 222,
        column: 11,
        span: 6612..6616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 12,
        span: 6616..6617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 222,
        column: 13,
        span: 6617..6618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 14,
        span: 6618..6619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 223,
        column: 6,
        span: 6620..6625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 7,
        span: 6625..6626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 8,
        span: 6626..6627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 9,
        span: 6627..6628,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 225,
        column: 9,
        span: 6630..6638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 225,
        column: 14,
        span: 6639..6643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 16,
        span: 6644..6645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 225,
        column: 17,
        span: 6645..6646,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 18,
        span: 6646..6647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 225,
        column: 20,
        span: 6648..6649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 21,
        span: 6649..6650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 226,
        column: 4,
        span: 6653..6654,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 6,
        span: 6655..6656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 226,
        column: 8,
        span: 6657..6658,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 226,
        column: 11,
        span: 6659..6661,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 226,
        column: 13,
        span: 6662..6663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 226,
        column: 0,
        span: 6663..6664,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 227,
        column: 5,
        span: 6667..6669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 227,
        column: 7,
        span: 6670..6671,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 10,
        span: 6672..6674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 12,
        span: 6674..6676,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 227,
        column: 0,
        span: 6677..6681,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 228,
        column: 10,
        span: 6686..6691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 228,
        column: 12,
        span: 6692..6693,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 14,
        span: 6694..6695,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 228,
        column: 16,
        span: 6696..6697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 228,
        column: 22,
        span: 6697..6703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 23,
        span: 6703..6704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 228,
        column: 24,
        span: 6704..6705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 25,
        span: 6705..6706,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 228,
        column: 26,
        span: 6706..6707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 229,
        column: 10,
        span: 6712..6717,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 229,
        column: 11,
        span: 6717..6718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 229,
        column: 15,
        span: 6718..6722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 16,
        span: 6722..6723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 229,
        column: 17,
        span: 6723..6724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 18,
        span: 6724..6725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 230,
        column: 10,
        span: 6730..6735,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 11,
        span: 6735..6736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 230,
        column: 12,
        span: 6736..6737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 13,
        span: 6737..6738,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 231,
        column: 0,
        span: 6741..6745,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 232,
        column: 8,
        span: 6750..6753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 232,
        column: 10,
        span: 6754..6755,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 232,
        column: 12,
        span: 6756..6757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
        column: 14,
        span: 6757..6759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 15,
        span: 6759..6760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 232,
        column: 17,
        span: 6761..6762,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 232,
        column: 0,
        span: 6763..6765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 233,
        column: 8,
        span: 6772..6773,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 233,
        column: 9,
        span: 6773..6774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 233,
        column: 10,
        span: 6774..6775,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 233,
        column: 11,
        span: 6775..6776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 12,
        span: 6776..6777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 233,
        column: 14,
        span: 6778..6779,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 233,
        column: 15,
        span: 6779..6780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 233,
        column: 16,
        span: 6780..6781,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 233,
        column: 17,
        span: 6781..6782,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 19,
        span: 6783..6784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 233,
        column: 21,
        span: 6785..6786,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 233,
        column: 22,
        span: 6786..6787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 233,
        column: 23,
        span: 6787..6788,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 233,
        column: 24,
        span: 6788..6789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 25,
        span: 6789..6790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 233,
        column: 27,
        span: 6791..6792,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 233,
        column: 28,
        span: 6792..6793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 233,
        column: 29,
        span: 6793..6794,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 233,
        column: 30,
        span: 6794..6795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 234,
        column: 11,
        span: 6802..6806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 12,
        span: 6806..6807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 234,
        column: 13,
        span: 6807..6808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 14,
        span: 6808..6809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 234,
        column: 16,
        span: 6810..6811,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 234,
        column: 18,
        span: 6812..6813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 20,
        span: 6813..6815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 21,
        span: 6815..6816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 235,
        column: 8,
        span: 6823..6824,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 235,
        column: 9,
        span: 6824..6825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 235,
        column: 10,
        span: 6825..6826,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 235,
        column: 11,
        span: 6826..6827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 12,
        span: 6827..6828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 235,
        column: 14,
        span: 6829..6830,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 235,
        column: 15,
        span: 6830..6831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 235,
        column: 16,
        span: 6831..6832,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 235,
        column: 17,
        span: 6832..6833,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 235,
        column: 19,
        span: 6834..6835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 235,
        column: 21,
        span: 6836..6837,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 235,
        column: 22,
        span: 6837..6838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 235,
        column: 23,
        span: 6838..6839,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 235,
        column: 24,
        span: 6839..6840,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 25,
        span: 6840..6841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 235,
        column: 27,
        span: 6842..6843,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 235,
        column: 28,
        span: 6843..6844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 235,
        column: 29,
        span: 6844..6845,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 235,
        column: 30,
        span: 6845..6846,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 236,
        column: 0,
        span: 6851..6854,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 237,
        column: 0,
        span: 6857..6860,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 238,
        column: 0,
        span: 6861..6864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 240,
        column: 5,
        span: 6866..6870,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 240,
        column: 6,
        span: 6870..6871,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 240,
        column: 7,
        span: 6871..6872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 241,
        column: 5,
        span: 6873..6877,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 241,
        column: 6,
        span: 6877..6878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
        column: 7,
        span: 6877..6879,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 241,
        column: 8,
        span: 6879..6880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 242,
        column: 5,
        span: 6881..6885,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 242,
        column: 6,
        span: 6885..6886,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 7,
        span: 6885..6887,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 8,
        span: 6887..6888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 9,
        span: 6887..6889,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 242,
        column: 10,
        span: 6889..6890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 243,
        column: 5,
        span: 6891..6895,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 243,
        column: 6,
        span: 6895..6896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 7,
        span: 6895..6897,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 8,
        span: 6897..6898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 9,
        span: 6897..6899,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 10,
        span: 6899..6900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 11,
        span: 6899..6901,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 243,
        column: 12,
        span: 6901..6902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 244,
        column: 5,
        span: 6903..6907,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 244,
        column: 6,
        span: 6907..6908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 7,
        span: 6907..6909,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 8,
        span: 6909..6910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 9,
        span: 6909..6911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 10,
        span: 6911..6912,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 11,
        span: 6911..6913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 12,
        span: 6913..6914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 13,
        span: 6913..6915,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 244,
        column: 14,
        span: 6915..6916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 245,
        column: 5,
        span: 6917..6921,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 245,
        column: 6,
        span: 6921..6922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 7,
        span: 6921..6923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 8,
        span: 6923..6924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 9,
        span: 6923..6925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 10,
        span: 6925..6926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 11,
        span: 6925..6927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 12,
        span: 6927..6928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 13,
        span: 6927..6929,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 245,
        column: 14,
        span: 6929..6930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 246,
        column: 5,
        span: 6931..6935,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 246,
        column: 6,
        span: 6935..6936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 7,
        span: 6935..6937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 8,
        span: 6937..6938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 9,
        span: 6937..6939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 10,
        span: 6939..6940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 11,
        span: 6939..6941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 12,
        span: 6941..6942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 13,
        span: 6941..6943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 14,
        span: 6943..6944,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 15,
        span: 6943..6945,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 246,
        column: 16,
        span: 6945..6946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 247,
        column: 5,
        span: 6947..6951,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 247,
        column: 6,
        span: 6951..6952,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 7,
        span: 6951..6953,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 8,
        span: 6953..6954,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 9,
        span: 6953..6955,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 10,
        span: 6955..6956,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 11,
        span: 6955..6957,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 12,
        span: 6957..6958,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 13,
        span: 6957..6959,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 14,
        span: 6959..6960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 15,
        span: 6959..6961,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 247,
        column: 16,
        span: 6961..6962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 248,
        column: 5,
        span: 6963..6967,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 248,
        column: 6,
        span: 6967..6968,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 7,
        span: 6967..6969,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 8,
        span: 6969..6970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 9,
        span: 6969..6971,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 10,
        span: 6971..6972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 11,
        span: 6971..6973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 12,
        span: 6973..6974,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 13,
        span: 6973..6975,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 14,
        span: 6975..6976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 15,
        span: 6975..6977,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 16,
        span: 6977..6978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 17,
        span: 6977..6979,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 248,
        column: 18,
        span: 6979..6980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        line: 249,
        column: 5,
        span: 6981..6985,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 249,
        column: 6,
        span: 6985..6986,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 7,
        span: 6985..6987,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 8,
        span: 6987..6988,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 9,
        span: 6987..6989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 10,
        span: 6989..6990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 11,
        span: 6989..6991,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 12,
        span: 6991..6992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 13,
        span: 6991..6993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 14,
        span: 6993..6994,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 15,
        span: 6993..6995,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 16,
        span: 6995..6996,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 17,
        span: 6995..6997,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 249,
        column: 18,
        span: 6997..6998,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 251,
        column: 9,
        span: 7000..7008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "timesort",
        ),
        line: 251,
        column: 18,
        span: 7009..7017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 20,
        span: 7018..7019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 251,
        column: 21,
        span: 7019..7020,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 22,
        span: 7020..7021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 251,
        column: 24,
        span: 7022..7023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 25,
        span: 7023..7024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 251,
        column: 30,
        span: 7025..7029,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 31,
        span: 7029..7030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 251,
        column: 35,
        span: 7031..7034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 36,
        span: 7034..7035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pre",
        ),
        line: 251,
        column: 40,
        span: 7036..7039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 41,
        span: 7039..7040,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 252,
        column: 8,
        span: 7043..7048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 252,
        column: 10,
        span: 7049..7050,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 12,
        span: 7051..7052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 252,
        column: 15,
        span: 7053..7055,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
        column: 16,
        span: 7055..7056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 252,
        column: 21,
        span: 7056..7061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 22,
        span: 7061..7062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 23,
        span: 7062..7063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 253,
        column: 8,
        span: 7066..7071,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 9,
        span: 7071..7072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 253,
        column: 13,
        span: 7072..7076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 14,
        span: 7076..7077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 253,
        column: 15,
        span: 7077..7078,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 16,
        span: 7078..7079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 253,
        column: 21,
        span: 7080..7084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 22,
        span: 7084..7085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 254,
        column: 4,
        span: 7088..7089,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 6,
        span: 7090..7091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 8,
        span: 7092..7093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 254,
        column: 10,
        span: 7093..7095,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
        column: 11,
        span: 7095..7096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 254,
        column: 16,
        span: 7096..7101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 17,
        span: 7101..7102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 18,
        span: 7102..7103,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 254,
        column: 20,
        span: 7104..7105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 254,
        column: 22,
        span: 7106..7107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 23,
        span: 7107..7108,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 254,
        column: 25,
        span: 7109..7110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 0,
        span: 7110..7115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pre",
        ),
        line: 255,
        column: 6,
        span: 7118..7121,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 8,
        span: 7122..7123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pre",
        ),
        line: 255,
        column: 12,
        span: 7124..7127,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 255,
        column: 15,
        span: 7128..7130,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 255,
        column: 18,
        span: 7131..7133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 256,
        column: 8,
        span: 7136..7141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 9,
        span: 7141..7142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 256,
        column: 15,
        span: 7142..7148,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 256,
        column: 16,
        span: 7148..7149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 256,
        column: 22,
        span: 7149..7155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 23,
        span: 7155..7156,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%ssorting %d %s elements in %.2f msec.\"",
        ),
        line: 256,
        column: 63,
        span: 7156..7196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 64,
        span: 7196..7197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pre",
        ),
        line: 256,
        column: 68,
        span: 7198..7201,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 69,
        span: 7201..7202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 256,
        column: 71,
        span: 7203..7204,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 72,
        span: 7204..7205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 256,
        column: 76,
        span: 7206..7209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 77,
        span: 7209..7210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 256,
        column: 79,
        span: 7211..7212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 80,
        span: 7212..7213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 81,
        span: 7213..7214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 257,
        column: 8,
        span: 7217..7222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 9,
        span: 7222..7223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 257,
        column: 10,
        span: 7223..7224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 11,
        span: 7224..7225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 257,
        column: 16,
        span: 7226..7230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 17,
        span: 7230..7231,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 258,
        column: 0,
        span: 7232..7235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 260,
        column: 6,
        span: 7237..7242,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 260,
        column: 8,
        span: 7243..7244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50000",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 0,
        span: 7244..7250,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 261,
        column: 3,
        span: 7251..7253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 261,
        column: 9,
        span: 7254..7259,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 261,
        column: 14,
        span: 7260..7264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 261,
        column: 20,
        span: 7265..7270,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 22,
        span: 7271..7272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5000",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 27,
        span: 7272..7277,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 261,
        column: 0,
        span: 7278..7281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 263,
        column: 2,
        span: 7283..7284,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 263,
        column: 4,
        span: 7285..7286,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 263,
        column: 6,
        span: 7287..7288,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 263,
        column: 7,
        span: 7288..7289,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 264,
        column: 4,
        span: 7290..7293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 264,
        column: 6,
        span: 7294..7295,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 7,
        span: 7295..7296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 8,
        span: 7295..7297,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 9,
        span: 7297..7298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 264,
        column: 14,
        span: 7298..7303,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 264,
        column: 0,
        span: 7304..7306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
        column: 4,
        span: 7309..7310,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 265,
        column: 5,
        span: 7310..7311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 265,
        column: 6,
        span: 7311..7312,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 265,
        column: 7,
        span: 7312..7313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 9,
        span: 7314..7315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 265,
        column: 14,
        span: 7316..7320,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 15,
        span: 7320..7321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 265,
        column: 21,
        span: 7321..7327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 22,
        span: 7327..7328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 23,
        span: 7328..7329,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 266,
        column: 0,
        span: 7330..7333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "timesort",
        ),
        line: 268,
        column: 9,
        span: 7335..7343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 10,
        span: 7343..7344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 268,
        column: 11,
        span: 7344..7345,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 12,
        span: 7345..7346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 268,
        column: 18,
        span: 7347..7352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 19,
        span: 7352..7353,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 268,
        column: 23,
        span: 7354..7357,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 24,
        span: 7357..7358,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"random\"",
        ),
        line: 268,
        column: 33,
        span: 7359..7367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 34,
        span: 7367..7368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "timesort",
        ),
        line: 270,
        column: 9,
        span: 7370..7378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 10,
        span: 7378..7379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
        column: 11,
        span: 7379..7380,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 12,
        span: 7380..7381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 270,
        column: 18,
        span: 7382..7387,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 19,
        span: 7387..7388,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 270,
        column: 23,
        span: 7389..7392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 24,
        span: 7392..7393,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sorted\"",
        ),
        line: 270,
        column: 33,
        span: 7394..7402,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 34,
        span: 7402..7403,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"re-\"",
        ),
        line: 270,
        column: 40,
        span: 7404..7409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 41,
        span: 7409..7410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 272,
        column: 2,
        span: 7412..7413,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
        column: 4,
        span: 7414..7415,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 272,
        column: 6,
        span: 7416..7417,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 272,
        column: 7,
        span: 7417..7418,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 273,
        column: 4,
        span: 7419..7422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 273,
        column: 6,
        span: 7423..7424,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 273,
        column: 7,
        span: 7424..7425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 8,
        span: 7424..7426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
        column: 9,
        span: 7426..7427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 273,
        column: 14,
        span: 7427..7432,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 273,
        column: 0,
        span: 7433..7435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 274,
        column: 4,
        span: 7438..7439,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 274,
        column: 5,
        span: 7439..7440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 274,
        column: 6,
        span: 7440..7441,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 274,
        column: 7,
        span: 7441..7442,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 274,
        column: 9,
        span: 7443..7444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 274,
        column: 14,
        span: 7445..7449,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
        column: 15,
        span: 7449..7450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 274,
        column: 21,
        span: 7450..7456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 22,
        span: 7456..7457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 23,
        span: 7457..7458,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 275,
        column: 0,
        span: 7459..7462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 277,
        column: 2,
        span: 7464..7465,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 4,
        span: 7466..7467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 277,
        column: 7,
        span: 7468..7470,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 8,
        span: 7470..7471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 277,
        column: 13,
        span: 7471..7476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 14,
        span: 7476..7477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 15,
        span: 7477..7478,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 277,
        column: 16,
        span: 7478..7479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 277,
        column: 18,
        span: 7480..7481,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 19,
        span: 7481..7482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 0,
        span: 7481..7483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 278,
        column: 6,
        span: 7484..7489,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 7,
        span: 7489..7490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 278,
        column: 11,
        span: 7490..7494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 12,
        span: 7494..7495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 278,
        column: 13,
        span: 7495..7496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 14,
        span: 7496..7497,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 278,
        column: 23,
        span: 7498..7506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 24,
        span: 7506..7507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 278,
        column: 25,
        span: 7507..7508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 26,
        span: 7508..7509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 278,
        column: 27,
        span: 7509..7510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 28,
        span: 7510..7511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 278,
        column: 30,
        span: 7512..7513,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 278,
        column: 31,
        span: 7513..7514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 278,
        column: 32,
        span: 7514..7515,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 278,
        column: 33,
        span: 7515..7516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 34,
        span: 7515..7517,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 278,
        column: 35,
        span: 7517..7518,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 278,
        column: 42,
        span: 7519..7525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 278,
        column: 44,
        span: 7526..7527,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 278,
        column: 45,
        span: 7527..7528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 278,
        column: 46,
        span: 7528..7529,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 278,
        column: 50,
        span: 7530..7533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 51,
        span: 7533..7534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 279,
        column: 2,
        span: 7535..7536,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 279,
        column: 4,
        span: 7537..7538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 6,
        span: 7539..7540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 279,
        column: 8,
        span: 7540..7542,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
        column: 9,
        span: 7542..7543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 279,
        column: 14,
        span: 7543..7548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 15,
        span: 7548..7549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 16,
        span: 7549..7550,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 279,
        column: 18,
        span: 7551..7552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 279,
        column: 20,
        span: 7553..7554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 21,
        span: 7554..7555,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 279,
        column: 23,
        span: 7556..7557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 0,
        span: 7557..7562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 280,
        column: 6,
        span: 7563..7568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 7,
        span: 7568..7569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 280,
        column: 13,
        span: 7569..7575,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 280,
        column: 14,
        span: 7575..7576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 280,
        column: 20,
        span: 7576..7582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 21,
        span: 7582..7583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Invert-sorting other %d elements in %.2f msec., with %i comparisons\"",
        ),
        line: 280,
        column: 90,
        span: 7583..7652,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 91,
        span: 7652..7653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 281,
        column: 12,
        span: 7660..7665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 13,
        span: 7665..7666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 281,
        column: 15,
        span: 7667..7668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 16,
        span: 7668..7669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 281,
        column: 18,
        span: 7670..7671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 19,
        span: 7671..7672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 20,
        span: 7672..7673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 282,
        column: 6,
        span: 7674..7679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 7,
        span: 7679..7680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 282,
        column: 8,
        span: 7680..7681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 9,
        span: 7681..7682,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 282,
        column: 18,
        span: 7683..7691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 19,
        span: 7691..7692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 282,
        column: 20,
        span: 7692..7693,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 21,
        span: 7693..7694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 282,
        column: 22,
        span: 7694..7695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 23,
        span: 7695..7696,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 282,
        column: 30,
        span: 7697..7703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 282,
        column: 32,
        span: 7704..7705,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 282,
        column: 33,
        span: 7705..7706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 282,
        column: 34,
        span: 7706..7707,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 282,
        column: 38,
        span: 7708..7711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 39,
        span: 7711..7712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 285,
        column: 6,
        span: 7715..7720,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 285,
        column: 7,
        span: 7720..7721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 285,
        column: 11,
        span: 7721..7725,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 285,
        column: 12,
        span: 7725..7726,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 285,
        column: 13,
        span: 7726..7727,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 287,
        column: 4,
        span: 7745..7748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 287,
        column: 6,
        span: 7749..7750,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 287,
        column: 7,
        span: 7750..7751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 8,
        span: 7750..7752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 9,
        span: 7752..7753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 287,
        column: 14,
        span: 7753..7758,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 287,
        column: 17,
        span: 7759..7761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 287,
        column: 19,
        span: 7762..7763,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 287,
        column: 20,
        span: 7763..7764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 287,
        column: 21,
        span: 7764..7765,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 287,
        column: 22,
        span: 7765..7766,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 287,
        column: 24,
        span: 7767..7768,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 287,
        column: 30,
        span: 7769..7774,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 287,
        column: 0,
        span: 7775..7778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "timesort",
        ),
        line: 288,
        column: 9,
        span: 7779..7787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 10,
        span: 7787..7788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 288,
        column: 11,
        span: 7788..7789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 12,
        span: 7789..7790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 288,
        column: 18,
        span: 7791..7796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 19,
        span: 7796..7797,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 288,
        column: 29,
        span: 7799..7807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 30,
        span: 7807..7808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 288,
        column: 31,
        span: 7808..7809,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 32,
        span: 7809..7810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 288,
        column: 33,
        span: 7810..7811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 34,
        span: 7811..7812,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 288,
        column: 41,
        span: 7813..7819,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 288,
        column: 45,
        span: 7820..7823,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 288,
        column: 49,
        span: 7824..7827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 50,
        span: 7827..7828,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"equal\"",
        ),
        line: 288,
        column: 58,
        span: 7829..7836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 59,
        span: 7836..7837,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 290,
        column: 4,
        span: 7839..7842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 290,
        column: 6,
        span: 7843..7844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 290,
        column: 7,
        span: 7844..7845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 290,
        column: 8,
        span: 7845..7846,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 290,
        column: 11,
        span: 7847..7849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 290,
        column: 17,
        span: 7850..7855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 18,
        span: 7855..7856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 290,
        column: 19,
        span: 7856..7857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 20,
        span: 7857..7858,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 290,
        column: 23,
        span: 7859..7861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 290,
        column: 30,
        span: 7862..7868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 31,
        span: 7868..7869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 290,
        column: 32,
        span: 7869..7870,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 290,
        column: 35,
        span: 7871..7873,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 290,
        column: 41,
        span: 7874..7879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 42,
        span: 7879..7880,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 290,
        column: 0,
        span: 7881..7884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 292,
        column: 2,
        span: 7886..7887,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 292,
        column: 4,
        span: 7888..7889,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 292,
        column: 6,
        span: 7890..7891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"álo\"",
        ),
        line: 292,
        column: 11,
        span: 7891..7896,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 12,
        span: 7896..7897,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0first :-)\"",
        ),
        line: 292,
        column: 26,
        span: 7898..7911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 27,
        span: 7911..7912,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 292,
        column: 33,
        span: 7913..7918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 34,
        span: 7918..7919,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"then this one\"",
        ),
        line: 292,
        column: 50,
        span: 7920..7935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 51,
        span: 7935..7936,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"45\"",
        ),
        line: 292,
        column: 56,
        span: 7937..7941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 57,
        span: 7941..7942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"and a new\"",
        ),
        line: 292,
        column: 69,
        span: 7943..7954,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 292,
        column: 70,
        span: 7954..7955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 293,
        column: 6,
        span: 7956..7961,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 293,
        column: 7,
        span: 7961..7962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 293,
        column: 11,
        span: 7962..7966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 12,
        span: 7966..7967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 293,
        column: 13,
        span: 7967..7968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 14,
        span: 7968..7969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 294,
        column: 6,
        span: 7970..7975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 7,
        span: 7975..7976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 294,
        column: 8,
        span: 7976..7977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 9,
        span: 7977..7978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 296,
        column: 6,
        span: 7980..7985,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 296,
        column: 7,
        span: 7985..7986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 296,
        column: 11,
        span: 7986..7990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 12,
        span: 7990..7991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 296,
        column: 13,
        span: 7991..7992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
        column: 14,
        span: 7992..7993,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 296,
        column: 23,
        span: 7994..8002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 25,
        span: 8003..8004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 296,
        column: 26,
        span: 8004..8005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
        column: 27,
        span: 8005..8006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 296,
        column: 29,
        span: 8007..8008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 30,
        span: 8008..8009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 297,
        column: 15,
        span: 8020..8024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 16,
        span: 8024..8025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 297,
        column: 22,
        span: 8025..8031,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 297,
        column: 23,
        span: 8031..8032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 297,
        column: 29,
        span: 8032..8038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 30,
        span: 8038..8039,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A[%q] = ''\"",
        ),
        line: 297,
        column: 42,
        span: 8039..8051,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 43,
        span: 8051..8052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 297,
        column: 45,
        span: 8053..8054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 46,
        span: 8054..8055,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 47,
        span: 8055..8056,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 297,
        column: 50,
        span: 8057..8059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 51,
        span: 8059..8060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 52,
        span: 8060..8061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 53,
        span: 8061..8062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 298,
        column: 25,
        span: 8073..8087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 26,
        span: 8087..8088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 27,
        span: 8088..8089,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 299,
        column: 17,
        span: 8100..8106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 299,
        column: 19,
        span: 8107..8108,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 299,
        column: 20,
        span: 8108..8109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 299,
        column: 0,
        span: 8109..8110,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 300,
        column: 12,
        span: 8119..8122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 13,
        span: 8122..8123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 303,
        column: 3,
        span: 8126..8128,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 303,
        column: 5,
        span: 8129..8130,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 303,
        column: 7,
        span: 8131..8132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 303,
        column: 11,
        span: 8132..8136,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 303,
        column: 13,
        span: 8137..8138,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 303,
        column: 22,
        span: 8139..8147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 24,
        span: 8148..8149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 303,
        column: 25,
        span: 8149..8150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 26,
        span: 8150..8151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 303,
        column: 27,
        span: 8151..8152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 28,
        span: 8152..8153,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 303,
        column: 35,
        span: 8154..8160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 303,
        column: 37,
        span: 8161..8162,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 303,
        column: 38,
        span: 8162..8163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 303,
        column: 41,
        span: 8163..8166,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 303,
        column: 43,
        span: 8167..8168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 303,
        column: 45,
        span: 8169..8170,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 303,
        column: 46,
        span: 8170..8171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 303,
        column: 49,
        span: 8171..8174,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 303,
        column: 53,
        span: 8175..8178,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 303,
        column: 54,
        span: 8178..8179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 304,
        column: 2,
        span: 8180..8181,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 304,
        column: 4,
        span: 8182..8183,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 304,
        column: 6,
        span: 8184..8185,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 304,
        column: 7,
        span: 8185..8186,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 305,
        column: 4,
        span: 8187..8190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 305,
        column: 6,
        span: 8191..8192,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
        column: 7,
        span: 8192..8193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 305,
        column: 8,
        span: 8192..8194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 9,
        span: 8194..8195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 305,
        column: 11,
        span: 8194..8197,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 305,
        column: 14,
        span: 8198..8200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 305,
        column: 17,
        span: 8202..8203,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 305,
        column: 18,
        span: 8203..8204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 305,
        column: 19,
        span: 8204..8205,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 305,
        column: 20,
        span: 8205..8206,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
        column: 22,
        span: 8207..8208,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 305,
        column: 24,
        span: 8209..8210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 305,
        column: 27,
        span: 8210..8213,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
        column: 28,
        span: 8213..8214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 305,
        column: 32,
        span: 8214..8218,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 305,
        column: 33,
        span: 8218..8219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 305,
        column: 39,
        span: 8219..8225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 40,
        span: 8225..8226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 305,
        column: 43,
        span: 8225..8229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 44,
        span: 8229..8230,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 305,
        column: 45,
        span: 8230..8231,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 305,
        column: 46,
        span: 8231..8232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 305,
        column: 59,
        span: 8233..8245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 60,
        span: 8245..8246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 305,
        column: 61,
        span: 8246..8247,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 305,
        column: 62,
        span: 8247..8248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 305,
        column: 63,
        span: 8248..8249,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 305,
        column: 64,
        span: 8249..8250,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 65,
        span: 8250..8251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 305,
        column: 68,
        span: 8252..8254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 69,
        span: 8254..8255,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 305,
        column: 70,
        span: 8255..8256,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 305,
        column: 0,
        span: 8257..8260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 306,
        column: 6,
        span: 8261..8266,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 306,
        column: 7,
        span: 8266..8267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 306,
        column: 11,
        span: 8267..8271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 12,
        span: 8271..8272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 13,
        span: 8272..8273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 14,
        span: 8273..8274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 307,
        column: 6,
        span: 8275..8280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 7,
        span: 8280..8281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 307,
        column: 8,
        span: 8281..8282,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 9,
        span: 8282..8283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 307,
        column: 12,
        span: 8284..8286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 307,
        column: 13,
        span: 8286..8287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 307,
        column: 17,
        span: 8287..8291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 18,
        span: 8291..8292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 308,
        column: 6,
        span: 8293..8298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 7,
        span: 8298..8299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 308,
        column: 8,
        span: 8299..8300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 9,
        span: 8300..8301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 310,
        column: 6,
        span: 8303..8308,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 310,
        column: 10,
        span: 8308..8312,
    },
]
