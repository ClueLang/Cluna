---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/literals.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 71..76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 76..77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing scanner'",
        ),
        line: 4,
        column: 24,
        span: 77..94,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 25,
        span: 94..95,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 97..102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
        column: 12,
        span: 103..108,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 14,
        span: 109..110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 22,
        span: 111..118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
        column: 30,
        span: 119..126,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 9,
        column: 6,
        span: 129..134,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 9,
        column: 15,
        span: 135..143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 9,
        column: 24,
        span: 144..152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 26,
        span: 153..154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 9,
        column: 27,
        span: 154..155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 28,
        span: 155..156,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 9,
        column: 35,
        span: 157..163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 9,
        column: 42,
        span: 164..170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 43,
        span: 170..171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 9,
        column: 47,
        span: 171..175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 48,
        span: 175..176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 9,
        column: 49,
        span: 176..177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 50,
        span: 177..178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 51,
        span: 178..179,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 9,
        column: 54,
        span: 180..182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 55,
        span: 182..183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 56,
        span: 183..184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 57,
        span: 184..185,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 9,
        column: 0,
        span: 186..189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 11,
        column: 9,
        span: 191..199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 10,
        span: 199..200,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x \\v\\f = \\t\\r 'a\\0a' \\v\\f\\f\"",
        ),
        line: 11,
        column: 39,
        span: 200..229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 40,
        span: 229..230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 7,
        span: 231..237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 237..238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 12,
        column: 9,
        span: 238..239,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 12,
        span: 240..242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a'",
        ),
        line: 12,
        column: 19,
        span: 243..249,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 12,
        column: 23,
        span: 250..253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 12,
        column: 30,
        span: 254..260,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 12,
        column: 31,
        span: 260..261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 12,
        column: 34,
        span: 261..264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 35,
        span: 264..265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 12,
        column: 36,
        span: 265..266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 37,
        span: 266..267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 40,
        span: 268..270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 42,
        span: 270..272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 43,
        span: 272..273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
        column: 7,
        span: 295..301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 8,
        span: 301..302,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n\\\"\\'\\\\'",
        ),
        line: 15,
        column: 18,
        span: 302..312,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 21,
        span: 313..315,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n\"'\\]]",
        ),
        line: 17,
        column: 6,
        span: 316..325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 7,
        span: 325..326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 19,
        column: 7,
        span: 328..334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 8,
        span: 334..335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 19,
        column: 14,
        span: 335..341,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 15,
        span: 341..342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 19,
        column: 19,
        span: 342..346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 20,
        span: 346..347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\a\\b\\f\\n\\r\\t\\v\"",
        ),
        line: 19,
        column: 36,
        span: 347..363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 37,
        span: 363..364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%c%c%c%c%c%c%c$\"",
        ),
        line: 19,
        column: 56,
        span: 365..383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 57,
        span: 383..384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 58,
        span: 384..385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 7,
        span: 419..425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 8,
        span: 425..426,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\09912\"",
        ),
        line: 22,
        column: 16,
        span: 426..434,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 19,
        span: 435..437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c12'",
        ),
        line: 22,
        column: 25,
        span: 438..443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 26,
        span: 443..444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 23,
        column: 7,
        span: 445..451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 8,
        span: 451..452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\99ab\"",
        ),
        line: 23,
        column: 15,
        span: 452..459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 23,
        column: 18,
        span: 460..462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cab'",
        ),
        line: 23,
        column: 24,
        span: 463..468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 25,
        span: 468..469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 24,
        column: 7,
        span: 470..476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 8,
        span: 476..477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\099\"",
        ),
        line: 24,
        column: 14,
        span: 477..483,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 24,
        column: 17,
        span: 484..486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\99'",
        ),
        line: 24,
        column: 23,
        span: 487..492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 24,
        span: 492..493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 494..500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 500..501,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\099\\n\"",
        ),
        line: 25,
        column: 16,
        span: 501..509,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 19,
        span: 510..512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c\\10'",
        ),
        line: 25,
        column: 26,
        span: 513..519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 27,
        span: 519..520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 521..527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 527..528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0alo'",
        ),
        line: 26,
        column: 19,
        span: 528..539,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 22,
        span: 540..542,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        line: 26,
        column: 27,
        span: 543..547,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 26,
        column: 30,
        span: 548..550,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0'",
        ),
        line: 26,
        column: 37,
        span: 551..557,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 26,
        column: 40,
        span: 558..560,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 26,
        column: 46,
        span: 561..566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 47,
        span: 566..567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 7,
        span: 569..575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 8,
        span: 575..576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "010",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 11,
        span: 575..579,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 28,
        column: 14,
        span: 580..582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "020",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 18,
        span: 582..586,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 28,
        column: 21,
        span: 587..589,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 28,
        column: 23,
        span: 590..591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "030",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 26,
        span: 590..594,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 29,
        span: 595..597,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1020-30\"",
        ),
        line: 28,
        column: 39,
        span: 598..607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 40,
        span: 607..608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 633..639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 639..640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x00\\x05\\x10\\x1f\\x3C\\xfF\\xe8\"",
        ),
        line: 31,
        column: 38,
        span: 640..670,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 41,
        span: 671..673,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\5\\16\\31\\60\\255\\232\"",
        ),
        line: 31,
        column: 65,
        span: 674..697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 66,
        span: 697..698,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 33,
        column: 6,
        span: 700..705,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 33,
        column: 15,
        span: 706..714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 33,
        column: 25,
        span: 715..724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 27,
        span: 725..726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 33,
        column: 28,
        span: 726..727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 29,
        span: 727..728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 33,
        column: 31,
        span: 729..730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 32,
        span: 730..731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 33,
        column: 34,
        span: 732..733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 35,
        span: 733..734,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 34,
        column: 8,
        span: 737..742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 34,
        column: 10,
        span: 743..744,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 12,
        span: 745..746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 19,
        span: 747..753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 20,
        span: 753..754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 34,
        column: 24,
        span: 754..758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 25,
        span: 758..759,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return '",
        ),
        line: 34,
        column: 34,
        span: 759..768,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 34,
        column: 37,
        span: 769..771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 34,
        column: 39,
        span: 772..773,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 34,
        column: 42,
        span: 774..776,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "', require\"debug\".getinfo(1).currentline'",
        ),
        line: 35,
        column: 54,
        span: 789..830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 55,
        span: 830..831,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 35,
        column: 58,
        span: 832..834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 59,
        span: 834..835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 60,
        span: 835..836,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 36,
        column: 8,
        span: 839..844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 36,
        column: 10,
        span: 845..846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 11,
        span: 846..847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 36,
        column: 13,
        span: 848..849,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 15,
        span: 850..851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 36,
        column: 17,
        span: 852..853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 18,
        span: 853..854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 19,
        span: 854..855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 9,
        span: 858..864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 10,
        span: 864..865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 37,
        column: 11,
        span: 865..866,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 14,
        span: 867..869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 37,
        column: 16,
        span: 870..871,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 37,
        column: 20,
        span: 872..875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 37,
        column: 22,
        span: 876..877,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 25,
        span: 878..880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 37,
        column: 27,
        span: 881..882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 28,
        span: 882..883,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 38,
        column: 0,
        span: 884..887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 40,
        column: 10,
        span: 889..898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 11,
        span: 898..899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'abc\\\\z  \\n   efg'\"",
        ),
        line: 40,
        column: 31,
        span: 899..919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 32,
        span: 919..920,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcefg\"",
        ),
        line: 40,
        column: 41,
        span: 921..929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 42,
        span: 929..930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 44,
        span: 930..932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 45,
        span: 932..933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 41,
        column: 10,
        span: 934..943,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 11,
        span: 943..944,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'abc\\\\z  \\n\\n\\n'\"",
        ),
        line: 41,
        column: 29,
        span: 944..962,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 30,
        span: 962..963,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 41,
        column: 36,
        span: 964..969,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 37,
        span: 969..970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 39,
        span: 970..972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 40,
        span: 972..973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 42,
        column: 10,
        span: 974..983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 11,
        span: 983..984,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\\\\z  \\n\\t\\f\\v\\n'\"",
        ),
        line: 42,
        column: 30,
        span: 984..1003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 31,
        span: 1003..1004,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 42,
        column: 35,
        span: 1006..1008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 36,
        span: 1008..1009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 38,
        span: 1009..1011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 39,
        span: 1011..1012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 43,
        column: 10,
        span: 1013..1022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 11,
        span: 1022..1023,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\nalo\\nalo\\n\\n]]\"",
        ),
        line: 43,
        column: 31,
        span: 1023..1043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 32,
        span: 1043..1044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\\n\"",
        ),
        line: 43,
        column: 47,
        span: 1045..1059,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 48,
        span: 1059..1060,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 50,
        span: 1060..1062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 51,
        span: 1062..1063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 44,
        column: 10,
        span: 1064..1073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 11,
        span: 1073..1074,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\nalo\\ralo\\n\\n]]\"",
        ),
        line: 44,
        column: 31,
        span: 1074..1094,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 32,
        span: 1094..1095,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\\n\"",
        ),
        line: 44,
        column: 47,
        span: 1096..1110,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 48,
        span: 1110..1111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 50,
        span: 1111..1113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 51,
        span: 1113..1114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 45,
        column: 10,
        span: 1115..1124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 11,
        span: 1124..1125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\nalo\\ralo\\r\\n]]\"",
        ),
        line: 45,
        column: 31,
        span: 1125..1145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 32,
        span: 1145..1146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\"",
        ),
        line: 45,
        column: 45,
        span: 1147..1159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 46,
        span: 1159..1160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 48,
        span: 1160..1162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 49,
        span: 1162..1163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 46,
        column: 10,
        span: 1164..1173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 11,
        span: 1173..1174,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\ralo\\n\\ralo\\r\\n]]\"",
        ),
        line: 46,
        column: 33,
        span: 1174..1196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 34,
        span: 1196..1197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\"",
        ),
        line: 46,
        column: 47,
        span: 1198..1210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 48,
        span: 1210..1211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 50,
        span: 1211..1213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 51,
        span: 1213..1214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 47,
        column: 10,
        span: 1215..1224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 11,
        span: 1224..1225,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[alo]\\n]alo]]\"",
        ),
        line: 47,
        column: 27,
        span: 1225..1241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 28,
        span: 1241..1242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo]\\n]alo\"",
        ),
        line: 47,
        column: 41,
        span: 1243..1255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 42,
        span: 1255..1256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 44,
        span: 1256..1258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 45,
        span: 1258..1259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1261..1267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1267..1268,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\z\n        def\\z\n        ghi\\z\n       \"",
        ),
        line: 52,
        column: 9,
        span: 1268..1311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 52,
        column: 12,
        span: 1312..1314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abcdefghi'",
        ),
        line: 52,
        column: 24,
        span: 1315..1326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 25,
        span: 1326..1327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
        column: 7,
        span: 1349..1355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 8,
        span: 1355..1356,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{0}\\u{00000000}\\x00\\0\"",
        ),
        line: 56,
        column: 33,
        span: 1356..1381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
        column: 36,
        span: 1382..1384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 56,
        column: 43,
        span: 1385..1391,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 44,
        span: 1391..1392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 56,
        column: 48,
        span: 1392..1396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 49,
        span: 1396..1397,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 50,
        span: 1396..1398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 51,
        span: 1398..1399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 53,
        span: 1399..1401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 54,
        span: 1401..1402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 56,
        span: 1402..1404,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 57,
        span: 1404..1405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 59,
        span: 1405..1407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 60,
        span: 1407..1408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 61,
        span: 1408..1409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 1442..1448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 1448..1449,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{0}\\u{7F}\"",
        ),
        line: 59,
        column: 21,
        span: 1449..1462,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 24,
        span: 1463..1465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x00\\x7F\"",
        ),
        line: 59,
        column: 35,
        span: 1466..1476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 36,
        span: 1476..1477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 1510..1516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 1516..1517,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{80}\\u{7FF}\"",
        ),
        line: 62,
        column: 23,
        span: 1517..1532,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 26,
        span: 1533..1535,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xC2\\x80\\xDF\\xBF\"",
        ),
        line: 62,
        column: 45,
        span: 1536..1554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 46,
        span: 1554..1555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 7,
        span: 1588..1594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 8,
        span: 1594..1595,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{800}\\u{FFFF}\"",
        ),
        line: 65,
        column: 25,
        span: 1595..1612,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 28,
        span: 1613..1615,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xE0\\xA0\\x80\\xEF\\xBF\\xBF\"",
        ),
        line: 65,
        column: 57,
        span: 1618..1644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 58,
        span: 1644..1645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 7,
        span: 1678..1684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 1684..1685,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{10000}\\u{1FFFFF}\"",
        ),
        line: 68,
        column: 29,
        span: 1685..1706,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 68,
        column: 32,
        span: 1707..1709,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF0\\x90\\x80\\x80\\xF7\\xBF\\xBF\\xBF\"",
        ),
        line: 68,
        column: 67,
        span: 1710..1744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 68,
        span: 1744..1745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 1778..1784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 1784..1785,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{200000}\\u{3FFFFFF}\"",
        ),
        line: 71,
        column: 31,
        span: 1785..1808,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 34,
        span: 1809..1811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF8\\x88\\x80\\x80\\x80\\xFB\\xBF\\xBF\\xBF\\xBF\"",
        ),
        line: 71,
        column: 77,
        span: 1812..1854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 78,
        span: 1854..1855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
        column: 7,
        span: 1888..1894,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 8,
        span: 1894..1895,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{4000000}\\u{7FFFFFFF}\"",
        ),
        line: 74,
        column: 33,
        span: 1895..1920,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 36,
        span: 1921..1923,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xFC\\x84\\x80\\x80\\x80\\x80\\xFD\\xBF\\xBF\\xBF\\xBF\\xBF\"",
        ),
        line: 75,
        column: 58,
        span: 1931..1981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 59,
        span: 1981..1982,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 79,
        column: 6,
        span: 2014..2019,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 79,
        column: 15,
        span: 2020..2028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 79,
        column: 24,
        span: 2029..2037,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 26,
        span: 2038..2039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 79,
        column: 27,
        span: 2039..2040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 28,
        span: 2040..2041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 79,
        column: 32,
        span: 2042..2045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 33,
        span: 2045..2046,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 80,
        column: 8,
        span: 2049..2054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 80,
        column: 11,
        span: 2055..2057,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 12,
        span: 2057..2058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 80,
        column: 16,
        span: 2059..2062,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 18,
        span: 2063..2064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 80,
        column: 23,
        span: 2065..2069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 24,
        span: 2069..2070,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return '",
        ),
        line: 80,
        column: 33,
        span: 2070..2079,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 80,
        column: 36,
        span: 2080..2082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 80,
        column: 38,
        span: 2083..2084,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 39,
        span: 2084..2085,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 80,
        column: 42,
        span: 2086..2088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 43,
        span: 2088..2089,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 81,
        column: 5,
        span: 2092..2094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 81,
        column: 9,
        span: 2095..2098,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 81,
        column: 12,
        span: 2099..2101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'<eof>'",
        ),
        line: 81,
        column: 20,
        span: 2102..2109,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 81,
        column: 25,
        span: 2110..2114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 81,
        column: 29,
        span: 2115..2118,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
        column: 31,
        span: 2119..2120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 81,
        column: 35,
        span: 2121..2124,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 81,
        column: 38,
        span: 2125..2127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 81,
        column: 42,
        span: 2128..2131,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 81,
        column: 0,
        span: 2132..2135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 9,
        span: 2138..2144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 10,
        span: 2144..2145,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 82,
        column: 13,
        span: 2145..2148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 82,
        column: 16,
        span: 2149..2151,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 82,
        column: 20,
        span: 2152..2155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 82,
        column: 27,
        span: 2156..2162,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 28,
        span: 2162..2163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 82,
        column: 32,
        span: 2163..2167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 33,
        span: 2167..2168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 82,
        column: 36,
        span: 2168..2171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 37,
        span: 2171..2172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"near .-\"",
        ),
        line: 82,
        column: 47,
        span: 2173..2182,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 82,
        column: 50,
        span: 2183..2185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 82,
        column: 54,
        span: 2186..2189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 55,
        span: 2189..2190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 56,
        span: 2190..2191,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 83,
        column: 0,
        span: 2192..2195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 85,
        column: 9,
        span: 2197..2205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 10,
        span: 2205..2206,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\x\"]]",
        ),
        line: 85,
        column: 21,
        span: 2206..2217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 22,
        span: 2217..2218,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x\"]]",
        ),
        line: 85,
        column: 30,
        span: 2219..2226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 31,
        span: 2226..2227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 86,
        column: 9,
        span: 2228..2236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 10,
        span: 2236..2237,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\x]]",
        ),
        line: 86,
        column: 20,
        span: 2237..2247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 21,
        span: 2247..2248,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x]]",
        ),
        line: 86,
        column: 28,
        span: 2249..2255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 29,
        span: 2255..2256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 87,
        column: 9,
        span: 2257..2265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 10,
        span: 2265..2266,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x]]",
        ),
        line: 87,
        column: 17,
        span: 2266..2273,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 18,
        span: 2273..2274,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x]]",
        ),
        line: 87,
        column: 25,
        span: 2275..2281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 26,
        span: 2281..2282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 88,
        column: 9,
        span: 2283..2291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 10,
        span: 2291..2292,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x5\"]]",
        ),
        line: 88,
        column: 19,
        span: 2292..2301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 20,
        span: 2301..2302,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x5\"]]",
        ),
        line: 88,
        column: 29,
        span: 2303..2311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 30,
        span: 2311..2312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 89,
        column: 9,
        span: 2313..2321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 10,
        span: 2321..2322,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x5]]",
        ),
        line: 89,
        column: 18,
        span: 2322..2330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 19,
        span: 2330..2331,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x5]]",
        ),
        line: 89,
        column: 27,
        span: 2332..2339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 28,
        span: 2339..2340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 90,
        column: 9,
        span: 2341..2349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 10,
        span: 2349..2350,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\xr\"]]",
        ),
        line: 90,
        column: 19,
        span: 2350..2359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 20,
        span: 2359..2360,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\xr]]",
        ),
        line: 90,
        column: 28,
        span: 2361..2368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 29,
        span: 2368..2369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 91,
        column: 9,
        span: 2370..2378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 10,
        span: 2378..2379,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\xr]]",
        ),
        line: 91,
        column: 18,
        span: 2379..2387,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 19,
        span: 2387..2388,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\xr]]",
        ),
        line: 91,
        column: 27,
        span: 2389..2396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 28,
        span: 2396..2397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 92,
        column: 9,
        span: 2398..2406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 10,
        span: 2406..2407,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x.]]",
        ),
        line: 92,
        column: 18,
        span: 2407..2415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 19,
        span: 2415..2416,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x.]]",
        ),
        line: 92,
        column: 27,
        span: 2417..2424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 28,
        span: 2424..2425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 93,
        column: 9,
        span: 2426..2434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 10,
        span: 2434..2435,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x8%\"]]",
        ),
        line: 93,
        column: 20,
        span: 2435..2445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 21,
        span: 2445..2446,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x8%%]]",
        ),
        line: 93,
        column: 31,
        span: 2447..2456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 32,
        span: 2456..2457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 94,
        column: 9,
        span: 2458..2466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 10,
        span: 2466..2467,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\xAG]]",
        ),
        line: 94,
        column: 19,
        span: 2467..2476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 20,
        span: 2476..2477,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\xAG]]",
        ),
        line: 94,
        column: 29,
        span: 2478..2486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 30,
        span: 2486..2487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 95,
        column: 9,
        span: 2488..2496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 10,
        span: 2496..2497,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\g\"]]",
        ),
        line: 95,
        column: 18,
        span: 2497..2505,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 19,
        span: 2505..2506,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\g]]",
        ),
        line: 95,
        column: 26,
        span: 2507..2513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 27,
        span: 2513..2514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 96,
        column: 9,
        span: 2515..2523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 10,
        span: 2523..2524,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\g]]",
        ),
        line: 96,
        column: 17,
        span: 2524..2531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 18,
        span: 2531..2532,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\g]]",
        ),
        line: 96,
        column: 25,
        span: 2533..2539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 26,
        span: 2539..2540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 97,
        column: 9,
        span: 2541..2549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 10,
        span: 2549..2550,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\.\"]]",
        ),
        line: 97,
        column: 18,
        span: 2550..2558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 19,
        span: 2558..2559,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\%.]]",
        ),
        line: 97,
        column: 27,
        span: 2560..2567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 28,
        span: 2567..2568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 99,
        column: 9,
        span: 2570..2578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 10,
        span: 2578..2579,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\999\"]]",
        ),
        line: 99,
        column: 20,
        span: 2579..2589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 21,
        span: 2589..2590,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\999\"]]",
        ),
        line: 99,
        column: 31,
        span: 2591..2600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 32,
        span: 2600..2601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 100,
        column: 9,
        span: 2602..2610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 10,
        span: 2610..2611,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"xyz\\300\"]]",
        ),
        line: 100,
        column: 23,
        span: 2611..2624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 24,
        span: 2624..2625,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\300\"]]",
        ),
        line: 100,
        column: 34,
        span: 2626..2635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 35,
        span: 2635..2636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 101,
        column: 9,
        span: 2637..2645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 10,
        span: 2645..2646,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"   \\256\"]]",
        ),
        line: 101,
        column: 23,
        span: 2646..2659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 24,
        span: 2659..2660,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\256\"]]",
        ),
        line: 101,
        column: 34,
        span: 2661..2670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 35,
        span: 2670..2671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 104,
        column: 9,
        span: 2702..2710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 10,
        span: 2710..2711,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u{100000000}\"]]",
        ),
        line: 104,
        column: 32,
        span: 2711..2733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 33,
        span: 2733..2734,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u{100000000]]",
        ),
        line: 104,
        column: 53,
        span: 2735..2754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 54,
        span: 2754..2755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 105,
        column: 9,
        span: 2771..2779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 10,
        span: 2779..2780,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u11r\"]]",
        ),
        line: 105,
        column: 24,
        span: 2780..2794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 25,
        span: 2794..2795,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u1]]",
        ),
        line: 105,
        column: 36,
        span: 2796..2806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 37,
        span: 2806..2807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 106,
        column: 9,
        span: 2826..2834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 10,
        span: 2834..2835,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u\"]]",
        ),
        line: 106,
        column: 21,
        span: 2835..2846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 22,
        span: 2846..2847,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u\"]]",
        ),
        line: 106,
        column: 33,
        span: 2848..2858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 34,
        span: 2858..2859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 107,
        column: 9,
        span: 2878..2886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 10,
        span: 2886..2887,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u{11r\"]]",
        ),
        line: 107,
        column: 25,
        span: 2887..2902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 26,
        span: 2902..2903,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u{11r]]",
        ),
        line: 107,
        column: 40,
        span: 2904..2917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 41,
        span: 2917..2918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 108,
        column: 9,
        span: 2937..2945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 10,
        span: 2945..2946,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u{11\"]]",
        ),
        line: 108,
        column: 24,
        span: 2946..2960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 25,
        span: 2960..2961,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u{11\"]]",
        ),
        line: 108,
        column: 39,
        span: 2962..2975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 40,
        span: 2975..2976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 109,
        column: 9,
        span: 2995..3003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 10,
        span: 3003..3004,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u{11]]",
        ),
        line: 109,
        column: 23,
        span: 3004..3017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 24,
        span: 3017..3018,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u{11]]",
        ),
        line: 109,
        column: 37,
        span: 3019..3031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 38,
        span: 3031..3032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 110,
        column: 9,
        span: 3051..3059,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 10,
        span: 3059..3060,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u{r\"]]",
        ),
        line: 110,
        column: 23,
        span: 3060..3073,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 24,
        span: 3073..3074,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u{r]]",
        ),
        line: 110,
        column: 36,
        span: 3075..3086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 37,
        span: 3086..3087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 113,
        column: 9,
        span: 3128..3136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 10,
        span: 3136..3137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[=[alo]]\"",
        ),
        line: 113,
        column: 20,
        span: 3137..3147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 21,
        span: 3147..3148,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 113,
        column: 29,
        span: 3149..3156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 30,
        span: 3156..3157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 114,
        column: 9,
        span: 3158..3166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 10,
        span: 3166..3167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[=[alo]=\"",
        ),
        line: 114,
        column: 20,
        span: 3167..3177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 21,
        span: 3177..3178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 114,
        column: 29,
        span: 3179..3186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 30,
        span: 3186..3187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 115,
        column: 9,
        span: 3188..3196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 10,
        span: 3196..3197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[=[alo]\"",
        ),
        line: 115,
        column: 19,
        span: 3197..3206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 20,
        span: 3206..3207,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 115,
        column: 28,
        span: 3208..3215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 29,
        span: 3215..3216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 116,
        column: 9,
        span: 3217..3225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 10,
        span: 3225..3226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'alo\"",
        ),
        line: 116,
        column: 16,
        span: 3226..3232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 17,
        span: 3232..3233,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 116,
        column: 25,
        span: 3234..3241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 26,
        span: 3241..3242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 117,
        column: 9,
        span: 3243..3251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 10,
        span: 3251..3252,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'alo \\\\z  \\n\\n\"",
        ),
        line: 117,
        column: 26,
        span: 3252..3268,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 27,
        span: 3268..3269,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 117,
        column: 35,
        span: 3270..3277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 36,
        span: 3277..3278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 118,
        column: 9,
        span: 3279..3287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 10,
        span: 3287..3288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'alo \\\\z\"",
        ),
        line: 118,
        column: 20,
        span: 3288..3298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 21,
        span: 3298..3299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 118,
        column: 29,
        span: 3300..3307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 30,
        span: 3307..3308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 119,
        column: 9,
        span: 3309..3317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 10,
        span: 3317..3318,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[['alo \\98]]",
        ),
        line: 119,
        column: 22,
        span: 3318..3330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 23,
        span: 3330..3331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 119,
        column: 31,
        span: 3332..3339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 32,
        span: 3339..3340,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 122,
        column: 4,
        span: 3380..3383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 122,
        column: 6,
        span: 3384..3385,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 122,
        column: 8,
        span: 3386..3387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 10,
        span: 3387..3389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 11,
        span: 3389..3390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 15,
        span: 3390..3394,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 122,
        column: 0,
        span: 3395..3397,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 123,
        column: 8,
        span: 3400..3405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 123,
        column: 10,
        span: 3406..3407,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
        column: 12,
        span: 3408..3409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 123,
        column: 19,
        span: 3410..3416,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 20,
        span: 3416..3417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 123,
        column: 24,
        span: 3417..3421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 25,
        span: 3421..3422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 123,
        column: 26,
        span: 3422..3423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 27,
        span: 3423..3424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 124,
        column: 9,
        span: 3427..3433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 10,
        span: 3433..3434,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 124,
        column: 13,
        span: 3434..3437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 124,
        column: 20,
        span: 3438..3444,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 124,
        column: 21,
        span: 3444..3445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 124,
        column: 25,
        span: 3445..3449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 26,
        span: 3449..3450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 124,
        column: 27,
        span: 3450..3451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 28,
        span: 3451..3452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a-zA-Z_]\"",
        ),
        line: 124,
        column: 40,
        span: 3453..3464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 41,
        span: 3464..3465,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 44,
        span: 3466..3468,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 124,
        column: 48,
        span: 3469..3472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 124,
        column: 53,
        span: 3473..3477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 54,
        span: 3477..3478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 124,
        column: 55,
        span: 3478..3479,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 124,
        column: 58,
        span: 3480..3482,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=1\"",
        ),
        line: 124,
        column: 63,
        span: 3483..3487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 64,
        span: 3487..3488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 124,
        column: 67,
        span: 3489..3491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 68,
        span: 3491..3492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 69,
        span: 3492..3493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 9,
        span: 3496..3502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 10,
        span: 3502..3503,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 125,
        column: 13,
        span: 3503..3506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 125,
        column: 20,
        span: 3507..3513,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 21,
        span: 3513..3514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 125,
        column: 25,
        span: 3514..3518,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 26,
        span: 3518..3519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 125,
        column: 27,
        span: 3519..3520,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 28,
        span: 3520..3521,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a-zA-Z_0-9]\"",
        ),
        line: 125,
        column: 43,
        span: 3522..3536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 44,
        span: 3536..3537,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 47,
        span: 3538..3540,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 126,
        column: 13,
        span: 3550..3553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 126,
        column: 18,
        span: 3554..3558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 19,
        span: 3558..3559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 126,
        column: 22,
        span: 3559..3562,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 126,
        column: 25,
        span: 3563..3565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 126,
        column: 27,
        span: 3566..3567,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 126,
        column: 30,
        span: 3568..3570,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1 = 1\"",
        ),
        line: 126,
        column: 38,
        span: 3571..3578,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 39,
        span: 3578..3579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 126,
        column: 42,
        span: 3580..3582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 43,
        span: 3582..3583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 44,
        span: 3583..3584,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 127,
        column: 0,
        span: 3585..3588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        line: 132,
        column: 5,
        span: 3615..3619,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 7,
        span: 3620..3621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 132,
        column: 14,
        span: 3622..3628,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 132,
        column: 15,
        span: 3628..3629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 132,
        column: 18,
        span: 3629..3632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 19,
        span: 3632..3633,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 132,
        column: 22,
        span: 3633..3636,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 23,
        span: 3636..3637,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15000",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 29,
        span: 3637..3643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 30,
        span: 3643..3644,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 132,
        column: 33,
        span: 3645..3647,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1'",
        ),
        line: 132,
        column: 37,
        span: 3648..3651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var2",
        ),
        line: 133,
        column: 5,
        span: 3652..3656,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 133,
        column: 7,
        span: 3657..3658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 133,
        column: 14,
        span: 3659..3665,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 133,
        column: 15,
        span: 3665..3666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 133,
        column: 18,
        span: 3666..3669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 19,
        span: 3669..3670,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 133,
        column: 22,
        span: 3670..3673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 23,
        span: 3673..3674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15000",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
        column: 29,
        span: 3674..3680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 30,
        span: 3680..3681,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 133,
        column: 33,
        span: 3682..3684,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'2'",
        ),
        line: 133,
        column: 37,
        span: 3685..3688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 134,
        column: 5,
        span: 3689..3693,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 7,
        span: 3694..3695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 134,
        column: 14,
        span: 3696..3702,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 134,
        column: 15,
        span: 3702..3703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 134,
        column: 21,
        span: 3703..3709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 22,
        span: 3709..3710,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  %s = 5\n  %s = %s + 1\n  return function () return %s - %s end\n]]",
        ),
        line: 138,
        column: 3,
        span: 3710..3778,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 4,
        span: 3778..3779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        line: 138,
        column: 9,
        span: 3780..3784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 10,
        span: 3784..3785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var2",
        ),
        line: 138,
        column: 15,
        span: 3786..3790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 16,
        span: 3790..3791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        line: 138,
        column: 21,
        span: 3792..3796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 22,
        span: 3796..3797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        line: 138,
        column: 27,
        span: 3798..3802,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 28,
        span: 3802..3803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var2",
        ),
        line: 138,
        column: 33,
        span: 3804..3808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 34,
        span: 3808..3809,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 139,
        column: 6,
        span: 3810..3815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 139,
        column: 8,
        span: 3816..3817,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 10,
        span: 3818..3819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 139,
        column: 19,
        span: 3820..3828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 20,
        span: 3828..3829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 139,
        column: 24,
        span: 3829..3833,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 25,
        span: 3833..3834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 3835..3841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 3841..3842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 140,
        column: 10,
        span: 3842..3844,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
        column: 11,
        span: 3844..3845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        line: 140,
        column: 15,
        span: 3845..3849,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
        column: 16,
        span: 3849..3850,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 19,
        span: 3851..3853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 21,
        span: 3853..3855,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 140,
        column: 25,
        span: 3856..3859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 140,
        column: 28,
        span: 3860..3862,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
        column: 29,
        span: 3862..3863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var2",
        ),
        line: 140,
        column: 33,
        span: 3863..3867,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
        column: 34,
        span: 3867..3868,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 37,
        span: 3869..3871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 39,
        span: 3871..3873,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 140,
        column: 43,
        span: 3874..3877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 140,
        column: 45,
        span: 3878..3879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 46,
        span: 3879..3880,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 47,
        span: 3880..3881,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 50,
        span: 3882..3884,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 140,
        column: 52,
        span: 3885..3886,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 53,
        span: 3885..3887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 54,
        span: 3887..3888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        line: 141,
        column: 5,
        span: 3889..3893,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 6,
        span: 3893..3894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var2",
        ),
        line: 141,
        column: 11,
        span: 3895..3899,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 12,
        span: 3899..3900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 141,
        column: 14,
        span: 3901..3902,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 141,
        column: 16,
        span: 3903..3904,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 141,
        column: 0,
        span: 3905..3908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 142,
        column: 6,
        span: 3909..3914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 7,
        span: 3914..3915,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 142,
        column: 10,
        span: 3915..3918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 11,
        span: 3918..3919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
        column: 7,
        span: 3935..3941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 8,
        span: 3941..3942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\t\"",
        ),
        line: 145,
        column: 14,
        span: 3942..3948,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
        column: 17,
        span: 3949..3951,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n\t]]",
        ),
        line: 147,
        column: 4,
        span: 3952..3959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 5,
        span: 3959..3960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 7,
        span: 3961..3967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 8,
        span: 3967..3968,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n $debug]]",
        ),
        line: 150,
        column: 10,
        span: 3968..3981,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 13,
        span: 3982..3984,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n $debug\"",
        ),
        line: 150,
        column: 25,
        span: 3985..3996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 26,
        span: 3996..3997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 7,
        span: 3998..4004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 8,
        span: 4004..4005,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ [ ]]",
        ),
        line: 151,
        column: 15,
        span: 4005..4012,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 151,
        column: 18,
        span: 4013..4015,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ ] ]]",
        ),
        line: 151,
        column: 26,
        span: 4016..4023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 27,
        span: 4023..4024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 153,
        column: 2,
        span: 4044..4045,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 153,
        column: 4,
        span: 4046..4047,
    },
    Token {
        kind: String,
        lexeme: Symbol(

        ),
        line: 153,
        column: 967,
        span: 4048..5010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 7,
        span: 5011..5017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 8,
        span: 5017..5018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 154,
        column: 14,
        span: 5018..5024,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 15,
        span: 5024..5025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 154,
        column: 18,
        span: 5025..5028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 19,
        span: 5028..5029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 154,
        column: 20,
        span: 5029..5030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 21,
        span: 5030..5031,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 24,
        span: 5032..5034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "960",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 28,
        span: 5034..5038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 29,
        span: 5038..5039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 155,
        column: 5,
        span: 5040..5044,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 155,
        column: 7,
        span: 5045..5046,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[\nprint('+')\n\na1 = [[\"this is a 'string' with several 'quotes'\"]]\na2 = \"'quotes'\"\n\nassert(string.find(a1, a2) == 34)\nprint('+')\n\na1 = [==[temp = [[an arbitrary value]]; ]==]\nassert(load(a1))()\nassert(temp == 'an arbitrary value')\n-- long strings --\nb = \"001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789\"\nassert(string.len(b) == 960)\nprint('+')\n\na = [[00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n]]\nassert(string.len(a) == 1863)\nassert(string.sub(a, 1, 40) == string.sub(b, 1, 40))\nx = 1\n]=]",
        ),
        line: 199,
        column: 4,
        span: 5047..8270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 201,
        column: 6,
        span: 8272..8277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 7,
        span: 8277..8278,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 201,
        column: 10,
        span: 8278..8281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 11,
        span: 8281..8282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 202,
        column: 2,
        span: 8283..8284,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 202,
        column: 4,
        span: 8285..8286,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 202,
        column: 0,
        span: 8287..8290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 203,
        column: 9,
        span: 8291..8299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 10,
        span: 8299..8300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 203,
        column: 14,
        span: 8300..8304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 15,
        span: 8304..8305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 7,
        span: 8306..8312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 8,
        span: 8312..8313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 204,
        column: 9,
        span: 8313..8314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 10,
        span: 8314..8315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 206,
        column: 5,
        span: 8317..8321,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 206,
        column: 7,
        span: 8322..8323,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 206,
        column: 0,
        span: 8324..8327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 207,
        column: 2,
        span: 8328..8329,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 207,
        column: 4,
        span: 8330..8331,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 207,
        column: 0,
        span: 8332..8335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 208,
        column: 2,
        span: 8336..8337,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 208,
        column: 4,
        span: 8338..8339,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 208,
        column: 0,
        span: 8340..8343,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 211,
        column: 3,
        span: 8346..8348,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
        column: 8,
        span: 8411..8416,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 214,
        column: 17,
        span: 8417..8425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getadd",
        ),
        line: 214,
        column: 24,
        span: 8426..8432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 26,
        span: 8433..8434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 214,
        column: 27,
        span: 8434..8435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 28,
        span: 8435..8436,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 214,
        column: 35,
        span: 8437..8443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 214,
        column: 42,
        span: 8444..8450,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 214,
        column: 43,
        span: 8450..8451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 214,
        column: 49,
        span: 8451..8457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 50,
        span: 8457..8458,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%p\"",
        ),
        line: 214,
        column: 54,
        span: 8458..8462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 55,
        span: 8462..8463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 214,
        column: 57,
        span: 8464..8465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 58,
        span: 8465..8466,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 214,
        column: 0,
        span: 8467..8470,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 216,
        column: 8,
        span: 8474..8479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 216,
        column: 11,
        span: 8480..8482,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 216,
        column: 13,
        span: 8483..8484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 216,
        column: 18,
        span: 8484..8489,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 216,
        column: 19,
        span: 8489..8490,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 216,
        column: 21,
        span: 8491..8492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01234567890123456789012345678901234567890123456789\"",
        ),
        line: 216,
        column: 74,
        span: 8493..8545,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 217,
        column: 8,
        span: 8548..8553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2",
        ),
        line: 217,
        column: 11,
        span: 8554..8556,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 217,
        column: 13,
        span: 8557..8558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        line: 217,
        column: 18,
        span: 8558..8563,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 217,
        column: 19,
        span: 8563..8564,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 217,
        column: 21,
        span: 8565..8566,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01234567890123456789012345678901234567890123456789\"",
        ),
        line: 217,
        column: 74,
        span: 8567..8619,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 218,
        column: 8,
        span: 8622..8627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s3",
        ),
        line: 218,
        column: 11,
        span: 8628..8630,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 218,
        column: 13,
        span: 8631..8632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01234567890123456789012345678901234567890123456789\"",
        ),
        line: 218,
        column: 66,
        span: 8633..8685,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 219,
        column: 8,
        span: 8688..8693,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 219,
        column: 17,
        span: 8694..8702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 219,
        column: 21,
        span: 8703..8706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 22,
        span: 8706..8707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 23,
        span: 8707..8708,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 219,
        column: 30,
        span: 8709..8715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 219,
        column: 33,
        span: 8716..8718,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 219,
        column: 0,
        span: 8719..8722,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 220,
        column: 8,
        span: 8725..8730,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 220,
        column: 17,
        span: 8731..8739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 220,
        column: 22,
        span: 8740..8744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 23,
        span: 8744..8745,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 24,
        span: 8745..8746,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 220,
        column: 31,
        span: 8747..8753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s3",
        ),
        line: 220,
        column: 34,
        span: 8754..8756,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 220,
        column: 0,
        span: 8757..8760,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 221,
        column: 8,
        span: 8763..8768,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 221,
        column: 17,
        span: 8769..8777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 221,
        column: 22,
        span: 8778..8782,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 23,
        span: 8782..8783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 24,
        span: 8783..8784,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 222,
        column: 11,
        span: 8789..8795,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01234567890123456789012345678901234567890123456789\"",
        ),
        line: 222,
        column: 64,
        span: 8796..8848,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 223,
        column: 0,
        span: 8851..8854,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 224,
        column: 8,
        span: 8857..8862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 224,
        column: 11,
        span: 8863..8865,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 13,
        span: 8866..8867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getadd",
        ),
        line: 224,
        column: 20,
        span: 8868..8874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 21,
        span: 8874..8875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 224,
        column: 23,
        span: 8875..8877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 24,
        span: 8877..8878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 9,
        span: 8881..8887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 10,
        span: 8887..8888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 225,
        column: 12,
        span: 8888..8890,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 225,
        column: 15,
        span: 8891..8893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getadd",
        ),
        line: 225,
        column: 22,
        span: 8894..8900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 23,
        span: 8900..8901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2",
        ),
        line: 225,
        column: 25,
        span: 8901..8903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 26,
        span: 8903..8904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 27,
        span: 8904..8905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 226,
        column: 9,
        span: 8908..8914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 10,
        span: 8914..8915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 226,
        column: 12,
        span: 8915..8917,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 15,
        span: 8918..8920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getadd",
        ),
        line: 226,
        column: 22,
        span: 8921..8927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 23,
        span: 8927..8928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 226,
        column: 26,
        span: 8928..8931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 27,
        span: 8931..8932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 28,
        span: 8932..8933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 29,
        span: 8933..8934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 30,
        span: 8934..8935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
        column: 9,
        span: 8938..8944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 10,
        span: 8944..8945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 227,
        column: 12,
        span: 8945..8947,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 15,
        span: 8948..8950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getadd",
        ),
        line: 227,
        column: 22,
        span: 8951..8957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 23,
        span: 8957..8958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 227,
        column: 27,
        span: 8958..8962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 28,
        span: 8962..8963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 29,
        span: 8963..8964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 30,
        span: 8964..8965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 31,
        span: 8965..8966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
        column: 9,
        span: 8969..8975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 10,
        span: 8975..8976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 228,
        column: 12,
        span: 8976..8978,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 228,
        column: 15,
        span: 8979..8981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getadd",
        ),
        line: 228,
        column: 22,
        span: 8982..8988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 23,
        span: 8988..8989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 228,
        column: 27,
        span: 8989..8993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 28,
        span: 8993..8994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 29,
        span: 8994..8995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 30,
        span: 8995..8996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 31,
        span: 8996..8997,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 230,
        column: 8,
        span: 9001..9006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sd",
        ),
        line: 230,
        column: 11,
        span: 9007..9009,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 13,
        span: 9010..9011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789\"",
        ),
        line: 230,
        column: 26,
        span: 9012..9024,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 230,
        column: 29,
        span: 9025..9027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789012345678901234567890123456789\"",
        ),
        line: 230,
        column: 72,
        span: 9028..9070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 9,
        span: 9073..9079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 10,
        span: 9079..9080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sd",
        ),
        line: 231,
        column: 12,
        span: 9080..9082,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 231,
        column: 15,
        span: 9083..9085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 231,
        column: 18,
        span: 9086..9088,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 231,
        column: 22,
        span: 9089..9092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getadd",
        ),
        line: 231,
        column: 29,
        span: 9093..9099,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 30,
        span: 9099..9100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sd",
        ),
        line: 231,
        column: 32,
        span: 9100..9102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 33,
        span: 9102..9103,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 231,
        column: 36,
        span: 9104..9106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 231,
        column: 39,
        span: 9107..9109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 40,
        span: 9109..9110,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 232,
        column: 0,
        span: 9111..9114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 236,
        column: 5,
        span: 9138..9142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 236,
        column: 7,
        span: 9143..9144,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\na = 1        -- a comment\nb = 2\n\n\nx = [=[\nhi\n]=]\ny = \"\\\nhello\\r\\n\\\n\"\nreturn require\"debug\".getinfo(1).currentline\n]]",
        ),
        line: 248,
        column: 3,
        span: 9145..9264,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 250,
        column: 4,
        span: 9266..9269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 250,
        column: 6,
        span: 9270..9271,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 7,
        span: 9271..9272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 250,
        column: 9,
        span: 9273..9274,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 250,
        column: 12,
        span: 9275..9277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 250,
        column: 18,
        span: 9278..9283,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 250,
        column: 19,
        span: 9283..9284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 250,
        column: 23,
        span: 9284..9288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 24,
        span: 9288..9289,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\r\"",
        ),
        line: 250,
        column: 29,
        span: 9290..9294,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 30,
        span: 9294..9295,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\r\"",
        ),
        line: 250,
        column: 37,
        span: 9296..9302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 38,
        span: 9302..9303,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\r\\n\"",
        ),
        line: 250,
        column: 45,
        span: 9304..9310,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 250,
        column: 46,
        span: 9310..9311,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 250,
        column: 0,
        span: 9312..9314,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 251,
        column: 8,
        span: 9317..9322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 251,
        column: 13,
        span: 9323..9327,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 14,
        span: 9327..9328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        line: 251,
        column: 17,
        span: 9329..9331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
        column: 19,
        span: 9332..9333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 251,
        column: 26,
        span: 9334..9340,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 251,
        column: 27,
        span: 9340..9341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 251,
        column: 31,
        span: 9341..9345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 32,
        span: 9345..9346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 251,
        column: 36,
        span: 9346..9350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 37,
        span: 9350..9351,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 251,
        column: 42,
        span: 9352..9356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 43,
        span: 9356..9357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 251,
        column: 45,
        span: 9358..9359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 46,
        span: 9359..9360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 252,
        column: 9,
        span: 9363..9369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 10,
        span: 9369..9370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 252,
        column: 18,
        span: 9370..9378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 19,
        span: 9378..9379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 252,
        column: 23,
        span: 9379..9383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 24,
        span: 9383..9384,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 252,
        column: 27,
        span: 9385..9387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        line: 252,
        column: 30,
        span: 9388..9390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 31,
        span: 9390..9391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 9,
        span: 9394..9400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 10,
        span: 9400..9401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 253,
        column: 12,
        span: 9401..9403,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 13,
        span: 9403..9404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 253,
        column: 14,
        span: 9404..9405,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 17,
        span: 9406..9408,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\\n\"",
        ),
        line: 253,
        column: 24,
        span: 9409..9415,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 253,
        column: 28,
        span: 9416..9419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 253,
        column: 31,
        span: 9420..9422,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 32,
        span: 9422..9423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 253,
        column: 33,
        span: 9423..9424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 36,
        span: 9425..9427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nhello\\r\\n\\n\"",
        ),
        line: 253,
        column: 52,
        span: 9428..9443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 53,
        span: 9443..9444,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 254,
        column: 0,
        span: 9445..9448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 258,
        column: 2,
        span: 9502..9503,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
        column: 4,
        span: 9504..9505,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[==[]=]==]",
        ),
        line: 258,
        column: 15,
        span: 9506..9516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 7,
        span: 9517..9523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 8,
        span: 9523..9524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 259,
        column: 9,
        span: 9524..9525,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 259,
        column: 12,
        span: 9526..9528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]=\"",
        ),
        line: 259,
        column: 17,
        span: 9529..9533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 18,
        span: 9533..9534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 261,
        column: 2,
        span: 9536..9537,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 4,
        span: 9538..9539,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[==[[===[[=[]]=][====[]]===]===]==]",
        ),
        line: 261,
        column: 40,
        span: 9540..9575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 262,
        column: 7,
        span: 9576..9582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 8,
        span: 9582..9583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 262,
        column: 9,
        span: 9583..9584,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 262,
        column: 12,
        span: 9585..9587,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[===[[=[]]=][====[]]===]===\"",
        ),
        line: 262,
        column: 42,
        span: 9588..9617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 43,
        span: 9617..9618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 264,
        column: 2,
        span: 9620..9621,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 4,
        span: 9622..9623,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[====[[===[[=[]]=][====[]]===]===]====]",
        ),
        line: 264,
        column: 44,
        span: 9624..9663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 7,
        span: 9664..9670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 8,
        span: 9670..9671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
        column: 9,
        span: 9671..9672,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 12,
        span: 9673..9675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[===[[=[]]=][====[]]===]===\"",
        ),
        line: 265,
        column: 42,
        span: 9676..9705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 43,
        span: 9705..9706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 267,
        column: 2,
        span: 9708..9709,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 267,
        column: 4,
        span: 9710..9711,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[]]]]]]]]]=]",
        ),
        line: 267,
        column: 19,
        span: 9712..9726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
        column: 7,
        span: 9727..9733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 8,
        span: 9733..9734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 268,
        column: 9,
        span: 9734..9735,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 268,
        column: 12,
        span: 9736..9738,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]]]]]]]]\"",
        ),
        line: 268,
        column: 23,
        span: 9739..9749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 24,
        span: 9749..9750,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 279,
        column: 6,
        span: 9860..9865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 279,
        column: 8,
        span: 9866..9867,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 279,
        column: 10,
        span: 9868..9869,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 279,
        column: 12,
        span: 9870..9871,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        line: 279,
        column: 15,
        span: 9871..9874,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 279,
        column: 16,
        span: 9874..9875,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\"",
        ),
        line: 279,
        column: 20,
        span: 9876..9879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 279,
        column: 21,
        span: 9879..9880,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]\"",
        ),
        line: 279,
        column: 25,
        span: 9881..9884,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 279,
        column: 26,
        span: 9884..9885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 279,
        column: 31,
        span: 9886..9890,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 279,
        column: 32,
        span: 9890..9891,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 280,
        column: 6,
        span: 9892..9897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 280,
        column: 10,
        span: 9898..9901,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 280,
        column: 12,
        span: 9902..9903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 0,
        span: 9903..9905,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 281,
        column: 6,
        span: 9906..9911,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 281,
        column: 15,
        span: 9912..9920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        line: 281,
        column: 19,
        span: 9921..9924,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 21,
        span: 9925..9926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 281,
        column: 22,
        span: 9926..9927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 23,
        span: 9927..9928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 281,
        column: 25,
        span: 9929..9930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 26,
        span: 9930..9931,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 282,
        column: 5,
        span: 9934..9936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 282,
        column: 7,
        span: 9937..9938,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 282,
        column: 9,
        span: 9938..9940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
        column: 10,
        span: 9939..9941,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 282,
        column: 15,
        span: 9942..9946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 282,
        column: 25,
        span: 9947..9956,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 282,
        column: 26,
        span: 9956..9957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 282,
        column: 31,
        span: 9957..9962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 32,
        span: 9962..9963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 282,
        column: 33,
        span: 9963..9964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 34,
        span: 9964..9965,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 283,
        column: 0,
        span: 9968..9972,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 284,
        column: 8,
        span: 9977..9980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 284,
        column: 10,
        span: 9981..9982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
        column: 11,
        span: 9982..9983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 284,
        column: 13,
        span: 9984..9985,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 284,
        column: 16,
        span: 9986..9988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 284,
        column: 22,
        span: 9989..9994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 23,
        span: 9994..9995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 284,
        column: 24,
        span: 9995..9996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 25,
        span: 9996..9997,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 284,
        column: 0,
        span: 9998..10000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        line: 285,
        column: 10,
        span: 10007..10010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 11,
        span: 10010..10011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 285,
        column: 12,
        span: 10011..10012,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 285,
        column: 14,
        span: 10012..10014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 285,
        column: 15,
        span: 10014..10015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 16,
        span: 10015..10016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 285,
        column: 18,
        span: 10017..10018,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 285,
        column: 19,
        span: 10018..10019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 20,
        span: 10018..10020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 21,
        span: 10020..10021,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 286,
        column: 0,
        span: 10026..10029,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 287,
        column: 0,
        span: 10032..10035,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 288,
        column: 0,
        span: 10036..10039,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 290,
        column: 4,
        span: 10041..10044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 290,
        column: 6,
        span: 10045..10046,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 290,
        column: 9,
        span: 10047..10049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 290,
        column: 19,
        span: 10050..10059,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 290,
        column: 20,
        span: 10059..10060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 290,
        column: 24,
        span: 10060..10064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 25,
        span: 10064..10065,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 290,
        column: 33,
        span: 10065..10073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 35,
        span: 10074..10075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 36,
        span: 10075..10076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        line: 290,
        column: 40,
        span: 10077..10080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 41,
        span: 10080..10081,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 290,
        column: 43,
        span: 10081..10083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 290,
        column: 44,
        span: 10083..10084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 290,
        column: 48,
        span: 10085..10088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 49,
        span: 10088..10089,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 290,
        column: 53,
        span: 10090..10093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 54,
        span: 10093..10094,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 290,
        column: 0,
        span: 10095..10097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 291,
        column: 9,
        span: 10100..10106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 10,
        span: 10106..10107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 291,
        column: 11,
        span: 10107..10108,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 291,
        column: 14,
        span: 10109..10111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 291,
        column: 19,
        span: 10112..10116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 20,
        span: 10116..10117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return [====[\\n\"",
        ),
        line: 291,
        column: 37,
        span: 10117..10134,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 291,
        column: 39,
        span: 10134..10136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 291,
        column: 40,
        span: 10136..10137,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 291,
        column: 42,
        span: 10137..10139,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]====]\"",
        ),
        line: 291,
        column: 50,
        span: 10139..10147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 51,
        span: 10147..10148,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 291,
        column: 54,
        span: 10149..10151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 55,
        span: 10151..10152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 56,
        span: 10152..10153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 57,
        span: 10153..10154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 58,
        span: 10154..10155,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 292,
        column: 0,
        span: 10156..10159,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 296,
        column: 3,
        span: 10194..10196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 296,
        column: 6,
        span: 10197..10199,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 296,
        column: 7,
        span: 10199..10200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 296,
        column: 16,
        span: 10200..10209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 17,
        span: 10209..10210,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pt_BR\"",
        ),
        line: 296,
        column: 24,
        span: 10210..10217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 25,
        span: 10217..10218,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 296,
        column: 28,
        span: 10219..10221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 296,
        column: 31,
        span: 10222..10224,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 296,
        column: 32,
        span: 10224..10225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 296,
        column: 41,
        span: 10225..10234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 42,
        span: 10234..10235,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ptb\"",
        ),
        line: 296,
        column: 47,
        span: 10235..10240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 48,
        span: 10240..10241,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 296,
        column: 0,
        span: 10242..10246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 297,
        column: 9,
        span: 10249..10255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 10,
        span: 10255..10256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 297,
        column: 18,
        span: 10256..10264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 19,
        span: 10264..10265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3,4\"",
        ),
        line: 297,
        column: 24,
        span: 10265..10270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 25,
        span: 10270..10271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 297,
        column: 28,
        span: 10272..10274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 297,
        column: 32,
        span: 10274..10278,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 297,
        column: 36,
        span: 10279..10282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 297,
        column: 45,
        span: 10283..10291,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3.4\"",
        ),
        line: 297,
        column: 50,
        span: 10291..10296,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 297,
        column: 53,
        span: 10297..10299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 297,
        column: 57,
        span: 10299..10303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 58,
        span: 10303..10304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 9,
        span: 10307..10313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 10,
        span: 10313..10314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 298,
        column: 18,
        span: 10314..10322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 19,
        span: 10322..10323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  -.4  \"",
        ),
        line: 298,
        column: 28,
        span: 10323..10332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 29,
        span: 10332..10333,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 32,
        span: 10334..10336,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 298,
        column: 34,
        span: 10337..10338,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 298,
        column: 37,
        span: 10337..10341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 38,
        span: 10341..10342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 9,
        span: 10345..10351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 10,
        span: 10351..10352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 299,
        column: 18,
        span: 10352..10360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 19,
        span: 10360..10361,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  +0x.41  \"",
        ),
        line: 299,
        column: 31,
        span: 10361..10373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 32,
        span: 10373..10374,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 35,
        span: 10375..10377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".41",
                },
            ),
        ),
        line: 299,
        column: 42,
        span: 10377..10384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 43,
        span: 10384..10385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 300,
        column: 9,
        span: 10388..10394,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 10,
        span: 10394..10395,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 300,
        column: 13,
        span: 10395..10398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 300,
        column: 18,
        span: 10399..10403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 19,
        span: 10403..10404,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = (3,4)\"",
        ),
        line: 300,
        column: 30,
        span: 10404..10415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 31,
        span: 10415..10416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 32,
        span: 10416..10417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 301,
        column: 9,
        span: 10420..10426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 10,
        span: 10426..10427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 301,
        column: 16,
        span: 10427..10433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 17,
        span: 10433..10434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 301,
        column: 21,
        span: 10434..10438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 22,
        span: 10438..10439,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 3.4\"",
        ),
        line: 301,
        column: 34,
        span: 10439..10451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 35,
        span: 10451..10452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 36,
        span: 10452..10453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 37,
        span: 10453..10454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 38,
        span: 10454..10455,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 301,
        column: 41,
        span: 10456..10458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 301,
        column: 45,
        span: 10458..10462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 46,
        span: 10462..10463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 302,
        column: 9,
        span: 10466..10472,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 10,
        span: 10472..10473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 302,
        column: 16,
        span: 10473..10479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 17,
        span: 10479..10480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 302,
        column: 21,
        span: 10480..10484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 22,
        span: 10484..10485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return .4,3\"",
        ),
        line: 302,
        column: 35,
        span: 10485..10498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 36,
        span: 10498..10499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 37,
        span: 10499..10500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 38,
        span: 10500..10501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 39,
        span: 10501..10502,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 302,
        column: 42,
        span: 10503..10505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 302,
        column: 46,
        span: 10505..10508,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 47,
        span: 10508..10509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 303,
        column: 9,
        span: 10512..10518,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 10,
        span: 10518..10519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 303,
        column: 16,
        span: 10519..10525,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 17,
        span: 10525..10526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 303,
        column: 21,
        span: 10526..10530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 22,
        span: 10530..10531,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.\"",
        ),
        line: 303,
        column: 33,
        span: 10531..10542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 34,
        span: 10542..10543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 35,
        span: 10543..10544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 36,
        span: 10544..10545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 37,
        span: 10545..10546,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 303,
        column: 40,
        span: 10547..10549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 303,
        column: 43,
        span: 10549..10552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 44,
        span: 10552..10553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 304,
        column: 9,
        span: 10556..10562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 10,
        span: 10562..10563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 304,
        column: 16,
        span: 10563..10569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 17,
        span: 10569..10570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 304,
        column: 21,
        span: 10570..10574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 22,
        span: 10574..10575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.+.5\"",
        ),
        line: 304,
        column: 36,
        span: 10575..10589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 37,
        span: 10589..10590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 38,
        span: 10590..10591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 39,
        span: 10591..10592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 40,
        span: 10592..10593,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 304,
        column: 43,
        span: 10594..10596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 304,
        column: 47,
        span: 10596..10600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 48,
        span: 10600..10601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 306,
        column: 9,
        span: 10605..10611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 10,
        span: 10611..10612,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 0x.1 \"",
        ),
        line: 306,
        column: 18,
        span: 10612..10620,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 306,
        column: 20,
        span: 10621..10622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 0x,1\"",
        ),
        line: 306,
        column: 28,
        span: 10623..10630,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 306,
        column: 30,
        span: 10631..10632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-0X.1\\t\"",
        ),
        line: 306,
        column: 40,
        span: 10633..10642,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 306,
        column: 43,
        span: 10643..10645,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 306,
        column: 49,
        span: 10645..10651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 50,
        span: 10651..10652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 308,
        column: 9,
        span: 10656..10662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 10,
        span: 10662..10663,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 308,
        column: 13,
        span: 10663..10666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 308,
        column: 22,
        span: 10667..10675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"inf\"",
        ),
        line: 308,
        column: 27,
        span: 10675..10680,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 308,
        column: 31,
        span: 10681..10684,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 308,
        column: 35,
        span: 10685..10688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 308,
        column: 44,
        span: 10689..10697,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"NAN\"",
        ),
        line: 308,
        column: 49,
        span: 10697..10702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 50,
        span: 10702..10703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 310,
        column: 9,
        span: 10707..10713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 10,
        span: 10713..10714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 310,
        column: 16,
        span: 10714..10720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 17,
        span: 10720..10721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 310,
        column: 21,
        span: 10721..10725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 22,
        span: 10725..10726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 310,
        column: 28,
        span: 10726..10732,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 310,
        column: 29,
        span: 10732..10733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 310,
        column: 35,
        span: 10733..10739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 36,
        span: 10739..10740,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return %q\"",
        ),
        line: 310,
        column: 47,
        span: 10740..10751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 310,
        column: 48,
        span: 10751..10752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".51",
                },
            ),
        ),
        line: 310,
        column: 53,
        span: 10752..10757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 54,
        span: 10757..10758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 55,
        span: 10758..10759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 56,
        span: 10759..10760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 57,
        span: 10760..10761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 58,
        span: 10761..10762,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 310,
        column: 61,
        span: 10763..10765,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".51",
                },
            ),
        ),
        line: 310,
        column: 66,
        span: 10765..10770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 67,
        span: 10770..10771,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 312,
        column: 8,
        span: 10775..10780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 312,
        column: 10,
        span: 10781..10782,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 11,
        span: 10782..10783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 312,
        column: 12,
        span: 10783..10784,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 312,
        column: 14,
        span: 10785..10786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 312,
        column: 19,
        span: 10787..10791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 20,
        span: 10791..10792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.5.\"",
        ),
        line: 312,
        column: 33,
        span: 10792..10805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 34,
        span: 10805..10806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 313,
        column: 9,
        span: 10809..10815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 10,
        span: 10815..10816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 313,
        column: 16,
        span: 10816..10822,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
        column: 17,
        span: 10822..10823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 313,
        column: 21,
        span: 10823..10827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 22,
        span: 10827..10828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 313,
        column: 23,
        span: 10828..10829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 24,
        span: 10829..10830,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'4%.5%.'\"",
        ),
        line: 313,
        column: 35,
        span: 10831..10841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 36,
        span: 10841..10842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 37,
        span: 10842..10843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 315,
        column: 9,
        span: 10847..10853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 10,
        span: 10853..10854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 315,
        column: 12,
        span: 10854..10856,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 315,
        column: 13,
        span: 10856..10857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 315,
        column: 22,
        span: 10857..10866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 23,
        span: 10866..10867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 315,
        column: 26,
        span: 10867..10870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 27,
        span: 10870..10871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 28,
        span: 10871..10872,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 316,
        column: 0,
        span: 10873..10877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 4,
        span: 10880..10881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 317,
        column: 11,
        span: 10881..10888,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 317,
        column: 14,
        span: 10889..10891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 317,
        column: 20,
        span: 10892..10897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 21,
        span: 10897..10898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 22,
        span: 10898..10899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> pt_BR locale not available: skipping decimal point tests <<<\\n'",
        ),
        line: 318,
        column: 75,
        span: 10903..10974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 76,
        span: 10974..10975,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 319,
        column: 0,
        span: 10976..10979,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 323,
        column: 6,
        span: 11008..11013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 323,
        column: 8,
        span: 11014..11015,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 323,
        column: 10,
        span: 11016..11017,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a string with \\r and \\n and \\r\\n and \\n\\r\"",
        ),
        line: 323,
        column: 54,
        span: 11018..11061,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 324,
        column: 6,
        span: 11062..11067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 324,
        column: 8,
        span: 11068..11069,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 324,
        column: 10,
        span: 11070..11071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 324,
        column: 17,
        span: 11072..11078,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 324,
        column: 18,
        span: 11078..11079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 324,
        column: 24,
        span: 11079..11085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 25,
        span: 11085..11086,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return %q\"",
        ),
        line: 324,
        column: 36,
        span: 11086..11097,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 324,
        column: 37,
        span: 11097..11098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 324,
        column: 39,
        span: 11099..11100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 40,
        span: 11100..11101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 325,
        column: 7,
        span: 11102..11108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 8,
        span: 11108..11109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 325,
        column: 14,
        span: 11109..11115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 15,
        span: 11115..11116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 325,
        column: 19,
        span: 11116..11120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 20,
        span: 11120..11121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 325,
        column: 21,
        span: 11121..11122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 22,
        span: 11122..11123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 23,
        span: 11123..11124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 24,
        span: 11124..11125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 25,
        span: 11125..11126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 325,
        column: 28,
        span: 11127..11129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 325,
        column: 30,
        span: 11130..11131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 31,
        span: 11131..11132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 328,
        column: 7,
        span: 11152..11158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 8,
        span: 11158..11159,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 328,
        column: 11,
        span: 11159..11162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 328,
        column: 16,
        span: 11163..11167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 'non-ending string\"",
        ),
        line: 328,
        column: 40,
        span: 11167..11191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 41,
        span: 11191..11192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 329,
        column: 7,
        span: 11193..11199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 8,
        span: 11199..11200,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 329,
        column: 11,
        span: 11200..11203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 329,
        column: 16,
        span: 11204..11208,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 'non-ending string\\n'\"",
        ),
        line: 329,
        column: 43,
        span: 11208..11235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 44,
        span: 11235..11236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 330,
        column: 7,
        span: 11237..11243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 8,
        span: 11243..11244,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 330,
        column: 11,
        span: 11244..11247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 330,
        column: 16,
        span: 11248..11252,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = '\\\\345'\"",
        ),
        line: 330,
        column: 29,
        span: 11252..11265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 30,
        span: 11265..11266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
        column: 7,
        span: 11267..11273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 8,
        span: 11273..11274,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 331,
        column: 11,
        span: 11274..11277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 331,
        column: 16,
        span: 11278..11282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = [=x]\"",
        ),
        line: 331,
        column: 26,
        span: 11282..11292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 27,
        span: 11292..11293,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 333,
        column: 6,
        span: 11295..11300,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 333,
        column: 15,
        span: 11301..11309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malformednum",
        ),
        line: 333,
        column: 28,
        span: 11310..11322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 30,
        span: 11323..11324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 333,
        column: 31,
        span: 11324..11325,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
        column: 32,
        span: 11325..11326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exp",
        ),
        line: 333,
        column: 36,
        span: 11327..11330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 37,
        span: 11330..11331,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 334,
        column: 8,
        span: 11334..11339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 334,
        column: 10,
        span: 11340..11341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 11,
        span: 11341..11342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 334,
        column: 15,
        span: 11343..11346,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 334,
        column: 17,
        span: 11347..11348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 334,
        column: 22,
        span: 11349..11353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 23,
        span: 11353..11354,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 334,
        column: 32,
        span: 11354..11363,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 334,
        column: 35,
        span: 11364..11366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 334,
        column: 37,
        span: 11367..11368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
        column: 38,
        span: 11368..11369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 335,
        column: 9,
        span: 11372..11378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 10,
        span: 11378..11379,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 335,
        column: 13,
        span: 11379..11382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 335,
        column: 15,
        span: 11383..11384,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 335,
        column: 19,
        span: 11385..11388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 335,
        column: 26,
        span: 11389..11395,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 335,
        column: 27,
        span: 11395..11396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 335,
        column: 31,
        span: 11396..11400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 32,
        span: 11400..11401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 335,
        column: 35,
        span: 11401..11404,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 335,
        column: 36,
        span: 11404..11405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exp",
        ),
        line: 335,
        column: 40,
        span: 11406..11409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 41,
        span: 11409..11410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 42,
        span: 11410..11411,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 336,
        column: 0,
        span: 11412..11415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malformednum",
        ),
        line: 338,
        column: 13,
        span: 11417..11429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 14,
        span: 11429..11430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xe-\"",
        ),
        line: 338,
        column: 20,
        span: 11430..11436,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
        column: 21,
        span: 11436..11437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"near <eof>\"",
        ),
        line: 338,
        column: 34,
        span: 11438..11450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 35,
        span: 11450..11451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malformednum",
        ),
        line: 339,
        column: 13,
        span: 11452..11464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 14,
        span: 11464..11465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xep-p\"",
        ),
        line: 339,
        column: 22,
        span: 11465..11473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
        column: 23,
        span: 11473..11474,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"malformed number\"",
        ),
        line: 339,
        column: 42,
        span: 11475..11493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 43,
        span: 11493..11494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malformednum",
        ),
        line: 340,
        column: 13,
        span: 11495..11507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 14,
        span: 11507..11508,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1print()\"",
        ),
        line: 340,
        column: 24,
        span: 11508..11518,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 25,
        span: 11518..11519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"malformed number\"",
        ),
        line: 340,
        column: 44,
        span: 11520..11538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 45,
        span: 11538..11539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 342,
        column: 6,
        span: 11541..11546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 7,
        span: 11546..11547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 342,
        column: 11,
        span: 11547..11551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 12,
        span: 11551..11552,
    },
]
